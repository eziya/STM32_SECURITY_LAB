
STM32_HAL_SB_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  0800a200  0800a200  0000a200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003698  0800a2bc  0800a2bc  0000a2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800d954  0800d954  0000d954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dab8  0800dab8  00010070  2**0
                  CONTENTS
  4 .ARM          00000008  0800dab8  0800dab8  0000dab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dac0  0800dac0  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dac0  0800dac0  0000dac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dac4  0800dac4  0000dac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800dac8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  0800db38  00010070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  0800db38  00010138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbdf  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e75  00000000  00000000  0001bc77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  0001daf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0001e408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a6e  00000000  00000000  0001ec48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1e2  00000000  00000000  000376b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000979a3  00000000  00000000  00043898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db23b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002578  00000000  00000000  000db28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800a2bc <__do_global_dtors_aux>:
 800a2bc:	b510      	push	{r4, lr}
 800a2be:	4c06      	ldr	r4, [pc, #24]	; (800a2d8 <__do_global_dtors_aux+0x1c>)
 800a2c0:	7823      	ldrb	r3, [r4, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d107      	bne.n	800a2d6 <__do_global_dtors_aux+0x1a>
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <__do_global_dtors_aux+0x20>)
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d002      	beq.n	800a2d2 <__do_global_dtors_aux+0x16>
 800a2cc:	4804      	ldr	r0, [pc, #16]	; (800a2e0 <__do_global_dtors_aux+0x24>)
 800a2ce:	e000      	b.n	800a2d2 <__do_global_dtors_aux+0x16>
 800a2d0:	bf00      	nop
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	7023      	strb	r3, [r4, #0]
 800a2d6:	bd10      	pop	{r4, pc}
 800a2d8:	20000070 	.word	0x20000070
 800a2dc:	00000000 	.word	0x00000000
 800a2e0:	0800d93c 	.word	0x0800d93c

0800a2e4 <frame_dummy>:
 800a2e4:	4b04      	ldr	r3, [pc, #16]	; (800a2f8 <frame_dummy+0x14>)
 800a2e6:	b510      	push	{r4, lr}
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <frame_dummy+0x10>
 800a2ec:	4903      	ldr	r1, [pc, #12]	; (800a2fc <frame_dummy+0x18>)
 800a2ee:	4804      	ldr	r0, [pc, #16]	; (800a300 <frame_dummy+0x1c>)
 800a2f0:	e000      	b.n	800a2f4 <frame_dummy+0x10>
 800a2f2:	bf00      	nop
 800a2f4:	bd10      	pop	{r4, pc}
 800a2f6:	46c0      	nop			; (mov r8, r8)
 800a2f8:	00000000 	.word	0x00000000
 800a2fc:	20000074 	.word	0x20000074
 800a300:	0800d93c 	.word	0x0800d93c

0800a304 <__udivsi3>:
 800a304:	2200      	movs	r2, #0
 800a306:	0843      	lsrs	r3, r0, #1
 800a308:	428b      	cmp	r3, r1
 800a30a:	d374      	bcc.n	800a3f6 <__udivsi3+0xf2>
 800a30c:	0903      	lsrs	r3, r0, #4
 800a30e:	428b      	cmp	r3, r1
 800a310:	d35f      	bcc.n	800a3d2 <__udivsi3+0xce>
 800a312:	0a03      	lsrs	r3, r0, #8
 800a314:	428b      	cmp	r3, r1
 800a316:	d344      	bcc.n	800a3a2 <__udivsi3+0x9e>
 800a318:	0b03      	lsrs	r3, r0, #12
 800a31a:	428b      	cmp	r3, r1
 800a31c:	d328      	bcc.n	800a370 <__udivsi3+0x6c>
 800a31e:	0c03      	lsrs	r3, r0, #16
 800a320:	428b      	cmp	r3, r1
 800a322:	d30d      	bcc.n	800a340 <__udivsi3+0x3c>
 800a324:	22ff      	movs	r2, #255	; 0xff
 800a326:	0209      	lsls	r1, r1, #8
 800a328:	ba12      	rev	r2, r2
 800a32a:	0c03      	lsrs	r3, r0, #16
 800a32c:	428b      	cmp	r3, r1
 800a32e:	d302      	bcc.n	800a336 <__udivsi3+0x32>
 800a330:	1212      	asrs	r2, r2, #8
 800a332:	0209      	lsls	r1, r1, #8
 800a334:	d065      	beq.n	800a402 <__udivsi3+0xfe>
 800a336:	0b03      	lsrs	r3, r0, #12
 800a338:	428b      	cmp	r3, r1
 800a33a:	d319      	bcc.n	800a370 <__udivsi3+0x6c>
 800a33c:	e000      	b.n	800a340 <__udivsi3+0x3c>
 800a33e:	0a09      	lsrs	r1, r1, #8
 800a340:	0bc3      	lsrs	r3, r0, #15
 800a342:	428b      	cmp	r3, r1
 800a344:	d301      	bcc.n	800a34a <__udivsi3+0x46>
 800a346:	03cb      	lsls	r3, r1, #15
 800a348:	1ac0      	subs	r0, r0, r3
 800a34a:	4152      	adcs	r2, r2
 800a34c:	0b83      	lsrs	r3, r0, #14
 800a34e:	428b      	cmp	r3, r1
 800a350:	d301      	bcc.n	800a356 <__udivsi3+0x52>
 800a352:	038b      	lsls	r3, r1, #14
 800a354:	1ac0      	subs	r0, r0, r3
 800a356:	4152      	adcs	r2, r2
 800a358:	0b43      	lsrs	r3, r0, #13
 800a35a:	428b      	cmp	r3, r1
 800a35c:	d301      	bcc.n	800a362 <__udivsi3+0x5e>
 800a35e:	034b      	lsls	r3, r1, #13
 800a360:	1ac0      	subs	r0, r0, r3
 800a362:	4152      	adcs	r2, r2
 800a364:	0b03      	lsrs	r3, r0, #12
 800a366:	428b      	cmp	r3, r1
 800a368:	d301      	bcc.n	800a36e <__udivsi3+0x6a>
 800a36a:	030b      	lsls	r3, r1, #12
 800a36c:	1ac0      	subs	r0, r0, r3
 800a36e:	4152      	adcs	r2, r2
 800a370:	0ac3      	lsrs	r3, r0, #11
 800a372:	428b      	cmp	r3, r1
 800a374:	d301      	bcc.n	800a37a <__udivsi3+0x76>
 800a376:	02cb      	lsls	r3, r1, #11
 800a378:	1ac0      	subs	r0, r0, r3
 800a37a:	4152      	adcs	r2, r2
 800a37c:	0a83      	lsrs	r3, r0, #10
 800a37e:	428b      	cmp	r3, r1
 800a380:	d301      	bcc.n	800a386 <__udivsi3+0x82>
 800a382:	028b      	lsls	r3, r1, #10
 800a384:	1ac0      	subs	r0, r0, r3
 800a386:	4152      	adcs	r2, r2
 800a388:	0a43      	lsrs	r3, r0, #9
 800a38a:	428b      	cmp	r3, r1
 800a38c:	d301      	bcc.n	800a392 <__udivsi3+0x8e>
 800a38e:	024b      	lsls	r3, r1, #9
 800a390:	1ac0      	subs	r0, r0, r3
 800a392:	4152      	adcs	r2, r2
 800a394:	0a03      	lsrs	r3, r0, #8
 800a396:	428b      	cmp	r3, r1
 800a398:	d301      	bcc.n	800a39e <__udivsi3+0x9a>
 800a39a:	020b      	lsls	r3, r1, #8
 800a39c:	1ac0      	subs	r0, r0, r3
 800a39e:	4152      	adcs	r2, r2
 800a3a0:	d2cd      	bcs.n	800a33e <__udivsi3+0x3a>
 800a3a2:	09c3      	lsrs	r3, r0, #7
 800a3a4:	428b      	cmp	r3, r1
 800a3a6:	d301      	bcc.n	800a3ac <__udivsi3+0xa8>
 800a3a8:	01cb      	lsls	r3, r1, #7
 800a3aa:	1ac0      	subs	r0, r0, r3
 800a3ac:	4152      	adcs	r2, r2
 800a3ae:	0983      	lsrs	r3, r0, #6
 800a3b0:	428b      	cmp	r3, r1
 800a3b2:	d301      	bcc.n	800a3b8 <__udivsi3+0xb4>
 800a3b4:	018b      	lsls	r3, r1, #6
 800a3b6:	1ac0      	subs	r0, r0, r3
 800a3b8:	4152      	adcs	r2, r2
 800a3ba:	0943      	lsrs	r3, r0, #5
 800a3bc:	428b      	cmp	r3, r1
 800a3be:	d301      	bcc.n	800a3c4 <__udivsi3+0xc0>
 800a3c0:	014b      	lsls	r3, r1, #5
 800a3c2:	1ac0      	subs	r0, r0, r3
 800a3c4:	4152      	adcs	r2, r2
 800a3c6:	0903      	lsrs	r3, r0, #4
 800a3c8:	428b      	cmp	r3, r1
 800a3ca:	d301      	bcc.n	800a3d0 <__udivsi3+0xcc>
 800a3cc:	010b      	lsls	r3, r1, #4
 800a3ce:	1ac0      	subs	r0, r0, r3
 800a3d0:	4152      	adcs	r2, r2
 800a3d2:	08c3      	lsrs	r3, r0, #3
 800a3d4:	428b      	cmp	r3, r1
 800a3d6:	d301      	bcc.n	800a3dc <__udivsi3+0xd8>
 800a3d8:	00cb      	lsls	r3, r1, #3
 800a3da:	1ac0      	subs	r0, r0, r3
 800a3dc:	4152      	adcs	r2, r2
 800a3de:	0883      	lsrs	r3, r0, #2
 800a3e0:	428b      	cmp	r3, r1
 800a3e2:	d301      	bcc.n	800a3e8 <__udivsi3+0xe4>
 800a3e4:	008b      	lsls	r3, r1, #2
 800a3e6:	1ac0      	subs	r0, r0, r3
 800a3e8:	4152      	adcs	r2, r2
 800a3ea:	0843      	lsrs	r3, r0, #1
 800a3ec:	428b      	cmp	r3, r1
 800a3ee:	d301      	bcc.n	800a3f4 <__udivsi3+0xf0>
 800a3f0:	004b      	lsls	r3, r1, #1
 800a3f2:	1ac0      	subs	r0, r0, r3
 800a3f4:	4152      	adcs	r2, r2
 800a3f6:	1a41      	subs	r1, r0, r1
 800a3f8:	d200      	bcs.n	800a3fc <__udivsi3+0xf8>
 800a3fa:	4601      	mov	r1, r0
 800a3fc:	4152      	adcs	r2, r2
 800a3fe:	4610      	mov	r0, r2
 800a400:	4770      	bx	lr
 800a402:	e7ff      	b.n	800a404 <__udivsi3+0x100>
 800a404:	b501      	push	{r0, lr}
 800a406:	2000      	movs	r0, #0
 800a408:	f000 f8f0 	bl	800a5ec <__aeabi_idiv0>
 800a40c:	bd02      	pop	{r1, pc}
 800a40e:	46c0      	nop			; (mov r8, r8)

0800a410 <__aeabi_uidivmod>:
 800a410:	2900      	cmp	r1, #0
 800a412:	d0f7      	beq.n	800a404 <__udivsi3+0x100>
 800a414:	e776      	b.n	800a304 <__udivsi3>
 800a416:	4770      	bx	lr

0800a418 <__divsi3>:
 800a418:	4603      	mov	r3, r0
 800a41a:	430b      	orrs	r3, r1
 800a41c:	d47f      	bmi.n	800a51e <__divsi3+0x106>
 800a41e:	2200      	movs	r2, #0
 800a420:	0843      	lsrs	r3, r0, #1
 800a422:	428b      	cmp	r3, r1
 800a424:	d374      	bcc.n	800a510 <__divsi3+0xf8>
 800a426:	0903      	lsrs	r3, r0, #4
 800a428:	428b      	cmp	r3, r1
 800a42a:	d35f      	bcc.n	800a4ec <__divsi3+0xd4>
 800a42c:	0a03      	lsrs	r3, r0, #8
 800a42e:	428b      	cmp	r3, r1
 800a430:	d344      	bcc.n	800a4bc <__divsi3+0xa4>
 800a432:	0b03      	lsrs	r3, r0, #12
 800a434:	428b      	cmp	r3, r1
 800a436:	d328      	bcc.n	800a48a <__divsi3+0x72>
 800a438:	0c03      	lsrs	r3, r0, #16
 800a43a:	428b      	cmp	r3, r1
 800a43c:	d30d      	bcc.n	800a45a <__divsi3+0x42>
 800a43e:	22ff      	movs	r2, #255	; 0xff
 800a440:	0209      	lsls	r1, r1, #8
 800a442:	ba12      	rev	r2, r2
 800a444:	0c03      	lsrs	r3, r0, #16
 800a446:	428b      	cmp	r3, r1
 800a448:	d302      	bcc.n	800a450 <__divsi3+0x38>
 800a44a:	1212      	asrs	r2, r2, #8
 800a44c:	0209      	lsls	r1, r1, #8
 800a44e:	d065      	beq.n	800a51c <__divsi3+0x104>
 800a450:	0b03      	lsrs	r3, r0, #12
 800a452:	428b      	cmp	r3, r1
 800a454:	d319      	bcc.n	800a48a <__divsi3+0x72>
 800a456:	e000      	b.n	800a45a <__divsi3+0x42>
 800a458:	0a09      	lsrs	r1, r1, #8
 800a45a:	0bc3      	lsrs	r3, r0, #15
 800a45c:	428b      	cmp	r3, r1
 800a45e:	d301      	bcc.n	800a464 <__divsi3+0x4c>
 800a460:	03cb      	lsls	r3, r1, #15
 800a462:	1ac0      	subs	r0, r0, r3
 800a464:	4152      	adcs	r2, r2
 800a466:	0b83      	lsrs	r3, r0, #14
 800a468:	428b      	cmp	r3, r1
 800a46a:	d301      	bcc.n	800a470 <__divsi3+0x58>
 800a46c:	038b      	lsls	r3, r1, #14
 800a46e:	1ac0      	subs	r0, r0, r3
 800a470:	4152      	adcs	r2, r2
 800a472:	0b43      	lsrs	r3, r0, #13
 800a474:	428b      	cmp	r3, r1
 800a476:	d301      	bcc.n	800a47c <__divsi3+0x64>
 800a478:	034b      	lsls	r3, r1, #13
 800a47a:	1ac0      	subs	r0, r0, r3
 800a47c:	4152      	adcs	r2, r2
 800a47e:	0b03      	lsrs	r3, r0, #12
 800a480:	428b      	cmp	r3, r1
 800a482:	d301      	bcc.n	800a488 <__divsi3+0x70>
 800a484:	030b      	lsls	r3, r1, #12
 800a486:	1ac0      	subs	r0, r0, r3
 800a488:	4152      	adcs	r2, r2
 800a48a:	0ac3      	lsrs	r3, r0, #11
 800a48c:	428b      	cmp	r3, r1
 800a48e:	d301      	bcc.n	800a494 <__divsi3+0x7c>
 800a490:	02cb      	lsls	r3, r1, #11
 800a492:	1ac0      	subs	r0, r0, r3
 800a494:	4152      	adcs	r2, r2
 800a496:	0a83      	lsrs	r3, r0, #10
 800a498:	428b      	cmp	r3, r1
 800a49a:	d301      	bcc.n	800a4a0 <__divsi3+0x88>
 800a49c:	028b      	lsls	r3, r1, #10
 800a49e:	1ac0      	subs	r0, r0, r3
 800a4a0:	4152      	adcs	r2, r2
 800a4a2:	0a43      	lsrs	r3, r0, #9
 800a4a4:	428b      	cmp	r3, r1
 800a4a6:	d301      	bcc.n	800a4ac <__divsi3+0x94>
 800a4a8:	024b      	lsls	r3, r1, #9
 800a4aa:	1ac0      	subs	r0, r0, r3
 800a4ac:	4152      	adcs	r2, r2
 800a4ae:	0a03      	lsrs	r3, r0, #8
 800a4b0:	428b      	cmp	r3, r1
 800a4b2:	d301      	bcc.n	800a4b8 <__divsi3+0xa0>
 800a4b4:	020b      	lsls	r3, r1, #8
 800a4b6:	1ac0      	subs	r0, r0, r3
 800a4b8:	4152      	adcs	r2, r2
 800a4ba:	d2cd      	bcs.n	800a458 <__divsi3+0x40>
 800a4bc:	09c3      	lsrs	r3, r0, #7
 800a4be:	428b      	cmp	r3, r1
 800a4c0:	d301      	bcc.n	800a4c6 <__divsi3+0xae>
 800a4c2:	01cb      	lsls	r3, r1, #7
 800a4c4:	1ac0      	subs	r0, r0, r3
 800a4c6:	4152      	adcs	r2, r2
 800a4c8:	0983      	lsrs	r3, r0, #6
 800a4ca:	428b      	cmp	r3, r1
 800a4cc:	d301      	bcc.n	800a4d2 <__divsi3+0xba>
 800a4ce:	018b      	lsls	r3, r1, #6
 800a4d0:	1ac0      	subs	r0, r0, r3
 800a4d2:	4152      	adcs	r2, r2
 800a4d4:	0943      	lsrs	r3, r0, #5
 800a4d6:	428b      	cmp	r3, r1
 800a4d8:	d301      	bcc.n	800a4de <__divsi3+0xc6>
 800a4da:	014b      	lsls	r3, r1, #5
 800a4dc:	1ac0      	subs	r0, r0, r3
 800a4de:	4152      	adcs	r2, r2
 800a4e0:	0903      	lsrs	r3, r0, #4
 800a4e2:	428b      	cmp	r3, r1
 800a4e4:	d301      	bcc.n	800a4ea <__divsi3+0xd2>
 800a4e6:	010b      	lsls	r3, r1, #4
 800a4e8:	1ac0      	subs	r0, r0, r3
 800a4ea:	4152      	adcs	r2, r2
 800a4ec:	08c3      	lsrs	r3, r0, #3
 800a4ee:	428b      	cmp	r3, r1
 800a4f0:	d301      	bcc.n	800a4f6 <__divsi3+0xde>
 800a4f2:	00cb      	lsls	r3, r1, #3
 800a4f4:	1ac0      	subs	r0, r0, r3
 800a4f6:	4152      	adcs	r2, r2
 800a4f8:	0883      	lsrs	r3, r0, #2
 800a4fa:	428b      	cmp	r3, r1
 800a4fc:	d301      	bcc.n	800a502 <__divsi3+0xea>
 800a4fe:	008b      	lsls	r3, r1, #2
 800a500:	1ac0      	subs	r0, r0, r3
 800a502:	4152      	adcs	r2, r2
 800a504:	0843      	lsrs	r3, r0, #1
 800a506:	428b      	cmp	r3, r1
 800a508:	d301      	bcc.n	800a50e <__divsi3+0xf6>
 800a50a:	004b      	lsls	r3, r1, #1
 800a50c:	1ac0      	subs	r0, r0, r3
 800a50e:	4152      	adcs	r2, r2
 800a510:	1a41      	subs	r1, r0, r1
 800a512:	d200      	bcs.n	800a516 <__divsi3+0xfe>
 800a514:	4601      	mov	r1, r0
 800a516:	4152      	adcs	r2, r2
 800a518:	4610      	mov	r0, r2
 800a51a:	4770      	bx	lr
 800a51c:	e05d      	b.n	800a5da <__divsi3+0x1c2>
 800a51e:	0fca      	lsrs	r2, r1, #31
 800a520:	d000      	beq.n	800a524 <__divsi3+0x10c>
 800a522:	4249      	negs	r1, r1
 800a524:	1003      	asrs	r3, r0, #32
 800a526:	d300      	bcc.n	800a52a <__divsi3+0x112>
 800a528:	4240      	negs	r0, r0
 800a52a:	4053      	eors	r3, r2
 800a52c:	2200      	movs	r2, #0
 800a52e:	469c      	mov	ip, r3
 800a530:	0903      	lsrs	r3, r0, #4
 800a532:	428b      	cmp	r3, r1
 800a534:	d32d      	bcc.n	800a592 <__divsi3+0x17a>
 800a536:	0a03      	lsrs	r3, r0, #8
 800a538:	428b      	cmp	r3, r1
 800a53a:	d312      	bcc.n	800a562 <__divsi3+0x14a>
 800a53c:	22fc      	movs	r2, #252	; 0xfc
 800a53e:	0189      	lsls	r1, r1, #6
 800a540:	ba12      	rev	r2, r2
 800a542:	0a03      	lsrs	r3, r0, #8
 800a544:	428b      	cmp	r3, r1
 800a546:	d30c      	bcc.n	800a562 <__divsi3+0x14a>
 800a548:	0189      	lsls	r1, r1, #6
 800a54a:	1192      	asrs	r2, r2, #6
 800a54c:	428b      	cmp	r3, r1
 800a54e:	d308      	bcc.n	800a562 <__divsi3+0x14a>
 800a550:	0189      	lsls	r1, r1, #6
 800a552:	1192      	asrs	r2, r2, #6
 800a554:	428b      	cmp	r3, r1
 800a556:	d304      	bcc.n	800a562 <__divsi3+0x14a>
 800a558:	0189      	lsls	r1, r1, #6
 800a55a:	d03a      	beq.n	800a5d2 <__divsi3+0x1ba>
 800a55c:	1192      	asrs	r2, r2, #6
 800a55e:	e000      	b.n	800a562 <__divsi3+0x14a>
 800a560:	0989      	lsrs	r1, r1, #6
 800a562:	09c3      	lsrs	r3, r0, #7
 800a564:	428b      	cmp	r3, r1
 800a566:	d301      	bcc.n	800a56c <__divsi3+0x154>
 800a568:	01cb      	lsls	r3, r1, #7
 800a56a:	1ac0      	subs	r0, r0, r3
 800a56c:	4152      	adcs	r2, r2
 800a56e:	0983      	lsrs	r3, r0, #6
 800a570:	428b      	cmp	r3, r1
 800a572:	d301      	bcc.n	800a578 <__divsi3+0x160>
 800a574:	018b      	lsls	r3, r1, #6
 800a576:	1ac0      	subs	r0, r0, r3
 800a578:	4152      	adcs	r2, r2
 800a57a:	0943      	lsrs	r3, r0, #5
 800a57c:	428b      	cmp	r3, r1
 800a57e:	d301      	bcc.n	800a584 <__divsi3+0x16c>
 800a580:	014b      	lsls	r3, r1, #5
 800a582:	1ac0      	subs	r0, r0, r3
 800a584:	4152      	adcs	r2, r2
 800a586:	0903      	lsrs	r3, r0, #4
 800a588:	428b      	cmp	r3, r1
 800a58a:	d301      	bcc.n	800a590 <__divsi3+0x178>
 800a58c:	010b      	lsls	r3, r1, #4
 800a58e:	1ac0      	subs	r0, r0, r3
 800a590:	4152      	adcs	r2, r2
 800a592:	08c3      	lsrs	r3, r0, #3
 800a594:	428b      	cmp	r3, r1
 800a596:	d301      	bcc.n	800a59c <__divsi3+0x184>
 800a598:	00cb      	lsls	r3, r1, #3
 800a59a:	1ac0      	subs	r0, r0, r3
 800a59c:	4152      	adcs	r2, r2
 800a59e:	0883      	lsrs	r3, r0, #2
 800a5a0:	428b      	cmp	r3, r1
 800a5a2:	d301      	bcc.n	800a5a8 <__divsi3+0x190>
 800a5a4:	008b      	lsls	r3, r1, #2
 800a5a6:	1ac0      	subs	r0, r0, r3
 800a5a8:	4152      	adcs	r2, r2
 800a5aa:	d2d9      	bcs.n	800a560 <__divsi3+0x148>
 800a5ac:	0843      	lsrs	r3, r0, #1
 800a5ae:	428b      	cmp	r3, r1
 800a5b0:	d301      	bcc.n	800a5b6 <__divsi3+0x19e>
 800a5b2:	004b      	lsls	r3, r1, #1
 800a5b4:	1ac0      	subs	r0, r0, r3
 800a5b6:	4152      	adcs	r2, r2
 800a5b8:	1a41      	subs	r1, r0, r1
 800a5ba:	d200      	bcs.n	800a5be <__divsi3+0x1a6>
 800a5bc:	4601      	mov	r1, r0
 800a5be:	4663      	mov	r3, ip
 800a5c0:	4152      	adcs	r2, r2
 800a5c2:	105b      	asrs	r3, r3, #1
 800a5c4:	4610      	mov	r0, r2
 800a5c6:	d301      	bcc.n	800a5cc <__divsi3+0x1b4>
 800a5c8:	4240      	negs	r0, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d500      	bpl.n	800a5d0 <__divsi3+0x1b8>
 800a5ce:	4249      	negs	r1, r1
 800a5d0:	4770      	bx	lr
 800a5d2:	4663      	mov	r3, ip
 800a5d4:	105b      	asrs	r3, r3, #1
 800a5d6:	d300      	bcc.n	800a5da <__divsi3+0x1c2>
 800a5d8:	4240      	negs	r0, r0
 800a5da:	b501      	push	{r0, lr}
 800a5dc:	2000      	movs	r0, #0
 800a5de:	f000 f805 	bl	800a5ec <__aeabi_idiv0>
 800a5e2:	bd02      	pop	{r1, pc}

0800a5e4 <__aeabi_idivmod>:
 800a5e4:	2900      	cmp	r1, #0
 800a5e6:	d0f8      	beq.n	800a5da <__divsi3+0x1c2>
 800a5e8:	e716      	b.n	800a418 <__divsi3>
 800a5ea:	4770      	bx	lr

0800a5ec <__aeabi_idiv0>:
 800a5ec:	4770      	bx	lr
 800a5ee:	46c0      	nop			; (mov r8, r8)

0800a5f0 <__aeabi_uldivmod>:
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d111      	bne.n	800a618 <__aeabi_uldivmod+0x28>
 800a5f4:	2a00      	cmp	r2, #0
 800a5f6:	d10f      	bne.n	800a618 <__aeabi_uldivmod+0x28>
 800a5f8:	2900      	cmp	r1, #0
 800a5fa:	d100      	bne.n	800a5fe <__aeabi_uldivmod+0xe>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d002      	beq.n	800a606 <__aeabi_uldivmod+0x16>
 800a600:	2100      	movs	r1, #0
 800a602:	43c9      	mvns	r1, r1
 800a604:	0008      	movs	r0, r1
 800a606:	b407      	push	{r0, r1, r2}
 800a608:	4802      	ldr	r0, [pc, #8]	; (800a614 <__aeabi_uldivmod+0x24>)
 800a60a:	a102      	add	r1, pc, #8	; (adr r1, 800a614 <__aeabi_uldivmod+0x24>)
 800a60c:	1840      	adds	r0, r0, r1
 800a60e:	9002      	str	r0, [sp, #8]
 800a610:	bd03      	pop	{r0, r1, pc}
 800a612:	46c0      	nop			; (mov r8, r8)
 800a614:	ffffffd9 	.word	0xffffffd9
 800a618:	b403      	push	{r0, r1}
 800a61a:	4668      	mov	r0, sp
 800a61c:	b501      	push	{r0, lr}
 800a61e:	9802      	ldr	r0, [sp, #8]
 800a620:	f000 f806 	bl	800a630 <__udivmoddi4>
 800a624:	9b01      	ldr	r3, [sp, #4]
 800a626:	469e      	mov	lr, r3
 800a628:	b002      	add	sp, #8
 800a62a:	bc0c      	pop	{r2, r3}
 800a62c:	4770      	bx	lr
 800a62e:	46c0      	nop			; (mov r8, r8)

0800a630 <__udivmoddi4>:
 800a630:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a632:	4657      	mov	r7, sl
 800a634:	464e      	mov	r6, r9
 800a636:	4645      	mov	r5, r8
 800a638:	46de      	mov	lr, fp
 800a63a:	b5e0      	push	{r5, r6, r7, lr}
 800a63c:	0004      	movs	r4, r0
 800a63e:	000d      	movs	r5, r1
 800a640:	4692      	mov	sl, r2
 800a642:	4699      	mov	r9, r3
 800a644:	b083      	sub	sp, #12
 800a646:	428b      	cmp	r3, r1
 800a648:	d830      	bhi.n	800a6ac <__udivmoddi4+0x7c>
 800a64a:	d02d      	beq.n	800a6a8 <__udivmoddi4+0x78>
 800a64c:	4649      	mov	r1, r9
 800a64e:	4650      	mov	r0, sl
 800a650:	f000 f8ba 	bl	800a7c8 <__clzdi2>
 800a654:	0029      	movs	r1, r5
 800a656:	0006      	movs	r6, r0
 800a658:	0020      	movs	r0, r4
 800a65a:	f000 f8b5 	bl	800a7c8 <__clzdi2>
 800a65e:	1a33      	subs	r3, r6, r0
 800a660:	4698      	mov	r8, r3
 800a662:	3b20      	subs	r3, #32
 800a664:	469b      	mov	fp, r3
 800a666:	d433      	bmi.n	800a6d0 <__udivmoddi4+0xa0>
 800a668:	465a      	mov	r2, fp
 800a66a:	4653      	mov	r3, sl
 800a66c:	4093      	lsls	r3, r2
 800a66e:	4642      	mov	r2, r8
 800a670:	001f      	movs	r7, r3
 800a672:	4653      	mov	r3, sl
 800a674:	4093      	lsls	r3, r2
 800a676:	001e      	movs	r6, r3
 800a678:	42af      	cmp	r7, r5
 800a67a:	d83a      	bhi.n	800a6f2 <__udivmoddi4+0xc2>
 800a67c:	42af      	cmp	r7, r5
 800a67e:	d100      	bne.n	800a682 <__udivmoddi4+0x52>
 800a680:	e078      	b.n	800a774 <__udivmoddi4+0x144>
 800a682:	465b      	mov	r3, fp
 800a684:	1ba4      	subs	r4, r4, r6
 800a686:	41bd      	sbcs	r5, r7
 800a688:	2b00      	cmp	r3, #0
 800a68a:	da00      	bge.n	800a68e <__udivmoddi4+0x5e>
 800a68c:	e075      	b.n	800a77a <__udivmoddi4+0x14a>
 800a68e:	2200      	movs	r2, #0
 800a690:	2300      	movs	r3, #0
 800a692:	9200      	str	r2, [sp, #0]
 800a694:	9301      	str	r3, [sp, #4]
 800a696:	2301      	movs	r3, #1
 800a698:	465a      	mov	r2, fp
 800a69a:	4093      	lsls	r3, r2
 800a69c:	9301      	str	r3, [sp, #4]
 800a69e:	2301      	movs	r3, #1
 800a6a0:	4642      	mov	r2, r8
 800a6a2:	4093      	lsls	r3, r2
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	e028      	b.n	800a6fa <__udivmoddi4+0xca>
 800a6a8:	4282      	cmp	r2, r0
 800a6aa:	d9cf      	bls.n	800a64c <__udivmoddi4+0x1c>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	9200      	str	r2, [sp, #0]
 800a6b2:	9301      	str	r3, [sp, #4]
 800a6b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <__udivmoddi4+0x8e>
 800a6ba:	601c      	str	r4, [r3, #0]
 800a6bc:	605d      	str	r5, [r3, #4]
 800a6be:	9800      	ldr	r0, [sp, #0]
 800a6c0:	9901      	ldr	r1, [sp, #4]
 800a6c2:	b003      	add	sp, #12
 800a6c4:	bcf0      	pop	{r4, r5, r6, r7}
 800a6c6:	46bb      	mov	fp, r7
 800a6c8:	46b2      	mov	sl, r6
 800a6ca:	46a9      	mov	r9, r5
 800a6cc:	46a0      	mov	r8, r4
 800a6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d0:	4642      	mov	r2, r8
 800a6d2:	2320      	movs	r3, #32
 800a6d4:	1a9b      	subs	r3, r3, r2
 800a6d6:	4652      	mov	r2, sl
 800a6d8:	40da      	lsrs	r2, r3
 800a6da:	4641      	mov	r1, r8
 800a6dc:	0013      	movs	r3, r2
 800a6de:	464a      	mov	r2, r9
 800a6e0:	408a      	lsls	r2, r1
 800a6e2:	0017      	movs	r7, r2
 800a6e4:	4642      	mov	r2, r8
 800a6e6:	431f      	orrs	r7, r3
 800a6e8:	4653      	mov	r3, sl
 800a6ea:	4093      	lsls	r3, r2
 800a6ec:	001e      	movs	r6, r3
 800a6ee:	42af      	cmp	r7, r5
 800a6f0:	d9c4      	bls.n	800a67c <__udivmoddi4+0x4c>
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	9200      	str	r2, [sp, #0]
 800a6f8:	9301      	str	r3, [sp, #4]
 800a6fa:	4643      	mov	r3, r8
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d0d9      	beq.n	800a6b4 <__udivmoddi4+0x84>
 800a700:	07fb      	lsls	r3, r7, #31
 800a702:	0872      	lsrs	r2, r6, #1
 800a704:	431a      	orrs	r2, r3
 800a706:	4646      	mov	r6, r8
 800a708:	087b      	lsrs	r3, r7, #1
 800a70a:	e00e      	b.n	800a72a <__udivmoddi4+0xfa>
 800a70c:	42ab      	cmp	r3, r5
 800a70e:	d101      	bne.n	800a714 <__udivmoddi4+0xe4>
 800a710:	42a2      	cmp	r2, r4
 800a712:	d80c      	bhi.n	800a72e <__udivmoddi4+0xfe>
 800a714:	1aa4      	subs	r4, r4, r2
 800a716:	419d      	sbcs	r5, r3
 800a718:	2001      	movs	r0, #1
 800a71a:	1924      	adds	r4, r4, r4
 800a71c:	416d      	adcs	r5, r5
 800a71e:	2100      	movs	r1, #0
 800a720:	3e01      	subs	r6, #1
 800a722:	1824      	adds	r4, r4, r0
 800a724:	414d      	adcs	r5, r1
 800a726:	2e00      	cmp	r6, #0
 800a728:	d006      	beq.n	800a738 <__udivmoddi4+0x108>
 800a72a:	42ab      	cmp	r3, r5
 800a72c:	d9ee      	bls.n	800a70c <__udivmoddi4+0xdc>
 800a72e:	3e01      	subs	r6, #1
 800a730:	1924      	adds	r4, r4, r4
 800a732:	416d      	adcs	r5, r5
 800a734:	2e00      	cmp	r6, #0
 800a736:	d1f8      	bne.n	800a72a <__udivmoddi4+0xfa>
 800a738:	9800      	ldr	r0, [sp, #0]
 800a73a:	9901      	ldr	r1, [sp, #4]
 800a73c:	465b      	mov	r3, fp
 800a73e:	1900      	adds	r0, r0, r4
 800a740:	4169      	adcs	r1, r5
 800a742:	2b00      	cmp	r3, #0
 800a744:	db24      	blt.n	800a790 <__udivmoddi4+0x160>
 800a746:	002b      	movs	r3, r5
 800a748:	465a      	mov	r2, fp
 800a74a:	4644      	mov	r4, r8
 800a74c:	40d3      	lsrs	r3, r2
 800a74e:	002a      	movs	r2, r5
 800a750:	40e2      	lsrs	r2, r4
 800a752:	001c      	movs	r4, r3
 800a754:	465b      	mov	r3, fp
 800a756:	0015      	movs	r5, r2
 800a758:	2b00      	cmp	r3, #0
 800a75a:	db2a      	blt.n	800a7b2 <__udivmoddi4+0x182>
 800a75c:	0026      	movs	r6, r4
 800a75e:	409e      	lsls	r6, r3
 800a760:	0033      	movs	r3, r6
 800a762:	0026      	movs	r6, r4
 800a764:	4647      	mov	r7, r8
 800a766:	40be      	lsls	r6, r7
 800a768:	0032      	movs	r2, r6
 800a76a:	1a80      	subs	r0, r0, r2
 800a76c:	4199      	sbcs	r1, r3
 800a76e:	9000      	str	r0, [sp, #0]
 800a770:	9101      	str	r1, [sp, #4]
 800a772:	e79f      	b.n	800a6b4 <__udivmoddi4+0x84>
 800a774:	42a3      	cmp	r3, r4
 800a776:	d8bc      	bhi.n	800a6f2 <__udivmoddi4+0xc2>
 800a778:	e783      	b.n	800a682 <__udivmoddi4+0x52>
 800a77a:	4642      	mov	r2, r8
 800a77c:	2320      	movs	r3, #32
 800a77e:	2100      	movs	r1, #0
 800a780:	1a9b      	subs	r3, r3, r2
 800a782:	2200      	movs	r2, #0
 800a784:	9100      	str	r1, [sp, #0]
 800a786:	9201      	str	r2, [sp, #4]
 800a788:	2201      	movs	r2, #1
 800a78a:	40da      	lsrs	r2, r3
 800a78c:	9201      	str	r2, [sp, #4]
 800a78e:	e786      	b.n	800a69e <__udivmoddi4+0x6e>
 800a790:	4642      	mov	r2, r8
 800a792:	2320      	movs	r3, #32
 800a794:	1a9b      	subs	r3, r3, r2
 800a796:	002a      	movs	r2, r5
 800a798:	4646      	mov	r6, r8
 800a79a:	409a      	lsls	r2, r3
 800a79c:	0023      	movs	r3, r4
 800a79e:	40f3      	lsrs	r3, r6
 800a7a0:	4644      	mov	r4, r8
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	002a      	movs	r2, r5
 800a7a6:	40e2      	lsrs	r2, r4
 800a7a8:	001c      	movs	r4, r3
 800a7aa:	465b      	mov	r3, fp
 800a7ac:	0015      	movs	r5, r2
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	dad4      	bge.n	800a75c <__udivmoddi4+0x12c>
 800a7b2:	4642      	mov	r2, r8
 800a7b4:	002f      	movs	r7, r5
 800a7b6:	2320      	movs	r3, #32
 800a7b8:	0026      	movs	r6, r4
 800a7ba:	4097      	lsls	r7, r2
 800a7bc:	1a9b      	subs	r3, r3, r2
 800a7be:	40de      	lsrs	r6, r3
 800a7c0:	003b      	movs	r3, r7
 800a7c2:	4333      	orrs	r3, r6
 800a7c4:	e7cd      	b.n	800a762 <__udivmoddi4+0x132>
 800a7c6:	46c0      	nop			; (mov r8, r8)

0800a7c8 <__clzdi2>:
 800a7c8:	b510      	push	{r4, lr}
 800a7ca:	2900      	cmp	r1, #0
 800a7cc:	d103      	bne.n	800a7d6 <__clzdi2+0xe>
 800a7ce:	f000 f807 	bl	800a7e0 <__clzsi2>
 800a7d2:	3020      	adds	r0, #32
 800a7d4:	e002      	b.n	800a7dc <__clzdi2+0x14>
 800a7d6:	0008      	movs	r0, r1
 800a7d8:	f000 f802 	bl	800a7e0 <__clzsi2>
 800a7dc:	bd10      	pop	{r4, pc}
 800a7de:	46c0      	nop			; (mov r8, r8)

0800a7e0 <__clzsi2>:
 800a7e0:	211c      	movs	r1, #28
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	041b      	lsls	r3, r3, #16
 800a7e6:	4298      	cmp	r0, r3
 800a7e8:	d301      	bcc.n	800a7ee <__clzsi2+0xe>
 800a7ea:	0c00      	lsrs	r0, r0, #16
 800a7ec:	3910      	subs	r1, #16
 800a7ee:	0a1b      	lsrs	r3, r3, #8
 800a7f0:	4298      	cmp	r0, r3
 800a7f2:	d301      	bcc.n	800a7f8 <__clzsi2+0x18>
 800a7f4:	0a00      	lsrs	r0, r0, #8
 800a7f6:	3908      	subs	r1, #8
 800a7f8:	091b      	lsrs	r3, r3, #4
 800a7fa:	4298      	cmp	r0, r3
 800a7fc:	d301      	bcc.n	800a802 <__clzsi2+0x22>
 800a7fe:	0900      	lsrs	r0, r0, #4
 800a800:	3904      	subs	r1, #4
 800a802:	a202      	add	r2, pc, #8	; (adr r2, 800a80c <__clzsi2+0x2c>)
 800a804:	5c10      	ldrb	r0, [r2, r0]
 800a806:	1840      	adds	r0, r0, r1
 800a808:	4770      	bx	lr
 800a80a:	46c0      	nop			; (mov r8, r8)
 800a80c:	02020304 	.word	0x02020304
 800a810:	01010101 	.word	0x01010101
	...

0800a81c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800a81c:	b590      	push	{r4, r7, lr}
 800a81e:	b089      	sub	sp, #36	; 0x24
 800a820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a822:	240c      	movs	r4, #12
 800a824:	193b      	adds	r3, r7, r4
 800a826:	0018      	movs	r0, r3
 800a828:	2314      	movs	r3, #20
 800a82a:	001a      	movs	r2, r3
 800a82c:	2100      	movs	r1, #0
 800a82e:	f002 fb33 	bl	800ce98 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a832:	4b29      	ldr	r3, [pc, #164]	; (800a8d8 <MX_GPIO_Init+0xbc>)
 800a834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a836:	4b28      	ldr	r3, [pc, #160]	; (800a8d8 <MX_GPIO_Init+0xbc>)
 800a838:	2104      	movs	r1, #4
 800a83a:	430a      	orrs	r2, r1
 800a83c:	635a      	str	r2, [r3, #52]	; 0x34
 800a83e:	4b26      	ldr	r3, [pc, #152]	; (800a8d8 <MX_GPIO_Init+0xbc>)
 800a840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a842:	2204      	movs	r2, #4
 800a844:	4013      	ands	r3, r2
 800a846:	60bb      	str	r3, [r7, #8]
 800a848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a84a:	4b23      	ldr	r3, [pc, #140]	; (800a8d8 <MX_GPIO_Init+0xbc>)
 800a84c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a84e:	4b22      	ldr	r3, [pc, #136]	; (800a8d8 <MX_GPIO_Init+0xbc>)
 800a850:	2120      	movs	r1, #32
 800a852:	430a      	orrs	r2, r1
 800a854:	635a      	str	r2, [r3, #52]	; 0x34
 800a856:	4b20      	ldr	r3, [pc, #128]	; (800a8d8 <MX_GPIO_Init+0xbc>)
 800a858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a85a:	2220      	movs	r2, #32
 800a85c:	4013      	ands	r3, r2
 800a85e:	607b      	str	r3, [r7, #4]
 800a860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a862:	4b1d      	ldr	r3, [pc, #116]	; (800a8d8 <MX_GPIO_Init+0xbc>)
 800a864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a866:	4b1c      	ldr	r3, [pc, #112]	; (800a8d8 <MX_GPIO_Init+0xbc>)
 800a868:	2101      	movs	r1, #1
 800a86a:	430a      	orrs	r2, r1
 800a86c:	635a      	str	r2, [r3, #52]	; 0x34
 800a86e:	4b1a      	ldr	r3, [pc, #104]	; (800a8d8 <MX_GPIO_Init+0xbc>)
 800a870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a872:	2201      	movs	r2, #1
 800a874:	4013      	ands	r3, r2
 800a876:	603b      	str	r3, [r7, #0]
 800a878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800a87a:	23a0      	movs	r3, #160	; 0xa0
 800a87c:	05db      	lsls	r3, r3, #23
 800a87e:	2200      	movs	r2, #0
 800a880:	2120      	movs	r1, #32
 800a882:	0018      	movs	r0, r3
 800a884:	f000 fd4a 	bl	800b31c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800a888:	193b      	adds	r3, r7, r4
 800a88a:	2280      	movs	r2, #128	; 0x80
 800a88c:	0192      	lsls	r2, r2, #6
 800a88e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a890:	193b      	adds	r3, r7, r4
 800a892:	2200      	movs	r2, #0
 800a894:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a896:	193b      	adds	r3, r7, r4
 800a898:	2200      	movs	r2, #0
 800a89a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800a89c:	193b      	adds	r3, r7, r4
 800a89e:	4a0f      	ldr	r2, [pc, #60]	; (800a8dc <MX_GPIO_Init+0xc0>)
 800a8a0:	0019      	movs	r1, r3
 800a8a2:	0010      	movs	r0, r2
 800a8a4:	f000 fbd6 	bl	800b054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800a8a8:	0021      	movs	r1, r4
 800a8aa:	187b      	adds	r3, r7, r1
 800a8ac:	2220      	movs	r2, #32
 800a8ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a8b0:	187b      	adds	r3, r7, r1
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8b6:	187b      	adds	r3, r7, r1
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a8bc:	187b      	adds	r3, r7, r1
 800a8be:	2202      	movs	r2, #2
 800a8c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800a8c2:	187a      	adds	r2, r7, r1
 800a8c4:	23a0      	movs	r3, #160	; 0xa0
 800a8c6:	05db      	lsls	r3, r3, #23
 800a8c8:	0011      	movs	r1, r2
 800a8ca:	0018      	movs	r0, r3
 800a8cc:	f000 fbc2 	bl	800b054 <HAL_GPIO_Init>

}
 800a8d0:	46c0      	nop			; (mov r8, r8)
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	b009      	add	sp, #36	; 0x24
 800a8d6:	bd90      	pop	{r4, r7, pc}
 800a8d8:	40021000 	.word	0x40021000
 800a8dc:	50000800 	.word	0x50000800

0800a8e0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar (int ch)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	425b      	negs	r3, r3
 800a8ec:	1d39      	adds	r1, r7, #4
 800a8ee:	4804      	ldr	r0, [pc, #16]	; (800a900 <__io_putchar+0x20>)
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f001 fc69 	bl	800c1c8 <HAL_UART_Transmit>
  return ch;
 800a8f6:	687b      	ldr	r3, [r7, #4]
}
 800a8f8:	0018      	movs	r0, r3
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	b002      	add	sp, #8
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	20000090 	.word	0x20000090

0800a904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a908:	f000 fa46 	bl	800ad98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a90c:	f000 f826 	bl	800a95c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a910:	f7ff ff84 	bl	800a81c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800a914:	f000 f968 	bl	800abe8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("\r\n\r\n");
 800a918:	4b0c      	ldr	r3, [pc, #48]	; (800a94c <main+0x48>)
 800a91a:	0018      	movs	r0, r3
 800a91c:	f002 fb36 	bl	800cf8c <puts>
  printf("######################################################################\r\n");
 800a920:	4b0b      	ldr	r3, [pc, #44]	; (800a950 <main+0x4c>)
 800a922:	0018      	movs	r0, r3
 800a924:	f002 fb32 	bl	800cf8c <puts>
  printf("Application started.\r\n");
 800a928:	4b0a      	ldr	r3, [pc, #40]	; (800a954 <main+0x50>)
 800a92a:	0018      	movs	r0, r3
 800a92c:	f002 fb2e 	bl	800cf8c <puts>
  printf("Start blinking LED\r\n");
 800a930:	4b09      	ldr	r3, [pc, #36]	; (800a958 <main+0x54>)
 800a932:	0018      	movs	r0, r3
 800a934:	f002 fb2a 	bl	800cf8c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800a938:	23a0      	movs	r3, #160	; 0xa0
 800a93a:	05db      	lsls	r3, r3, #23
 800a93c:	2120      	movs	r1, #32
 800a93e:	0018      	movs	r0, r3
 800a940:	f000 fd09 	bl	800b356 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 800a944:	2064      	movs	r0, #100	; 0x64
 800a946:	f000 faad 	bl	800aea4 <HAL_Delay>
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800a94a:	e7f5      	b.n	800a938 <main+0x34>
 800a94c:	0800d954 	.word	0x0800d954
 800a950:	0800d958 	.word	0x0800d958
 800a954:	0800d9a0 	.word	0x0800d9a0
 800a958:	0800d9b8 	.word	0x0800d9b8

0800a95c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a95c:	b590      	push	{r4, r7, lr}
 800a95e:	b093      	sub	sp, #76	; 0x4c
 800a960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a962:	2410      	movs	r4, #16
 800a964:	193b      	adds	r3, r7, r4
 800a966:	0018      	movs	r0, r3
 800a968:	2338      	movs	r3, #56	; 0x38
 800a96a:	001a      	movs	r2, r3
 800a96c:	2100      	movs	r1, #0
 800a96e:	f002 fa93 	bl	800ce98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a972:	003b      	movs	r3, r7
 800a974:	0018      	movs	r0, r3
 800a976:	2310      	movs	r3, #16
 800a978:	001a      	movs	r2, r3
 800a97a:	2100      	movs	r1, #0
 800a97c:	f002 fa8c 	bl	800ce98 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a980:	2380      	movs	r3, #128	; 0x80
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	0018      	movs	r0, r3
 800a986:	f000 fd01 	bl	800b38c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a98a:	193b      	adds	r3, r7, r4
 800a98c:	2202      	movs	r2, #2
 800a98e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a990:	193b      	adds	r3, r7, r4
 800a992:	2280      	movs	r2, #128	; 0x80
 800a994:	0052      	lsls	r2, r2, #1
 800a996:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800a998:	0021      	movs	r1, r4
 800a99a:	187b      	adds	r3, r7, r1
 800a99c:	2200      	movs	r2, #0
 800a99e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a9a0:	187b      	adds	r3, r7, r1
 800a9a2:	2240      	movs	r2, #64	; 0x40
 800a9a4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a9a6:	187b      	adds	r3, r7, r1
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a9ac:	187b      	adds	r3, r7, r1
 800a9ae:	2202      	movs	r2, #2
 800a9b0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800a9b2:	187b      	adds	r3, r7, r1
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800a9b8:	187b      	adds	r3, r7, r1
 800a9ba:	2208      	movs	r2, #8
 800a9bc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a9be:	187b      	adds	r3, r7, r1
 800a9c0:	2280      	movs	r2, #128	; 0x80
 800a9c2:	0292      	lsls	r2, r2, #10
 800a9c4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a9c6:	187b      	adds	r3, r7, r1
 800a9c8:	2280      	movs	r2, #128	; 0x80
 800a9ca:	0492      	lsls	r2, r2, #18
 800a9cc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a9ce:	187b      	adds	r3, r7, r1
 800a9d0:	2280      	movs	r2, #128	; 0x80
 800a9d2:	0592      	lsls	r2, r2, #22
 800a9d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a9d6:	187b      	adds	r3, r7, r1
 800a9d8:	0018      	movs	r0, r3
 800a9da:	f000 fd23 	bl	800b424 <HAL_RCC_OscConfig>
 800a9de:	1e03      	subs	r3, r0, #0
 800a9e0:	d001      	beq.n	800a9e6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800a9e2:	f000 f819 	bl	800aa18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a9e6:	003b      	movs	r3, r7
 800a9e8:	2207      	movs	r2, #7
 800a9ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a9ec:	003b      	movs	r3, r7
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a9f2:	003b      	movs	r3, r7
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a9f8:	003b      	movs	r3, r7
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a9fe:	003b      	movs	r3, r7
 800aa00:	2102      	movs	r1, #2
 800aa02:	0018      	movs	r0, r3
 800aa04:	f001 f828 	bl	800ba58 <HAL_RCC_ClockConfig>
 800aa08:	1e03      	subs	r3, r0, #0
 800aa0a:	d001      	beq.n	800aa10 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800aa0c:	f000 f804 	bl	800aa18 <Error_Handler>
  }
}
 800aa10:	46c0      	nop			; (mov r8, r8)
 800aa12:	46bd      	mov	sp, r7
 800aa14:	b013      	add	sp, #76	; 0x4c
 800aa16:	bd90      	pop	{r4, r7, pc}

0800aa18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800aa1c:	b672      	cpsid	i
}
 800aa1e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800aa20:	e7fe      	b.n	800aa20 <Error_Handler+0x8>
	...

0800aa24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa2a:	4b0f      	ldr	r3, [pc, #60]	; (800aa68 <HAL_MspInit+0x44>)
 800aa2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa2e:	4b0e      	ldr	r3, [pc, #56]	; (800aa68 <HAL_MspInit+0x44>)
 800aa30:	2101      	movs	r1, #1
 800aa32:	430a      	orrs	r2, r1
 800aa34:	641a      	str	r2, [r3, #64]	; 0x40
 800aa36:	4b0c      	ldr	r3, [pc, #48]	; (800aa68 <HAL_MspInit+0x44>)
 800aa38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	607b      	str	r3, [r7, #4]
 800aa40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800aa42:	4b09      	ldr	r3, [pc, #36]	; (800aa68 <HAL_MspInit+0x44>)
 800aa44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa46:	4b08      	ldr	r3, [pc, #32]	; (800aa68 <HAL_MspInit+0x44>)
 800aa48:	2180      	movs	r1, #128	; 0x80
 800aa4a:	0549      	lsls	r1, r1, #21
 800aa4c:	430a      	orrs	r2, r1
 800aa4e:	63da      	str	r2, [r3, #60]	; 0x3c
 800aa50:	4b05      	ldr	r3, [pc, #20]	; (800aa68 <HAL_MspInit+0x44>)
 800aa52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa54:	2380      	movs	r3, #128	; 0x80
 800aa56:	055b      	lsls	r3, r3, #21
 800aa58:	4013      	ands	r3, r2
 800aa5a:	603b      	str	r3, [r7, #0]
 800aa5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800aa5e:	46c0      	nop			; (mov r8, r8)
 800aa60:	46bd      	mov	sp, r7
 800aa62:	b002      	add	sp, #8
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	46c0      	nop			; (mov r8, r8)
 800aa68:	40021000 	.word	0x40021000

0800aa6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800aa70:	e7fe      	b.n	800aa70 <NMI_Handler+0x4>

0800aa72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800aa76:	e7fe      	b.n	800aa76 <HardFault_Handler+0x4>

0800aa78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800aa7c:	46c0      	nop			; (mov r8, r8)
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800aa86:	46c0      	nop			; (mov r8, r8)
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800aa90:	f000 f9ec 	bl	800ae6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800aa94:	46c0      	nop			; (mov r8, r8)
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b086      	sub	sp, #24
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	60f8      	str	r0, [r7, #12]
 800aaa2:	60b9      	str	r1, [r7, #8]
 800aaa4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	617b      	str	r3, [r7, #20]
 800aaaa:	e00a      	b.n	800aac2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800aaac:	e000      	b.n	800aab0 <_read+0x16>
 800aaae:	bf00      	nop
 800aab0:	0001      	movs	r1, r0
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	1c5a      	adds	r2, r3, #1
 800aab6:	60ba      	str	r2, [r7, #8]
 800aab8:	b2ca      	uxtb	r2, r1
 800aaba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	3301      	adds	r3, #1
 800aac0:	617b      	str	r3, [r7, #20]
 800aac2:	697a      	ldr	r2, [r7, #20]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	dbf0      	blt.n	800aaac <_read+0x12>
	}

return len;
 800aaca:	687b      	ldr	r3, [r7, #4]
}
 800aacc:	0018      	movs	r0, r3
 800aace:	46bd      	mov	sp, r7
 800aad0:	b006      	add	sp, #24
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aae0:	2300      	movs	r3, #0
 800aae2:	617b      	str	r3, [r7, #20]
 800aae4:	e009      	b.n	800aafa <_write+0x26>
	{
		__io_putchar(*ptr++);
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	1c5a      	adds	r2, r3, #1
 800aaea:	60ba      	str	r2, [r7, #8]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	0018      	movs	r0, r3
 800aaf0:	f7ff fef6 	bl	800a8e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	617b      	str	r3, [r7, #20]
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	dbf1      	blt.n	800aae6 <_write+0x12>
	}
	return len;
 800ab02:	687b      	ldr	r3, [r7, #4]
}
 800ab04:	0018      	movs	r0, r3
 800ab06:	46bd      	mov	sp, r7
 800ab08:	b006      	add	sp, #24
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <_close>:

int _close(int file)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
	return -1;
 800ab14:	2301      	movs	r3, #1
 800ab16:	425b      	negs	r3, r3
}
 800ab18:	0018      	movs	r0, r3
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	b002      	add	sp, #8
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	2280      	movs	r2, #128	; 0x80
 800ab2e:	0192      	lsls	r2, r2, #6
 800ab30:	605a      	str	r2, [r3, #4]
	return 0;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	0018      	movs	r0, r3
 800ab36:	46bd      	mov	sp, r7
 800ab38:	b002      	add	sp, #8
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <_isatty>:

int _isatty(int file)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
	return 1;
 800ab44:	2301      	movs	r3, #1
}
 800ab46:	0018      	movs	r0, r3
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	b002      	add	sp, #8
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b084      	sub	sp, #16
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	60f8      	str	r0, [r7, #12]
 800ab56:	60b9      	str	r1, [r7, #8]
 800ab58:	607a      	str	r2, [r7, #4]
	return 0;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	0018      	movs	r0, r3
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	b004      	add	sp, #16
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b086      	sub	sp, #24
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ab6c:	4a14      	ldr	r2, [pc, #80]	; (800abc0 <_sbrk+0x5c>)
 800ab6e:	4b15      	ldr	r3, [pc, #84]	; (800abc4 <_sbrk+0x60>)
 800ab70:	1ad3      	subs	r3, r2, r3
 800ab72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ab78:	4b13      	ldr	r3, [pc, #76]	; (800abc8 <_sbrk+0x64>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d102      	bne.n	800ab86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ab80:	4b11      	ldr	r3, [pc, #68]	; (800abc8 <_sbrk+0x64>)
 800ab82:	4a12      	ldr	r2, [pc, #72]	; (800abcc <_sbrk+0x68>)
 800ab84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ab86:	4b10      	ldr	r3, [pc, #64]	; (800abc8 <_sbrk+0x64>)
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	18d3      	adds	r3, r2, r3
 800ab8e:	693a      	ldr	r2, [r7, #16]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d207      	bcs.n	800aba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ab94:	f002 f956 	bl	800ce44 <__errno>
 800ab98:	0003      	movs	r3, r0
 800ab9a:	220c      	movs	r2, #12
 800ab9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	425b      	negs	r3, r3
 800aba2:	e009      	b.n	800abb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800aba4:	4b08      	ldr	r3, [pc, #32]	; (800abc8 <_sbrk+0x64>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800abaa:	4b07      	ldr	r3, [pc, #28]	; (800abc8 <_sbrk+0x64>)
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	18d2      	adds	r2, r2, r3
 800abb2:	4b05      	ldr	r3, [pc, #20]	; (800abc8 <_sbrk+0x64>)
 800abb4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800abb6:	68fb      	ldr	r3, [r7, #12]
}
 800abb8:	0018      	movs	r0, r3
 800abba:	46bd      	mov	sp, r7
 800abbc:	b006      	add	sp, #24
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	20009000 	.word	0x20009000
 800abc4:	00000400 	.word	0x00000400
 800abc8:	2000008c 	.word	0x2000008c
 800abcc:	20000138 	.word	0x20000138

0800abd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 800abd4:	4b02      	ldr	r3, [pc, #8]	; (800abe0 <SystemInit+0x10>)
 800abd6:	4a03      	ldr	r2, [pc, #12]	; (800abe4 <SystemInit+0x14>)
 800abd8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800abda:	46c0      	nop			; (mov r8, r8)
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	e000ed00 	.word	0xe000ed00
 800abe4:	0800a200 	.word	0x0800a200

0800abe8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800abec:	4b23      	ldr	r3, [pc, #140]	; (800ac7c <MX_USART2_UART_Init+0x94>)
 800abee:	4a24      	ldr	r2, [pc, #144]	; (800ac80 <MX_USART2_UART_Init+0x98>)
 800abf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800abf2:	4b22      	ldr	r3, [pc, #136]	; (800ac7c <MX_USART2_UART_Init+0x94>)
 800abf4:	22e1      	movs	r2, #225	; 0xe1
 800abf6:	0252      	lsls	r2, r2, #9
 800abf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800abfa:	4b20      	ldr	r3, [pc, #128]	; (800ac7c <MX_USART2_UART_Init+0x94>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800ac00:	4b1e      	ldr	r3, [pc, #120]	; (800ac7c <MX_USART2_UART_Init+0x94>)
 800ac02:	2200      	movs	r2, #0
 800ac04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800ac06:	4b1d      	ldr	r3, [pc, #116]	; (800ac7c <MX_USART2_UART_Init+0x94>)
 800ac08:	2200      	movs	r2, #0
 800ac0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ac0c:	4b1b      	ldr	r3, [pc, #108]	; (800ac7c <MX_USART2_UART_Init+0x94>)
 800ac0e:	220c      	movs	r2, #12
 800ac10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ac12:	4b1a      	ldr	r3, [pc, #104]	; (800ac7c <MX_USART2_UART_Init+0x94>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ac18:	4b18      	ldr	r3, [pc, #96]	; (800ac7c <MX_USART2_UART_Init+0x94>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ac1e:	4b17      	ldr	r3, [pc, #92]	; (800ac7c <MX_USART2_UART_Init+0x94>)
 800ac20:	2200      	movs	r2, #0
 800ac22:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800ac24:	4b15      	ldr	r3, [pc, #84]	; (800ac7c <MX_USART2_UART_Init+0x94>)
 800ac26:	2200      	movs	r2, #0
 800ac28:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ac2a:	4b14      	ldr	r3, [pc, #80]	; (800ac7c <MX_USART2_UART_Init+0x94>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800ac30:	4b12      	ldr	r3, [pc, #72]	; (800ac7c <MX_USART2_UART_Init+0x94>)
 800ac32:	0018      	movs	r0, r3
 800ac34:	f001 fa72 	bl	800c11c <HAL_UART_Init>
 800ac38:	1e03      	subs	r3, r0, #0
 800ac3a:	d001      	beq.n	800ac40 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800ac3c:	f7ff feec 	bl	800aa18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ac40:	4b0e      	ldr	r3, [pc, #56]	; (800ac7c <MX_USART2_UART_Init+0x94>)
 800ac42:	2100      	movs	r1, #0
 800ac44:	0018      	movs	r0, r3
 800ac46:	f002 f81d 	bl	800cc84 <HAL_UARTEx_SetTxFifoThreshold>
 800ac4a:	1e03      	subs	r3, r0, #0
 800ac4c:	d001      	beq.n	800ac52 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800ac4e:	f7ff fee3 	bl	800aa18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ac52:	4b0a      	ldr	r3, [pc, #40]	; (800ac7c <MX_USART2_UART_Init+0x94>)
 800ac54:	2100      	movs	r1, #0
 800ac56:	0018      	movs	r0, r3
 800ac58:	f002 f854 	bl	800cd04 <HAL_UARTEx_SetRxFifoThreshold>
 800ac5c:	1e03      	subs	r3, r0, #0
 800ac5e:	d001      	beq.n	800ac64 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800ac60:	f7ff feda 	bl	800aa18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800ac64:	4b05      	ldr	r3, [pc, #20]	; (800ac7c <MX_USART2_UART_Init+0x94>)
 800ac66:	0018      	movs	r0, r3
 800ac68:	f001 ffd2 	bl	800cc10 <HAL_UARTEx_DisableFifoMode>
 800ac6c:	1e03      	subs	r3, r0, #0
 800ac6e:	d001      	beq.n	800ac74 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800ac70:	f7ff fed2 	bl	800aa18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800ac74:	46c0      	nop			; (mov r8, r8)
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	46c0      	nop			; (mov r8, r8)
 800ac7c:	20000090 	.word	0x20000090
 800ac80:	40004400 	.word	0x40004400

0800ac84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ac84:	b590      	push	{r4, r7, lr}
 800ac86:	b097      	sub	sp, #92	; 0x5c
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac8c:	2344      	movs	r3, #68	; 0x44
 800ac8e:	18fb      	adds	r3, r7, r3
 800ac90:	0018      	movs	r0, r3
 800ac92:	2314      	movs	r3, #20
 800ac94:	001a      	movs	r2, r3
 800ac96:	2100      	movs	r1, #0
 800ac98:	f002 f8fe 	bl	800ce98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ac9c:	2410      	movs	r4, #16
 800ac9e:	193b      	adds	r3, r7, r4
 800aca0:	0018      	movs	r0, r3
 800aca2:	2334      	movs	r3, #52	; 0x34
 800aca4:	001a      	movs	r2, r3
 800aca6:	2100      	movs	r1, #0
 800aca8:	f002 f8f6 	bl	800ce98 <memset>
  if(uartHandle->Instance==USART2)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a22      	ldr	r2, [pc, #136]	; (800ad3c <HAL_UART_MspInit+0xb8>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d13e      	bne.n	800ad34 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800acb6:	193b      	adds	r3, r7, r4
 800acb8:	2202      	movs	r2, #2
 800acba:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800acbc:	193b      	adds	r3, r7, r4
 800acbe:	2200      	movs	r2, #0
 800acc0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800acc2:	193b      	adds	r3, r7, r4
 800acc4:	0018      	movs	r0, r3
 800acc6:	f001 f871 	bl	800bdac <HAL_RCCEx_PeriphCLKConfig>
 800acca:	1e03      	subs	r3, r0, #0
 800accc:	d001      	beq.n	800acd2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800acce:	f7ff fea3 	bl	800aa18 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800acd2:	4b1b      	ldr	r3, [pc, #108]	; (800ad40 <HAL_UART_MspInit+0xbc>)
 800acd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acd6:	4b1a      	ldr	r3, [pc, #104]	; (800ad40 <HAL_UART_MspInit+0xbc>)
 800acd8:	2180      	movs	r1, #128	; 0x80
 800acda:	0289      	lsls	r1, r1, #10
 800acdc:	430a      	orrs	r2, r1
 800acde:	63da      	str	r2, [r3, #60]	; 0x3c
 800ace0:	4b17      	ldr	r3, [pc, #92]	; (800ad40 <HAL_UART_MspInit+0xbc>)
 800ace2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ace4:	2380      	movs	r3, #128	; 0x80
 800ace6:	029b      	lsls	r3, r3, #10
 800ace8:	4013      	ands	r3, r2
 800acea:	60fb      	str	r3, [r7, #12]
 800acec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acee:	4b14      	ldr	r3, [pc, #80]	; (800ad40 <HAL_UART_MspInit+0xbc>)
 800acf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acf2:	4b13      	ldr	r3, [pc, #76]	; (800ad40 <HAL_UART_MspInit+0xbc>)
 800acf4:	2101      	movs	r1, #1
 800acf6:	430a      	orrs	r2, r1
 800acf8:	635a      	str	r2, [r3, #52]	; 0x34
 800acfa:	4b11      	ldr	r3, [pc, #68]	; (800ad40 <HAL_UART_MspInit+0xbc>)
 800acfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acfe:	2201      	movs	r2, #1
 800ad00:	4013      	ands	r3, r2
 800ad02:	60bb      	str	r3, [r7, #8]
 800ad04:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800ad06:	2144      	movs	r1, #68	; 0x44
 800ad08:	187b      	adds	r3, r7, r1
 800ad0a:	220c      	movs	r2, #12
 800ad0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad0e:	187b      	adds	r3, r7, r1
 800ad10:	2202      	movs	r2, #2
 800ad12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ad14:	187b      	adds	r3, r7, r1
 800ad16:	2201      	movs	r2, #1
 800ad18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad1a:	187b      	adds	r3, r7, r1
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800ad20:	187b      	adds	r3, r7, r1
 800ad22:	2201      	movs	r2, #1
 800ad24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad26:	187a      	adds	r2, r7, r1
 800ad28:	23a0      	movs	r3, #160	; 0xa0
 800ad2a:	05db      	lsls	r3, r3, #23
 800ad2c:	0011      	movs	r1, r2
 800ad2e:	0018      	movs	r0, r3
 800ad30:	f000 f990 	bl	800b054 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800ad34:	46c0      	nop			; (mov r8, r8)
 800ad36:	46bd      	mov	sp, r7
 800ad38:	b017      	add	sp, #92	; 0x5c
 800ad3a:	bd90      	pop	{r4, r7, pc}
 800ad3c:	40004400 	.word	0x40004400
 800ad40:	40021000 	.word	0x40021000

0800ad44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800ad44:	480d      	ldr	r0, [pc, #52]	; (800ad7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800ad46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800ad48:	f7ff ff42 	bl	800abd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ad4c:	480c      	ldr	r0, [pc, #48]	; (800ad80 <LoopForever+0x6>)
  ldr r1, =_edata
 800ad4e:	490d      	ldr	r1, [pc, #52]	; (800ad84 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ad50:	4a0d      	ldr	r2, [pc, #52]	; (800ad88 <LoopForever+0xe>)
  movs r3, #0
 800ad52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ad54:	e002      	b.n	800ad5c <LoopCopyDataInit>

0800ad56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ad56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ad58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ad5a:	3304      	adds	r3, #4

0800ad5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ad5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ad5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ad60:	d3f9      	bcc.n	800ad56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ad62:	4a0a      	ldr	r2, [pc, #40]	; (800ad8c <LoopForever+0x12>)
  ldr r4, =_ebss
 800ad64:	4c0a      	ldr	r4, [pc, #40]	; (800ad90 <LoopForever+0x16>)
  movs r3, #0
 800ad66:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ad68:	e001      	b.n	800ad6e <LoopFillZerobss>

0800ad6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ad6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ad6c:	3204      	adds	r2, #4

0800ad6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ad6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ad70:	d3fb      	bcc.n	800ad6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800ad72:	f002 f86d 	bl	800ce50 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800ad76:	f7ff fdc5 	bl	800a904 <main>

0800ad7a <LoopForever>:

LoopForever:
  b LoopForever
 800ad7a:	e7fe      	b.n	800ad7a <LoopForever>
  ldr   r0, =_estack
 800ad7c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800ad80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ad84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800ad88:	0800dac8 	.word	0x0800dac8
  ldr r2, =_sbss
 800ad8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800ad90:	20000138 	.word	0x20000138

0800ad94 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ad94:	e7fe      	b.n	800ad94 <ADC1_COMP_IRQHandler>
	...

0800ad98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ad9e:	1dfb      	adds	r3, r7, #7
 800ada0:	2200      	movs	r2, #0
 800ada2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ada4:	4b0b      	ldr	r3, [pc, #44]	; (800add4 <HAL_Init+0x3c>)
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	4b0a      	ldr	r3, [pc, #40]	; (800add4 <HAL_Init+0x3c>)
 800adaa:	2180      	movs	r1, #128	; 0x80
 800adac:	0049      	lsls	r1, r1, #1
 800adae:	430a      	orrs	r2, r1
 800adb0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800adb2:	2000      	movs	r0, #0
 800adb4:	f000 f810 	bl	800add8 <HAL_InitTick>
 800adb8:	1e03      	subs	r3, r0, #0
 800adba:	d003      	beq.n	800adc4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800adbc:	1dfb      	adds	r3, r7, #7
 800adbe:	2201      	movs	r2, #1
 800adc0:	701a      	strb	r2, [r3, #0]
 800adc2:	e001      	b.n	800adc8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800adc4:	f7ff fe2e 	bl	800aa24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800adc8:	1dfb      	adds	r3, r7, #7
 800adca:	781b      	ldrb	r3, [r3, #0]
}
 800adcc:	0018      	movs	r0, r3
 800adce:	46bd      	mov	sp, r7
 800add0:	b002      	add	sp, #8
 800add2:	bd80      	pop	{r7, pc}
 800add4:	40022000 	.word	0x40022000

0800add8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800add8:	b590      	push	{r4, r7, lr}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800ade0:	230f      	movs	r3, #15
 800ade2:	18fb      	adds	r3, r7, r3
 800ade4:	2200      	movs	r2, #0
 800ade6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800ade8:	4b1d      	ldr	r3, [pc, #116]	; (800ae60 <HAL_InitTick+0x88>)
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d02b      	beq.n	800ae48 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800adf0:	4b1c      	ldr	r3, [pc, #112]	; (800ae64 <HAL_InitTick+0x8c>)
 800adf2:	681c      	ldr	r4, [r3, #0]
 800adf4:	4b1a      	ldr	r3, [pc, #104]	; (800ae60 <HAL_InitTick+0x88>)
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	0019      	movs	r1, r3
 800adfa:	23fa      	movs	r3, #250	; 0xfa
 800adfc:	0098      	lsls	r0, r3, #2
 800adfe:	f7ff fa81 	bl	800a304 <__udivsi3>
 800ae02:	0003      	movs	r3, r0
 800ae04:	0019      	movs	r1, r3
 800ae06:	0020      	movs	r0, r4
 800ae08:	f7ff fa7c 	bl	800a304 <__udivsi3>
 800ae0c:	0003      	movs	r3, r0
 800ae0e:	0018      	movs	r0, r3
 800ae10:	f000 f913 	bl	800b03a <HAL_SYSTICK_Config>
 800ae14:	1e03      	subs	r3, r0, #0
 800ae16:	d112      	bne.n	800ae3e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b03      	cmp	r3, #3
 800ae1c:	d80a      	bhi.n	800ae34 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ae1e:	6879      	ldr	r1, [r7, #4]
 800ae20:	2301      	movs	r3, #1
 800ae22:	425b      	negs	r3, r3
 800ae24:	2200      	movs	r2, #0
 800ae26:	0018      	movs	r0, r3
 800ae28:	f000 f8f2 	bl	800b010 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ae2c:	4b0e      	ldr	r3, [pc, #56]	; (800ae68 <HAL_InitTick+0x90>)
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	601a      	str	r2, [r3, #0]
 800ae32:	e00d      	b.n	800ae50 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800ae34:	230f      	movs	r3, #15
 800ae36:	18fb      	adds	r3, r7, r3
 800ae38:	2201      	movs	r2, #1
 800ae3a:	701a      	strb	r2, [r3, #0]
 800ae3c:	e008      	b.n	800ae50 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800ae3e:	230f      	movs	r3, #15
 800ae40:	18fb      	adds	r3, r7, r3
 800ae42:	2201      	movs	r2, #1
 800ae44:	701a      	strb	r2, [r3, #0]
 800ae46:	e003      	b.n	800ae50 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800ae48:	230f      	movs	r3, #15
 800ae4a:	18fb      	adds	r3, r7, r3
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800ae50:	230f      	movs	r3, #15
 800ae52:	18fb      	adds	r3, r7, r3
 800ae54:	781b      	ldrb	r3, [r3, #0]
}
 800ae56:	0018      	movs	r0, r3
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	b005      	add	sp, #20
 800ae5c:	bd90      	pop	{r4, r7, pc}
 800ae5e:	46c0      	nop			; (mov r8, r8)
 800ae60:	20000008 	.word	0x20000008
 800ae64:	20000000 	.word	0x20000000
 800ae68:	20000004 	.word	0x20000004

0800ae6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800ae70:	4b05      	ldr	r3, [pc, #20]	; (800ae88 <HAL_IncTick+0x1c>)
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	001a      	movs	r2, r3
 800ae76:	4b05      	ldr	r3, [pc, #20]	; (800ae8c <HAL_IncTick+0x20>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	18d2      	adds	r2, r2, r3
 800ae7c:	4b03      	ldr	r3, [pc, #12]	; (800ae8c <HAL_IncTick+0x20>)
 800ae7e:	601a      	str	r2, [r3, #0]
}
 800ae80:	46c0      	nop			; (mov r8, r8)
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	46c0      	nop			; (mov r8, r8)
 800ae88:	20000008 	.word	0x20000008
 800ae8c:	20000124 	.word	0x20000124

0800ae90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	af00      	add	r7, sp, #0
  return uwTick;
 800ae94:	4b02      	ldr	r3, [pc, #8]	; (800aea0 <HAL_GetTick+0x10>)
 800ae96:	681b      	ldr	r3, [r3, #0]
}
 800ae98:	0018      	movs	r0, r3
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	46c0      	nop			; (mov r8, r8)
 800aea0:	20000124 	.word	0x20000124

0800aea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aeac:	f7ff fff0 	bl	800ae90 <HAL_GetTick>
 800aeb0:	0003      	movs	r3, r0
 800aeb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	3301      	adds	r3, #1
 800aebc:	d005      	beq.n	800aeca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800aebe:	4b0a      	ldr	r3, [pc, #40]	; (800aee8 <HAL_Delay+0x44>)
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	001a      	movs	r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	189b      	adds	r3, r3, r2
 800aec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800aeca:	46c0      	nop			; (mov r8, r8)
 800aecc:	f7ff ffe0 	bl	800ae90 <HAL_GetTick>
 800aed0:	0002      	movs	r2, r0
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	1ad3      	subs	r3, r2, r3
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d8f7      	bhi.n	800aecc <HAL_Delay+0x28>
  {
  }
}
 800aedc:	46c0      	nop			; (mov r8, r8)
 800aede:	46c0      	nop			; (mov r8, r8)
 800aee0:	46bd      	mov	sp, r7
 800aee2:	b004      	add	sp, #16
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	46c0      	nop			; (mov r8, r8)
 800aee8:	20000008 	.word	0x20000008

0800aeec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800aeec:	b590      	push	{r4, r7, lr}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	0002      	movs	r2, r0
 800aef4:	6039      	str	r1, [r7, #0]
 800aef6:	1dfb      	adds	r3, r7, #7
 800aef8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800aefa:	1dfb      	adds	r3, r7, #7
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	2b7f      	cmp	r3, #127	; 0x7f
 800af00:	d828      	bhi.n	800af54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800af02:	4a2f      	ldr	r2, [pc, #188]	; (800afc0 <__NVIC_SetPriority+0xd4>)
 800af04:	1dfb      	adds	r3, r7, #7
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	b25b      	sxtb	r3, r3
 800af0a:	089b      	lsrs	r3, r3, #2
 800af0c:	33c0      	adds	r3, #192	; 0xc0
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	589b      	ldr	r3, [r3, r2]
 800af12:	1dfa      	adds	r2, r7, #7
 800af14:	7812      	ldrb	r2, [r2, #0]
 800af16:	0011      	movs	r1, r2
 800af18:	2203      	movs	r2, #3
 800af1a:	400a      	ands	r2, r1
 800af1c:	00d2      	lsls	r2, r2, #3
 800af1e:	21ff      	movs	r1, #255	; 0xff
 800af20:	4091      	lsls	r1, r2
 800af22:	000a      	movs	r2, r1
 800af24:	43d2      	mvns	r2, r2
 800af26:	401a      	ands	r2, r3
 800af28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	019b      	lsls	r3, r3, #6
 800af2e:	22ff      	movs	r2, #255	; 0xff
 800af30:	401a      	ands	r2, r3
 800af32:	1dfb      	adds	r3, r7, #7
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	0018      	movs	r0, r3
 800af38:	2303      	movs	r3, #3
 800af3a:	4003      	ands	r3, r0
 800af3c:	00db      	lsls	r3, r3, #3
 800af3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800af40:	481f      	ldr	r0, [pc, #124]	; (800afc0 <__NVIC_SetPriority+0xd4>)
 800af42:	1dfb      	adds	r3, r7, #7
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	b25b      	sxtb	r3, r3
 800af48:	089b      	lsrs	r3, r3, #2
 800af4a:	430a      	orrs	r2, r1
 800af4c:	33c0      	adds	r3, #192	; 0xc0
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800af52:	e031      	b.n	800afb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800af54:	4a1b      	ldr	r2, [pc, #108]	; (800afc4 <__NVIC_SetPriority+0xd8>)
 800af56:	1dfb      	adds	r3, r7, #7
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	0019      	movs	r1, r3
 800af5c:	230f      	movs	r3, #15
 800af5e:	400b      	ands	r3, r1
 800af60:	3b08      	subs	r3, #8
 800af62:	089b      	lsrs	r3, r3, #2
 800af64:	3306      	adds	r3, #6
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	18d3      	adds	r3, r2, r3
 800af6a:	3304      	adds	r3, #4
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	1dfa      	adds	r2, r7, #7
 800af70:	7812      	ldrb	r2, [r2, #0]
 800af72:	0011      	movs	r1, r2
 800af74:	2203      	movs	r2, #3
 800af76:	400a      	ands	r2, r1
 800af78:	00d2      	lsls	r2, r2, #3
 800af7a:	21ff      	movs	r1, #255	; 0xff
 800af7c:	4091      	lsls	r1, r2
 800af7e:	000a      	movs	r2, r1
 800af80:	43d2      	mvns	r2, r2
 800af82:	401a      	ands	r2, r3
 800af84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	019b      	lsls	r3, r3, #6
 800af8a:	22ff      	movs	r2, #255	; 0xff
 800af8c:	401a      	ands	r2, r3
 800af8e:	1dfb      	adds	r3, r7, #7
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	0018      	movs	r0, r3
 800af94:	2303      	movs	r3, #3
 800af96:	4003      	ands	r3, r0
 800af98:	00db      	lsls	r3, r3, #3
 800af9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800af9c:	4809      	ldr	r0, [pc, #36]	; (800afc4 <__NVIC_SetPriority+0xd8>)
 800af9e:	1dfb      	adds	r3, r7, #7
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	001c      	movs	r4, r3
 800afa4:	230f      	movs	r3, #15
 800afa6:	4023      	ands	r3, r4
 800afa8:	3b08      	subs	r3, #8
 800afaa:	089b      	lsrs	r3, r3, #2
 800afac:	430a      	orrs	r2, r1
 800afae:	3306      	adds	r3, #6
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	18c3      	adds	r3, r0, r3
 800afb4:	3304      	adds	r3, #4
 800afb6:	601a      	str	r2, [r3, #0]
}
 800afb8:	46c0      	nop			; (mov r8, r8)
 800afba:	46bd      	mov	sp, r7
 800afbc:	b003      	add	sp, #12
 800afbe:	bd90      	pop	{r4, r7, pc}
 800afc0:	e000e100 	.word	0xe000e100
 800afc4:	e000ed00 	.word	0xe000ed00

0800afc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	1e5a      	subs	r2, r3, #1
 800afd4:	2380      	movs	r3, #128	; 0x80
 800afd6:	045b      	lsls	r3, r3, #17
 800afd8:	429a      	cmp	r2, r3
 800afda:	d301      	bcc.n	800afe0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800afdc:	2301      	movs	r3, #1
 800afde:	e010      	b.n	800b002 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800afe0:	4b0a      	ldr	r3, [pc, #40]	; (800b00c <SysTick_Config+0x44>)
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	3a01      	subs	r2, #1
 800afe6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800afe8:	2301      	movs	r3, #1
 800afea:	425b      	negs	r3, r3
 800afec:	2103      	movs	r1, #3
 800afee:	0018      	movs	r0, r3
 800aff0:	f7ff ff7c 	bl	800aeec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800aff4:	4b05      	ldr	r3, [pc, #20]	; (800b00c <SysTick_Config+0x44>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800affa:	4b04      	ldr	r3, [pc, #16]	; (800b00c <SysTick_Config+0x44>)
 800affc:	2207      	movs	r2, #7
 800affe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b000:	2300      	movs	r3, #0
}
 800b002:	0018      	movs	r0, r3
 800b004:	46bd      	mov	sp, r7
 800b006:	b002      	add	sp, #8
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	46c0      	nop			; (mov r8, r8)
 800b00c:	e000e010 	.word	0xe000e010

0800b010 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	60b9      	str	r1, [r7, #8]
 800b018:	607a      	str	r2, [r7, #4]
 800b01a:	210f      	movs	r1, #15
 800b01c:	187b      	adds	r3, r7, r1
 800b01e:	1c02      	adds	r2, r0, #0
 800b020:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800b022:	68ba      	ldr	r2, [r7, #8]
 800b024:	187b      	adds	r3, r7, r1
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	b25b      	sxtb	r3, r3
 800b02a:	0011      	movs	r1, r2
 800b02c:	0018      	movs	r0, r3
 800b02e:	f7ff ff5d 	bl	800aeec <__NVIC_SetPriority>
}
 800b032:	46c0      	nop			; (mov r8, r8)
 800b034:	46bd      	mov	sp, r7
 800b036:	b004      	add	sp, #16
 800b038:	bd80      	pop	{r7, pc}

0800b03a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b082      	sub	sp, #8
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	0018      	movs	r0, r3
 800b046:	f7ff ffbf 	bl	800afc8 <SysTick_Config>
 800b04a:	0003      	movs	r3, r0
}
 800b04c:	0018      	movs	r0, r3
 800b04e:	46bd      	mov	sp, r7
 800b050:	b002      	add	sp, #8
 800b052:	bd80      	pop	{r7, pc}

0800b054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b05e:	2300      	movs	r3, #0
 800b060:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b062:	e147      	b.n	800b2f4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2101      	movs	r1, #1
 800b06a:	697a      	ldr	r2, [r7, #20]
 800b06c:	4091      	lsls	r1, r2
 800b06e:	000a      	movs	r2, r1
 800b070:	4013      	ands	r3, r2
 800b072:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d100      	bne.n	800b07c <HAL_GPIO_Init+0x28>
 800b07a:	e138      	b.n	800b2ee <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	2203      	movs	r2, #3
 800b082:	4013      	ands	r3, r2
 800b084:	2b01      	cmp	r3, #1
 800b086:	d005      	beq.n	800b094 <HAL_GPIO_Init+0x40>
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	2203      	movs	r2, #3
 800b08e:	4013      	ands	r3, r2
 800b090:	2b02      	cmp	r3, #2
 800b092:	d130      	bne.n	800b0f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	005b      	lsls	r3, r3, #1
 800b09e:	2203      	movs	r2, #3
 800b0a0:	409a      	lsls	r2, r3
 800b0a2:	0013      	movs	r3, r2
 800b0a4:	43da      	mvns	r2, r3
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	4013      	ands	r3, r2
 800b0aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	68da      	ldr	r2, [r3, #12]
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	005b      	lsls	r3, r3, #1
 800b0b4:	409a      	lsls	r2, r3
 800b0b6:	0013      	movs	r3, r2
 800b0b8:	693a      	ldr	r2, [r7, #16]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	409a      	lsls	r2, r3
 800b0d0:	0013      	movs	r3, r2
 800b0d2:	43da      	mvns	r2, r3
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	4013      	ands	r3, r2
 800b0d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	091b      	lsrs	r3, r3, #4
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	401a      	ands	r2, r3
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	409a      	lsls	r2, r3
 800b0e8:	0013      	movs	r3, r2
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	693a      	ldr	r2, [r7, #16]
 800b0f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	2203      	movs	r2, #3
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	2b03      	cmp	r3, #3
 800b100:	d017      	beq.n	800b132 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	68db      	ldr	r3, [r3, #12]
 800b106:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	005b      	lsls	r3, r3, #1
 800b10c:	2203      	movs	r2, #3
 800b10e:	409a      	lsls	r2, r3
 800b110:	0013      	movs	r3, r2
 800b112:	43da      	mvns	r2, r3
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	4013      	ands	r3, r2
 800b118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	689a      	ldr	r2, [r3, #8]
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	005b      	lsls	r3, r3, #1
 800b122:	409a      	lsls	r2, r3
 800b124:	0013      	movs	r3, r2
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	4313      	orrs	r3, r2
 800b12a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	693a      	ldr	r2, [r7, #16]
 800b130:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	2203      	movs	r2, #3
 800b138:	4013      	ands	r3, r2
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d123      	bne.n	800b186 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	08da      	lsrs	r2, r3, #3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	3208      	adds	r2, #8
 800b146:	0092      	lsls	r2, r2, #2
 800b148:	58d3      	ldr	r3, [r2, r3]
 800b14a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	2207      	movs	r2, #7
 800b150:	4013      	ands	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	220f      	movs	r2, #15
 800b156:	409a      	lsls	r2, r3
 800b158:	0013      	movs	r3, r2
 800b15a:	43da      	mvns	r2, r3
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	4013      	ands	r3, r2
 800b160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	691a      	ldr	r2, [r3, #16]
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	2107      	movs	r1, #7
 800b16a:	400b      	ands	r3, r1
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	409a      	lsls	r2, r3
 800b170:	0013      	movs	r3, r2
 800b172:	693a      	ldr	r2, [r7, #16]
 800b174:	4313      	orrs	r3, r2
 800b176:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	08da      	lsrs	r2, r3, #3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	3208      	adds	r2, #8
 800b180:	0092      	lsls	r2, r2, #2
 800b182:	6939      	ldr	r1, [r7, #16]
 800b184:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	005b      	lsls	r3, r3, #1
 800b190:	2203      	movs	r2, #3
 800b192:	409a      	lsls	r2, r3
 800b194:	0013      	movs	r3, r2
 800b196:	43da      	mvns	r2, r3
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	4013      	ands	r3, r2
 800b19c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	2203      	movs	r2, #3
 800b1a4:	401a      	ands	r2, r3
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	005b      	lsls	r3, r3, #1
 800b1aa:	409a      	lsls	r2, r3
 800b1ac:	0013      	movs	r3, r2
 800b1ae:	693a      	ldr	r2, [r7, #16]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	693a      	ldr	r2, [r7, #16]
 800b1b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	685a      	ldr	r2, [r3, #4]
 800b1be:	23c0      	movs	r3, #192	; 0xc0
 800b1c0:	029b      	lsls	r3, r3, #10
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	d100      	bne.n	800b1c8 <HAL_GPIO_Init+0x174>
 800b1c6:	e092      	b.n	800b2ee <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800b1c8:	4a50      	ldr	r2, [pc, #320]	; (800b30c <HAL_GPIO_Init+0x2b8>)
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	089b      	lsrs	r3, r3, #2
 800b1ce:	3318      	adds	r3, #24
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	589b      	ldr	r3, [r3, r2]
 800b1d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	2203      	movs	r2, #3
 800b1da:	4013      	ands	r3, r2
 800b1dc:	00db      	lsls	r3, r3, #3
 800b1de:	220f      	movs	r2, #15
 800b1e0:	409a      	lsls	r2, r3
 800b1e2:	0013      	movs	r3, r2
 800b1e4:	43da      	mvns	r2, r3
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	23a0      	movs	r3, #160	; 0xa0
 800b1f0:	05db      	lsls	r3, r3, #23
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d013      	beq.n	800b21e <HAL_GPIO_Init+0x1ca>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4a45      	ldr	r2, [pc, #276]	; (800b310 <HAL_GPIO_Init+0x2bc>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d00d      	beq.n	800b21a <HAL_GPIO_Init+0x1c6>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a44      	ldr	r2, [pc, #272]	; (800b314 <HAL_GPIO_Init+0x2c0>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d007      	beq.n	800b216 <HAL_GPIO_Init+0x1c2>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a43      	ldr	r2, [pc, #268]	; (800b318 <HAL_GPIO_Init+0x2c4>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d101      	bne.n	800b212 <HAL_GPIO_Init+0x1be>
 800b20e:	2303      	movs	r3, #3
 800b210:	e006      	b.n	800b220 <HAL_GPIO_Init+0x1cc>
 800b212:	2305      	movs	r3, #5
 800b214:	e004      	b.n	800b220 <HAL_GPIO_Init+0x1cc>
 800b216:	2302      	movs	r3, #2
 800b218:	e002      	b.n	800b220 <HAL_GPIO_Init+0x1cc>
 800b21a:	2301      	movs	r3, #1
 800b21c:	e000      	b.n	800b220 <HAL_GPIO_Init+0x1cc>
 800b21e:	2300      	movs	r3, #0
 800b220:	697a      	ldr	r2, [r7, #20]
 800b222:	2103      	movs	r1, #3
 800b224:	400a      	ands	r2, r1
 800b226:	00d2      	lsls	r2, r2, #3
 800b228:	4093      	lsls	r3, r2
 800b22a:	693a      	ldr	r2, [r7, #16]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800b230:	4936      	ldr	r1, [pc, #216]	; (800b30c <HAL_GPIO_Init+0x2b8>)
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	089b      	lsrs	r3, r3, #2
 800b236:	3318      	adds	r3, #24
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	693a      	ldr	r2, [r7, #16]
 800b23c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b23e:	4b33      	ldr	r3, [pc, #204]	; (800b30c <HAL_GPIO_Init+0x2b8>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	43da      	mvns	r2, r3
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	4013      	ands	r3, r2
 800b24c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	685a      	ldr	r2, [r3, #4]
 800b252:	2380      	movs	r3, #128	; 0x80
 800b254:	035b      	lsls	r3, r3, #13
 800b256:	4013      	ands	r3, r2
 800b258:	d003      	beq.n	800b262 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800b25a:	693a      	ldr	r2, [r7, #16]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	4313      	orrs	r3, r2
 800b260:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b262:	4b2a      	ldr	r3, [pc, #168]	; (800b30c <HAL_GPIO_Init+0x2b8>)
 800b264:	693a      	ldr	r2, [r7, #16]
 800b266:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800b268:	4b28      	ldr	r3, [pc, #160]	; (800b30c <HAL_GPIO_Init+0x2b8>)
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	43da      	mvns	r2, r3
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	4013      	ands	r3, r2
 800b276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	2380      	movs	r3, #128	; 0x80
 800b27e:	039b      	lsls	r3, r3, #14
 800b280:	4013      	ands	r3, r2
 800b282:	d003      	beq.n	800b28c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800b284:	693a      	ldr	r2, [r7, #16]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	4313      	orrs	r3, r2
 800b28a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b28c:	4b1f      	ldr	r3, [pc, #124]	; (800b30c <HAL_GPIO_Init+0x2b8>)
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800b292:	4a1e      	ldr	r2, [pc, #120]	; (800b30c <HAL_GPIO_Init+0x2b8>)
 800b294:	2384      	movs	r3, #132	; 0x84
 800b296:	58d3      	ldr	r3, [r2, r3]
 800b298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	43da      	mvns	r2, r3
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	4013      	ands	r3, r2
 800b2a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	685a      	ldr	r2, [r3, #4]
 800b2a8:	2380      	movs	r3, #128	; 0x80
 800b2aa:	029b      	lsls	r3, r3, #10
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	d003      	beq.n	800b2b8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b2b8:	4914      	ldr	r1, [pc, #80]	; (800b30c <HAL_GPIO_Init+0x2b8>)
 800b2ba:	2284      	movs	r2, #132	; 0x84
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800b2c0:	4a12      	ldr	r2, [pc, #72]	; (800b30c <HAL_GPIO_Init+0x2b8>)
 800b2c2:	2380      	movs	r3, #128	; 0x80
 800b2c4:	58d3      	ldr	r3, [r2, r3]
 800b2c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	43da      	mvns	r2, r3
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	4013      	ands	r3, r2
 800b2d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	685a      	ldr	r2, [r3, #4]
 800b2d6:	2380      	movs	r3, #128	; 0x80
 800b2d8:	025b      	lsls	r3, r3, #9
 800b2da:	4013      	ands	r3, r2
 800b2dc:	d003      	beq.n	800b2e6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800b2de:	693a      	ldr	r2, [r7, #16]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b2e6:	4909      	ldr	r1, [pc, #36]	; (800b30c <HAL_GPIO_Init+0x2b8>)
 800b2e8:	2280      	movs	r2, #128	; 0x80
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	40da      	lsrs	r2, r3
 800b2fc:	1e13      	subs	r3, r2, #0
 800b2fe:	d000      	beq.n	800b302 <HAL_GPIO_Init+0x2ae>
 800b300:	e6b0      	b.n	800b064 <HAL_GPIO_Init+0x10>
  }
}
 800b302:	46c0      	nop			; (mov r8, r8)
 800b304:	46c0      	nop			; (mov r8, r8)
 800b306:	46bd      	mov	sp, r7
 800b308:	b006      	add	sp, #24
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	40021800 	.word	0x40021800
 800b310:	50000400 	.word	0x50000400
 800b314:	50000800 	.word	0x50000800
 800b318:	50000c00 	.word	0x50000c00

0800b31c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	0008      	movs	r0, r1
 800b326:	0011      	movs	r1, r2
 800b328:	1cbb      	adds	r3, r7, #2
 800b32a:	1c02      	adds	r2, r0, #0
 800b32c:	801a      	strh	r2, [r3, #0]
 800b32e:	1c7b      	adds	r3, r7, #1
 800b330:	1c0a      	adds	r2, r1, #0
 800b332:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b334:	1c7b      	adds	r3, r7, #1
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d004      	beq.n	800b346 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b33c:	1cbb      	adds	r3, r7, #2
 800b33e:	881a      	ldrh	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b344:	e003      	b.n	800b34e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b346:	1cbb      	adds	r3, r7, #2
 800b348:	881a      	ldrh	r2, [r3, #0]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b34e:	46c0      	nop			; (mov r8, r8)
 800b350:	46bd      	mov	sp, r7
 800b352:	b002      	add	sp, #8
 800b354:	bd80      	pop	{r7, pc}

0800b356 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b084      	sub	sp, #16
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
 800b35e:	000a      	movs	r2, r1
 800b360:	1cbb      	adds	r3, r7, #2
 800b362:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	695b      	ldr	r3, [r3, #20]
 800b368:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b36a:	1cbb      	adds	r3, r7, #2
 800b36c:	881b      	ldrh	r3, [r3, #0]
 800b36e:	68fa      	ldr	r2, [r7, #12]
 800b370:	4013      	ands	r3, r2
 800b372:	041a      	lsls	r2, r3, #16
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	43db      	mvns	r3, r3
 800b378:	1cb9      	adds	r1, r7, #2
 800b37a:	8809      	ldrh	r1, [r1, #0]
 800b37c:	400b      	ands	r3, r1
 800b37e:	431a      	orrs	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	619a      	str	r2, [r3, #24]
}
 800b384:	46c0      	nop			; (mov r8, r8)
 800b386:	46bd      	mov	sp, r7
 800b388:	b004      	add	sp, #16
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800b394:	4b19      	ldr	r3, [pc, #100]	; (800b3fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a19      	ldr	r2, [pc, #100]	; (800b400 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800b39a:	4013      	ands	r3, r2
 800b39c:	0019      	movs	r1, r3
 800b39e:	4b17      	ldr	r3, [pc, #92]	; (800b3fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	430a      	orrs	r2, r1
 800b3a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	2380      	movs	r3, #128	; 0x80
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d11f      	bne.n	800b3f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800b3b0:	4b14      	ldr	r3, [pc, #80]	; (800b404 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	0013      	movs	r3, r2
 800b3b6:	005b      	lsls	r3, r3, #1
 800b3b8:	189b      	adds	r3, r3, r2
 800b3ba:	005b      	lsls	r3, r3, #1
 800b3bc:	4912      	ldr	r1, [pc, #72]	; (800b408 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800b3be:	0018      	movs	r0, r3
 800b3c0:	f7fe ffa0 	bl	800a304 <__udivsi3>
 800b3c4:	0003      	movs	r3, r0
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b3ca:	e008      	b.n	800b3de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d003      	beq.n	800b3da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	60fb      	str	r3, [r7, #12]
 800b3d8:	e001      	b.n	800b3de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800b3da:	2303      	movs	r3, #3
 800b3dc:	e009      	b.n	800b3f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b3de:	4b07      	ldr	r3, [pc, #28]	; (800b3fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b3e0:	695a      	ldr	r2, [r3, #20]
 800b3e2:	2380      	movs	r3, #128	; 0x80
 800b3e4:	00db      	lsls	r3, r3, #3
 800b3e6:	401a      	ands	r2, r3
 800b3e8:	2380      	movs	r3, #128	; 0x80
 800b3ea:	00db      	lsls	r3, r3, #3
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d0ed      	beq.n	800b3cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	0018      	movs	r0, r3
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	b004      	add	sp, #16
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	46c0      	nop			; (mov r8, r8)
 800b3fc:	40007000 	.word	0x40007000
 800b400:	fffff9ff 	.word	0xfffff9ff
 800b404:	20000000 	.word	0x20000000
 800b408:	000f4240 	.word	0x000f4240

0800b40c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800b410:	4b03      	ldr	r3, [pc, #12]	; (800b420 <LL_RCC_GetAPB1Prescaler+0x14>)
 800b412:	689a      	ldr	r2, [r3, #8]
 800b414:	23e0      	movs	r3, #224	; 0xe0
 800b416:	01db      	lsls	r3, r3, #7
 800b418:	4013      	ands	r3, r2
}
 800b41a:	0018      	movs	r0, r3
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	40021000 	.word	0x40021000

0800b424 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b088      	sub	sp, #32
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d101      	bne.n	800b436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b432:	2301      	movs	r3, #1
 800b434:	e2fe      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2201      	movs	r2, #1
 800b43c:	4013      	ands	r3, r2
 800b43e:	d100      	bne.n	800b442 <HAL_RCC_OscConfig+0x1e>
 800b440:	e07c      	b.n	800b53c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b442:	4bc3      	ldr	r3, [pc, #780]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	2238      	movs	r2, #56	; 0x38
 800b448:	4013      	ands	r3, r2
 800b44a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b44c:	4bc0      	ldr	r3, [pc, #768]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	2203      	movs	r2, #3
 800b452:	4013      	ands	r3, r2
 800b454:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	2b10      	cmp	r3, #16
 800b45a:	d102      	bne.n	800b462 <HAL_RCC_OscConfig+0x3e>
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	2b03      	cmp	r3, #3
 800b460:	d002      	beq.n	800b468 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	2b08      	cmp	r3, #8
 800b466:	d10b      	bne.n	800b480 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b468:	4bb9      	ldr	r3, [pc, #740]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	2380      	movs	r3, #128	; 0x80
 800b46e:	029b      	lsls	r3, r3, #10
 800b470:	4013      	ands	r3, r2
 800b472:	d062      	beq.n	800b53a <HAL_RCC_OscConfig+0x116>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d15e      	bne.n	800b53a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800b47c:	2301      	movs	r3, #1
 800b47e:	e2d9      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685a      	ldr	r2, [r3, #4]
 800b484:	2380      	movs	r3, #128	; 0x80
 800b486:	025b      	lsls	r3, r3, #9
 800b488:	429a      	cmp	r2, r3
 800b48a:	d107      	bne.n	800b49c <HAL_RCC_OscConfig+0x78>
 800b48c:	4bb0      	ldr	r3, [pc, #704]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	4baf      	ldr	r3, [pc, #700]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b492:	2180      	movs	r1, #128	; 0x80
 800b494:	0249      	lsls	r1, r1, #9
 800b496:	430a      	orrs	r2, r1
 800b498:	601a      	str	r2, [r3, #0]
 800b49a:	e020      	b.n	800b4de <HAL_RCC_OscConfig+0xba>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685a      	ldr	r2, [r3, #4]
 800b4a0:	23a0      	movs	r3, #160	; 0xa0
 800b4a2:	02db      	lsls	r3, r3, #11
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d10e      	bne.n	800b4c6 <HAL_RCC_OscConfig+0xa2>
 800b4a8:	4ba9      	ldr	r3, [pc, #676]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	4ba8      	ldr	r3, [pc, #672]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b4ae:	2180      	movs	r1, #128	; 0x80
 800b4b0:	02c9      	lsls	r1, r1, #11
 800b4b2:	430a      	orrs	r2, r1
 800b4b4:	601a      	str	r2, [r3, #0]
 800b4b6:	4ba6      	ldr	r3, [pc, #664]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	4ba5      	ldr	r3, [pc, #660]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b4bc:	2180      	movs	r1, #128	; 0x80
 800b4be:	0249      	lsls	r1, r1, #9
 800b4c0:	430a      	orrs	r2, r1
 800b4c2:	601a      	str	r2, [r3, #0]
 800b4c4:	e00b      	b.n	800b4de <HAL_RCC_OscConfig+0xba>
 800b4c6:	4ba2      	ldr	r3, [pc, #648]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	4ba1      	ldr	r3, [pc, #644]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b4cc:	49a1      	ldr	r1, [pc, #644]	; (800b754 <HAL_RCC_OscConfig+0x330>)
 800b4ce:	400a      	ands	r2, r1
 800b4d0:	601a      	str	r2, [r3, #0]
 800b4d2:	4b9f      	ldr	r3, [pc, #636]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	4b9e      	ldr	r3, [pc, #632]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b4d8:	499f      	ldr	r1, [pc, #636]	; (800b758 <HAL_RCC_OscConfig+0x334>)
 800b4da:	400a      	ands	r2, r1
 800b4dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d014      	beq.n	800b510 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4e6:	f7ff fcd3 	bl	800ae90 <HAL_GetTick>
 800b4ea:	0003      	movs	r3, r0
 800b4ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b4ee:	e008      	b.n	800b502 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b4f0:	f7ff fcce 	bl	800ae90 <HAL_GetTick>
 800b4f4:	0002      	movs	r2, r0
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	2b64      	cmp	r3, #100	; 0x64
 800b4fc:	d901      	bls.n	800b502 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800b4fe:	2303      	movs	r3, #3
 800b500:	e298      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b502:	4b93      	ldr	r3, [pc, #588]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	2380      	movs	r3, #128	; 0x80
 800b508:	029b      	lsls	r3, r3, #10
 800b50a:	4013      	ands	r3, r2
 800b50c:	d0f0      	beq.n	800b4f0 <HAL_RCC_OscConfig+0xcc>
 800b50e:	e015      	b.n	800b53c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b510:	f7ff fcbe 	bl	800ae90 <HAL_GetTick>
 800b514:	0003      	movs	r3, r0
 800b516:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b518:	e008      	b.n	800b52c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b51a:	f7ff fcb9 	bl	800ae90 <HAL_GetTick>
 800b51e:	0002      	movs	r2, r0
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	1ad3      	subs	r3, r2, r3
 800b524:	2b64      	cmp	r3, #100	; 0x64
 800b526:	d901      	bls.n	800b52c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800b528:	2303      	movs	r3, #3
 800b52a:	e283      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b52c:	4b88      	ldr	r3, [pc, #544]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	2380      	movs	r3, #128	; 0x80
 800b532:	029b      	lsls	r3, r3, #10
 800b534:	4013      	ands	r3, r2
 800b536:	d1f0      	bne.n	800b51a <HAL_RCC_OscConfig+0xf6>
 800b538:	e000      	b.n	800b53c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b53a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2202      	movs	r2, #2
 800b542:	4013      	ands	r3, r2
 800b544:	d100      	bne.n	800b548 <HAL_RCC_OscConfig+0x124>
 800b546:	e099      	b.n	800b67c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b548:	4b81      	ldr	r3, [pc, #516]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	2238      	movs	r2, #56	; 0x38
 800b54e:	4013      	ands	r3, r2
 800b550:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b552:	4b7f      	ldr	r3, [pc, #508]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	2203      	movs	r2, #3
 800b558:	4013      	ands	r3, r2
 800b55a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	2b10      	cmp	r3, #16
 800b560:	d102      	bne.n	800b568 <HAL_RCC_OscConfig+0x144>
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	2b02      	cmp	r3, #2
 800b566:	d002      	beq.n	800b56e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d135      	bne.n	800b5da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b56e:	4b78      	ldr	r3, [pc, #480]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	2380      	movs	r3, #128	; 0x80
 800b574:	00db      	lsls	r3, r3, #3
 800b576:	4013      	ands	r3, r2
 800b578:	d005      	beq.n	800b586 <HAL_RCC_OscConfig+0x162>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d101      	bne.n	800b586 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800b582:	2301      	movs	r3, #1
 800b584:	e256      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b586:	4b72      	ldr	r3, [pc, #456]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	4a74      	ldr	r2, [pc, #464]	; (800b75c <HAL_RCC_OscConfig+0x338>)
 800b58c:	4013      	ands	r3, r2
 800b58e:	0019      	movs	r1, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	695b      	ldr	r3, [r3, #20]
 800b594:	021a      	lsls	r2, r3, #8
 800b596:	4b6e      	ldr	r3, [pc, #440]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b598:	430a      	orrs	r2, r1
 800b59a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d112      	bne.n	800b5c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b5a2:	4b6b      	ldr	r3, [pc, #428]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a6e      	ldr	r2, [pc, #440]	; (800b760 <HAL_RCC_OscConfig+0x33c>)
 800b5a8:	4013      	ands	r3, r2
 800b5aa:	0019      	movs	r1, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	691a      	ldr	r2, [r3, #16]
 800b5b0:	4b67      	ldr	r3, [pc, #412]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b5b2:	430a      	orrs	r2, r1
 800b5b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800b5b6:	4b66      	ldr	r3, [pc, #408]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	0adb      	lsrs	r3, r3, #11
 800b5bc:	2207      	movs	r2, #7
 800b5be:	4013      	ands	r3, r2
 800b5c0:	4a68      	ldr	r2, [pc, #416]	; (800b764 <HAL_RCC_OscConfig+0x340>)
 800b5c2:	40da      	lsrs	r2, r3
 800b5c4:	4b68      	ldr	r3, [pc, #416]	; (800b768 <HAL_RCC_OscConfig+0x344>)
 800b5c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b5c8:	4b68      	ldr	r3, [pc, #416]	; (800b76c <HAL_RCC_OscConfig+0x348>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	0018      	movs	r0, r3
 800b5ce:	f7ff fc03 	bl	800add8 <HAL_InitTick>
 800b5d2:	1e03      	subs	r3, r0, #0
 800b5d4:	d051      	beq.n	800b67a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e22c      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d030      	beq.n	800b644 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b5e2:	4b5b      	ldr	r3, [pc, #364]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a5e      	ldr	r2, [pc, #376]	; (800b760 <HAL_RCC_OscConfig+0x33c>)
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	0019      	movs	r1, r3
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	691a      	ldr	r2, [r3, #16]
 800b5f0:	4b57      	ldr	r3, [pc, #348]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b5f2:	430a      	orrs	r2, r1
 800b5f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800b5f6:	4b56      	ldr	r3, [pc, #344]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	4b55      	ldr	r3, [pc, #340]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b5fc:	2180      	movs	r1, #128	; 0x80
 800b5fe:	0049      	lsls	r1, r1, #1
 800b600:	430a      	orrs	r2, r1
 800b602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b604:	f7ff fc44 	bl	800ae90 <HAL_GetTick>
 800b608:	0003      	movs	r3, r0
 800b60a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b60c:	e008      	b.n	800b620 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b60e:	f7ff fc3f 	bl	800ae90 <HAL_GetTick>
 800b612:	0002      	movs	r2, r0
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	2b02      	cmp	r3, #2
 800b61a:	d901      	bls.n	800b620 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b61c:	2303      	movs	r3, #3
 800b61e:	e209      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b620:	4b4b      	ldr	r3, [pc, #300]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	2380      	movs	r3, #128	; 0x80
 800b626:	00db      	lsls	r3, r3, #3
 800b628:	4013      	ands	r3, r2
 800b62a:	d0f0      	beq.n	800b60e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b62c:	4b48      	ldr	r3, [pc, #288]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	4a4a      	ldr	r2, [pc, #296]	; (800b75c <HAL_RCC_OscConfig+0x338>)
 800b632:	4013      	ands	r3, r2
 800b634:	0019      	movs	r1, r3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	695b      	ldr	r3, [r3, #20]
 800b63a:	021a      	lsls	r2, r3, #8
 800b63c:	4b44      	ldr	r3, [pc, #272]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b63e:	430a      	orrs	r2, r1
 800b640:	605a      	str	r2, [r3, #4]
 800b642:	e01b      	b.n	800b67c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800b644:	4b42      	ldr	r3, [pc, #264]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	4b41      	ldr	r3, [pc, #260]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b64a:	4949      	ldr	r1, [pc, #292]	; (800b770 <HAL_RCC_OscConfig+0x34c>)
 800b64c:	400a      	ands	r2, r1
 800b64e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b650:	f7ff fc1e 	bl	800ae90 <HAL_GetTick>
 800b654:	0003      	movs	r3, r0
 800b656:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b658:	e008      	b.n	800b66c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b65a:	f7ff fc19 	bl	800ae90 <HAL_GetTick>
 800b65e:	0002      	movs	r2, r0
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	2b02      	cmp	r3, #2
 800b666:	d901      	bls.n	800b66c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b668:	2303      	movs	r3, #3
 800b66a:	e1e3      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b66c:	4b38      	ldr	r3, [pc, #224]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	2380      	movs	r3, #128	; 0x80
 800b672:	00db      	lsls	r3, r3, #3
 800b674:	4013      	ands	r3, r2
 800b676:	d1f0      	bne.n	800b65a <HAL_RCC_OscConfig+0x236>
 800b678:	e000      	b.n	800b67c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b67a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2208      	movs	r2, #8
 800b682:	4013      	ands	r3, r2
 800b684:	d047      	beq.n	800b716 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800b686:	4b32      	ldr	r3, [pc, #200]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	2238      	movs	r2, #56	; 0x38
 800b68c:	4013      	ands	r3, r2
 800b68e:	2b18      	cmp	r3, #24
 800b690:	d10a      	bne.n	800b6a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800b692:	4b2f      	ldr	r3, [pc, #188]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b696:	2202      	movs	r2, #2
 800b698:	4013      	ands	r3, r2
 800b69a:	d03c      	beq.n	800b716 <HAL_RCC_OscConfig+0x2f2>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d138      	bne.n	800b716 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e1c5      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	699b      	ldr	r3, [r3, #24]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d019      	beq.n	800b6e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800b6b0:	4b27      	ldr	r3, [pc, #156]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b6b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b6b4:	4b26      	ldr	r3, [pc, #152]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b6b6:	2101      	movs	r1, #1
 800b6b8:	430a      	orrs	r2, r1
 800b6ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6bc:	f7ff fbe8 	bl	800ae90 <HAL_GetTick>
 800b6c0:	0003      	movs	r3, r0
 800b6c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b6c4:	e008      	b.n	800b6d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b6c6:	f7ff fbe3 	bl	800ae90 <HAL_GetTick>
 800b6ca:	0002      	movs	r2, r0
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	1ad3      	subs	r3, r2, r3
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d901      	bls.n	800b6d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800b6d4:	2303      	movs	r3, #3
 800b6d6:	e1ad      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b6d8:	4b1d      	ldr	r3, [pc, #116]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b6da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6dc:	2202      	movs	r2, #2
 800b6de:	4013      	ands	r3, r2
 800b6e0:	d0f1      	beq.n	800b6c6 <HAL_RCC_OscConfig+0x2a2>
 800b6e2:	e018      	b.n	800b716 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800b6e4:	4b1a      	ldr	r3, [pc, #104]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b6e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b6e8:	4b19      	ldr	r3, [pc, #100]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b6ea:	2101      	movs	r1, #1
 800b6ec:	438a      	bics	r2, r1
 800b6ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6f0:	f7ff fbce 	bl	800ae90 <HAL_GetTick>
 800b6f4:	0003      	movs	r3, r0
 800b6f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b6f8:	e008      	b.n	800b70c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b6fa:	f7ff fbc9 	bl	800ae90 <HAL_GetTick>
 800b6fe:	0002      	movs	r2, r0
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	1ad3      	subs	r3, r2, r3
 800b704:	2b02      	cmp	r3, #2
 800b706:	d901      	bls.n	800b70c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800b708:	2303      	movs	r3, #3
 800b70a:	e193      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b70c:	4b10      	ldr	r3, [pc, #64]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b70e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b710:	2202      	movs	r2, #2
 800b712:	4013      	ands	r3, r2
 800b714:	d1f1      	bne.n	800b6fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2204      	movs	r2, #4
 800b71c:	4013      	ands	r3, r2
 800b71e:	d100      	bne.n	800b722 <HAL_RCC_OscConfig+0x2fe>
 800b720:	e0c6      	b.n	800b8b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b722:	231f      	movs	r3, #31
 800b724:	18fb      	adds	r3, r7, r3
 800b726:	2200      	movs	r2, #0
 800b728:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800b72a:	4b09      	ldr	r3, [pc, #36]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	2238      	movs	r2, #56	; 0x38
 800b730:	4013      	ands	r3, r2
 800b732:	2b20      	cmp	r3, #32
 800b734:	d11e      	bne.n	800b774 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800b736:	4b06      	ldr	r3, [pc, #24]	; (800b750 <HAL_RCC_OscConfig+0x32c>)
 800b738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b73a:	2202      	movs	r2, #2
 800b73c:	4013      	ands	r3, r2
 800b73e:	d100      	bne.n	800b742 <HAL_RCC_OscConfig+0x31e>
 800b740:	e0b6      	b.n	800b8b0 <HAL_RCC_OscConfig+0x48c>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d000      	beq.n	800b74c <HAL_RCC_OscConfig+0x328>
 800b74a:	e0b1      	b.n	800b8b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800b74c:	2301      	movs	r3, #1
 800b74e:	e171      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
 800b750:	40021000 	.word	0x40021000
 800b754:	fffeffff 	.word	0xfffeffff
 800b758:	fffbffff 	.word	0xfffbffff
 800b75c:	ffff80ff 	.word	0xffff80ff
 800b760:	ffffc7ff 	.word	0xffffc7ff
 800b764:	00f42400 	.word	0x00f42400
 800b768:	20000000 	.word	0x20000000
 800b76c:	20000004 	.word	0x20000004
 800b770:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b774:	4bb1      	ldr	r3, [pc, #708]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b778:	2380      	movs	r3, #128	; 0x80
 800b77a:	055b      	lsls	r3, r3, #21
 800b77c:	4013      	ands	r3, r2
 800b77e:	d101      	bne.n	800b784 <HAL_RCC_OscConfig+0x360>
 800b780:	2301      	movs	r3, #1
 800b782:	e000      	b.n	800b786 <HAL_RCC_OscConfig+0x362>
 800b784:	2300      	movs	r3, #0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d011      	beq.n	800b7ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800b78a:	4bac      	ldr	r3, [pc, #688]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b78c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b78e:	4bab      	ldr	r3, [pc, #684]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b790:	2180      	movs	r1, #128	; 0x80
 800b792:	0549      	lsls	r1, r1, #21
 800b794:	430a      	orrs	r2, r1
 800b796:	63da      	str	r2, [r3, #60]	; 0x3c
 800b798:	4ba8      	ldr	r3, [pc, #672]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b79a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b79c:	2380      	movs	r3, #128	; 0x80
 800b79e:	055b      	lsls	r3, r3, #21
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	60fb      	str	r3, [r7, #12]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800b7a6:	231f      	movs	r3, #31
 800b7a8:	18fb      	adds	r3, r7, r3
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b7ae:	4ba4      	ldr	r3, [pc, #656]	; (800ba40 <HAL_RCC_OscConfig+0x61c>)
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	2380      	movs	r3, #128	; 0x80
 800b7b4:	005b      	lsls	r3, r3, #1
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	d11a      	bne.n	800b7f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b7ba:	4ba1      	ldr	r3, [pc, #644]	; (800ba40 <HAL_RCC_OscConfig+0x61c>)
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	4ba0      	ldr	r3, [pc, #640]	; (800ba40 <HAL_RCC_OscConfig+0x61c>)
 800b7c0:	2180      	movs	r1, #128	; 0x80
 800b7c2:	0049      	lsls	r1, r1, #1
 800b7c4:	430a      	orrs	r2, r1
 800b7c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800b7c8:	f7ff fb62 	bl	800ae90 <HAL_GetTick>
 800b7cc:	0003      	movs	r3, r0
 800b7ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b7d0:	e008      	b.n	800b7e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7d2:	f7ff fb5d 	bl	800ae90 <HAL_GetTick>
 800b7d6:	0002      	movs	r2, r0
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	d901      	bls.n	800b7e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	e127      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b7e4:	4b96      	ldr	r3, [pc, #600]	; (800ba40 <HAL_RCC_OscConfig+0x61c>)
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	2380      	movs	r3, #128	; 0x80
 800b7ea:	005b      	lsls	r3, r3, #1
 800b7ec:	4013      	ands	r3, r2
 800b7ee:	d0f0      	beq.n	800b7d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d106      	bne.n	800b806 <HAL_RCC_OscConfig+0x3e2>
 800b7f8:	4b90      	ldr	r3, [pc, #576]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b7fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b7fc:	4b8f      	ldr	r3, [pc, #572]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b7fe:	2101      	movs	r1, #1
 800b800:	430a      	orrs	r2, r1
 800b802:	65da      	str	r2, [r3, #92]	; 0x5c
 800b804:	e01c      	b.n	800b840 <HAL_RCC_OscConfig+0x41c>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	689b      	ldr	r3, [r3, #8]
 800b80a:	2b05      	cmp	r3, #5
 800b80c:	d10c      	bne.n	800b828 <HAL_RCC_OscConfig+0x404>
 800b80e:	4b8b      	ldr	r3, [pc, #556]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b810:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b812:	4b8a      	ldr	r3, [pc, #552]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b814:	2104      	movs	r1, #4
 800b816:	430a      	orrs	r2, r1
 800b818:	65da      	str	r2, [r3, #92]	; 0x5c
 800b81a:	4b88      	ldr	r3, [pc, #544]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b81c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b81e:	4b87      	ldr	r3, [pc, #540]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b820:	2101      	movs	r1, #1
 800b822:	430a      	orrs	r2, r1
 800b824:	65da      	str	r2, [r3, #92]	; 0x5c
 800b826:	e00b      	b.n	800b840 <HAL_RCC_OscConfig+0x41c>
 800b828:	4b84      	ldr	r3, [pc, #528]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b82a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b82c:	4b83      	ldr	r3, [pc, #524]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b82e:	2101      	movs	r1, #1
 800b830:	438a      	bics	r2, r1
 800b832:	65da      	str	r2, [r3, #92]	; 0x5c
 800b834:	4b81      	ldr	r3, [pc, #516]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b836:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b838:	4b80      	ldr	r3, [pc, #512]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b83a:	2104      	movs	r1, #4
 800b83c:	438a      	bics	r2, r1
 800b83e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d014      	beq.n	800b872 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b848:	f7ff fb22 	bl	800ae90 <HAL_GetTick>
 800b84c:	0003      	movs	r3, r0
 800b84e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b850:	e009      	b.n	800b866 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b852:	f7ff fb1d 	bl	800ae90 <HAL_GetTick>
 800b856:	0002      	movs	r2, r0
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	4a79      	ldr	r2, [pc, #484]	; (800ba44 <HAL_RCC_OscConfig+0x620>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d901      	bls.n	800b866 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800b862:	2303      	movs	r3, #3
 800b864:	e0e6      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b866:	4b75      	ldr	r3, [pc, #468]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b86a:	2202      	movs	r2, #2
 800b86c:	4013      	ands	r3, r2
 800b86e:	d0f0      	beq.n	800b852 <HAL_RCC_OscConfig+0x42e>
 800b870:	e013      	b.n	800b89a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b872:	f7ff fb0d 	bl	800ae90 <HAL_GetTick>
 800b876:	0003      	movs	r3, r0
 800b878:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b87a:	e009      	b.n	800b890 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b87c:	f7ff fb08 	bl	800ae90 <HAL_GetTick>
 800b880:	0002      	movs	r2, r0
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	1ad3      	subs	r3, r2, r3
 800b886:	4a6f      	ldr	r2, [pc, #444]	; (800ba44 <HAL_RCC_OscConfig+0x620>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d901      	bls.n	800b890 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800b88c:	2303      	movs	r3, #3
 800b88e:	e0d1      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b890:	4b6a      	ldr	r3, [pc, #424]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b894:	2202      	movs	r2, #2
 800b896:	4013      	ands	r3, r2
 800b898:	d1f0      	bne.n	800b87c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800b89a:	231f      	movs	r3, #31
 800b89c:	18fb      	adds	r3, r7, r3
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d105      	bne.n	800b8b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800b8a4:	4b65      	ldr	r3, [pc, #404]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b8a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8a8:	4b64      	ldr	r3, [pc, #400]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b8aa:	4967      	ldr	r1, [pc, #412]	; (800ba48 <HAL_RCC_OscConfig+0x624>)
 800b8ac:	400a      	ands	r2, r1
 800b8ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	69db      	ldr	r3, [r3, #28]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d100      	bne.n	800b8ba <HAL_RCC_OscConfig+0x496>
 800b8b8:	e0bb      	b.n	800ba32 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b8ba:	4b60      	ldr	r3, [pc, #384]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	2238      	movs	r2, #56	; 0x38
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	2b10      	cmp	r3, #16
 800b8c4:	d100      	bne.n	800b8c8 <HAL_RCC_OscConfig+0x4a4>
 800b8c6:	e07b      	b.n	800b9c0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	69db      	ldr	r3, [r3, #28]
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	d156      	bne.n	800b97e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8d0:	4b5a      	ldr	r3, [pc, #360]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	4b59      	ldr	r3, [pc, #356]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b8d6:	495d      	ldr	r1, [pc, #372]	; (800ba4c <HAL_RCC_OscConfig+0x628>)
 800b8d8:	400a      	ands	r2, r1
 800b8da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8dc:	f7ff fad8 	bl	800ae90 <HAL_GetTick>
 800b8e0:	0003      	movs	r3, r0
 800b8e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8e4:	e008      	b.n	800b8f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8e6:	f7ff fad3 	bl	800ae90 <HAL_GetTick>
 800b8ea:	0002      	movs	r2, r0
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	1ad3      	subs	r3, r2, r3
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d901      	bls.n	800b8f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800b8f4:	2303      	movs	r3, #3
 800b8f6:	e09d      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8f8:	4b50      	ldr	r3, [pc, #320]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	2380      	movs	r3, #128	; 0x80
 800b8fe:	049b      	lsls	r3, r3, #18
 800b900:	4013      	ands	r3, r2
 800b902:	d1f0      	bne.n	800b8e6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b904:	4b4d      	ldr	r3, [pc, #308]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	4a51      	ldr	r2, [pc, #324]	; (800ba50 <HAL_RCC_OscConfig+0x62c>)
 800b90a:	4013      	ands	r3, r2
 800b90c:	0019      	movs	r1, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a1a      	ldr	r2, [r3, #32]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b916:	431a      	orrs	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b91c:	021b      	lsls	r3, r3, #8
 800b91e:	431a      	orrs	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b924:	431a      	orrs	r2, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b92a:	431a      	orrs	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b930:	431a      	orrs	r2, r3
 800b932:	4b42      	ldr	r3, [pc, #264]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b934:	430a      	orrs	r2, r1
 800b936:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b938:	4b40      	ldr	r3, [pc, #256]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	4b3f      	ldr	r3, [pc, #252]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b93e:	2180      	movs	r1, #128	; 0x80
 800b940:	0449      	lsls	r1, r1, #17
 800b942:	430a      	orrs	r2, r1
 800b944:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800b946:	4b3d      	ldr	r3, [pc, #244]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b948:	68da      	ldr	r2, [r3, #12]
 800b94a:	4b3c      	ldr	r3, [pc, #240]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b94c:	2180      	movs	r1, #128	; 0x80
 800b94e:	0549      	lsls	r1, r1, #21
 800b950:	430a      	orrs	r2, r1
 800b952:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b954:	f7ff fa9c 	bl	800ae90 <HAL_GetTick>
 800b958:	0003      	movs	r3, r0
 800b95a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b95c:	e008      	b.n	800b970 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b95e:	f7ff fa97 	bl	800ae90 <HAL_GetTick>
 800b962:	0002      	movs	r2, r0
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d901      	bls.n	800b970 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800b96c:	2303      	movs	r3, #3
 800b96e:	e061      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b970:	4b32      	ldr	r3, [pc, #200]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	2380      	movs	r3, #128	; 0x80
 800b976:	049b      	lsls	r3, r3, #18
 800b978:	4013      	ands	r3, r2
 800b97a:	d0f0      	beq.n	800b95e <HAL_RCC_OscConfig+0x53a>
 800b97c:	e059      	b.n	800ba32 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b97e:	4b2f      	ldr	r3, [pc, #188]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	4b2e      	ldr	r3, [pc, #184]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b984:	4931      	ldr	r1, [pc, #196]	; (800ba4c <HAL_RCC_OscConfig+0x628>)
 800b986:	400a      	ands	r2, r1
 800b988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b98a:	f7ff fa81 	bl	800ae90 <HAL_GetTick>
 800b98e:	0003      	movs	r3, r0
 800b990:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b992:	e008      	b.n	800b9a6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b994:	f7ff fa7c 	bl	800ae90 <HAL_GetTick>
 800b998:	0002      	movs	r2, r0
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d901      	bls.n	800b9a6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800b9a2:	2303      	movs	r3, #3
 800b9a4:	e046      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b9a6:	4b25      	ldr	r3, [pc, #148]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	2380      	movs	r3, #128	; 0x80
 800b9ac:	049b      	lsls	r3, r3, #18
 800b9ae:	4013      	ands	r3, r2
 800b9b0:	d1f0      	bne.n	800b994 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800b9b2:	4b22      	ldr	r3, [pc, #136]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b9b4:	68da      	ldr	r2, [r3, #12]
 800b9b6:	4b21      	ldr	r3, [pc, #132]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b9b8:	4926      	ldr	r1, [pc, #152]	; (800ba54 <HAL_RCC_OscConfig+0x630>)
 800b9ba:	400a      	ands	r2, r1
 800b9bc:	60da      	str	r2, [r3, #12]
 800b9be:	e038      	b.n	800ba32 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	69db      	ldr	r3, [r3, #28]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d101      	bne.n	800b9cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	e033      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800b9cc:	4b1b      	ldr	r3, [pc, #108]	; (800ba3c <HAL_RCC_OscConfig+0x618>)
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2203      	movs	r2, #3
 800b9d6:	401a      	ands	r2, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6a1b      	ldr	r3, [r3, #32]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d126      	bne.n	800ba2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	2270      	movs	r2, #112	; 0x70
 800b9e4:	401a      	ands	r2, r3
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d11f      	bne.n	800ba2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	23fe      	movs	r3, #254	; 0xfe
 800b9f2:	01db      	lsls	r3, r3, #7
 800b9f4:	401a      	ands	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d116      	bne.n	800ba2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ba00:	697a      	ldr	r2, [r7, #20]
 800ba02:	23f8      	movs	r3, #248	; 0xf8
 800ba04:	039b      	lsls	r3, r3, #14
 800ba06:	401a      	ands	r2, r3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d10e      	bne.n	800ba2e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ba10:	697a      	ldr	r2, [r7, #20]
 800ba12:	23e0      	movs	r3, #224	; 0xe0
 800ba14:	051b      	lsls	r3, r3, #20
 800ba16:	401a      	ands	r2, r3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d106      	bne.n	800ba2e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	0f5b      	lsrs	r3, r3, #29
 800ba24:	075a      	lsls	r2, r3, #29
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d001      	beq.n	800ba32 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e000      	b.n	800ba34 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	0018      	movs	r0, r3
 800ba36:	46bd      	mov	sp, r7
 800ba38:	b008      	add	sp, #32
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	40021000 	.word	0x40021000
 800ba40:	40007000 	.word	0x40007000
 800ba44:	00001388 	.word	0x00001388
 800ba48:	efffffff 	.word	0xefffffff
 800ba4c:	feffffff 	.word	0xfeffffff
 800ba50:	11c1808c 	.word	0x11c1808c
 800ba54:	eefefffc 	.word	0xeefefffc

0800ba58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d101      	bne.n	800ba6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e0e9      	b.n	800bc40 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ba6c:	4b76      	ldr	r3, [pc, #472]	; (800bc48 <HAL_RCC_ClockConfig+0x1f0>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2207      	movs	r2, #7
 800ba72:	4013      	ands	r3, r2
 800ba74:	683a      	ldr	r2, [r7, #0]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d91e      	bls.n	800bab8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba7a:	4b73      	ldr	r3, [pc, #460]	; (800bc48 <HAL_RCC_ClockConfig+0x1f0>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2207      	movs	r2, #7
 800ba80:	4393      	bics	r3, r2
 800ba82:	0019      	movs	r1, r3
 800ba84:	4b70      	ldr	r3, [pc, #448]	; (800bc48 <HAL_RCC_ClockConfig+0x1f0>)
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	430a      	orrs	r2, r1
 800ba8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ba8c:	f7ff fa00 	bl	800ae90 <HAL_GetTick>
 800ba90:	0003      	movs	r3, r0
 800ba92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ba94:	e009      	b.n	800baaa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba96:	f7ff f9fb 	bl	800ae90 <HAL_GetTick>
 800ba9a:	0002      	movs	r2, r0
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	1ad3      	subs	r3, r2, r3
 800baa0:	4a6a      	ldr	r2, [pc, #424]	; (800bc4c <HAL_RCC_ClockConfig+0x1f4>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d901      	bls.n	800baaa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800baa6:	2303      	movs	r3, #3
 800baa8:	e0ca      	b.n	800bc40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800baaa:	4b67      	ldr	r3, [pc, #412]	; (800bc48 <HAL_RCC_ClockConfig+0x1f0>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2207      	movs	r2, #7
 800bab0:	4013      	ands	r3, r2
 800bab2:	683a      	ldr	r2, [r7, #0]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d1ee      	bne.n	800ba96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2202      	movs	r2, #2
 800babe:	4013      	ands	r3, r2
 800bac0:	d015      	beq.n	800baee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	2204      	movs	r2, #4
 800bac8:	4013      	ands	r3, r2
 800baca:	d006      	beq.n	800bada <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800bacc:	4b60      	ldr	r3, [pc, #384]	; (800bc50 <HAL_RCC_ClockConfig+0x1f8>)
 800bace:	689a      	ldr	r2, [r3, #8]
 800bad0:	4b5f      	ldr	r3, [pc, #380]	; (800bc50 <HAL_RCC_ClockConfig+0x1f8>)
 800bad2:	21e0      	movs	r1, #224	; 0xe0
 800bad4:	01c9      	lsls	r1, r1, #7
 800bad6:	430a      	orrs	r2, r1
 800bad8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bada:	4b5d      	ldr	r3, [pc, #372]	; (800bc50 <HAL_RCC_ClockConfig+0x1f8>)
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	4a5d      	ldr	r2, [pc, #372]	; (800bc54 <HAL_RCC_ClockConfig+0x1fc>)
 800bae0:	4013      	ands	r3, r2
 800bae2:	0019      	movs	r1, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	689a      	ldr	r2, [r3, #8]
 800bae8:	4b59      	ldr	r3, [pc, #356]	; (800bc50 <HAL_RCC_ClockConfig+0x1f8>)
 800baea:	430a      	orrs	r2, r1
 800baec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2201      	movs	r2, #1
 800baf4:	4013      	ands	r3, r2
 800baf6:	d057      	beq.n	800bba8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d107      	bne.n	800bb10 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bb00:	4b53      	ldr	r3, [pc, #332]	; (800bc50 <HAL_RCC_ClockConfig+0x1f8>)
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	2380      	movs	r3, #128	; 0x80
 800bb06:	029b      	lsls	r3, r3, #10
 800bb08:	4013      	ands	r3, r2
 800bb0a:	d12b      	bne.n	800bb64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	e097      	b.n	800bc40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	d107      	bne.n	800bb28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bb18:	4b4d      	ldr	r3, [pc, #308]	; (800bc50 <HAL_RCC_ClockConfig+0x1f8>)
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	2380      	movs	r3, #128	; 0x80
 800bb1e:	049b      	lsls	r3, r3, #18
 800bb20:	4013      	ands	r3, r2
 800bb22:	d11f      	bne.n	800bb64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800bb24:	2301      	movs	r3, #1
 800bb26:	e08b      	b.n	800bc40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d107      	bne.n	800bb40 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bb30:	4b47      	ldr	r3, [pc, #284]	; (800bc50 <HAL_RCC_ClockConfig+0x1f8>)
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	2380      	movs	r3, #128	; 0x80
 800bb36:	00db      	lsls	r3, r3, #3
 800bb38:	4013      	ands	r3, r2
 800bb3a:	d113      	bne.n	800bb64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	e07f      	b.n	800bc40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	2b03      	cmp	r3, #3
 800bb46:	d106      	bne.n	800bb56 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bb48:	4b41      	ldr	r3, [pc, #260]	; (800bc50 <HAL_RCC_ClockConfig+0x1f8>)
 800bb4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb4c:	2202      	movs	r2, #2
 800bb4e:	4013      	ands	r3, r2
 800bb50:	d108      	bne.n	800bb64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800bb52:	2301      	movs	r3, #1
 800bb54:	e074      	b.n	800bc40 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb56:	4b3e      	ldr	r3, [pc, #248]	; (800bc50 <HAL_RCC_ClockConfig+0x1f8>)
 800bb58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb5a:	2202      	movs	r2, #2
 800bb5c:	4013      	ands	r3, r2
 800bb5e:	d101      	bne.n	800bb64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e06d      	b.n	800bc40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bb64:	4b3a      	ldr	r3, [pc, #232]	; (800bc50 <HAL_RCC_ClockConfig+0x1f8>)
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	2207      	movs	r2, #7
 800bb6a:	4393      	bics	r3, r2
 800bb6c:	0019      	movs	r1, r3
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	685a      	ldr	r2, [r3, #4]
 800bb72:	4b37      	ldr	r3, [pc, #220]	; (800bc50 <HAL_RCC_ClockConfig+0x1f8>)
 800bb74:	430a      	orrs	r2, r1
 800bb76:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb78:	f7ff f98a 	bl	800ae90 <HAL_GetTick>
 800bb7c:	0003      	movs	r3, r0
 800bb7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb80:	e009      	b.n	800bb96 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb82:	f7ff f985 	bl	800ae90 <HAL_GetTick>
 800bb86:	0002      	movs	r2, r0
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	1ad3      	subs	r3, r2, r3
 800bb8c:	4a2f      	ldr	r2, [pc, #188]	; (800bc4c <HAL_RCC_ClockConfig+0x1f4>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d901      	bls.n	800bb96 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800bb92:	2303      	movs	r3, #3
 800bb94:	e054      	b.n	800bc40 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb96:	4b2e      	ldr	r3, [pc, #184]	; (800bc50 <HAL_RCC_ClockConfig+0x1f8>)
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	2238      	movs	r2, #56	; 0x38
 800bb9c:	401a      	ands	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	00db      	lsls	r3, r3, #3
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d1ec      	bne.n	800bb82 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bba8:	4b27      	ldr	r3, [pc, #156]	; (800bc48 <HAL_RCC_ClockConfig+0x1f0>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	2207      	movs	r2, #7
 800bbae:	4013      	ands	r3, r2
 800bbb0:	683a      	ldr	r2, [r7, #0]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d21e      	bcs.n	800bbf4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbb6:	4b24      	ldr	r3, [pc, #144]	; (800bc48 <HAL_RCC_ClockConfig+0x1f0>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2207      	movs	r2, #7
 800bbbc:	4393      	bics	r3, r2
 800bbbe:	0019      	movs	r1, r3
 800bbc0:	4b21      	ldr	r3, [pc, #132]	; (800bc48 <HAL_RCC_ClockConfig+0x1f0>)
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	430a      	orrs	r2, r1
 800bbc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bbc8:	f7ff f962 	bl	800ae90 <HAL_GetTick>
 800bbcc:	0003      	movs	r3, r0
 800bbce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800bbd0:	e009      	b.n	800bbe6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bbd2:	f7ff f95d 	bl	800ae90 <HAL_GetTick>
 800bbd6:	0002      	movs	r2, r0
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	4a1b      	ldr	r2, [pc, #108]	; (800bc4c <HAL_RCC_ClockConfig+0x1f4>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d901      	bls.n	800bbe6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800bbe2:	2303      	movs	r3, #3
 800bbe4:	e02c      	b.n	800bc40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800bbe6:	4b18      	ldr	r3, [pc, #96]	; (800bc48 <HAL_RCC_ClockConfig+0x1f0>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2207      	movs	r2, #7
 800bbec:	4013      	ands	r3, r2
 800bbee:	683a      	ldr	r2, [r7, #0]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d1ee      	bne.n	800bbd2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2204      	movs	r2, #4
 800bbfa:	4013      	ands	r3, r2
 800bbfc:	d009      	beq.n	800bc12 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800bbfe:	4b14      	ldr	r3, [pc, #80]	; (800bc50 <HAL_RCC_ClockConfig+0x1f8>)
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	4a15      	ldr	r2, [pc, #84]	; (800bc58 <HAL_RCC_ClockConfig+0x200>)
 800bc04:	4013      	ands	r3, r2
 800bc06:	0019      	movs	r1, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	68da      	ldr	r2, [r3, #12]
 800bc0c:	4b10      	ldr	r3, [pc, #64]	; (800bc50 <HAL_RCC_ClockConfig+0x1f8>)
 800bc0e:	430a      	orrs	r2, r1
 800bc10:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800bc12:	f000 f829 	bl	800bc68 <HAL_RCC_GetSysClockFreq>
 800bc16:	0001      	movs	r1, r0
 800bc18:	4b0d      	ldr	r3, [pc, #52]	; (800bc50 <HAL_RCC_ClockConfig+0x1f8>)
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	0a1b      	lsrs	r3, r3, #8
 800bc1e:	220f      	movs	r2, #15
 800bc20:	401a      	ands	r2, r3
 800bc22:	4b0e      	ldr	r3, [pc, #56]	; (800bc5c <HAL_RCC_ClockConfig+0x204>)
 800bc24:	0092      	lsls	r2, r2, #2
 800bc26:	58d3      	ldr	r3, [r2, r3]
 800bc28:	221f      	movs	r2, #31
 800bc2a:	4013      	ands	r3, r2
 800bc2c:	000a      	movs	r2, r1
 800bc2e:	40da      	lsrs	r2, r3
 800bc30:	4b0b      	ldr	r3, [pc, #44]	; (800bc60 <HAL_RCC_ClockConfig+0x208>)
 800bc32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800bc34:	4b0b      	ldr	r3, [pc, #44]	; (800bc64 <HAL_RCC_ClockConfig+0x20c>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	0018      	movs	r0, r3
 800bc3a:	f7ff f8cd 	bl	800add8 <HAL_InitTick>
 800bc3e:	0003      	movs	r3, r0
}
 800bc40:	0018      	movs	r0, r3
 800bc42:	46bd      	mov	sp, r7
 800bc44:	b004      	add	sp, #16
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	40022000 	.word	0x40022000
 800bc4c:	00001388 	.word	0x00001388
 800bc50:	40021000 	.word	0x40021000
 800bc54:	fffff0ff 	.word	0xfffff0ff
 800bc58:	ffff8fff 	.word	0xffff8fff
 800bc5c:	0800d9cc 	.word	0x0800d9cc
 800bc60:	20000000 	.word	0x20000000
 800bc64:	20000004 	.word	0x20000004

0800bc68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bc6e:	4b3c      	ldr	r3, [pc, #240]	; (800bd60 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bc70:	689b      	ldr	r3, [r3, #8]
 800bc72:	2238      	movs	r2, #56	; 0x38
 800bc74:	4013      	ands	r3, r2
 800bc76:	d10f      	bne.n	800bc98 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800bc78:	4b39      	ldr	r3, [pc, #228]	; (800bd60 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	0adb      	lsrs	r3, r3, #11
 800bc7e:	2207      	movs	r2, #7
 800bc80:	4013      	ands	r3, r2
 800bc82:	2201      	movs	r2, #1
 800bc84:	409a      	lsls	r2, r3
 800bc86:	0013      	movs	r3, r2
 800bc88:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800bc8a:	6839      	ldr	r1, [r7, #0]
 800bc8c:	4835      	ldr	r0, [pc, #212]	; (800bd64 <HAL_RCC_GetSysClockFreq+0xfc>)
 800bc8e:	f7fe fb39 	bl	800a304 <__udivsi3>
 800bc92:	0003      	movs	r3, r0
 800bc94:	613b      	str	r3, [r7, #16]
 800bc96:	e05d      	b.n	800bd54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bc98:	4b31      	ldr	r3, [pc, #196]	; (800bd60 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	2238      	movs	r2, #56	; 0x38
 800bc9e:	4013      	ands	r3, r2
 800bca0:	2b08      	cmp	r3, #8
 800bca2:	d102      	bne.n	800bcaa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bca4:	4b30      	ldr	r3, [pc, #192]	; (800bd68 <HAL_RCC_GetSysClockFreq+0x100>)
 800bca6:	613b      	str	r3, [r7, #16]
 800bca8:	e054      	b.n	800bd54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bcaa:	4b2d      	ldr	r3, [pc, #180]	; (800bd60 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	2238      	movs	r2, #56	; 0x38
 800bcb0:	4013      	ands	r3, r2
 800bcb2:	2b10      	cmp	r3, #16
 800bcb4:	d138      	bne.n	800bd28 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800bcb6:	4b2a      	ldr	r3, [pc, #168]	; (800bd60 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	2203      	movs	r2, #3
 800bcbc:	4013      	ands	r3, r2
 800bcbe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bcc0:	4b27      	ldr	r3, [pc, #156]	; (800bd60 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	091b      	lsrs	r3, r3, #4
 800bcc6:	2207      	movs	r2, #7
 800bcc8:	4013      	ands	r3, r2
 800bcca:	3301      	adds	r3, #1
 800bccc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2b03      	cmp	r3, #3
 800bcd2:	d10d      	bne.n	800bcf0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bcd4:	68b9      	ldr	r1, [r7, #8]
 800bcd6:	4824      	ldr	r0, [pc, #144]	; (800bd68 <HAL_RCC_GetSysClockFreq+0x100>)
 800bcd8:	f7fe fb14 	bl	800a304 <__udivsi3>
 800bcdc:	0003      	movs	r3, r0
 800bcde:	0019      	movs	r1, r3
 800bce0:	4b1f      	ldr	r3, [pc, #124]	; (800bd60 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	0a1b      	lsrs	r3, r3, #8
 800bce6:	227f      	movs	r2, #127	; 0x7f
 800bce8:	4013      	ands	r3, r2
 800bcea:	434b      	muls	r3, r1
 800bcec:	617b      	str	r3, [r7, #20]
        break;
 800bcee:	e00d      	b.n	800bd0c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800bcf0:	68b9      	ldr	r1, [r7, #8]
 800bcf2:	481c      	ldr	r0, [pc, #112]	; (800bd64 <HAL_RCC_GetSysClockFreq+0xfc>)
 800bcf4:	f7fe fb06 	bl	800a304 <__udivsi3>
 800bcf8:	0003      	movs	r3, r0
 800bcfa:	0019      	movs	r1, r3
 800bcfc:	4b18      	ldr	r3, [pc, #96]	; (800bd60 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	0a1b      	lsrs	r3, r3, #8
 800bd02:	227f      	movs	r2, #127	; 0x7f
 800bd04:	4013      	ands	r3, r2
 800bd06:	434b      	muls	r3, r1
 800bd08:	617b      	str	r3, [r7, #20]
        break;
 800bd0a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800bd0c:	4b14      	ldr	r3, [pc, #80]	; (800bd60 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	0f5b      	lsrs	r3, r3, #29
 800bd12:	2207      	movs	r2, #7
 800bd14:	4013      	ands	r3, r2
 800bd16:	3301      	adds	r3, #1
 800bd18:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800bd1a:	6879      	ldr	r1, [r7, #4]
 800bd1c:	6978      	ldr	r0, [r7, #20]
 800bd1e:	f7fe faf1 	bl	800a304 <__udivsi3>
 800bd22:	0003      	movs	r3, r0
 800bd24:	613b      	str	r3, [r7, #16]
 800bd26:	e015      	b.n	800bd54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800bd28:	4b0d      	ldr	r3, [pc, #52]	; (800bd60 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	2238      	movs	r2, #56	; 0x38
 800bd2e:	4013      	ands	r3, r2
 800bd30:	2b20      	cmp	r3, #32
 800bd32:	d103      	bne.n	800bd3c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800bd34:	2380      	movs	r3, #128	; 0x80
 800bd36:	021b      	lsls	r3, r3, #8
 800bd38:	613b      	str	r3, [r7, #16]
 800bd3a:	e00b      	b.n	800bd54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800bd3c:	4b08      	ldr	r3, [pc, #32]	; (800bd60 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	2238      	movs	r2, #56	; 0x38
 800bd42:	4013      	ands	r3, r2
 800bd44:	2b18      	cmp	r3, #24
 800bd46:	d103      	bne.n	800bd50 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800bd48:	23fa      	movs	r3, #250	; 0xfa
 800bd4a:	01db      	lsls	r3, r3, #7
 800bd4c:	613b      	str	r3, [r7, #16]
 800bd4e:	e001      	b.n	800bd54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800bd50:	2300      	movs	r3, #0
 800bd52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bd54:	693b      	ldr	r3, [r7, #16]
}
 800bd56:	0018      	movs	r0, r3
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	b006      	add	sp, #24
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	46c0      	nop			; (mov r8, r8)
 800bd60:	40021000 	.word	0x40021000
 800bd64:	00f42400 	.word	0x00f42400
 800bd68:	007a1200 	.word	0x007a1200

0800bd6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bd70:	4b02      	ldr	r3, [pc, #8]	; (800bd7c <HAL_RCC_GetHCLKFreq+0x10>)
 800bd72:	681b      	ldr	r3, [r3, #0]
}
 800bd74:	0018      	movs	r0, r3
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	46c0      	nop			; (mov r8, r8)
 800bd7c:	20000000 	.word	0x20000000

0800bd80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bd80:	b5b0      	push	{r4, r5, r7, lr}
 800bd82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800bd84:	f7ff fff2 	bl	800bd6c <HAL_RCC_GetHCLKFreq>
 800bd88:	0004      	movs	r4, r0
 800bd8a:	f7ff fb3f 	bl	800b40c <LL_RCC_GetAPB1Prescaler>
 800bd8e:	0003      	movs	r3, r0
 800bd90:	0b1a      	lsrs	r2, r3, #12
 800bd92:	4b05      	ldr	r3, [pc, #20]	; (800bda8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bd94:	0092      	lsls	r2, r2, #2
 800bd96:	58d3      	ldr	r3, [r2, r3]
 800bd98:	221f      	movs	r2, #31
 800bd9a:	4013      	ands	r3, r2
 800bd9c:	40dc      	lsrs	r4, r3
 800bd9e:	0023      	movs	r3, r4
}
 800bda0:	0018      	movs	r0, r3
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bdb0      	pop	{r4, r5, r7, pc}
 800bda6:	46c0      	nop			; (mov r8, r8)
 800bda8:	0800da0c 	.word	0x0800da0c

0800bdac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b086      	sub	sp, #24
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800bdb4:	2313      	movs	r3, #19
 800bdb6:	18fb      	adds	r3, r7, r3
 800bdb8:	2200      	movs	r2, #0
 800bdba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bdbc:	2312      	movs	r3, #18
 800bdbe:	18fb      	adds	r3, r7, r3
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	2380      	movs	r3, #128	; 0x80
 800bdca:	029b      	lsls	r3, r3, #10
 800bdcc:	4013      	ands	r3, r2
 800bdce:	d100      	bne.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800bdd0:	e0a3      	b.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bdd2:	2011      	movs	r0, #17
 800bdd4:	183b      	adds	r3, r7, r0
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bdda:	4bc3      	ldr	r3, [pc, #780]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdde:	2380      	movs	r3, #128	; 0x80
 800bde0:	055b      	lsls	r3, r3, #21
 800bde2:	4013      	ands	r3, r2
 800bde4:	d110      	bne.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bde6:	4bc0      	ldr	r3, [pc, #768]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bde8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdea:	4bbf      	ldr	r3, [pc, #764]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bdec:	2180      	movs	r1, #128	; 0x80
 800bdee:	0549      	lsls	r1, r1, #21
 800bdf0:	430a      	orrs	r2, r1
 800bdf2:	63da      	str	r2, [r3, #60]	; 0x3c
 800bdf4:	4bbc      	ldr	r3, [pc, #752]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bdf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdf8:	2380      	movs	r3, #128	; 0x80
 800bdfa:	055b      	lsls	r3, r3, #21
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	60bb      	str	r3, [r7, #8]
 800be00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800be02:	183b      	adds	r3, r7, r0
 800be04:	2201      	movs	r2, #1
 800be06:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be08:	4bb8      	ldr	r3, [pc, #736]	; (800c0ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	4bb7      	ldr	r3, [pc, #732]	; (800c0ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800be0e:	2180      	movs	r1, #128	; 0x80
 800be10:	0049      	lsls	r1, r1, #1
 800be12:	430a      	orrs	r2, r1
 800be14:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800be16:	f7ff f83b 	bl	800ae90 <HAL_GetTick>
 800be1a:	0003      	movs	r3, r0
 800be1c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be1e:	e00b      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be20:	f7ff f836 	bl	800ae90 <HAL_GetTick>
 800be24:	0002      	movs	r2, r0
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	d904      	bls.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800be2e:	2313      	movs	r3, #19
 800be30:	18fb      	adds	r3, r7, r3
 800be32:	2203      	movs	r2, #3
 800be34:	701a      	strb	r2, [r3, #0]
        break;
 800be36:	e005      	b.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be38:	4bac      	ldr	r3, [pc, #688]	; (800c0ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	2380      	movs	r3, #128	; 0x80
 800be3e:	005b      	lsls	r3, r3, #1
 800be40:	4013      	ands	r3, r2
 800be42:	d0ed      	beq.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800be44:	2313      	movs	r3, #19
 800be46:	18fb      	adds	r3, r7, r3
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d154      	bne.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800be4e:	4ba6      	ldr	r3, [pc, #664]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800be50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be52:	23c0      	movs	r3, #192	; 0xc0
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	4013      	ands	r3, r2
 800be58:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d019      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be64:	697a      	ldr	r2, [r7, #20]
 800be66:	429a      	cmp	r2, r3
 800be68:	d014      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800be6a:	4b9f      	ldr	r3, [pc, #636]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800be6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be6e:	4aa0      	ldr	r2, [pc, #640]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800be70:	4013      	ands	r3, r2
 800be72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800be74:	4b9c      	ldr	r3, [pc, #624]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800be76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be78:	4b9b      	ldr	r3, [pc, #620]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800be7a:	2180      	movs	r1, #128	; 0x80
 800be7c:	0249      	lsls	r1, r1, #9
 800be7e:	430a      	orrs	r2, r1
 800be80:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800be82:	4b99      	ldr	r3, [pc, #612]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800be84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be86:	4b98      	ldr	r3, [pc, #608]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800be88:	499a      	ldr	r1, [pc, #616]	; (800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800be8a:	400a      	ands	r2, r1
 800be8c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800be8e:	4b96      	ldr	r3, [pc, #600]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800be90:	697a      	ldr	r2, [r7, #20]
 800be92:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	2201      	movs	r2, #1
 800be98:	4013      	ands	r3, r2
 800be9a:	d016      	beq.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be9c:	f7fe fff8 	bl	800ae90 <HAL_GetTick>
 800bea0:	0003      	movs	r3, r0
 800bea2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bea4:	e00c      	b.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bea6:	f7fe fff3 	bl	800ae90 <HAL_GetTick>
 800beaa:	0002      	movs	r2, r0
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	4a91      	ldr	r2, [pc, #580]	; (800c0f8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d904      	bls.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800beb6:	2313      	movs	r3, #19
 800beb8:	18fb      	adds	r3, r7, r3
 800beba:	2203      	movs	r2, #3
 800bebc:	701a      	strb	r2, [r3, #0]
            break;
 800bebe:	e004      	b.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bec0:	4b89      	ldr	r3, [pc, #548]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bec4:	2202      	movs	r2, #2
 800bec6:	4013      	ands	r3, r2
 800bec8:	d0ed      	beq.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800beca:	2313      	movs	r3, #19
 800becc:	18fb      	adds	r3, r7, r3
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10a      	bne.n	800beea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bed4:	4b84      	ldr	r3, [pc, #528]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bed8:	4a85      	ldr	r2, [pc, #532]	; (800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800beda:	4013      	ands	r3, r2
 800bedc:	0019      	movs	r1, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bee2:	4b81      	ldr	r3, [pc, #516]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bee4:	430a      	orrs	r2, r1
 800bee6:	65da      	str	r2, [r3, #92]	; 0x5c
 800bee8:	e00c      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800beea:	2312      	movs	r3, #18
 800beec:	18fb      	adds	r3, r7, r3
 800beee:	2213      	movs	r2, #19
 800bef0:	18ba      	adds	r2, r7, r2
 800bef2:	7812      	ldrb	r2, [r2, #0]
 800bef4:	701a      	strb	r2, [r3, #0]
 800bef6:	e005      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bef8:	2312      	movs	r3, #18
 800befa:	18fb      	adds	r3, r7, r3
 800befc:	2213      	movs	r2, #19
 800befe:	18ba      	adds	r2, r7, r2
 800bf00:	7812      	ldrb	r2, [r2, #0]
 800bf02:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bf04:	2311      	movs	r3, #17
 800bf06:	18fb      	adds	r3, r7, r3
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d105      	bne.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bf0e:	4b76      	ldr	r3, [pc, #472]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bf10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf12:	4b75      	ldr	r3, [pc, #468]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bf14:	4979      	ldr	r1, [pc, #484]	; (800c0fc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800bf16:	400a      	ands	r2, r1
 800bf18:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	4013      	ands	r3, r2
 800bf22:	d009      	beq.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bf24:	4b70      	ldr	r3, [pc, #448]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bf26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf28:	2203      	movs	r2, #3
 800bf2a:	4393      	bics	r3, r2
 800bf2c:	0019      	movs	r1, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	685a      	ldr	r2, [r3, #4]
 800bf32:	4b6d      	ldr	r3, [pc, #436]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bf34:	430a      	orrs	r2, r1
 800bf36:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2202      	movs	r2, #2
 800bf3e:	4013      	ands	r3, r2
 800bf40:	d009      	beq.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bf42:	4b69      	ldr	r3, [pc, #420]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bf44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf46:	220c      	movs	r2, #12
 800bf48:	4393      	bics	r3, r2
 800bf4a:	0019      	movs	r1, r3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	689a      	ldr	r2, [r3, #8]
 800bf50:	4b65      	ldr	r3, [pc, #404]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bf52:	430a      	orrs	r2, r1
 800bf54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2210      	movs	r2, #16
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	d009      	beq.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bf60:	4b61      	ldr	r3, [pc, #388]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bf62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf64:	4a66      	ldr	r2, [pc, #408]	; (800c100 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800bf66:	4013      	ands	r3, r2
 800bf68:	0019      	movs	r1, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	68da      	ldr	r2, [r3, #12]
 800bf6e:	4b5e      	ldr	r3, [pc, #376]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bf70:	430a      	orrs	r2, r1
 800bf72:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	2380      	movs	r3, #128	; 0x80
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	4013      	ands	r3, r2
 800bf7e:	d009      	beq.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bf80:	4b59      	ldr	r3, [pc, #356]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bf82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf84:	4a5f      	ldr	r2, [pc, #380]	; (800c104 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800bf86:	4013      	ands	r3, r2
 800bf88:	0019      	movs	r1, r3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	699a      	ldr	r2, [r3, #24]
 800bf8e:	4b56      	ldr	r3, [pc, #344]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bf90:	430a      	orrs	r2, r1
 800bf92:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	2380      	movs	r3, #128	; 0x80
 800bf9a:	00db      	lsls	r3, r3, #3
 800bf9c:	4013      	ands	r3, r2
 800bf9e:	d009      	beq.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bfa0:	4b51      	ldr	r3, [pc, #324]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bfa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfa4:	4a58      	ldr	r2, [pc, #352]	; (800c108 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800bfa6:	4013      	ands	r3, r2
 800bfa8:	0019      	movs	r1, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	69da      	ldr	r2, [r3, #28]
 800bfae:	4b4e      	ldr	r3, [pc, #312]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bfb0:	430a      	orrs	r2, r1
 800bfb2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2220      	movs	r2, #32
 800bfba:	4013      	ands	r3, r2
 800bfbc:	d009      	beq.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bfbe:	4b4a      	ldr	r3, [pc, #296]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bfc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfc2:	4a52      	ldr	r2, [pc, #328]	; (800c10c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800bfc4:	4013      	ands	r3, r2
 800bfc6:	0019      	movs	r1, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	691a      	ldr	r2, [r3, #16]
 800bfcc:	4b46      	ldr	r3, [pc, #280]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bfce:	430a      	orrs	r2, r1
 800bfd0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	2380      	movs	r3, #128	; 0x80
 800bfd8:	01db      	lsls	r3, r3, #7
 800bfda:	4013      	ands	r3, r2
 800bfdc:	d015      	beq.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bfde:	4b42      	ldr	r3, [pc, #264]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bfe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	0899      	lsrs	r1, r3, #2
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6a1a      	ldr	r2, [r3, #32]
 800bfea:	4b3f      	ldr	r3, [pc, #252]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bfec:	430a      	orrs	r2, r1
 800bfee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6a1a      	ldr	r2, [r3, #32]
 800bff4:	2380      	movs	r3, #128	; 0x80
 800bff6:	05db      	lsls	r3, r3, #23
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d106      	bne.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800bffc:	4b3a      	ldr	r3, [pc, #232]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800bffe:	68da      	ldr	r2, [r3, #12]
 800c000:	4b39      	ldr	r3, [pc, #228]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c002:	2180      	movs	r1, #128	; 0x80
 800c004:	0249      	lsls	r1, r1, #9
 800c006:	430a      	orrs	r2, r1
 800c008:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	2380      	movs	r3, #128	; 0x80
 800c010:	031b      	lsls	r3, r3, #12
 800c012:	4013      	ands	r3, r2
 800c014:	d009      	beq.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c016:	4b34      	ldr	r3, [pc, #208]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c01a:	2240      	movs	r2, #64	; 0x40
 800c01c:	4393      	bics	r3, r2
 800c01e:	0019      	movs	r1, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c024:	4b30      	ldr	r3, [pc, #192]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c026:	430a      	orrs	r2, r1
 800c028:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	2380      	movs	r3, #128	; 0x80
 800c030:	039b      	lsls	r3, r3, #14
 800c032:	4013      	ands	r3, r2
 800c034:	d016      	beq.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800c036:	4b2c      	ldr	r3, [pc, #176]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c03a:	4a35      	ldr	r2, [pc, #212]	; (800c110 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800c03c:	4013      	ands	r3, r2
 800c03e:	0019      	movs	r1, r3
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c044:	4b28      	ldr	r3, [pc, #160]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c046:	430a      	orrs	r2, r1
 800c048:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c04e:	2380      	movs	r3, #128	; 0x80
 800c050:	03db      	lsls	r3, r3, #15
 800c052:	429a      	cmp	r2, r3
 800c054:	d106      	bne.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c056:	4b24      	ldr	r3, [pc, #144]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c058:	68da      	ldr	r2, [r3, #12]
 800c05a:	4b23      	ldr	r3, [pc, #140]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c05c:	2180      	movs	r1, #128	; 0x80
 800c05e:	0449      	lsls	r1, r1, #17
 800c060:	430a      	orrs	r2, r1
 800c062:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	2380      	movs	r3, #128	; 0x80
 800c06a:	03db      	lsls	r3, r3, #15
 800c06c:	4013      	ands	r3, r2
 800c06e:	d016      	beq.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800c070:	4b1d      	ldr	r3, [pc, #116]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c074:	4a27      	ldr	r2, [pc, #156]	; (800c114 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800c076:	4013      	ands	r3, r2
 800c078:	0019      	movs	r1, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c07e:	4b1a      	ldr	r3, [pc, #104]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c080:	430a      	orrs	r2, r1
 800c082:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c088:	2380      	movs	r3, #128	; 0x80
 800c08a:	045b      	lsls	r3, r3, #17
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d106      	bne.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c090:	4b15      	ldr	r3, [pc, #84]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c092:	68da      	ldr	r2, [r3, #12]
 800c094:	4b14      	ldr	r3, [pc, #80]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c096:	2180      	movs	r1, #128	; 0x80
 800c098:	0449      	lsls	r1, r1, #17
 800c09a:	430a      	orrs	r2, r1
 800c09c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	2380      	movs	r3, #128	; 0x80
 800c0a4:	011b      	lsls	r3, r3, #4
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	d016      	beq.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800c0aa:	4b0f      	ldr	r3, [pc, #60]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ae:	4a1a      	ldr	r2, [pc, #104]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	0019      	movs	r1, r3
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	695a      	ldr	r2, [r3, #20]
 800c0b8:	4b0b      	ldr	r3, [pc, #44]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c0ba:	430a      	orrs	r2, r1
 800c0bc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	695a      	ldr	r2, [r3, #20]
 800c0c2:	2380      	movs	r3, #128	; 0x80
 800c0c4:	01db      	lsls	r3, r3, #7
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d106      	bne.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c0ca:	4b07      	ldr	r3, [pc, #28]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c0cc:	68da      	ldr	r2, [r3, #12]
 800c0ce:	4b06      	ldr	r3, [pc, #24]	; (800c0e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800c0d0:	2180      	movs	r1, #128	; 0x80
 800c0d2:	0249      	lsls	r1, r1, #9
 800c0d4:	430a      	orrs	r2, r1
 800c0d6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800c0d8:	2312      	movs	r3, #18
 800c0da:	18fb      	adds	r3, r7, r3
 800c0dc:	781b      	ldrb	r3, [r3, #0]
}
 800c0de:	0018      	movs	r0, r3
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	b006      	add	sp, #24
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	46c0      	nop			; (mov r8, r8)
 800c0e8:	40021000 	.word	0x40021000
 800c0ec:	40007000 	.word	0x40007000
 800c0f0:	fffffcff 	.word	0xfffffcff
 800c0f4:	fffeffff 	.word	0xfffeffff
 800c0f8:	00001388 	.word	0x00001388
 800c0fc:	efffffff 	.word	0xefffffff
 800c100:	fffff3ff 	.word	0xfffff3ff
 800c104:	fff3ffff 	.word	0xfff3ffff
 800c108:	ffcfffff 	.word	0xffcfffff
 800c10c:	ffffcfff 	.word	0xffffcfff
 800c110:	ffbfffff 	.word	0xffbfffff
 800c114:	feffffff 	.word	0xfeffffff
 800c118:	ffff3fff 	.word	0xffff3fff

0800c11c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d101      	bne.n	800c12e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c12a:	2301      	movs	r3, #1
 800c12c:	e046      	b.n	800c1bc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2288      	movs	r2, #136	; 0x88
 800c132:	589b      	ldr	r3, [r3, r2]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d107      	bne.n	800c148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2284      	movs	r2, #132	; 0x84
 800c13c:	2100      	movs	r1, #0
 800c13e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	0018      	movs	r0, r3
 800c144:	f7fe fd9e 	bl	800ac84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2288      	movs	r2, #136	; 0x88
 800c14c:	2124      	movs	r1, #36	; 0x24
 800c14e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	2101      	movs	r1, #1
 800c15c:	438a      	bics	r2, r1
 800c15e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	0018      	movs	r0, r3
 800c164:	f000 f8cc 	bl	800c300 <UART_SetConfig>
 800c168:	0003      	movs	r3, r0
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d101      	bne.n	800c172 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	e024      	b.n	800c1bc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c176:	2b00      	cmp	r3, #0
 800c178:	d003      	beq.n	800c182 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	0018      	movs	r0, r3
 800c17e:	f000 fb7d 	bl	800c87c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	685a      	ldr	r2, [r3, #4]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	490d      	ldr	r1, [pc, #52]	; (800c1c4 <HAL_UART_Init+0xa8>)
 800c18e:	400a      	ands	r2, r1
 800c190:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	689a      	ldr	r2, [r3, #8]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	212a      	movs	r1, #42	; 0x2a
 800c19e:	438a      	bics	r2, r1
 800c1a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2101      	movs	r1, #1
 800c1ae:	430a      	orrs	r2, r1
 800c1b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	0018      	movs	r0, r3
 800c1b6:	f000 fc15 	bl	800c9e4 <UART_CheckIdleState>
 800c1ba:	0003      	movs	r3, r0
}
 800c1bc:	0018      	movs	r0, r3
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	b002      	add	sp, #8
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	ffffb7ff 	.word	0xffffb7ff

0800c1c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b08a      	sub	sp, #40	; 0x28
 800c1cc:	af02      	add	r7, sp, #8
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	603b      	str	r3, [r7, #0]
 800c1d4:	1dbb      	adds	r3, r7, #6
 800c1d6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2288      	movs	r2, #136	; 0x88
 800c1dc:	589b      	ldr	r3, [r3, r2]
 800c1de:	2b20      	cmp	r3, #32
 800c1e0:	d000      	beq.n	800c1e4 <HAL_UART_Transmit+0x1c>
 800c1e2:	e088      	b.n	800c2f6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d003      	beq.n	800c1f2 <HAL_UART_Transmit+0x2a>
 800c1ea:	1dbb      	adds	r3, r7, #6
 800c1ec:	881b      	ldrh	r3, [r3, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e080      	b.n	800c2f8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	689a      	ldr	r2, [r3, #8]
 800c1fa:	2380      	movs	r3, #128	; 0x80
 800c1fc:	015b      	lsls	r3, r3, #5
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d109      	bne.n	800c216 <HAL_UART_Transmit+0x4e>
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	691b      	ldr	r3, [r3, #16]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d105      	bne.n	800c216 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	2201      	movs	r2, #1
 800c20e:	4013      	ands	r3, r2
 800c210:	d001      	beq.n	800c216 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800c212:	2301      	movs	r3, #1
 800c214:	e070      	b.n	800c2f8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2290      	movs	r2, #144	; 0x90
 800c21a:	2100      	movs	r1, #0
 800c21c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2288      	movs	r2, #136	; 0x88
 800c222:	2121      	movs	r1, #33	; 0x21
 800c224:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c226:	f7fe fe33 	bl	800ae90 <HAL_GetTick>
 800c22a:	0003      	movs	r3, r0
 800c22c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	1dba      	adds	r2, r7, #6
 800c232:	2154      	movs	r1, #84	; 0x54
 800c234:	8812      	ldrh	r2, [r2, #0]
 800c236:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	1dba      	adds	r2, r7, #6
 800c23c:	2156      	movs	r1, #86	; 0x56
 800c23e:	8812      	ldrh	r2, [r2, #0]
 800c240:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	689a      	ldr	r2, [r3, #8]
 800c246:	2380      	movs	r3, #128	; 0x80
 800c248:	015b      	lsls	r3, r3, #5
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d108      	bne.n	800c260 <HAL_UART_Transmit+0x98>
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	691b      	ldr	r3, [r3, #16]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d104      	bne.n	800c260 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800c256:	2300      	movs	r3, #0
 800c258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	61bb      	str	r3, [r7, #24]
 800c25e:	e003      	b.n	800c268 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c264:	2300      	movs	r3, #0
 800c266:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c268:	e02c      	b.n	800c2c4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c26a:	697a      	ldr	r2, [r7, #20]
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	9300      	str	r3, [sp, #0]
 800c272:	0013      	movs	r3, r2
 800c274:	2200      	movs	r2, #0
 800c276:	2180      	movs	r1, #128	; 0x80
 800c278:	f000 fc02 	bl	800ca80 <UART_WaitOnFlagUntilTimeout>
 800c27c:	1e03      	subs	r3, r0, #0
 800c27e:	d001      	beq.n	800c284 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800c280:	2303      	movs	r3, #3
 800c282:	e039      	b.n	800c2f8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d10b      	bne.n	800c2a2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	881b      	ldrh	r3, [r3, #0]
 800c28e:	001a      	movs	r2, r3
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	05d2      	lsls	r2, r2, #23
 800c296:	0dd2      	lsrs	r2, r2, #23
 800c298:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	3302      	adds	r3, #2
 800c29e:	61bb      	str	r3, [r7, #24]
 800c2a0:	e007      	b.n	800c2b2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	781a      	ldrb	r2, [r3, #0]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2256      	movs	r2, #86	; 0x56
 800c2b6:	5a9b      	ldrh	r3, [r3, r2]
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	b299      	uxth	r1, r3
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2256      	movs	r2, #86	; 0x56
 800c2c2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2256      	movs	r2, #86	; 0x56
 800c2c8:	5a9b      	ldrh	r3, [r3, r2]
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1cc      	bne.n	800c26a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c2d0:	697a      	ldr	r2, [r7, #20]
 800c2d2:	68f8      	ldr	r0, [r7, #12]
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	9300      	str	r3, [sp, #0]
 800c2d8:	0013      	movs	r3, r2
 800c2da:	2200      	movs	r2, #0
 800c2dc:	2140      	movs	r1, #64	; 0x40
 800c2de:	f000 fbcf 	bl	800ca80 <UART_WaitOnFlagUntilTimeout>
 800c2e2:	1e03      	subs	r3, r0, #0
 800c2e4:	d001      	beq.n	800c2ea <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800c2e6:	2303      	movs	r3, #3
 800c2e8:	e006      	b.n	800c2f8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2288      	movs	r2, #136	; 0x88
 800c2ee:	2120      	movs	r1, #32
 800c2f0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	e000      	b.n	800c2f8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800c2f6:	2302      	movs	r3, #2
  }
}
 800c2f8:	0018      	movs	r0, r3
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	b008      	add	sp, #32
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c300:	b5b0      	push	{r4, r5, r7, lr}
 800c302:	b090      	sub	sp, #64	; 0x40
 800c304:	af00      	add	r7, sp, #0
 800c306:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c308:	231a      	movs	r3, #26
 800c30a:	2220      	movs	r2, #32
 800c30c:	189b      	adds	r3, r3, r2
 800c30e:	19db      	adds	r3, r3, r7
 800c310:	2200      	movs	r2, #0
 800c312:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c316:	689a      	ldr	r2, [r3, #8]
 800c318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31a:	691b      	ldr	r3, [r3, #16]
 800c31c:	431a      	orrs	r2, r3
 800c31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c320:	695b      	ldr	r3, [r3, #20]
 800c322:	431a      	orrs	r2, r3
 800c324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c326:	69db      	ldr	r3, [r3, #28]
 800c328:	4313      	orrs	r3, r2
 800c32a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4aaf      	ldr	r2, [pc, #700]	; (800c5f0 <UART_SetConfig+0x2f0>)
 800c334:	4013      	ands	r3, r2
 800c336:	0019      	movs	r1, r3
 800c338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c33e:	430b      	orrs	r3, r1
 800c340:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	4aaa      	ldr	r2, [pc, #680]	; (800c5f4 <UART_SetConfig+0x2f4>)
 800c34a:	4013      	ands	r3, r2
 800c34c:	0018      	movs	r0, r3
 800c34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c350:	68d9      	ldr	r1, [r3, #12]
 800c352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	0003      	movs	r3, r0
 800c358:	430b      	orrs	r3, r1
 800c35a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	699b      	ldr	r3, [r3, #24]
 800c360:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4aa4      	ldr	r2, [pc, #656]	; (800c5f8 <UART_SetConfig+0x2f8>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d004      	beq.n	800c376 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36e:	6a1b      	ldr	r3, [r3, #32]
 800c370:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c372:	4313      	orrs	r3, r2
 800c374:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	4a9f      	ldr	r2, [pc, #636]	; (800c5fc <UART_SetConfig+0x2fc>)
 800c37e:	4013      	ands	r3, r2
 800c380:	0019      	movs	r1, r3
 800c382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c388:	430b      	orrs	r3, r1
 800c38a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c392:	220f      	movs	r2, #15
 800c394:	4393      	bics	r3, r2
 800c396:	0018      	movs	r0, r3
 800c398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	0003      	movs	r3, r0
 800c3a2:	430b      	orrs	r3, r1
 800c3a4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a95      	ldr	r2, [pc, #596]	; (800c600 <UART_SetConfig+0x300>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d131      	bne.n	800c414 <UART_SetConfig+0x114>
 800c3b0:	4b94      	ldr	r3, [pc, #592]	; (800c604 <UART_SetConfig+0x304>)
 800c3b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3b4:	2203      	movs	r2, #3
 800c3b6:	4013      	ands	r3, r2
 800c3b8:	2b03      	cmp	r3, #3
 800c3ba:	d01d      	beq.n	800c3f8 <UART_SetConfig+0xf8>
 800c3bc:	d823      	bhi.n	800c406 <UART_SetConfig+0x106>
 800c3be:	2b02      	cmp	r3, #2
 800c3c0:	d00c      	beq.n	800c3dc <UART_SetConfig+0xdc>
 800c3c2:	d820      	bhi.n	800c406 <UART_SetConfig+0x106>
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d002      	beq.n	800c3ce <UART_SetConfig+0xce>
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d00e      	beq.n	800c3ea <UART_SetConfig+0xea>
 800c3cc:	e01b      	b.n	800c406 <UART_SetConfig+0x106>
 800c3ce:	231b      	movs	r3, #27
 800c3d0:	2220      	movs	r2, #32
 800c3d2:	189b      	adds	r3, r3, r2
 800c3d4:	19db      	adds	r3, r3, r7
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	701a      	strb	r2, [r3, #0]
 800c3da:	e0b4      	b.n	800c546 <UART_SetConfig+0x246>
 800c3dc:	231b      	movs	r3, #27
 800c3de:	2220      	movs	r2, #32
 800c3e0:	189b      	adds	r3, r3, r2
 800c3e2:	19db      	adds	r3, r3, r7
 800c3e4:	2202      	movs	r2, #2
 800c3e6:	701a      	strb	r2, [r3, #0]
 800c3e8:	e0ad      	b.n	800c546 <UART_SetConfig+0x246>
 800c3ea:	231b      	movs	r3, #27
 800c3ec:	2220      	movs	r2, #32
 800c3ee:	189b      	adds	r3, r3, r2
 800c3f0:	19db      	adds	r3, r3, r7
 800c3f2:	2204      	movs	r2, #4
 800c3f4:	701a      	strb	r2, [r3, #0]
 800c3f6:	e0a6      	b.n	800c546 <UART_SetConfig+0x246>
 800c3f8:	231b      	movs	r3, #27
 800c3fa:	2220      	movs	r2, #32
 800c3fc:	189b      	adds	r3, r3, r2
 800c3fe:	19db      	adds	r3, r3, r7
 800c400:	2208      	movs	r2, #8
 800c402:	701a      	strb	r2, [r3, #0]
 800c404:	e09f      	b.n	800c546 <UART_SetConfig+0x246>
 800c406:	231b      	movs	r3, #27
 800c408:	2220      	movs	r2, #32
 800c40a:	189b      	adds	r3, r3, r2
 800c40c:	19db      	adds	r3, r3, r7
 800c40e:	2210      	movs	r2, #16
 800c410:	701a      	strb	r2, [r3, #0]
 800c412:	e098      	b.n	800c546 <UART_SetConfig+0x246>
 800c414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a7b      	ldr	r2, [pc, #492]	; (800c608 <UART_SetConfig+0x308>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d131      	bne.n	800c482 <UART_SetConfig+0x182>
 800c41e:	4b79      	ldr	r3, [pc, #484]	; (800c604 <UART_SetConfig+0x304>)
 800c420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c422:	220c      	movs	r2, #12
 800c424:	4013      	ands	r3, r2
 800c426:	2b0c      	cmp	r3, #12
 800c428:	d01d      	beq.n	800c466 <UART_SetConfig+0x166>
 800c42a:	d823      	bhi.n	800c474 <UART_SetConfig+0x174>
 800c42c:	2b08      	cmp	r3, #8
 800c42e:	d00c      	beq.n	800c44a <UART_SetConfig+0x14a>
 800c430:	d820      	bhi.n	800c474 <UART_SetConfig+0x174>
 800c432:	2b00      	cmp	r3, #0
 800c434:	d002      	beq.n	800c43c <UART_SetConfig+0x13c>
 800c436:	2b04      	cmp	r3, #4
 800c438:	d00e      	beq.n	800c458 <UART_SetConfig+0x158>
 800c43a:	e01b      	b.n	800c474 <UART_SetConfig+0x174>
 800c43c:	231b      	movs	r3, #27
 800c43e:	2220      	movs	r2, #32
 800c440:	189b      	adds	r3, r3, r2
 800c442:	19db      	adds	r3, r3, r7
 800c444:	2200      	movs	r2, #0
 800c446:	701a      	strb	r2, [r3, #0]
 800c448:	e07d      	b.n	800c546 <UART_SetConfig+0x246>
 800c44a:	231b      	movs	r3, #27
 800c44c:	2220      	movs	r2, #32
 800c44e:	189b      	adds	r3, r3, r2
 800c450:	19db      	adds	r3, r3, r7
 800c452:	2202      	movs	r2, #2
 800c454:	701a      	strb	r2, [r3, #0]
 800c456:	e076      	b.n	800c546 <UART_SetConfig+0x246>
 800c458:	231b      	movs	r3, #27
 800c45a:	2220      	movs	r2, #32
 800c45c:	189b      	adds	r3, r3, r2
 800c45e:	19db      	adds	r3, r3, r7
 800c460:	2204      	movs	r2, #4
 800c462:	701a      	strb	r2, [r3, #0]
 800c464:	e06f      	b.n	800c546 <UART_SetConfig+0x246>
 800c466:	231b      	movs	r3, #27
 800c468:	2220      	movs	r2, #32
 800c46a:	189b      	adds	r3, r3, r2
 800c46c:	19db      	adds	r3, r3, r7
 800c46e:	2208      	movs	r2, #8
 800c470:	701a      	strb	r2, [r3, #0]
 800c472:	e068      	b.n	800c546 <UART_SetConfig+0x246>
 800c474:	231b      	movs	r3, #27
 800c476:	2220      	movs	r2, #32
 800c478:	189b      	adds	r3, r3, r2
 800c47a:	19db      	adds	r3, r3, r7
 800c47c:	2210      	movs	r2, #16
 800c47e:	701a      	strb	r2, [r3, #0]
 800c480:	e061      	b.n	800c546 <UART_SetConfig+0x246>
 800c482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a61      	ldr	r2, [pc, #388]	; (800c60c <UART_SetConfig+0x30c>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d106      	bne.n	800c49a <UART_SetConfig+0x19a>
 800c48c:	231b      	movs	r3, #27
 800c48e:	2220      	movs	r2, #32
 800c490:	189b      	adds	r3, r3, r2
 800c492:	19db      	adds	r3, r3, r7
 800c494:	2200      	movs	r2, #0
 800c496:	701a      	strb	r2, [r3, #0]
 800c498:	e055      	b.n	800c546 <UART_SetConfig+0x246>
 800c49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a5c      	ldr	r2, [pc, #368]	; (800c610 <UART_SetConfig+0x310>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d106      	bne.n	800c4b2 <UART_SetConfig+0x1b2>
 800c4a4:	231b      	movs	r3, #27
 800c4a6:	2220      	movs	r2, #32
 800c4a8:	189b      	adds	r3, r3, r2
 800c4aa:	19db      	adds	r3, r3, r7
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	701a      	strb	r2, [r3, #0]
 800c4b0:	e049      	b.n	800c546 <UART_SetConfig+0x246>
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a50      	ldr	r2, [pc, #320]	; (800c5f8 <UART_SetConfig+0x2f8>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d13e      	bne.n	800c53a <UART_SetConfig+0x23a>
 800c4bc:	4b51      	ldr	r3, [pc, #324]	; (800c604 <UART_SetConfig+0x304>)
 800c4be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4c0:	23c0      	movs	r3, #192	; 0xc0
 800c4c2:	011b      	lsls	r3, r3, #4
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	22c0      	movs	r2, #192	; 0xc0
 800c4c8:	0112      	lsls	r2, r2, #4
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d027      	beq.n	800c51e <UART_SetConfig+0x21e>
 800c4ce:	22c0      	movs	r2, #192	; 0xc0
 800c4d0:	0112      	lsls	r2, r2, #4
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d82a      	bhi.n	800c52c <UART_SetConfig+0x22c>
 800c4d6:	2280      	movs	r2, #128	; 0x80
 800c4d8:	0112      	lsls	r2, r2, #4
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d011      	beq.n	800c502 <UART_SetConfig+0x202>
 800c4de:	2280      	movs	r2, #128	; 0x80
 800c4e0:	0112      	lsls	r2, r2, #4
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d822      	bhi.n	800c52c <UART_SetConfig+0x22c>
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d004      	beq.n	800c4f4 <UART_SetConfig+0x1f4>
 800c4ea:	2280      	movs	r2, #128	; 0x80
 800c4ec:	00d2      	lsls	r2, r2, #3
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d00e      	beq.n	800c510 <UART_SetConfig+0x210>
 800c4f2:	e01b      	b.n	800c52c <UART_SetConfig+0x22c>
 800c4f4:	231b      	movs	r3, #27
 800c4f6:	2220      	movs	r2, #32
 800c4f8:	189b      	adds	r3, r3, r2
 800c4fa:	19db      	adds	r3, r3, r7
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	701a      	strb	r2, [r3, #0]
 800c500:	e021      	b.n	800c546 <UART_SetConfig+0x246>
 800c502:	231b      	movs	r3, #27
 800c504:	2220      	movs	r2, #32
 800c506:	189b      	adds	r3, r3, r2
 800c508:	19db      	adds	r3, r3, r7
 800c50a:	2202      	movs	r2, #2
 800c50c:	701a      	strb	r2, [r3, #0]
 800c50e:	e01a      	b.n	800c546 <UART_SetConfig+0x246>
 800c510:	231b      	movs	r3, #27
 800c512:	2220      	movs	r2, #32
 800c514:	189b      	adds	r3, r3, r2
 800c516:	19db      	adds	r3, r3, r7
 800c518:	2204      	movs	r2, #4
 800c51a:	701a      	strb	r2, [r3, #0]
 800c51c:	e013      	b.n	800c546 <UART_SetConfig+0x246>
 800c51e:	231b      	movs	r3, #27
 800c520:	2220      	movs	r2, #32
 800c522:	189b      	adds	r3, r3, r2
 800c524:	19db      	adds	r3, r3, r7
 800c526:	2208      	movs	r2, #8
 800c528:	701a      	strb	r2, [r3, #0]
 800c52a:	e00c      	b.n	800c546 <UART_SetConfig+0x246>
 800c52c:	231b      	movs	r3, #27
 800c52e:	2220      	movs	r2, #32
 800c530:	189b      	adds	r3, r3, r2
 800c532:	19db      	adds	r3, r3, r7
 800c534:	2210      	movs	r2, #16
 800c536:	701a      	strb	r2, [r3, #0]
 800c538:	e005      	b.n	800c546 <UART_SetConfig+0x246>
 800c53a:	231b      	movs	r3, #27
 800c53c:	2220      	movs	r2, #32
 800c53e:	189b      	adds	r3, r3, r2
 800c540:	19db      	adds	r3, r3, r7
 800c542:	2210      	movs	r2, #16
 800c544:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a2b      	ldr	r2, [pc, #172]	; (800c5f8 <UART_SetConfig+0x2f8>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d000      	beq.n	800c552 <UART_SetConfig+0x252>
 800c550:	e0a9      	b.n	800c6a6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c552:	231b      	movs	r3, #27
 800c554:	2220      	movs	r2, #32
 800c556:	189b      	adds	r3, r3, r2
 800c558:	19db      	adds	r3, r3, r7
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	2b08      	cmp	r3, #8
 800c55e:	d015      	beq.n	800c58c <UART_SetConfig+0x28c>
 800c560:	dc18      	bgt.n	800c594 <UART_SetConfig+0x294>
 800c562:	2b04      	cmp	r3, #4
 800c564:	d00d      	beq.n	800c582 <UART_SetConfig+0x282>
 800c566:	dc15      	bgt.n	800c594 <UART_SetConfig+0x294>
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d002      	beq.n	800c572 <UART_SetConfig+0x272>
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	d005      	beq.n	800c57c <UART_SetConfig+0x27c>
 800c570:	e010      	b.n	800c594 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c572:	f7ff fc05 	bl	800bd80 <HAL_RCC_GetPCLK1Freq>
 800c576:	0003      	movs	r3, r0
 800c578:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c57a:	e014      	b.n	800c5a6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c57c:	4b25      	ldr	r3, [pc, #148]	; (800c614 <UART_SetConfig+0x314>)
 800c57e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c580:	e011      	b.n	800c5a6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c582:	f7ff fb71 	bl	800bc68 <HAL_RCC_GetSysClockFreq>
 800c586:	0003      	movs	r3, r0
 800c588:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c58a:	e00c      	b.n	800c5a6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c58c:	2380      	movs	r3, #128	; 0x80
 800c58e:	021b      	lsls	r3, r3, #8
 800c590:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c592:	e008      	b.n	800c5a6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800c594:	2300      	movs	r3, #0
 800c596:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800c598:	231a      	movs	r3, #26
 800c59a:	2220      	movs	r2, #32
 800c59c:	189b      	adds	r3, r3, r2
 800c59e:	19db      	adds	r3, r3, r7
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	701a      	strb	r2, [r3, #0]
        break;
 800c5a4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d100      	bne.n	800c5ae <UART_SetConfig+0x2ae>
 800c5ac:	e14b      	b.n	800c846 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5b2:	4b19      	ldr	r3, [pc, #100]	; (800c618 <UART_SetConfig+0x318>)
 800c5b4:	0052      	lsls	r2, r2, #1
 800c5b6:	5ad3      	ldrh	r3, [r2, r3]
 800c5b8:	0019      	movs	r1, r3
 800c5ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c5bc:	f7fd fea2 	bl	800a304 <__udivsi3>
 800c5c0:	0003      	movs	r3, r0
 800c5c2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c6:	685a      	ldr	r2, [r3, #4]
 800c5c8:	0013      	movs	r3, r2
 800c5ca:	005b      	lsls	r3, r3, #1
 800c5cc:	189b      	adds	r3, r3, r2
 800c5ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d305      	bcc.n	800c5e0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c5da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d91d      	bls.n	800c61c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800c5e0:	231a      	movs	r3, #26
 800c5e2:	2220      	movs	r2, #32
 800c5e4:	189b      	adds	r3, r3, r2
 800c5e6:	19db      	adds	r3, r3, r7
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	701a      	strb	r2, [r3, #0]
 800c5ec:	e12b      	b.n	800c846 <UART_SetConfig+0x546>
 800c5ee:	46c0      	nop			; (mov r8, r8)
 800c5f0:	cfff69f3 	.word	0xcfff69f3
 800c5f4:	ffffcfff 	.word	0xffffcfff
 800c5f8:	40008000 	.word	0x40008000
 800c5fc:	11fff4ff 	.word	0x11fff4ff
 800c600:	40013800 	.word	0x40013800
 800c604:	40021000 	.word	0x40021000
 800c608:	40004400 	.word	0x40004400
 800c60c:	40004800 	.word	0x40004800
 800c610:	40004c00 	.word	0x40004c00
 800c614:	00f42400 	.word	0x00f42400
 800c618:	0800da2c 	.word	0x0800da2c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61e:	61bb      	str	r3, [r7, #24]
 800c620:	2300      	movs	r3, #0
 800c622:	61fb      	str	r3, [r7, #28]
 800c624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c628:	4b92      	ldr	r3, [pc, #584]	; (800c874 <UART_SetConfig+0x574>)
 800c62a:	0052      	lsls	r2, r2, #1
 800c62c:	5ad3      	ldrh	r3, [r2, r3]
 800c62e:	613b      	str	r3, [r7, #16]
 800c630:	2300      	movs	r3, #0
 800c632:	617b      	str	r3, [r7, #20]
 800c634:	693a      	ldr	r2, [r7, #16]
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	69b8      	ldr	r0, [r7, #24]
 800c63a:	69f9      	ldr	r1, [r7, #28]
 800c63c:	f7fd ffd8 	bl	800a5f0 <__aeabi_uldivmod>
 800c640:	0002      	movs	r2, r0
 800c642:	000b      	movs	r3, r1
 800c644:	0e11      	lsrs	r1, r2, #24
 800c646:	021d      	lsls	r5, r3, #8
 800c648:	430d      	orrs	r5, r1
 800c64a:	0214      	lsls	r4, r2, #8
 800c64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	085b      	lsrs	r3, r3, #1
 800c652:	60bb      	str	r3, [r7, #8]
 800c654:	2300      	movs	r3, #0
 800c656:	60fb      	str	r3, [r7, #12]
 800c658:	68b8      	ldr	r0, [r7, #8]
 800c65a:	68f9      	ldr	r1, [r7, #12]
 800c65c:	1900      	adds	r0, r0, r4
 800c65e:	4169      	adcs	r1, r5
 800c660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	603b      	str	r3, [r7, #0]
 800c666:	2300      	movs	r3, #0
 800c668:	607b      	str	r3, [r7, #4]
 800c66a:	683a      	ldr	r2, [r7, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f7fd ffbf 	bl	800a5f0 <__aeabi_uldivmod>
 800c672:	0002      	movs	r2, r0
 800c674:	000b      	movs	r3, r1
 800c676:	0013      	movs	r3, r2
 800c678:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c67a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c67c:	23c0      	movs	r3, #192	; 0xc0
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	429a      	cmp	r2, r3
 800c682:	d309      	bcc.n	800c698 <UART_SetConfig+0x398>
 800c684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c686:	2380      	movs	r3, #128	; 0x80
 800c688:	035b      	lsls	r3, r3, #13
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d204      	bcs.n	800c698 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800c68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c694:	60da      	str	r2, [r3, #12]
 800c696:	e0d6      	b.n	800c846 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800c698:	231a      	movs	r3, #26
 800c69a:	2220      	movs	r2, #32
 800c69c:	189b      	adds	r3, r3, r2
 800c69e:	19db      	adds	r3, r3, r7
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	701a      	strb	r2, [r3, #0]
 800c6a4:	e0cf      	b.n	800c846 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a8:	69da      	ldr	r2, [r3, #28]
 800c6aa:	2380      	movs	r3, #128	; 0x80
 800c6ac:	021b      	lsls	r3, r3, #8
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d000      	beq.n	800c6b4 <UART_SetConfig+0x3b4>
 800c6b2:	e070      	b.n	800c796 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800c6b4:	231b      	movs	r3, #27
 800c6b6:	2220      	movs	r2, #32
 800c6b8:	189b      	adds	r3, r3, r2
 800c6ba:	19db      	adds	r3, r3, r7
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	2b08      	cmp	r3, #8
 800c6c0:	d015      	beq.n	800c6ee <UART_SetConfig+0x3ee>
 800c6c2:	dc18      	bgt.n	800c6f6 <UART_SetConfig+0x3f6>
 800c6c4:	2b04      	cmp	r3, #4
 800c6c6:	d00d      	beq.n	800c6e4 <UART_SetConfig+0x3e4>
 800c6c8:	dc15      	bgt.n	800c6f6 <UART_SetConfig+0x3f6>
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d002      	beq.n	800c6d4 <UART_SetConfig+0x3d4>
 800c6ce:	2b02      	cmp	r3, #2
 800c6d0:	d005      	beq.n	800c6de <UART_SetConfig+0x3de>
 800c6d2:	e010      	b.n	800c6f6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6d4:	f7ff fb54 	bl	800bd80 <HAL_RCC_GetPCLK1Freq>
 800c6d8:	0003      	movs	r3, r0
 800c6da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c6dc:	e014      	b.n	800c708 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c6de:	4b66      	ldr	r3, [pc, #408]	; (800c878 <UART_SetConfig+0x578>)
 800c6e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c6e2:	e011      	b.n	800c708 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c6e4:	f7ff fac0 	bl	800bc68 <HAL_RCC_GetSysClockFreq>
 800c6e8:	0003      	movs	r3, r0
 800c6ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c6ec:	e00c      	b.n	800c708 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6ee:	2380      	movs	r3, #128	; 0x80
 800c6f0:	021b      	lsls	r3, r3, #8
 800c6f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c6f4:	e008      	b.n	800c708 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800c6fa:	231a      	movs	r3, #26
 800c6fc:	2220      	movs	r2, #32
 800c6fe:	189b      	adds	r3, r3, r2
 800c700:	19db      	adds	r3, r3, r7
 800c702:	2201      	movs	r2, #1
 800c704:	701a      	strb	r2, [r3, #0]
        break;
 800c706:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d100      	bne.n	800c710 <UART_SetConfig+0x410>
 800c70e:	e09a      	b.n	800c846 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c714:	4b57      	ldr	r3, [pc, #348]	; (800c874 <UART_SetConfig+0x574>)
 800c716:	0052      	lsls	r2, r2, #1
 800c718:	5ad3      	ldrh	r3, [r2, r3]
 800c71a:	0019      	movs	r1, r3
 800c71c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c71e:	f7fd fdf1 	bl	800a304 <__udivsi3>
 800c722:	0003      	movs	r3, r0
 800c724:	005a      	lsls	r2, r3, #1
 800c726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	085b      	lsrs	r3, r3, #1
 800c72c:	18d2      	adds	r2, r2, r3
 800c72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	0019      	movs	r1, r3
 800c734:	0010      	movs	r0, r2
 800c736:	f7fd fde5 	bl	800a304 <__udivsi3>
 800c73a:	0003      	movs	r3, r0
 800c73c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c740:	2b0f      	cmp	r3, #15
 800c742:	d921      	bls.n	800c788 <UART_SetConfig+0x488>
 800c744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c746:	2380      	movs	r3, #128	; 0x80
 800c748:	025b      	lsls	r3, r3, #9
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d21c      	bcs.n	800c788 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c750:	b29a      	uxth	r2, r3
 800c752:	200e      	movs	r0, #14
 800c754:	2420      	movs	r4, #32
 800c756:	1903      	adds	r3, r0, r4
 800c758:	19db      	adds	r3, r3, r7
 800c75a:	210f      	movs	r1, #15
 800c75c:	438a      	bics	r2, r1
 800c75e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c762:	085b      	lsrs	r3, r3, #1
 800c764:	b29b      	uxth	r3, r3
 800c766:	2207      	movs	r2, #7
 800c768:	4013      	ands	r3, r2
 800c76a:	b299      	uxth	r1, r3
 800c76c:	1903      	adds	r3, r0, r4
 800c76e:	19db      	adds	r3, r3, r7
 800c770:	1902      	adds	r2, r0, r4
 800c772:	19d2      	adds	r2, r2, r7
 800c774:	8812      	ldrh	r2, [r2, #0]
 800c776:	430a      	orrs	r2, r1
 800c778:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800c77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	1902      	adds	r2, r0, r4
 800c780:	19d2      	adds	r2, r2, r7
 800c782:	8812      	ldrh	r2, [r2, #0]
 800c784:	60da      	str	r2, [r3, #12]
 800c786:	e05e      	b.n	800c846 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800c788:	231a      	movs	r3, #26
 800c78a:	2220      	movs	r2, #32
 800c78c:	189b      	adds	r3, r3, r2
 800c78e:	19db      	adds	r3, r3, r7
 800c790:	2201      	movs	r2, #1
 800c792:	701a      	strb	r2, [r3, #0]
 800c794:	e057      	b.n	800c846 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c796:	231b      	movs	r3, #27
 800c798:	2220      	movs	r2, #32
 800c79a:	189b      	adds	r3, r3, r2
 800c79c:	19db      	adds	r3, r3, r7
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	2b08      	cmp	r3, #8
 800c7a2:	d015      	beq.n	800c7d0 <UART_SetConfig+0x4d0>
 800c7a4:	dc18      	bgt.n	800c7d8 <UART_SetConfig+0x4d8>
 800c7a6:	2b04      	cmp	r3, #4
 800c7a8:	d00d      	beq.n	800c7c6 <UART_SetConfig+0x4c6>
 800c7aa:	dc15      	bgt.n	800c7d8 <UART_SetConfig+0x4d8>
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d002      	beq.n	800c7b6 <UART_SetConfig+0x4b6>
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	d005      	beq.n	800c7c0 <UART_SetConfig+0x4c0>
 800c7b4:	e010      	b.n	800c7d8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7b6:	f7ff fae3 	bl	800bd80 <HAL_RCC_GetPCLK1Freq>
 800c7ba:	0003      	movs	r3, r0
 800c7bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c7be:	e014      	b.n	800c7ea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c7c0:	4b2d      	ldr	r3, [pc, #180]	; (800c878 <UART_SetConfig+0x578>)
 800c7c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c7c4:	e011      	b.n	800c7ea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c7c6:	f7ff fa4f 	bl	800bc68 <HAL_RCC_GetSysClockFreq>
 800c7ca:	0003      	movs	r3, r0
 800c7cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c7ce:	e00c      	b.n	800c7ea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7d0:	2380      	movs	r3, #128	; 0x80
 800c7d2:	021b      	lsls	r3, r3, #8
 800c7d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c7d6:	e008      	b.n	800c7ea <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800c7dc:	231a      	movs	r3, #26
 800c7de:	2220      	movs	r2, #32
 800c7e0:	189b      	adds	r3, r3, r2
 800c7e2:	19db      	adds	r3, r3, r7
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	701a      	strb	r2, [r3, #0]
        break;
 800c7e8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800c7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d02a      	beq.n	800c846 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7f4:	4b1f      	ldr	r3, [pc, #124]	; (800c874 <UART_SetConfig+0x574>)
 800c7f6:	0052      	lsls	r2, r2, #1
 800c7f8:	5ad3      	ldrh	r3, [r2, r3]
 800c7fa:	0019      	movs	r1, r3
 800c7fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c7fe:	f7fd fd81 	bl	800a304 <__udivsi3>
 800c802:	0003      	movs	r3, r0
 800c804:	001a      	movs	r2, r3
 800c806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	085b      	lsrs	r3, r3, #1
 800c80c:	18d2      	adds	r2, r2, r3
 800c80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	0019      	movs	r1, r3
 800c814:	0010      	movs	r0, r2
 800c816:	f7fd fd75 	bl	800a304 <__udivsi3>
 800c81a:	0003      	movs	r3, r0
 800c81c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c820:	2b0f      	cmp	r3, #15
 800c822:	d90a      	bls.n	800c83a <UART_SetConfig+0x53a>
 800c824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c826:	2380      	movs	r3, #128	; 0x80
 800c828:	025b      	lsls	r3, r3, #9
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d205      	bcs.n	800c83a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c830:	b29a      	uxth	r2, r3
 800c832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	60da      	str	r2, [r3, #12]
 800c838:	e005      	b.n	800c846 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800c83a:	231a      	movs	r3, #26
 800c83c:	2220      	movs	r2, #32
 800c83e:	189b      	adds	r3, r3, r2
 800c840:	19db      	adds	r3, r3, r7
 800c842:	2201      	movs	r2, #1
 800c844:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c848:	226a      	movs	r2, #106	; 0x6a
 800c84a:	2101      	movs	r1, #1
 800c84c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800c84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c850:	2268      	movs	r2, #104	; 0x68
 800c852:	2101      	movs	r1, #1
 800c854:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c858:	2200      	movs	r2, #0
 800c85a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85e:	2200      	movs	r2, #0
 800c860:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c862:	231a      	movs	r3, #26
 800c864:	2220      	movs	r2, #32
 800c866:	189b      	adds	r3, r3, r2
 800c868:	19db      	adds	r3, r3, r7
 800c86a:	781b      	ldrb	r3, [r3, #0]
}
 800c86c:	0018      	movs	r0, r3
 800c86e:	46bd      	mov	sp, r7
 800c870:	b010      	add	sp, #64	; 0x40
 800c872:	bdb0      	pop	{r4, r5, r7, pc}
 800c874:	0800da2c 	.word	0x0800da2c
 800c878:	00f42400 	.word	0x00f42400

0800c87c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c888:	2201      	movs	r2, #1
 800c88a:	4013      	ands	r3, r2
 800c88c:	d00b      	beq.n	800c8a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	4a4a      	ldr	r2, [pc, #296]	; (800c9c0 <UART_AdvFeatureConfig+0x144>)
 800c896:	4013      	ands	r3, r2
 800c898:	0019      	movs	r1, r3
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	430a      	orrs	r2, r1
 800c8a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8aa:	2202      	movs	r2, #2
 800c8ac:	4013      	ands	r3, r2
 800c8ae:	d00b      	beq.n	800c8c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	4a43      	ldr	r2, [pc, #268]	; (800c9c4 <UART_AdvFeatureConfig+0x148>)
 800c8b8:	4013      	ands	r3, r2
 800c8ba:	0019      	movs	r1, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	430a      	orrs	r2, r1
 800c8c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8cc:	2204      	movs	r2, #4
 800c8ce:	4013      	ands	r3, r2
 800c8d0:	d00b      	beq.n	800c8ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	4a3b      	ldr	r2, [pc, #236]	; (800c9c8 <UART_AdvFeatureConfig+0x14c>)
 800c8da:	4013      	ands	r3, r2
 800c8dc:	0019      	movs	r1, r3
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	430a      	orrs	r2, r1
 800c8e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ee:	2208      	movs	r2, #8
 800c8f0:	4013      	ands	r3, r2
 800c8f2:	d00b      	beq.n	800c90c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	4a34      	ldr	r2, [pc, #208]	; (800c9cc <UART_AdvFeatureConfig+0x150>)
 800c8fc:	4013      	ands	r3, r2
 800c8fe:	0019      	movs	r1, r3
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	430a      	orrs	r2, r1
 800c90a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c910:	2210      	movs	r2, #16
 800c912:	4013      	ands	r3, r2
 800c914:	d00b      	beq.n	800c92e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	4a2c      	ldr	r2, [pc, #176]	; (800c9d0 <UART_AdvFeatureConfig+0x154>)
 800c91e:	4013      	ands	r3, r2
 800c920:	0019      	movs	r1, r3
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	430a      	orrs	r2, r1
 800c92c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c932:	2220      	movs	r2, #32
 800c934:	4013      	ands	r3, r2
 800c936:	d00b      	beq.n	800c950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	4a25      	ldr	r2, [pc, #148]	; (800c9d4 <UART_AdvFeatureConfig+0x158>)
 800c940:	4013      	ands	r3, r2
 800c942:	0019      	movs	r1, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	430a      	orrs	r2, r1
 800c94e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c954:	2240      	movs	r2, #64	; 0x40
 800c956:	4013      	ands	r3, r2
 800c958:	d01d      	beq.n	800c996 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	4a1d      	ldr	r2, [pc, #116]	; (800c9d8 <UART_AdvFeatureConfig+0x15c>)
 800c962:	4013      	ands	r3, r2
 800c964:	0019      	movs	r1, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	430a      	orrs	r2, r1
 800c970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c976:	2380      	movs	r3, #128	; 0x80
 800c978:	035b      	lsls	r3, r3, #13
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d10b      	bne.n	800c996 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	4a15      	ldr	r2, [pc, #84]	; (800c9dc <UART_AdvFeatureConfig+0x160>)
 800c986:	4013      	ands	r3, r2
 800c988:	0019      	movs	r1, r3
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	430a      	orrs	r2, r1
 800c994:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99a:	2280      	movs	r2, #128	; 0x80
 800c99c:	4013      	ands	r3, r2
 800c99e:	d00b      	beq.n	800c9b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	4a0e      	ldr	r2, [pc, #56]	; (800c9e0 <UART_AdvFeatureConfig+0x164>)
 800c9a8:	4013      	ands	r3, r2
 800c9aa:	0019      	movs	r1, r3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	430a      	orrs	r2, r1
 800c9b6:	605a      	str	r2, [r3, #4]
  }
}
 800c9b8:	46c0      	nop			; (mov r8, r8)
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	b002      	add	sp, #8
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	fffdffff 	.word	0xfffdffff
 800c9c4:	fffeffff 	.word	0xfffeffff
 800c9c8:	fffbffff 	.word	0xfffbffff
 800c9cc:	ffff7fff 	.word	0xffff7fff
 800c9d0:	ffffefff 	.word	0xffffefff
 800c9d4:	ffffdfff 	.word	0xffffdfff
 800c9d8:	ffefffff 	.word	0xffefffff
 800c9dc:	ff9fffff 	.word	0xff9fffff
 800c9e0:	fff7ffff 	.word	0xfff7ffff

0800c9e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af02      	add	r7, sp, #8
 800c9ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2290      	movs	r2, #144	; 0x90
 800c9f0:	2100      	movs	r1, #0
 800c9f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c9f4:	f7fe fa4c 	bl	800ae90 <HAL_GetTick>
 800c9f8:	0003      	movs	r3, r0
 800c9fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2208      	movs	r2, #8
 800ca04:	4013      	ands	r3, r2
 800ca06:	2b08      	cmp	r3, #8
 800ca08:	d10c      	bne.n	800ca24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2280      	movs	r2, #128	; 0x80
 800ca0e:	0391      	lsls	r1, r2, #14
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	4a1a      	ldr	r2, [pc, #104]	; (800ca7c <UART_CheckIdleState+0x98>)
 800ca14:	9200      	str	r2, [sp, #0]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f000 f832 	bl	800ca80 <UART_WaitOnFlagUntilTimeout>
 800ca1c:	1e03      	subs	r3, r0, #0
 800ca1e:	d001      	beq.n	800ca24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca20:	2303      	movs	r3, #3
 800ca22:	e026      	b.n	800ca72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2204      	movs	r2, #4
 800ca2c:	4013      	ands	r3, r2
 800ca2e:	2b04      	cmp	r3, #4
 800ca30:	d10c      	bne.n	800ca4c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2280      	movs	r2, #128	; 0x80
 800ca36:	03d1      	lsls	r1, r2, #15
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	4a10      	ldr	r2, [pc, #64]	; (800ca7c <UART_CheckIdleState+0x98>)
 800ca3c:	9200      	str	r2, [sp, #0]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	f000 f81e 	bl	800ca80 <UART_WaitOnFlagUntilTimeout>
 800ca44:	1e03      	subs	r3, r0, #0
 800ca46:	d001      	beq.n	800ca4c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca48:	2303      	movs	r3, #3
 800ca4a:	e012      	b.n	800ca72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2288      	movs	r2, #136	; 0x88
 800ca50:	2120      	movs	r1, #32
 800ca52:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	228c      	movs	r2, #140	; 0x8c
 800ca58:	2120      	movs	r1, #32
 800ca5a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2284      	movs	r2, #132	; 0x84
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ca70:	2300      	movs	r3, #0
}
 800ca72:	0018      	movs	r0, r3
 800ca74:	46bd      	mov	sp, r7
 800ca76:	b004      	add	sp, #16
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	46c0      	nop			; (mov r8, r8)
 800ca7c:	01ffffff 	.word	0x01ffffff

0800ca80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b094      	sub	sp, #80	; 0x50
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	603b      	str	r3, [r7, #0]
 800ca8c:	1dfb      	adds	r3, r7, #7
 800ca8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca90:	e0a7      	b.n	800cbe2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca94:	3301      	adds	r3, #1
 800ca96:	d100      	bne.n	800ca9a <UART_WaitOnFlagUntilTimeout+0x1a>
 800ca98:	e0a3      	b.n	800cbe2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca9a:	f7fe f9f9 	bl	800ae90 <HAL_GetTick>
 800ca9e:	0002      	movs	r2, r0
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	1ad3      	subs	r3, r2, r3
 800caa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d302      	bcc.n	800cab0 <UART_WaitOnFlagUntilTimeout+0x30>
 800caaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800caac:	2b00      	cmp	r3, #0
 800caae:	d13f      	bne.n	800cb30 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cab0:	f3ef 8310 	mrs	r3, PRIMASK
 800cab4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800cab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cab8:	647b      	str	r3, [r7, #68]	; 0x44
 800caba:	2301      	movs	r3, #1
 800cabc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac0:	f383 8810 	msr	PRIMASK, r3
}
 800cac4:	46c0      	nop			; (mov r8, r8)
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	494e      	ldr	r1, [pc, #312]	; (800cc0c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800cad2:	400a      	ands	r2, r1
 800cad4:	601a      	str	r2, [r3, #0]
 800cad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cad8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cadc:	f383 8810 	msr	PRIMASK, r3
}
 800cae0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cae2:	f3ef 8310 	mrs	r3, PRIMASK
 800cae6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800cae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caea:	643b      	str	r3, [r7, #64]	; 0x40
 800caec:	2301      	movs	r3, #1
 800caee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800caf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf2:	f383 8810 	msr	PRIMASK, r3
}
 800caf6:	46c0      	nop			; (mov r8, r8)
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	689a      	ldr	r2, [r3, #8]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2101      	movs	r1, #1
 800cb04:	438a      	bics	r2, r1
 800cb06:	609a      	str	r2, [r3, #8]
 800cb08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb0e:	f383 8810 	msr	PRIMASK, r3
}
 800cb12:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2288      	movs	r2, #136	; 0x88
 800cb18:	2120      	movs	r1, #32
 800cb1a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	228c      	movs	r2, #140	; 0x8c
 800cb20:	2120      	movs	r1, #32
 800cb22:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2284      	movs	r2, #132	; 0x84
 800cb28:	2100      	movs	r1, #0
 800cb2a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	e069      	b.n	800cc04 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2204      	movs	r2, #4
 800cb38:	4013      	ands	r3, r2
 800cb3a:	d052      	beq.n	800cbe2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	69da      	ldr	r2, [r3, #28]
 800cb42:	2380      	movs	r3, #128	; 0x80
 800cb44:	011b      	lsls	r3, r3, #4
 800cb46:	401a      	ands	r2, r3
 800cb48:	2380      	movs	r3, #128	; 0x80
 800cb4a:	011b      	lsls	r3, r3, #4
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d148      	bne.n	800cbe2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	2280      	movs	r2, #128	; 0x80
 800cb56:	0112      	lsls	r2, r2, #4
 800cb58:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb5a:	f3ef 8310 	mrs	r3, PRIMASK
 800cb5e:	613b      	str	r3, [r7, #16]
  return(result);
 800cb60:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cb62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb64:	2301      	movs	r3, #1
 800cb66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	f383 8810 	msr	PRIMASK, r3
}
 800cb6e:	46c0      	nop			; (mov r8, r8)
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4924      	ldr	r1, [pc, #144]	; (800cc0c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800cb7c:	400a      	ands	r2, r1
 800cb7e:	601a      	str	r2, [r3, #0]
 800cb80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	f383 8810 	msr	PRIMASK, r3
}
 800cb8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb8c:	f3ef 8310 	mrs	r3, PRIMASK
 800cb90:	61fb      	str	r3, [r7, #28]
  return(result);
 800cb92:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb94:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb96:	2301      	movs	r3, #1
 800cb98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb9a:	6a3b      	ldr	r3, [r7, #32]
 800cb9c:	f383 8810 	msr	PRIMASK, r3
}
 800cba0:	46c0      	nop			; (mov r8, r8)
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	689a      	ldr	r2, [r3, #8]
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2101      	movs	r1, #1
 800cbae:	438a      	bics	r2, r1
 800cbb0:	609a      	str	r2, [r3, #8]
 800cbb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbb4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb8:	f383 8810 	msr	PRIMASK, r3
}
 800cbbc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2288      	movs	r2, #136	; 0x88
 800cbc2:	2120      	movs	r1, #32
 800cbc4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	228c      	movs	r2, #140	; 0x8c
 800cbca:	2120      	movs	r1, #32
 800cbcc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2290      	movs	r2, #144	; 0x90
 800cbd2:	2120      	movs	r1, #32
 800cbd4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2284      	movs	r2, #132	; 0x84
 800cbda:	2100      	movs	r1, #0
 800cbdc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800cbde:	2303      	movs	r3, #3
 800cbe0:	e010      	b.n	800cc04 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	69db      	ldr	r3, [r3, #28]
 800cbe8:	68ba      	ldr	r2, [r7, #8]
 800cbea:	4013      	ands	r3, r2
 800cbec:	68ba      	ldr	r2, [r7, #8]
 800cbee:	1ad3      	subs	r3, r2, r3
 800cbf0:	425a      	negs	r2, r3
 800cbf2:	4153      	adcs	r3, r2
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	001a      	movs	r2, r3
 800cbf8:	1dfb      	adds	r3, r7, #7
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d100      	bne.n	800cc02 <UART_WaitOnFlagUntilTimeout+0x182>
 800cc00:	e747      	b.n	800ca92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc02:	2300      	movs	r3, #0
}
 800cc04:	0018      	movs	r0, r3
 800cc06:	46bd      	mov	sp, r7
 800cc08:	b014      	add	sp, #80	; 0x50
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	fffffe5f 	.word	0xfffffe5f

0800cc10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2284      	movs	r2, #132	; 0x84
 800cc1c:	5c9b      	ldrb	r3, [r3, r2]
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d101      	bne.n	800cc26 <HAL_UARTEx_DisableFifoMode+0x16>
 800cc22:	2302      	movs	r3, #2
 800cc24:	e027      	b.n	800cc76 <HAL_UARTEx_DisableFifoMode+0x66>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2284      	movs	r2, #132	; 0x84
 800cc2a:	2101      	movs	r1, #1
 800cc2c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2288      	movs	r2, #136	; 0x88
 800cc32:	2124      	movs	r1, #36	; 0x24
 800cc34:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2101      	movs	r1, #1
 800cc4a:	438a      	bics	r2, r1
 800cc4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	4a0b      	ldr	r2, [pc, #44]	; (800cc80 <HAL_UARTEx_DisableFifoMode+0x70>)
 800cc52:	4013      	ands	r3, r2
 800cc54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2288      	movs	r2, #136	; 0x88
 800cc68:	2120      	movs	r1, #32
 800cc6a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2284      	movs	r2, #132	; 0x84
 800cc70:	2100      	movs	r1, #0
 800cc72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	0018      	movs	r0, r3
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	b004      	add	sp, #16
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	46c0      	nop			; (mov r8, r8)
 800cc80:	dfffffff 	.word	0xdfffffff

0800cc84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2284      	movs	r2, #132	; 0x84
 800cc92:	5c9b      	ldrb	r3, [r3, r2]
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d101      	bne.n	800cc9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cc98:	2302      	movs	r3, #2
 800cc9a:	e02e      	b.n	800ccfa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2284      	movs	r2, #132	; 0x84
 800cca0:	2101      	movs	r1, #1
 800cca2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2288      	movs	r2, #136	; 0x88
 800cca8:	2124      	movs	r1, #36	; 0x24
 800ccaa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2101      	movs	r1, #1
 800ccc0:	438a      	bics	r2, r1
 800ccc2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	00db      	lsls	r3, r3, #3
 800cccc:	08d9      	lsrs	r1, r3, #3
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	683a      	ldr	r2, [r7, #0]
 800ccd4:	430a      	orrs	r2, r1
 800ccd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	0018      	movs	r0, r3
 800ccdc:	f000 f854 	bl	800cd88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2288      	movs	r2, #136	; 0x88
 800ccec:	2120      	movs	r1, #32
 800ccee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2284      	movs	r2, #132	; 0x84
 800ccf4:	2100      	movs	r1, #0
 800ccf6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ccf8:	2300      	movs	r3, #0
}
 800ccfa:	0018      	movs	r0, r3
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	b004      	add	sp, #16
 800cd00:	bd80      	pop	{r7, pc}
	...

0800cd04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2284      	movs	r2, #132	; 0x84
 800cd12:	5c9b      	ldrb	r3, [r3, r2]
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d101      	bne.n	800cd1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cd18:	2302      	movs	r3, #2
 800cd1a:	e02f      	b.n	800cd7c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2284      	movs	r2, #132	; 0x84
 800cd20:	2101      	movs	r1, #1
 800cd22:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2288      	movs	r2, #136	; 0x88
 800cd28:	2124      	movs	r1, #36	; 0x24
 800cd2a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	2101      	movs	r1, #1
 800cd40:	438a      	bics	r2, r1
 800cd42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	689b      	ldr	r3, [r3, #8]
 800cd4a:	4a0e      	ldr	r2, [pc, #56]	; (800cd84 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800cd4c:	4013      	ands	r3, r2
 800cd4e:	0019      	movs	r1, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	683a      	ldr	r2, [r7, #0]
 800cd56:	430a      	orrs	r2, r1
 800cd58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	0018      	movs	r0, r3
 800cd5e:	f000 f813 	bl	800cd88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2288      	movs	r2, #136	; 0x88
 800cd6e:	2120      	movs	r1, #32
 800cd70:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2284      	movs	r2, #132	; 0x84
 800cd76:	2100      	movs	r1, #0
 800cd78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	0018      	movs	r0, r3
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	b004      	add	sp, #16
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	f1ffffff 	.word	0xf1ffffff

0800cd88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cd88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd8a:	b085      	sub	sp, #20
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d108      	bne.n	800cdaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	226a      	movs	r2, #106	; 0x6a
 800cd9c:	2101      	movs	r1, #1
 800cd9e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2268      	movs	r2, #104	; 0x68
 800cda4:	2101      	movs	r1, #1
 800cda6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cda8:	e043      	b.n	800ce32 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cdaa:	260f      	movs	r6, #15
 800cdac:	19bb      	adds	r3, r7, r6
 800cdae:	2208      	movs	r2, #8
 800cdb0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cdb2:	200e      	movs	r0, #14
 800cdb4:	183b      	adds	r3, r7, r0
 800cdb6:	2208      	movs	r2, #8
 800cdb8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	689b      	ldr	r3, [r3, #8]
 800cdc0:	0e5b      	lsrs	r3, r3, #25
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	240d      	movs	r4, #13
 800cdc6:	193b      	adds	r3, r7, r4
 800cdc8:	2107      	movs	r1, #7
 800cdca:	400a      	ands	r2, r1
 800cdcc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	0f5b      	lsrs	r3, r3, #29
 800cdd6:	b2da      	uxtb	r2, r3
 800cdd8:	250c      	movs	r5, #12
 800cdda:	197b      	adds	r3, r7, r5
 800cddc:	2107      	movs	r1, #7
 800cdde:	400a      	ands	r2, r1
 800cde0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cde2:	183b      	adds	r3, r7, r0
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	197a      	adds	r2, r7, r5
 800cde8:	7812      	ldrb	r2, [r2, #0]
 800cdea:	4914      	ldr	r1, [pc, #80]	; (800ce3c <UARTEx_SetNbDataToProcess+0xb4>)
 800cdec:	5c8a      	ldrb	r2, [r1, r2]
 800cdee:	435a      	muls	r2, r3
 800cdf0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800cdf2:	197b      	adds	r3, r7, r5
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	4a12      	ldr	r2, [pc, #72]	; (800ce40 <UARTEx_SetNbDataToProcess+0xb8>)
 800cdf8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cdfa:	0019      	movs	r1, r3
 800cdfc:	f7fd fb0c 	bl	800a418 <__divsi3>
 800ce00:	0003      	movs	r3, r0
 800ce02:	b299      	uxth	r1, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	226a      	movs	r2, #106	; 0x6a
 800ce08:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce0a:	19bb      	adds	r3, r7, r6
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	193a      	adds	r2, r7, r4
 800ce10:	7812      	ldrb	r2, [r2, #0]
 800ce12:	490a      	ldr	r1, [pc, #40]	; (800ce3c <UARTEx_SetNbDataToProcess+0xb4>)
 800ce14:	5c8a      	ldrb	r2, [r1, r2]
 800ce16:	435a      	muls	r2, r3
 800ce18:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800ce1a:	193b      	adds	r3, r7, r4
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	4a08      	ldr	r2, [pc, #32]	; (800ce40 <UARTEx_SetNbDataToProcess+0xb8>)
 800ce20:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce22:	0019      	movs	r1, r3
 800ce24:	f7fd faf8 	bl	800a418 <__divsi3>
 800ce28:	0003      	movs	r3, r0
 800ce2a:	b299      	uxth	r1, r3
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2268      	movs	r2, #104	; 0x68
 800ce30:	5299      	strh	r1, [r3, r2]
}
 800ce32:	46c0      	nop			; (mov r8, r8)
 800ce34:	46bd      	mov	sp, r7
 800ce36:	b005      	add	sp, #20
 800ce38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce3a:	46c0      	nop			; (mov r8, r8)
 800ce3c:	0800da44 	.word	0x0800da44
 800ce40:	0800da4c 	.word	0x0800da4c

0800ce44 <__errno>:
 800ce44:	4b01      	ldr	r3, [pc, #4]	; (800ce4c <__errno+0x8>)
 800ce46:	6818      	ldr	r0, [r3, #0]
 800ce48:	4770      	bx	lr
 800ce4a:	46c0      	nop			; (mov r8, r8)
 800ce4c:	2000000c 	.word	0x2000000c

0800ce50 <__libc_init_array>:
 800ce50:	b570      	push	{r4, r5, r6, lr}
 800ce52:	2600      	movs	r6, #0
 800ce54:	4d0c      	ldr	r5, [pc, #48]	; (800ce88 <__libc_init_array+0x38>)
 800ce56:	4c0d      	ldr	r4, [pc, #52]	; (800ce8c <__libc_init_array+0x3c>)
 800ce58:	1b64      	subs	r4, r4, r5
 800ce5a:	10a4      	asrs	r4, r4, #2
 800ce5c:	42a6      	cmp	r6, r4
 800ce5e:	d109      	bne.n	800ce74 <__libc_init_array+0x24>
 800ce60:	2600      	movs	r6, #0
 800ce62:	f000 fd6b 	bl	800d93c <_init>
 800ce66:	4d0a      	ldr	r5, [pc, #40]	; (800ce90 <__libc_init_array+0x40>)
 800ce68:	4c0a      	ldr	r4, [pc, #40]	; (800ce94 <__libc_init_array+0x44>)
 800ce6a:	1b64      	subs	r4, r4, r5
 800ce6c:	10a4      	asrs	r4, r4, #2
 800ce6e:	42a6      	cmp	r6, r4
 800ce70:	d105      	bne.n	800ce7e <__libc_init_array+0x2e>
 800ce72:	bd70      	pop	{r4, r5, r6, pc}
 800ce74:	00b3      	lsls	r3, r6, #2
 800ce76:	58eb      	ldr	r3, [r5, r3]
 800ce78:	4798      	blx	r3
 800ce7a:	3601      	adds	r6, #1
 800ce7c:	e7ee      	b.n	800ce5c <__libc_init_array+0xc>
 800ce7e:	00b3      	lsls	r3, r6, #2
 800ce80:	58eb      	ldr	r3, [r5, r3]
 800ce82:	4798      	blx	r3
 800ce84:	3601      	adds	r6, #1
 800ce86:	e7f2      	b.n	800ce6e <__libc_init_array+0x1e>
 800ce88:	0800dac0 	.word	0x0800dac0
 800ce8c:	0800dac0 	.word	0x0800dac0
 800ce90:	0800dac0 	.word	0x0800dac0
 800ce94:	0800dac4 	.word	0x0800dac4

0800ce98 <memset>:
 800ce98:	0003      	movs	r3, r0
 800ce9a:	1882      	adds	r2, r0, r2
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d100      	bne.n	800cea2 <memset+0xa>
 800cea0:	4770      	bx	lr
 800cea2:	7019      	strb	r1, [r3, #0]
 800cea4:	3301      	adds	r3, #1
 800cea6:	e7f9      	b.n	800ce9c <memset+0x4>

0800cea8 <_puts_r>:
 800cea8:	b570      	push	{r4, r5, r6, lr}
 800ceaa:	0005      	movs	r5, r0
 800ceac:	000e      	movs	r6, r1
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	d004      	beq.n	800cebc <_puts_r+0x14>
 800ceb2:	6983      	ldr	r3, [r0, #24]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d101      	bne.n	800cebc <_puts_r+0x14>
 800ceb8:	f000 fa6e 	bl	800d398 <__sinit>
 800cebc:	69ab      	ldr	r3, [r5, #24]
 800cebe:	68ac      	ldr	r4, [r5, #8]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d102      	bne.n	800ceca <_puts_r+0x22>
 800cec4:	0028      	movs	r0, r5
 800cec6:	f000 fa67 	bl	800d398 <__sinit>
 800ceca:	4b2d      	ldr	r3, [pc, #180]	; (800cf80 <_puts_r+0xd8>)
 800cecc:	429c      	cmp	r4, r3
 800cece:	d122      	bne.n	800cf16 <_puts_r+0x6e>
 800ced0:	686c      	ldr	r4, [r5, #4]
 800ced2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ced4:	07db      	lsls	r3, r3, #31
 800ced6:	d405      	bmi.n	800cee4 <_puts_r+0x3c>
 800ced8:	89a3      	ldrh	r3, [r4, #12]
 800ceda:	059b      	lsls	r3, r3, #22
 800cedc:	d402      	bmi.n	800cee4 <_puts_r+0x3c>
 800cede:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cee0:	f000 fafb 	bl	800d4da <__retarget_lock_acquire_recursive>
 800cee4:	89a3      	ldrh	r3, [r4, #12]
 800cee6:	071b      	lsls	r3, r3, #28
 800cee8:	d502      	bpl.n	800cef0 <_puts_r+0x48>
 800ceea:	6923      	ldr	r3, [r4, #16]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d129      	bne.n	800cf44 <_puts_r+0x9c>
 800cef0:	0021      	movs	r1, r4
 800cef2:	0028      	movs	r0, r5
 800cef4:	f000 f8aa 	bl	800d04c <__swsetup_r>
 800cef8:	2800      	cmp	r0, #0
 800cefa:	d023      	beq.n	800cf44 <_puts_r+0x9c>
 800cefc:	2501      	movs	r5, #1
 800cefe:	426d      	negs	r5, r5
 800cf00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf02:	07db      	lsls	r3, r3, #31
 800cf04:	d405      	bmi.n	800cf12 <_puts_r+0x6a>
 800cf06:	89a3      	ldrh	r3, [r4, #12]
 800cf08:	059b      	lsls	r3, r3, #22
 800cf0a:	d402      	bmi.n	800cf12 <_puts_r+0x6a>
 800cf0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf0e:	f000 fae5 	bl	800d4dc <__retarget_lock_release_recursive>
 800cf12:	0028      	movs	r0, r5
 800cf14:	bd70      	pop	{r4, r5, r6, pc}
 800cf16:	4b1b      	ldr	r3, [pc, #108]	; (800cf84 <_puts_r+0xdc>)
 800cf18:	429c      	cmp	r4, r3
 800cf1a:	d101      	bne.n	800cf20 <_puts_r+0x78>
 800cf1c:	68ac      	ldr	r4, [r5, #8]
 800cf1e:	e7d8      	b.n	800ced2 <_puts_r+0x2a>
 800cf20:	4b19      	ldr	r3, [pc, #100]	; (800cf88 <_puts_r+0xe0>)
 800cf22:	429c      	cmp	r4, r3
 800cf24:	d1d5      	bne.n	800ced2 <_puts_r+0x2a>
 800cf26:	68ec      	ldr	r4, [r5, #12]
 800cf28:	e7d3      	b.n	800ced2 <_puts_r+0x2a>
 800cf2a:	3601      	adds	r6, #1
 800cf2c:	60a3      	str	r3, [r4, #8]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	da04      	bge.n	800cf3c <_puts_r+0x94>
 800cf32:	69a2      	ldr	r2, [r4, #24]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	dc16      	bgt.n	800cf66 <_puts_r+0xbe>
 800cf38:	290a      	cmp	r1, #10
 800cf3a:	d014      	beq.n	800cf66 <_puts_r+0xbe>
 800cf3c:	6823      	ldr	r3, [r4, #0]
 800cf3e:	1c5a      	adds	r2, r3, #1
 800cf40:	6022      	str	r2, [r4, #0]
 800cf42:	7019      	strb	r1, [r3, #0]
 800cf44:	68a3      	ldr	r3, [r4, #8]
 800cf46:	7831      	ldrb	r1, [r6, #0]
 800cf48:	3b01      	subs	r3, #1
 800cf4a:	2900      	cmp	r1, #0
 800cf4c:	d1ed      	bne.n	800cf2a <_puts_r+0x82>
 800cf4e:	60a3      	str	r3, [r4, #8]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	da0f      	bge.n	800cf74 <_puts_r+0xcc>
 800cf54:	0028      	movs	r0, r5
 800cf56:	0022      	movs	r2, r4
 800cf58:	310a      	adds	r1, #10
 800cf5a:	f000 f821 	bl	800cfa0 <__swbuf_r>
 800cf5e:	250a      	movs	r5, #10
 800cf60:	1c43      	adds	r3, r0, #1
 800cf62:	d1cd      	bne.n	800cf00 <_puts_r+0x58>
 800cf64:	e7ca      	b.n	800cefc <_puts_r+0x54>
 800cf66:	0022      	movs	r2, r4
 800cf68:	0028      	movs	r0, r5
 800cf6a:	f000 f819 	bl	800cfa0 <__swbuf_r>
 800cf6e:	1c43      	adds	r3, r0, #1
 800cf70:	d1e8      	bne.n	800cf44 <_puts_r+0x9c>
 800cf72:	e7c3      	b.n	800cefc <_puts_r+0x54>
 800cf74:	250a      	movs	r5, #10
 800cf76:	6823      	ldr	r3, [r4, #0]
 800cf78:	1c5a      	adds	r2, r3, #1
 800cf7a:	6022      	str	r2, [r4, #0]
 800cf7c:	701d      	strb	r5, [r3, #0]
 800cf7e:	e7bf      	b.n	800cf00 <_puts_r+0x58>
 800cf80:	0800da78 	.word	0x0800da78
 800cf84:	0800da98 	.word	0x0800da98
 800cf88:	0800da58 	.word	0x0800da58

0800cf8c <puts>:
 800cf8c:	b510      	push	{r4, lr}
 800cf8e:	4b03      	ldr	r3, [pc, #12]	; (800cf9c <puts+0x10>)
 800cf90:	0001      	movs	r1, r0
 800cf92:	6818      	ldr	r0, [r3, #0]
 800cf94:	f7ff ff88 	bl	800cea8 <_puts_r>
 800cf98:	bd10      	pop	{r4, pc}
 800cf9a:	46c0      	nop			; (mov r8, r8)
 800cf9c:	2000000c 	.word	0x2000000c

0800cfa0 <__swbuf_r>:
 800cfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfa2:	0005      	movs	r5, r0
 800cfa4:	000e      	movs	r6, r1
 800cfa6:	0014      	movs	r4, r2
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	d004      	beq.n	800cfb6 <__swbuf_r+0x16>
 800cfac:	6983      	ldr	r3, [r0, #24]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d101      	bne.n	800cfb6 <__swbuf_r+0x16>
 800cfb2:	f000 f9f1 	bl	800d398 <__sinit>
 800cfb6:	4b22      	ldr	r3, [pc, #136]	; (800d040 <__swbuf_r+0xa0>)
 800cfb8:	429c      	cmp	r4, r3
 800cfba:	d12e      	bne.n	800d01a <__swbuf_r+0x7a>
 800cfbc:	686c      	ldr	r4, [r5, #4]
 800cfbe:	69a3      	ldr	r3, [r4, #24]
 800cfc0:	60a3      	str	r3, [r4, #8]
 800cfc2:	89a3      	ldrh	r3, [r4, #12]
 800cfc4:	071b      	lsls	r3, r3, #28
 800cfc6:	d532      	bpl.n	800d02e <__swbuf_r+0x8e>
 800cfc8:	6923      	ldr	r3, [r4, #16]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d02f      	beq.n	800d02e <__swbuf_r+0x8e>
 800cfce:	6823      	ldr	r3, [r4, #0]
 800cfd0:	6922      	ldr	r2, [r4, #16]
 800cfd2:	b2f7      	uxtb	r7, r6
 800cfd4:	1a98      	subs	r0, r3, r2
 800cfd6:	6963      	ldr	r3, [r4, #20]
 800cfd8:	b2f6      	uxtb	r6, r6
 800cfda:	4283      	cmp	r3, r0
 800cfdc:	dc05      	bgt.n	800cfea <__swbuf_r+0x4a>
 800cfde:	0021      	movs	r1, r4
 800cfe0:	0028      	movs	r0, r5
 800cfe2:	f000 f937 	bl	800d254 <_fflush_r>
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	d127      	bne.n	800d03a <__swbuf_r+0x9a>
 800cfea:	68a3      	ldr	r3, [r4, #8]
 800cfec:	3001      	adds	r0, #1
 800cfee:	3b01      	subs	r3, #1
 800cff0:	60a3      	str	r3, [r4, #8]
 800cff2:	6823      	ldr	r3, [r4, #0]
 800cff4:	1c5a      	adds	r2, r3, #1
 800cff6:	6022      	str	r2, [r4, #0]
 800cff8:	701f      	strb	r7, [r3, #0]
 800cffa:	6963      	ldr	r3, [r4, #20]
 800cffc:	4283      	cmp	r3, r0
 800cffe:	d004      	beq.n	800d00a <__swbuf_r+0x6a>
 800d000:	89a3      	ldrh	r3, [r4, #12]
 800d002:	07db      	lsls	r3, r3, #31
 800d004:	d507      	bpl.n	800d016 <__swbuf_r+0x76>
 800d006:	2e0a      	cmp	r6, #10
 800d008:	d105      	bne.n	800d016 <__swbuf_r+0x76>
 800d00a:	0021      	movs	r1, r4
 800d00c:	0028      	movs	r0, r5
 800d00e:	f000 f921 	bl	800d254 <_fflush_r>
 800d012:	2800      	cmp	r0, #0
 800d014:	d111      	bne.n	800d03a <__swbuf_r+0x9a>
 800d016:	0030      	movs	r0, r6
 800d018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d01a:	4b0a      	ldr	r3, [pc, #40]	; (800d044 <__swbuf_r+0xa4>)
 800d01c:	429c      	cmp	r4, r3
 800d01e:	d101      	bne.n	800d024 <__swbuf_r+0x84>
 800d020:	68ac      	ldr	r4, [r5, #8]
 800d022:	e7cc      	b.n	800cfbe <__swbuf_r+0x1e>
 800d024:	4b08      	ldr	r3, [pc, #32]	; (800d048 <__swbuf_r+0xa8>)
 800d026:	429c      	cmp	r4, r3
 800d028:	d1c9      	bne.n	800cfbe <__swbuf_r+0x1e>
 800d02a:	68ec      	ldr	r4, [r5, #12]
 800d02c:	e7c7      	b.n	800cfbe <__swbuf_r+0x1e>
 800d02e:	0021      	movs	r1, r4
 800d030:	0028      	movs	r0, r5
 800d032:	f000 f80b 	bl	800d04c <__swsetup_r>
 800d036:	2800      	cmp	r0, #0
 800d038:	d0c9      	beq.n	800cfce <__swbuf_r+0x2e>
 800d03a:	2601      	movs	r6, #1
 800d03c:	4276      	negs	r6, r6
 800d03e:	e7ea      	b.n	800d016 <__swbuf_r+0x76>
 800d040:	0800da78 	.word	0x0800da78
 800d044:	0800da98 	.word	0x0800da98
 800d048:	0800da58 	.word	0x0800da58

0800d04c <__swsetup_r>:
 800d04c:	4b37      	ldr	r3, [pc, #220]	; (800d12c <__swsetup_r+0xe0>)
 800d04e:	b570      	push	{r4, r5, r6, lr}
 800d050:	681d      	ldr	r5, [r3, #0]
 800d052:	0006      	movs	r6, r0
 800d054:	000c      	movs	r4, r1
 800d056:	2d00      	cmp	r5, #0
 800d058:	d005      	beq.n	800d066 <__swsetup_r+0x1a>
 800d05a:	69ab      	ldr	r3, [r5, #24]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d102      	bne.n	800d066 <__swsetup_r+0x1a>
 800d060:	0028      	movs	r0, r5
 800d062:	f000 f999 	bl	800d398 <__sinit>
 800d066:	4b32      	ldr	r3, [pc, #200]	; (800d130 <__swsetup_r+0xe4>)
 800d068:	429c      	cmp	r4, r3
 800d06a:	d10f      	bne.n	800d08c <__swsetup_r+0x40>
 800d06c:	686c      	ldr	r4, [r5, #4]
 800d06e:	230c      	movs	r3, #12
 800d070:	5ee2      	ldrsh	r2, [r4, r3]
 800d072:	b293      	uxth	r3, r2
 800d074:	0711      	lsls	r1, r2, #28
 800d076:	d42d      	bmi.n	800d0d4 <__swsetup_r+0x88>
 800d078:	06d9      	lsls	r1, r3, #27
 800d07a:	d411      	bmi.n	800d0a0 <__swsetup_r+0x54>
 800d07c:	2309      	movs	r3, #9
 800d07e:	2001      	movs	r0, #1
 800d080:	6033      	str	r3, [r6, #0]
 800d082:	3337      	adds	r3, #55	; 0x37
 800d084:	4313      	orrs	r3, r2
 800d086:	81a3      	strh	r3, [r4, #12]
 800d088:	4240      	negs	r0, r0
 800d08a:	bd70      	pop	{r4, r5, r6, pc}
 800d08c:	4b29      	ldr	r3, [pc, #164]	; (800d134 <__swsetup_r+0xe8>)
 800d08e:	429c      	cmp	r4, r3
 800d090:	d101      	bne.n	800d096 <__swsetup_r+0x4a>
 800d092:	68ac      	ldr	r4, [r5, #8]
 800d094:	e7eb      	b.n	800d06e <__swsetup_r+0x22>
 800d096:	4b28      	ldr	r3, [pc, #160]	; (800d138 <__swsetup_r+0xec>)
 800d098:	429c      	cmp	r4, r3
 800d09a:	d1e8      	bne.n	800d06e <__swsetup_r+0x22>
 800d09c:	68ec      	ldr	r4, [r5, #12]
 800d09e:	e7e6      	b.n	800d06e <__swsetup_r+0x22>
 800d0a0:	075b      	lsls	r3, r3, #29
 800d0a2:	d513      	bpl.n	800d0cc <__swsetup_r+0x80>
 800d0a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0a6:	2900      	cmp	r1, #0
 800d0a8:	d008      	beq.n	800d0bc <__swsetup_r+0x70>
 800d0aa:	0023      	movs	r3, r4
 800d0ac:	3344      	adds	r3, #68	; 0x44
 800d0ae:	4299      	cmp	r1, r3
 800d0b0:	d002      	beq.n	800d0b8 <__swsetup_r+0x6c>
 800d0b2:	0030      	movs	r0, r6
 800d0b4:	f000 fa80 	bl	800d5b8 <_free_r>
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	6363      	str	r3, [r4, #52]	; 0x34
 800d0bc:	2224      	movs	r2, #36	; 0x24
 800d0be:	89a3      	ldrh	r3, [r4, #12]
 800d0c0:	4393      	bics	r3, r2
 800d0c2:	81a3      	strh	r3, [r4, #12]
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	6063      	str	r3, [r4, #4]
 800d0c8:	6923      	ldr	r3, [r4, #16]
 800d0ca:	6023      	str	r3, [r4, #0]
 800d0cc:	2308      	movs	r3, #8
 800d0ce:	89a2      	ldrh	r2, [r4, #12]
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	81a3      	strh	r3, [r4, #12]
 800d0d4:	6923      	ldr	r3, [r4, #16]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d10b      	bne.n	800d0f2 <__swsetup_r+0xa6>
 800d0da:	21a0      	movs	r1, #160	; 0xa0
 800d0dc:	2280      	movs	r2, #128	; 0x80
 800d0de:	89a3      	ldrh	r3, [r4, #12]
 800d0e0:	0089      	lsls	r1, r1, #2
 800d0e2:	0092      	lsls	r2, r2, #2
 800d0e4:	400b      	ands	r3, r1
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d003      	beq.n	800d0f2 <__swsetup_r+0xa6>
 800d0ea:	0021      	movs	r1, r4
 800d0ec:	0030      	movs	r0, r6
 800d0ee:	f000 fa1f 	bl	800d530 <__smakebuf_r>
 800d0f2:	220c      	movs	r2, #12
 800d0f4:	5ea3      	ldrsh	r3, [r4, r2]
 800d0f6:	2001      	movs	r0, #1
 800d0f8:	001a      	movs	r2, r3
 800d0fa:	b299      	uxth	r1, r3
 800d0fc:	4002      	ands	r2, r0
 800d0fe:	4203      	tst	r3, r0
 800d100:	d00f      	beq.n	800d122 <__swsetup_r+0xd6>
 800d102:	2200      	movs	r2, #0
 800d104:	60a2      	str	r2, [r4, #8]
 800d106:	6962      	ldr	r2, [r4, #20]
 800d108:	4252      	negs	r2, r2
 800d10a:	61a2      	str	r2, [r4, #24]
 800d10c:	2000      	movs	r0, #0
 800d10e:	6922      	ldr	r2, [r4, #16]
 800d110:	4282      	cmp	r2, r0
 800d112:	d1ba      	bne.n	800d08a <__swsetup_r+0x3e>
 800d114:	060a      	lsls	r2, r1, #24
 800d116:	d5b8      	bpl.n	800d08a <__swsetup_r+0x3e>
 800d118:	2240      	movs	r2, #64	; 0x40
 800d11a:	4313      	orrs	r3, r2
 800d11c:	81a3      	strh	r3, [r4, #12]
 800d11e:	3801      	subs	r0, #1
 800d120:	e7b3      	b.n	800d08a <__swsetup_r+0x3e>
 800d122:	0788      	lsls	r0, r1, #30
 800d124:	d400      	bmi.n	800d128 <__swsetup_r+0xdc>
 800d126:	6962      	ldr	r2, [r4, #20]
 800d128:	60a2      	str	r2, [r4, #8]
 800d12a:	e7ef      	b.n	800d10c <__swsetup_r+0xc0>
 800d12c:	2000000c 	.word	0x2000000c
 800d130:	0800da78 	.word	0x0800da78
 800d134:	0800da98 	.word	0x0800da98
 800d138:	0800da58 	.word	0x0800da58

0800d13c <__sflush_r>:
 800d13c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d13e:	898b      	ldrh	r3, [r1, #12]
 800d140:	0005      	movs	r5, r0
 800d142:	000c      	movs	r4, r1
 800d144:	071a      	lsls	r2, r3, #28
 800d146:	d45f      	bmi.n	800d208 <__sflush_r+0xcc>
 800d148:	684a      	ldr	r2, [r1, #4]
 800d14a:	2a00      	cmp	r2, #0
 800d14c:	dc04      	bgt.n	800d158 <__sflush_r+0x1c>
 800d14e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d150:	2a00      	cmp	r2, #0
 800d152:	dc01      	bgt.n	800d158 <__sflush_r+0x1c>
 800d154:	2000      	movs	r0, #0
 800d156:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d158:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d15a:	2f00      	cmp	r7, #0
 800d15c:	d0fa      	beq.n	800d154 <__sflush_r+0x18>
 800d15e:	2200      	movs	r2, #0
 800d160:	2180      	movs	r1, #128	; 0x80
 800d162:	682e      	ldr	r6, [r5, #0]
 800d164:	602a      	str	r2, [r5, #0]
 800d166:	001a      	movs	r2, r3
 800d168:	0149      	lsls	r1, r1, #5
 800d16a:	400a      	ands	r2, r1
 800d16c:	420b      	tst	r3, r1
 800d16e:	d034      	beq.n	800d1da <__sflush_r+0x9e>
 800d170:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d172:	89a3      	ldrh	r3, [r4, #12]
 800d174:	075b      	lsls	r3, r3, #29
 800d176:	d506      	bpl.n	800d186 <__sflush_r+0x4a>
 800d178:	6863      	ldr	r3, [r4, #4]
 800d17a:	1ac0      	subs	r0, r0, r3
 800d17c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d001      	beq.n	800d186 <__sflush_r+0x4a>
 800d182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d184:	1ac0      	subs	r0, r0, r3
 800d186:	0002      	movs	r2, r0
 800d188:	6a21      	ldr	r1, [r4, #32]
 800d18a:	2300      	movs	r3, #0
 800d18c:	0028      	movs	r0, r5
 800d18e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d190:	47b8      	blx	r7
 800d192:	89a1      	ldrh	r1, [r4, #12]
 800d194:	1c43      	adds	r3, r0, #1
 800d196:	d106      	bne.n	800d1a6 <__sflush_r+0x6a>
 800d198:	682b      	ldr	r3, [r5, #0]
 800d19a:	2b1d      	cmp	r3, #29
 800d19c:	d831      	bhi.n	800d202 <__sflush_r+0xc6>
 800d19e:	4a2c      	ldr	r2, [pc, #176]	; (800d250 <__sflush_r+0x114>)
 800d1a0:	40da      	lsrs	r2, r3
 800d1a2:	07d3      	lsls	r3, r2, #31
 800d1a4:	d52d      	bpl.n	800d202 <__sflush_r+0xc6>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	6063      	str	r3, [r4, #4]
 800d1aa:	6923      	ldr	r3, [r4, #16]
 800d1ac:	6023      	str	r3, [r4, #0]
 800d1ae:	04cb      	lsls	r3, r1, #19
 800d1b0:	d505      	bpl.n	800d1be <__sflush_r+0x82>
 800d1b2:	1c43      	adds	r3, r0, #1
 800d1b4:	d102      	bne.n	800d1bc <__sflush_r+0x80>
 800d1b6:	682b      	ldr	r3, [r5, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d100      	bne.n	800d1be <__sflush_r+0x82>
 800d1bc:	6560      	str	r0, [r4, #84]	; 0x54
 800d1be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1c0:	602e      	str	r6, [r5, #0]
 800d1c2:	2900      	cmp	r1, #0
 800d1c4:	d0c6      	beq.n	800d154 <__sflush_r+0x18>
 800d1c6:	0023      	movs	r3, r4
 800d1c8:	3344      	adds	r3, #68	; 0x44
 800d1ca:	4299      	cmp	r1, r3
 800d1cc:	d002      	beq.n	800d1d4 <__sflush_r+0x98>
 800d1ce:	0028      	movs	r0, r5
 800d1d0:	f000 f9f2 	bl	800d5b8 <_free_r>
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	6360      	str	r0, [r4, #52]	; 0x34
 800d1d8:	e7bd      	b.n	800d156 <__sflush_r+0x1a>
 800d1da:	2301      	movs	r3, #1
 800d1dc:	0028      	movs	r0, r5
 800d1de:	6a21      	ldr	r1, [r4, #32]
 800d1e0:	47b8      	blx	r7
 800d1e2:	1c43      	adds	r3, r0, #1
 800d1e4:	d1c5      	bne.n	800d172 <__sflush_r+0x36>
 800d1e6:	682b      	ldr	r3, [r5, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d0c2      	beq.n	800d172 <__sflush_r+0x36>
 800d1ec:	2b1d      	cmp	r3, #29
 800d1ee:	d001      	beq.n	800d1f4 <__sflush_r+0xb8>
 800d1f0:	2b16      	cmp	r3, #22
 800d1f2:	d101      	bne.n	800d1f8 <__sflush_r+0xbc>
 800d1f4:	602e      	str	r6, [r5, #0]
 800d1f6:	e7ad      	b.n	800d154 <__sflush_r+0x18>
 800d1f8:	2340      	movs	r3, #64	; 0x40
 800d1fa:	89a2      	ldrh	r2, [r4, #12]
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	81a3      	strh	r3, [r4, #12]
 800d200:	e7a9      	b.n	800d156 <__sflush_r+0x1a>
 800d202:	2340      	movs	r3, #64	; 0x40
 800d204:	430b      	orrs	r3, r1
 800d206:	e7fa      	b.n	800d1fe <__sflush_r+0xc2>
 800d208:	690f      	ldr	r7, [r1, #16]
 800d20a:	2f00      	cmp	r7, #0
 800d20c:	d0a2      	beq.n	800d154 <__sflush_r+0x18>
 800d20e:	680a      	ldr	r2, [r1, #0]
 800d210:	600f      	str	r7, [r1, #0]
 800d212:	1bd2      	subs	r2, r2, r7
 800d214:	9201      	str	r2, [sp, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	079b      	lsls	r3, r3, #30
 800d21a:	d100      	bne.n	800d21e <__sflush_r+0xe2>
 800d21c:	694a      	ldr	r2, [r1, #20]
 800d21e:	60a2      	str	r2, [r4, #8]
 800d220:	9b01      	ldr	r3, [sp, #4]
 800d222:	2b00      	cmp	r3, #0
 800d224:	dc00      	bgt.n	800d228 <__sflush_r+0xec>
 800d226:	e795      	b.n	800d154 <__sflush_r+0x18>
 800d228:	003a      	movs	r2, r7
 800d22a:	0028      	movs	r0, r5
 800d22c:	9b01      	ldr	r3, [sp, #4]
 800d22e:	6a21      	ldr	r1, [r4, #32]
 800d230:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d232:	47b0      	blx	r6
 800d234:	2800      	cmp	r0, #0
 800d236:	dc06      	bgt.n	800d246 <__sflush_r+0x10a>
 800d238:	2340      	movs	r3, #64	; 0x40
 800d23a:	2001      	movs	r0, #1
 800d23c:	89a2      	ldrh	r2, [r4, #12]
 800d23e:	4240      	negs	r0, r0
 800d240:	4313      	orrs	r3, r2
 800d242:	81a3      	strh	r3, [r4, #12]
 800d244:	e787      	b.n	800d156 <__sflush_r+0x1a>
 800d246:	9b01      	ldr	r3, [sp, #4]
 800d248:	183f      	adds	r7, r7, r0
 800d24a:	1a1b      	subs	r3, r3, r0
 800d24c:	9301      	str	r3, [sp, #4]
 800d24e:	e7e7      	b.n	800d220 <__sflush_r+0xe4>
 800d250:	20400001 	.word	0x20400001

0800d254 <_fflush_r>:
 800d254:	690b      	ldr	r3, [r1, #16]
 800d256:	b570      	push	{r4, r5, r6, lr}
 800d258:	0005      	movs	r5, r0
 800d25a:	000c      	movs	r4, r1
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d102      	bne.n	800d266 <_fflush_r+0x12>
 800d260:	2500      	movs	r5, #0
 800d262:	0028      	movs	r0, r5
 800d264:	bd70      	pop	{r4, r5, r6, pc}
 800d266:	2800      	cmp	r0, #0
 800d268:	d004      	beq.n	800d274 <_fflush_r+0x20>
 800d26a:	6983      	ldr	r3, [r0, #24]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d101      	bne.n	800d274 <_fflush_r+0x20>
 800d270:	f000 f892 	bl	800d398 <__sinit>
 800d274:	4b14      	ldr	r3, [pc, #80]	; (800d2c8 <_fflush_r+0x74>)
 800d276:	429c      	cmp	r4, r3
 800d278:	d11b      	bne.n	800d2b2 <_fflush_r+0x5e>
 800d27a:	686c      	ldr	r4, [r5, #4]
 800d27c:	220c      	movs	r2, #12
 800d27e:	5ea3      	ldrsh	r3, [r4, r2]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d0ed      	beq.n	800d260 <_fflush_r+0xc>
 800d284:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d286:	07d2      	lsls	r2, r2, #31
 800d288:	d404      	bmi.n	800d294 <_fflush_r+0x40>
 800d28a:	059b      	lsls	r3, r3, #22
 800d28c:	d402      	bmi.n	800d294 <_fflush_r+0x40>
 800d28e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d290:	f000 f923 	bl	800d4da <__retarget_lock_acquire_recursive>
 800d294:	0028      	movs	r0, r5
 800d296:	0021      	movs	r1, r4
 800d298:	f7ff ff50 	bl	800d13c <__sflush_r>
 800d29c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d29e:	0005      	movs	r5, r0
 800d2a0:	07db      	lsls	r3, r3, #31
 800d2a2:	d4de      	bmi.n	800d262 <_fflush_r+0xe>
 800d2a4:	89a3      	ldrh	r3, [r4, #12]
 800d2a6:	059b      	lsls	r3, r3, #22
 800d2a8:	d4db      	bmi.n	800d262 <_fflush_r+0xe>
 800d2aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2ac:	f000 f916 	bl	800d4dc <__retarget_lock_release_recursive>
 800d2b0:	e7d7      	b.n	800d262 <_fflush_r+0xe>
 800d2b2:	4b06      	ldr	r3, [pc, #24]	; (800d2cc <_fflush_r+0x78>)
 800d2b4:	429c      	cmp	r4, r3
 800d2b6:	d101      	bne.n	800d2bc <_fflush_r+0x68>
 800d2b8:	68ac      	ldr	r4, [r5, #8]
 800d2ba:	e7df      	b.n	800d27c <_fflush_r+0x28>
 800d2bc:	4b04      	ldr	r3, [pc, #16]	; (800d2d0 <_fflush_r+0x7c>)
 800d2be:	429c      	cmp	r4, r3
 800d2c0:	d1dc      	bne.n	800d27c <_fflush_r+0x28>
 800d2c2:	68ec      	ldr	r4, [r5, #12]
 800d2c4:	e7da      	b.n	800d27c <_fflush_r+0x28>
 800d2c6:	46c0      	nop			; (mov r8, r8)
 800d2c8:	0800da78 	.word	0x0800da78
 800d2cc:	0800da98 	.word	0x0800da98
 800d2d0:	0800da58 	.word	0x0800da58

0800d2d4 <std>:
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	b510      	push	{r4, lr}
 800d2d8:	0004      	movs	r4, r0
 800d2da:	6003      	str	r3, [r0, #0]
 800d2dc:	6043      	str	r3, [r0, #4]
 800d2de:	6083      	str	r3, [r0, #8]
 800d2e0:	8181      	strh	r1, [r0, #12]
 800d2e2:	6643      	str	r3, [r0, #100]	; 0x64
 800d2e4:	0019      	movs	r1, r3
 800d2e6:	81c2      	strh	r2, [r0, #14]
 800d2e8:	6103      	str	r3, [r0, #16]
 800d2ea:	6143      	str	r3, [r0, #20]
 800d2ec:	6183      	str	r3, [r0, #24]
 800d2ee:	2208      	movs	r2, #8
 800d2f0:	305c      	adds	r0, #92	; 0x5c
 800d2f2:	f7ff fdd1 	bl	800ce98 <memset>
 800d2f6:	4b05      	ldr	r3, [pc, #20]	; (800d30c <std+0x38>)
 800d2f8:	6224      	str	r4, [r4, #32]
 800d2fa:	6263      	str	r3, [r4, #36]	; 0x24
 800d2fc:	4b04      	ldr	r3, [pc, #16]	; (800d310 <std+0x3c>)
 800d2fe:	62a3      	str	r3, [r4, #40]	; 0x28
 800d300:	4b04      	ldr	r3, [pc, #16]	; (800d314 <std+0x40>)
 800d302:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d304:	4b04      	ldr	r3, [pc, #16]	; (800d318 <std+0x44>)
 800d306:	6323      	str	r3, [r4, #48]	; 0x30
 800d308:	bd10      	pop	{r4, pc}
 800d30a:	46c0      	nop			; (mov r8, r8)
 800d30c:	0800d7a1 	.word	0x0800d7a1
 800d310:	0800d7c9 	.word	0x0800d7c9
 800d314:	0800d801 	.word	0x0800d801
 800d318:	0800d82d 	.word	0x0800d82d

0800d31c <_cleanup_r>:
 800d31c:	b510      	push	{r4, lr}
 800d31e:	4902      	ldr	r1, [pc, #8]	; (800d328 <_cleanup_r+0xc>)
 800d320:	f000 f8ba 	bl	800d498 <_fwalk_reent>
 800d324:	bd10      	pop	{r4, pc}
 800d326:	46c0      	nop			; (mov r8, r8)
 800d328:	0800d255 	.word	0x0800d255

0800d32c <__sfmoreglue>:
 800d32c:	b570      	push	{r4, r5, r6, lr}
 800d32e:	2568      	movs	r5, #104	; 0x68
 800d330:	1e4a      	subs	r2, r1, #1
 800d332:	4355      	muls	r5, r2
 800d334:	000e      	movs	r6, r1
 800d336:	0029      	movs	r1, r5
 800d338:	3174      	adds	r1, #116	; 0x74
 800d33a:	f000 f9a9 	bl	800d690 <_malloc_r>
 800d33e:	1e04      	subs	r4, r0, #0
 800d340:	d008      	beq.n	800d354 <__sfmoreglue+0x28>
 800d342:	2100      	movs	r1, #0
 800d344:	002a      	movs	r2, r5
 800d346:	6001      	str	r1, [r0, #0]
 800d348:	6046      	str	r6, [r0, #4]
 800d34a:	300c      	adds	r0, #12
 800d34c:	60a0      	str	r0, [r4, #8]
 800d34e:	3268      	adds	r2, #104	; 0x68
 800d350:	f7ff fda2 	bl	800ce98 <memset>
 800d354:	0020      	movs	r0, r4
 800d356:	bd70      	pop	{r4, r5, r6, pc}

0800d358 <__sfp_lock_acquire>:
 800d358:	b510      	push	{r4, lr}
 800d35a:	4802      	ldr	r0, [pc, #8]	; (800d364 <__sfp_lock_acquire+0xc>)
 800d35c:	f000 f8bd 	bl	800d4da <__retarget_lock_acquire_recursive>
 800d360:	bd10      	pop	{r4, pc}
 800d362:	46c0      	nop			; (mov r8, r8)
 800d364:	20000129 	.word	0x20000129

0800d368 <__sfp_lock_release>:
 800d368:	b510      	push	{r4, lr}
 800d36a:	4802      	ldr	r0, [pc, #8]	; (800d374 <__sfp_lock_release+0xc>)
 800d36c:	f000 f8b6 	bl	800d4dc <__retarget_lock_release_recursive>
 800d370:	bd10      	pop	{r4, pc}
 800d372:	46c0      	nop			; (mov r8, r8)
 800d374:	20000129 	.word	0x20000129

0800d378 <__sinit_lock_acquire>:
 800d378:	b510      	push	{r4, lr}
 800d37a:	4802      	ldr	r0, [pc, #8]	; (800d384 <__sinit_lock_acquire+0xc>)
 800d37c:	f000 f8ad 	bl	800d4da <__retarget_lock_acquire_recursive>
 800d380:	bd10      	pop	{r4, pc}
 800d382:	46c0      	nop			; (mov r8, r8)
 800d384:	2000012a 	.word	0x2000012a

0800d388 <__sinit_lock_release>:
 800d388:	b510      	push	{r4, lr}
 800d38a:	4802      	ldr	r0, [pc, #8]	; (800d394 <__sinit_lock_release+0xc>)
 800d38c:	f000 f8a6 	bl	800d4dc <__retarget_lock_release_recursive>
 800d390:	bd10      	pop	{r4, pc}
 800d392:	46c0      	nop			; (mov r8, r8)
 800d394:	2000012a 	.word	0x2000012a

0800d398 <__sinit>:
 800d398:	b513      	push	{r0, r1, r4, lr}
 800d39a:	0004      	movs	r4, r0
 800d39c:	f7ff ffec 	bl	800d378 <__sinit_lock_acquire>
 800d3a0:	69a3      	ldr	r3, [r4, #24]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d002      	beq.n	800d3ac <__sinit+0x14>
 800d3a6:	f7ff ffef 	bl	800d388 <__sinit_lock_release>
 800d3aa:	bd13      	pop	{r0, r1, r4, pc}
 800d3ac:	64a3      	str	r3, [r4, #72]	; 0x48
 800d3ae:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d3b0:	6523      	str	r3, [r4, #80]	; 0x50
 800d3b2:	4b13      	ldr	r3, [pc, #76]	; (800d400 <__sinit+0x68>)
 800d3b4:	4a13      	ldr	r2, [pc, #76]	; (800d404 <__sinit+0x6c>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800d3ba:	9301      	str	r3, [sp, #4]
 800d3bc:	42a3      	cmp	r3, r4
 800d3be:	d101      	bne.n	800d3c4 <__sinit+0x2c>
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	61a3      	str	r3, [r4, #24]
 800d3c4:	0020      	movs	r0, r4
 800d3c6:	f000 f81f 	bl	800d408 <__sfp>
 800d3ca:	6060      	str	r0, [r4, #4]
 800d3cc:	0020      	movs	r0, r4
 800d3ce:	f000 f81b 	bl	800d408 <__sfp>
 800d3d2:	60a0      	str	r0, [r4, #8]
 800d3d4:	0020      	movs	r0, r4
 800d3d6:	f000 f817 	bl	800d408 <__sfp>
 800d3da:	2200      	movs	r2, #0
 800d3dc:	2104      	movs	r1, #4
 800d3de:	60e0      	str	r0, [r4, #12]
 800d3e0:	6860      	ldr	r0, [r4, #4]
 800d3e2:	f7ff ff77 	bl	800d2d4 <std>
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	2109      	movs	r1, #9
 800d3ea:	68a0      	ldr	r0, [r4, #8]
 800d3ec:	f7ff ff72 	bl	800d2d4 <std>
 800d3f0:	2202      	movs	r2, #2
 800d3f2:	2112      	movs	r1, #18
 800d3f4:	68e0      	ldr	r0, [r4, #12]
 800d3f6:	f7ff ff6d 	bl	800d2d4 <std>
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	61a3      	str	r3, [r4, #24]
 800d3fe:	e7d2      	b.n	800d3a6 <__sinit+0xe>
 800d400:	0800da54 	.word	0x0800da54
 800d404:	0800d31d 	.word	0x0800d31d

0800d408 <__sfp>:
 800d408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d40a:	0007      	movs	r7, r0
 800d40c:	f7ff ffa4 	bl	800d358 <__sfp_lock_acquire>
 800d410:	4b1f      	ldr	r3, [pc, #124]	; (800d490 <__sfp+0x88>)
 800d412:	681e      	ldr	r6, [r3, #0]
 800d414:	69b3      	ldr	r3, [r6, #24]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d102      	bne.n	800d420 <__sfp+0x18>
 800d41a:	0030      	movs	r0, r6
 800d41c:	f7ff ffbc 	bl	800d398 <__sinit>
 800d420:	3648      	adds	r6, #72	; 0x48
 800d422:	68b4      	ldr	r4, [r6, #8]
 800d424:	6873      	ldr	r3, [r6, #4]
 800d426:	3b01      	subs	r3, #1
 800d428:	d504      	bpl.n	800d434 <__sfp+0x2c>
 800d42a:	6833      	ldr	r3, [r6, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d022      	beq.n	800d476 <__sfp+0x6e>
 800d430:	6836      	ldr	r6, [r6, #0]
 800d432:	e7f6      	b.n	800d422 <__sfp+0x1a>
 800d434:	220c      	movs	r2, #12
 800d436:	5ea5      	ldrsh	r5, [r4, r2]
 800d438:	2d00      	cmp	r5, #0
 800d43a:	d11a      	bne.n	800d472 <__sfp+0x6a>
 800d43c:	0020      	movs	r0, r4
 800d43e:	4b15      	ldr	r3, [pc, #84]	; (800d494 <__sfp+0x8c>)
 800d440:	3058      	adds	r0, #88	; 0x58
 800d442:	60e3      	str	r3, [r4, #12]
 800d444:	6665      	str	r5, [r4, #100]	; 0x64
 800d446:	f000 f847 	bl	800d4d8 <__retarget_lock_init_recursive>
 800d44a:	f7ff ff8d 	bl	800d368 <__sfp_lock_release>
 800d44e:	0020      	movs	r0, r4
 800d450:	2208      	movs	r2, #8
 800d452:	0029      	movs	r1, r5
 800d454:	6025      	str	r5, [r4, #0]
 800d456:	60a5      	str	r5, [r4, #8]
 800d458:	6065      	str	r5, [r4, #4]
 800d45a:	6125      	str	r5, [r4, #16]
 800d45c:	6165      	str	r5, [r4, #20]
 800d45e:	61a5      	str	r5, [r4, #24]
 800d460:	305c      	adds	r0, #92	; 0x5c
 800d462:	f7ff fd19 	bl	800ce98 <memset>
 800d466:	6365      	str	r5, [r4, #52]	; 0x34
 800d468:	63a5      	str	r5, [r4, #56]	; 0x38
 800d46a:	64a5      	str	r5, [r4, #72]	; 0x48
 800d46c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800d46e:	0020      	movs	r0, r4
 800d470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d472:	3468      	adds	r4, #104	; 0x68
 800d474:	e7d7      	b.n	800d426 <__sfp+0x1e>
 800d476:	2104      	movs	r1, #4
 800d478:	0038      	movs	r0, r7
 800d47a:	f7ff ff57 	bl	800d32c <__sfmoreglue>
 800d47e:	1e04      	subs	r4, r0, #0
 800d480:	6030      	str	r0, [r6, #0]
 800d482:	d1d5      	bne.n	800d430 <__sfp+0x28>
 800d484:	f7ff ff70 	bl	800d368 <__sfp_lock_release>
 800d488:	230c      	movs	r3, #12
 800d48a:	603b      	str	r3, [r7, #0]
 800d48c:	e7ef      	b.n	800d46e <__sfp+0x66>
 800d48e:	46c0      	nop			; (mov r8, r8)
 800d490:	0800da54 	.word	0x0800da54
 800d494:	ffff0001 	.word	0xffff0001

0800d498 <_fwalk_reent>:
 800d498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d49a:	0004      	movs	r4, r0
 800d49c:	0006      	movs	r6, r0
 800d49e:	2700      	movs	r7, #0
 800d4a0:	9101      	str	r1, [sp, #4]
 800d4a2:	3448      	adds	r4, #72	; 0x48
 800d4a4:	6863      	ldr	r3, [r4, #4]
 800d4a6:	68a5      	ldr	r5, [r4, #8]
 800d4a8:	9300      	str	r3, [sp, #0]
 800d4aa:	9b00      	ldr	r3, [sp, #0]
 800d4ac:	3b01      	subs	r3, #1
 800d4ae:	9300      	str	r3, [sp, #0]
 800d4b0:	d504      	bpl.n	800d4bc <_fwalk_reent+0x24>
 800d4b2:	6824      	ldr	r4, [r4, #0]
 800d4b4:	2c00      	cmp	r4, #0
 800d4b6:	d1f5      	bne.n	800d4a4 <_fwalk_reent+0xc>
 800d4b8:	0038      	movs	r0, r7
 800d4ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4bc:	89ab      	ldrh	r3, [r5, #12]
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d908      	bls.n	800d4d4 <_fwalk_reent+0x3c>
 800d4c2:	220e      	movs	r2, #14
 800d4c4:	5eab      	ldrsh	r3, [r5, r2]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	d004      	beq.n	800d4d4 <_fwalk_reent+0x3c>
 800d4ca:	0029      	movs	r1, r5
 800d4cc:	0030      	movs	r0, r6
 800d4ce:	9b01      	ldr	r3, [sp, #4]
 800d4d0:	4798      	blx	r3
 800d4d2:	4307      	orrs	r7, r0
 800d4d4:	3568      	adds	r5, #104	; 0x68
 800d4d6:	e7e8      	b.n	800d4aa <_fwalk_reent+0x12>

0800d4d8 <__retarget_lock_init_recursive>:
 800d4d8:	4770      	bx	lr

0800d4da <__retarget_lock_acquire_recursive>:
 800d4da:	4770      	bx	lr

0800d4dc <__retarget_lock_release_recursive>:
 800d4dc:	4770      	bx	lr
	...

0800d4e0 <__swhatbuf_r>:
 800d4e0:	b570      	push	{r4, r5, r6, lr}
 800d4e2:	000e      	movs	r6, r1
 800d4e4:	001d      	movs	r5, r3
 800d4e6:	230e      	movs	r3, #14
 800d4e8:	5ec9      	ldrsh	r1, [r1, r3]
 800d4ea:	0014      	movs	r4, r2
 800d4ec:	b096      	sub	sp, #88	; 0x58
 800d4ee:	2900      	cmp	r1, #0
 800d4f0:	da08      	bge.n	800d504 <__swhatbuf_r+0x24>
 800d4f2:	220c      	movs	r2, #12
 800d4f4:	5eb3      	ldrsh	r3, [r6, r2]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	602a      	str	r2, [r5, #0]
 800d4fa:	061b      	lsls	r3, r3, #24
 800d4fc:	d411      	bmi.n	800d522 <__swhatbuf_r+0x42>
 800d4fe:	2380      	movs	r3, #128	; 0x80
 800d500:	00db      	lsls	r3, r3, #3
 800d502:	e00f      	b.n	800d524 <__swhatbuf_r+0x44>
 800d504:	466a      	mov	r2, sp
 800d506:	f000 f9bd 	bl	800d884 <_fstat_r>
 800d50a:	2800      	cmp	r0, #0
 800d50c:	dbf1      	blt.n	800d4f2 <__swhatbuf_r+0x12>
 800d50e:	23f0      	movs	r3, #240	; 0xf0
 800d510:	9901      	ldr	r1, [sp, #4]
 800d512:	021b      	lsls	r3, r3, #8
 800d514:	4019      	ands	r1, r3
 800d516:	4b05      	ldr	r3, [pc, #20]	; (800d52c <__swhatbuf_r+0x4c>)
 800d518:	18c9      	adds	r1, r1, r3
 800d51a:	424b      	negs	r3, r1
 800d51c:	4159      	adcs	r1, r3
 800d51e:	6029      	str	r1, [r5, #0]
 800d520:	e7ed      	b.n	800d4fe <__swhatbuf_r+0x1e>
 800d522:	2340      	movs	r3, #64	; 0x40
 800d524:	2000      	movs	r0, #0
 800d526:	6023      	str	r3, [r4, #0]
 800d528:	b016      	add	sp, #88	; 0x58
 800d52a:	bd70      	pop	{r4, r5, r6, pc}
 800d52c:	ffffe000 	.word	0xffffe000

0800d530 <__smakebuf_r>:
 800d530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d532:	2602      	movs	r6, #2
 800d534:	898b      	ldrh	r3, [r1, #12]
 800d536:	0005      	movs	r5, r0
 800d538:	000c      	movs	r4, r1
 800d53a:	4233      	tst	r3, r6
 800d53c:	d006      	beq.n	800d54c <__smakebuf_r+0x1c>
 800d53e:	0023      	movs	r3, r4
 800d540:	3347      	adds	r3, #71	; 0x47
 800d542:	6023      	str	r3, [r4, #0]
 800d544:	6123      	str	r3, [r4, #16]
 800d546:	2301      	movs	r3, #1
 800d548:	6163      	str	r3, [r4, #20]
 800d54a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d54c:	466a      	mov	r2, sp
 800d54e:	ab01      	add	r3, sp, #4
 800d550:	f7ff ffc6 	bl	800d4e0 <__swhatbuf_r>
 800d554:	9900      	ldr	r1, [sp, #0]
 800d556:	0007      	movs	r7, r0
 800d558:	0028      	movs	r0, r5
 800d55a:	f000 f899 	bl	800d690 <_malloc_r>
 800d55e:	2800      	cmp	r0, #0
 800d560:	d108      	bne.n	800d574 <__smakebuf_r+0x44>
 800d562:	220c      	movs	r2, #12
 800d564:	5ea3      	ldrsh	r3, [r4, r2]
 800d566:	059a      	lsls	r2, r3, #22
 800d568:	d4ef      	bmi.n	800d54a <__smakebuf_r+0x1a>
 800d56a:	2203      	movs	r2, #3
 800d56c:	4393      	bics	r3, r2
 800d56e:	431e      	orrs	r6, r3
 800d570:	81a6      	strh	r6, [r4, #12]
 800d572:	e7e4      	b.n	800d53e <__smakebuf_r+0xe>
 800d574:	4b0f      	ldr	r3, [pc, #60]	; (800d5b4 <__smakebuf_r+0x84>)
 800d576:	62ab      	str	r3, [r5, #40]	; 0x28
 800d578:	2380      	movs	r3, #128	; 0x80
 800d57a:	89a2      	ldrh	r2, [r4, #12]
 800d57c:	6020      	str	r0, [r4, #0]
 800d57e:	4313      	orrs	r3, r2
 800d580:	81a3      	strh	r3, [r4, #12]
 800d582:	9b00      	ldr	r3, [sp, #0]
 800d584:	6120      	str	r0, [r4, #16]
 800d586:	6163      	str	r3, [r4, #20]
 800d588:	9b01      	ldr	r3, [sp, #4]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00d      	beq.n	800d5aa <__smakebuf_r+0x7a>
 800d58e:	0028      	movs	r0, r5
 800d590:	230e      	movs	r3, #14
 800d592:	5ee1      	ldrsh	r1, [r4, r3]
 800d594:	f000 f988 	bl	800d8a8 <_isatty_r>
 800d598:	2800      	cmp	r0, #0
 800d59a:	d006      	beq.n	800d5aa <__smakebuf_r+0x7a>
 800d59c:	2203      	movs	r2, #3
 800d59e:	89a3      	ldrh	r3, [r4, #12]
 800d5a0:	4393      	bics	r3, r2
 800d5a2:	001a      	movs	r2, r3
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	81a3      	strh	r3, [r4, #12]
 800d5aa:	89a0      	ldrh	r0, [r4, #12]
 800d5ac:	4307      	orrs	r7, r0
 800d5ae:	81a7      	strh	r7, [r4, #12]
 800d5b0:	e7cb      	b.n	800d54a <__smakebuf_r+0x1a>
 800d5b2:	46c0      	nop			; (mov r8, r8)
 800d5b4:	0800d31d 	.word	0x0800d31d

0800d5b8 <_free_r>:
 800d5b8:	b570      	push	{r4, r5, r6, lr}
 800d5ba:	0005      	movs	r5, r0
 800d5bc:	2900      	cmp	r1, #0
 800d5be:	d010      	beq.n	800d5e2 <_free_r+0x2a>
 800d5c0:	1f0c      	subs	r4, r1, #4
 800d5c2:	6823      	ldr	r3, [r4, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	da00      	bge.n	800d5ca <_free_r+0x12>
 800d5c8:	18e4      	adds	r4, r4, r3
 800d5ca:	0028      	movs	r0, r5
 800d5cc:	f000 f992 	bl	800d8f4 <__malloc_lock>
 800d5d0:	4a1d      	ldr	r2, [pc, #116]	; (800d648 <_free_r+0x90>)
 800d5d2:	6813      	ldr	r3, [r2, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d105      	bne.n	800d5e4 <_free_r+0x2c>
 800d5d8:	6063      	str	r3, [r4, #4]
 800d5da:	6014      	str	r4, [r2, #0]
 800d5dc:	0028      	movs	r0, r5
 800d5de:	f000 f991 	bl	800d904 <__malloc_unlock>
 800d5e2:	bd70      	pop	{r4, r5, r6, pc}
 800d5e4:	42a3      	cmp	r3, r4
 800d5e6:	d908      	bls.n	800d5fa <_free_r+0x42>
 800d5e8:	6821      	ldr	r1, [r4, #0]
 800d5ea:	1860      	adds	r0, r4, r1
 800d5ec:	4283      	cmp	r3, r0
 800d5ee:	d1f3      	bne.n	800d5d8 <_free_r+0x20>
 800d5f0:	6818      	ldr	r0, [r3, #0]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	1841      	adds	r1, r0, r1
 800d5f6:	6021      	str	r1, [r4, #0]
 800d5f8:	e7ee      	b.n	800d5d8 <_free_r+0x20>
 800d5fa:	001a      	movs	r2, r3
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d001      	beq.n	800d606 <_free_r+0x4e>
 800d602:	42a3      	cmp	r3, r4
 800d604:	d9f9      	bls.n	800d5fa <_free_r+0x42>
 800d606:	6811      	ldr	r1, [r2, #0]
 800d608:	1850      	adds	r0, r2, r1
 800d60a:	42a0      	cmp	r0, r4
 800d60c:	d10b      	bne.n	800d626 <_free_r+0x6e>
 800d60e:	6820      	ldr	r0, [r4, #0]
 800d610:	1809      	adds	r1, r1, r0
 800d612:	1850      	adds	r0, r2, r1
 800d614:	6011      	str	r1, [r2, #0]
 800d616:	4283      	cmp	r3, r0
 800d618:	d1e0      	bne.n	800d5dc <_free_r+0x24>
 800d61a:	6818      	ldr	r0, [r3, #0]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	1841      	adds	r1, r0, r1
 800d620:	6011      	str	r1, [r2, #0]
 800d622:	6053      	str	r3, [r2, #4]
 800d624:	e7da      	b.n	800d5dc <_free_r+0x24>
 800d626:	42a0      	cmp	r0, r4
 800d628:	d902      	bls.n	800d630 <_free_r+0x78>
 800d62a:	230c      	movs	r3, #12
 800d62c:	602b      	str	r3, [r5, #0]
 800d62e:	e7d5      	b.n	800d5dc <_free_r+0x24>
 800d630:	6821      	ldr	r1, [r4, #0]
 800d632:	1860      	adds	r0, r4, r1
 800d634:	4283      	cmp	r3, r0
 800d636:	d103      	bne.n	800d640 <_free_r+0x88>
 800d638:	6818      	ldr	r0, [r3, #0]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	1841      	adds	r1, r0, r1
 800d63e:	6021      	str	r1, [r4, #0]
 800d640:	6063      	str	r3, [r4, #4]
 800d642:	6054      	str	r4, [r2, #4]
 800d644:	e7ca      	b.n	800d5dc <_free_r+0x24>
 800d646:	46c0      	nop			; (mov r8, r8)
 800d648:	2000012c 	.word	0x2000012c

0800d64c <sbrk_aligned>:
 800d64c:	b570      	push	{r4, r5, r6, lr}
 800d64e:	4e0f      	ldr	r6, [pc, #60]	; (800d68c <sbrk_aligned+0x40>)
 800d650:	000d      	movs	r5, r1
 800d652:	6831      	ldr	r1, [r6, #0]
 800d654:	0004      	movs	r4, r0
 800d656:	2900      	cmp	r1, #0
 800d658:	d102      	bne.n	800d660 <sbrk_aligned+0x14>
 800d65a:	f000 f88f 	bl	800d77c <_sbrk_r>
 800d65e:	6030      	str	r0, [r6, #0]
 800d660:	0029      	movs	r1, r5
 800d662:	0020      	movs	r0, r4
 800d664:	f000 f88a 	bl	800d77c <_sbrk_r>
 800d668:	1c43      	adds	r3, r0, #1
 800d66a:	d00a      	beq.n	800d682 <sbrk_aligned+0x36>
 800d66c:	2303      	movs	r3, #3
 800d66e:	1cc5      	adds	r5, r0, #3
 800d670:	439d      	bics	r5, r3
 800d672:	42a8      	cmp	r0, r5
 800d674:	d007      	beq.n	800d686 <sbrk_aligned+0x3a>
 800d676:	1a29      	subs	r1, r5, r0
 800d678:	0020      	movs	r0, r4
 800d67a:	f000 f87f 	bl	800d77c <_sbrk_r>
 800d67e:	1c43      	adds	r3, r0, #1
 800d680:	d101      	bne.n	800d686 <sbrk_aligned+0x3a>
 800d682:	2501      	movs	r5, #1
 800d684:	426d      	negs	r5, r5
 800d686:	0028      	movs	r0, r5
 800d688:	bd70      	pop	{r4, r5, r6, pc}
 800d68a:	46c0      	nop			; (mov r8, r8)
 800d68c:	20000130 	.word	0x20000130

0800d690 <_malloc_r>:
 800d690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d692:	2203      	movs	r2, #3
 800d694:	1ccb      	adds	r3, r1, #3
 800d696:	4393      	bics	r3, r2
 800d698:	3308      	adds	r3, #8
 800d69a:	0006      	movs	r6, r0
 800d69c:	001f      	movs	r7, r3
 800d69e:	2b0c      	cmp	r3, #12
 800d6a0:	d232      	bcs.n	800d708 <_malloc_r+0x78>
 800d6a2:	270c      	movs	r7, #12
 800d6a4:	42b9      	cmp	r1, r7
 800d6a6:	d831      	bhi.n	800d70c <_malloc_r+0x7c>
 800d6a8:	0030      	movs	r0, r6
 800d6aa:	f000 f923 	bl	800d8f4 <__malloc_lock>
 800d6ae:	4d32      	ldr	r5, [pc, #200]	; (800d778 <_malloc_r+0xe8>)
 800d6b0:	682b      	ldr	r3, [r5, #0]
 800d6b2:	001c      	movs	r4, r3
 800d6b4:	2c00      	cmp	r4, #0
 800d6b6:	d12e      	bne.n	800d716 <_malloc_r+0x86>
 800d6b8:	0039      	movs	r1, r7
 800d6ba:	0030      	movs	r0, r6
 800d6bc:	f7ff ffc6 	bl	800d64c <sbrk_aligned>
 800d6c0:	0004      	movs	r4, r0
 800d6c2:	1c43      	adds	r3, r0, #1
 800d6c4:	d11e      	bne.n	800d704 <_malloc_r+0x74>
 800d6c6:	682c      	ldr	r4, [r5, #0]
 800d6c8:	0025      	movs	r5, r4
 800d6ca:	2d00      	cmp	r5, #0
 800d6cc:	d14a      	bne.n	800d764 <_malloc_r+0xd4>
 800d6ce:	6823      	ldr	r3, [r4, #0]
 800d6d0:	0029      	movs	r1, r5
 800d6d2:	18e3      	adds	r3, r4, r3
 800d6d4:	0030      	movs	r0, r6
 800d6d6:	9301      	str	r3, [sp, #4]
 800d6d8:	f000 f850 	bl	800d77c <_sbrk_r>
 800d6dc:	9b01      	ldr	r3, [sp, #4]
 800d6de:	4283      	cmp	r3, r0
 800d6e0:	d143      	bne.n	800d76a <_malloc_r+0xda>
 800d6e2:	6823      	ldr	r3, [r4, #0]
 800d6e4:	3703      	adds	r7, #3
 800d6e6:	1aff      	subs	r7, r7, r3
 800d6e8:	2303      	movs	r3, #3
 800d6ea:	439f      	bics	r7, r3
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	2f0c      	cmp	r7, #12
 800d6f0:	d200      	bcs.n	800d6f4 <_malloc_r+0x64>
 800d6f2:	270c      	movs	r7, #12
 800d6f4:	0039      	movs	r1, r7
 800d6f6:	0030      	movs	r0, r6
 800d6f8:	f7ff ffa8 	bl	800d64c <sbrk_aligned>
 800d6fc:	1c43      	adds	r3, r0, #1
 800d6fe:	d034      	beq.n	800d76a <_malloc_r+0xda>
 800d700:	6823      	ldr	r3, [r4, #0]
 800d702:	19df      	adds	r7, r3, r7
 800d704:	6027      	str	r7, [r4, #0]
 800d706:	e013      	b.n	800d730 <_malloc_r+0xa0>
 800d708:	2b00      	cmp	r3, #0
 800d70a:	dacb      	bge.n	800d6a4 <_malloc_r+0x14>
 800d70c:	230c      	movs	r3, #12
 800d70e:	2500      	movs	r5, #0
 800d710:	6033      	str	r3, [r6, #0]
 800d712:	0028      	movs	r0, r5
 800d714:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d716:	6822      	ldr	r2, [r4, #0]
 800d718:	1bd1      	subs	r1, r2, r7
 800d71a:	d420      	bmi.n	800d75e <_malloc_r+0xce>
 800d71c:	290b      	cmp	r1, #11
 800d71e:	d917      	bls.n	800d750 <_malloc_r+0xc0>
 800d720:	19e2      	adds	r2, r4, r7
 800d722:	6027      	str	r7, [r4, #0]
 800d724:	42a3      	cmp	r3, r4
 800d726:	d111      	bne.n	800d74c <_malloc_r+0xbc>
 800d728:	602a      	str	r2, [r5, #0]
 800d72a:	6863      	ldr	r3, [r4, #4]
 800d72c:	6011      	str	r1, [r2, #0]
 800d72e:	6053      	str	r3, [r2, #4]
 800d730:	0030      	movs	r0, r6
 800d732:	0025      	movs	r5, r4
 800d734:	f000 f8e6 	bl	800d904 <__malloc_unlock>
 800d738:	2207      	movs	r2, #7
 800d73a:	350b      	adds	r5, #11
 800d73c:	1d23      	adds	r3, r4, #4
 800d73e:	4395      	bics	r5, r2
 800d740:	1aea      	subs	r2, r5, r3
 800d742:	429d      	cmp	r5, r3
 800d744:	d0e5      	beq.n	800d712 <_malloc_r+0x82>
 800d746:	1b5b      	subs	r3, r3, r5
 800d748:	50a3      	str	r3, [r4, r2]
 800d74a:	e7e2      	b.n	800d712 <_malloc_r+0x82>
 800d74c:	605a      	str	r2, [r3, #4]
 800d74e:	e7ec      	b.n	800d72a <_malloc_r+0x9a>
 800d750:	6862      	ldr	r2, [r4, #4]
 800d752:	42a3      	cmp	r3, r4
 800d754:	d101      	bne.n	800d75a <_malloc_r+0xca>
 800d756:	602a      	str	r2, [r5, #0]
 800d758:	e7ea      	b.n	800d730 <_malloc_r+0xa0>
 800d75a:	605a      	str	r2, [r3, #4]
 800d75c:	e7e8      	b.n	800d730 <_malloc_r+0xa0>
 800d75e:	0023      	movs	r3, r4
 800d760:	6864      	ldr	r4, [r4, #4]
 800d762:	e7a7      	b.n	800d6b4 <_malloc_r+0x24>
 800d764:	002c      	movs	r4, r5
 800d766:	686d      	ldr	r5, [r5, #4]
 800d768:	e7af      	b.n	800d6ca <_malloc_r+0x3a>
 800d76a:	230c      	movs	r3, #12
 800d76c:	0030      	movs	r0, r6
 800d76e:	6033      	str	r3, [r6, #0]
 800d770:	f000 f8c8 	bl	800d904 <__malloc_unlock>
 800d774:	e7cd      	b.n	800d712 <_malloc_r+0x82>
 800d776:	46c0      	nop			; (mov r8, r8)
 800d778:	2000012c 	.word	0x2000012c

0800d77c <_sbrk_r>:
 800d77c:	2300      	movs	r3, #0
 800d77e:	b570      	push	{r4, r5, r6, lr}
 800d780:	4d06      	ldr	r5, [pc, #24]	; (800d79c <_sbrk_r+0x20>)
 800d782:	0004      	movs	r4, r0
 800d784:	0008      	movs	r0, r1
 800d786:	602b      	str	r3, [r5, #0]
 800d788:	f7fd f9ec 	bl	800ab64 <_sbrk>
 800d78c:	1c43      	adds	r3, r0, #1
 800d78e:	d103      	bne.n	800d798 <_sbrk_r+0x1c>
 800d790:	682b      	ldr	r3, [r5, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d000      	beq.n	800d798 <_sbrk_r+0x1c>
 800d796:	6023      	str	r3, [r4, #0]
 800d798:	bd70      	pop	{r4, r5, r6, pc}
 800d79a:	46c0      	nop			; (mov r8, r8)
 800d79c:	20000134 	.word	0x20000134

0800d7a0 <__sread>:
 800d7a0:	b570      	push	{r4, r5, r6, lr}
 800d7a2:	000c      	movs	r4, r1
 800d7a4:	250e      	movs	r5, #14
 800d7a6:	5f49      	ldrsh	r1, [r1, r5]
 800d7a8:	f000 f8b4 	bl	800d914 <_read_r>
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	db03      	blt.n	800d7b8 <__sread+0x18>
 800d7b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d7b2:	181b      	adds	r3, r3, r0
 800d7b4:	6563      	str	r3, [r4, #84]	; 0x54
 800d7b6:	bd70      	pop	{r4, r5, r6, pc}
 800d7b8:	89a3      	ldrh	r3, [r4, #12]
 800d7ba:	4a02      	ldr	r2, [pc, #8]	; (800d7c4 <__sread+0x24>)
 800d7bc:	4013      	ands	r3, r2
 800d7be:	81a3      	strh	r3, [r4, #12]
 800d7c0:	e7f9      	b.n	800d7b6 <__sread+0x16>
 800d7c2:	46c0      	nop			; (mov r8, r8)
 800d7c4:	ffffefff 	.word	0xffffefff

0800d7c8 <__swrite>:
 800d7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ca:	001f      	movs	r7, r3
 800d7cc:	898b      	ldrh	r3, [r1, #12]
 800d7ce:	0005      	movs	r5, r0
 800d7d0:	000c      	movs	r4, r1
 800d7d2:	0016      	movs	r6, r2
 800d7d4:	05db      	lsls	r3, r3, #23
 800d7d6:	d505      	bpl.n	800d7e4 <__swrite+0x1c>
 800d7d8:	230e      	movs	r3, #14
 800d7da:	5ec9      	ldrsh	r1, [r1, r3]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	2302      	movs	r3, #2
 800d7e0:	f000 f874 	bl	800d8cc <_lseek_r>
 800d7e4:	89a3      	ldrh	r3, [r4, #12]
 800d7e6:	4a05      	ldr	r2, [pc, #20]	; (800d7fc <__swrite+0x34>)
 800d7e8:	0028      	movs	r0, r5
 800d7ea:	4013      	ands	r3, r2
 800d7ec:	81a3      	strh	r3, [r4, #12]
 800d7ee:	0032      	movs	r2, r6
 800d7f0:	230e      	movs	r3, #14
 800d7f2:	5ee1      	ldrsh	r1, [r4, r3]
 800d7f4:	003b      	movs	r3, r7
 800d7f6:	f000 f81f 	bl	800d838 <_write_r>
 800d7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7fc:	ffffefff 	.word	0xffffefff

0800d800 <__sseek>:
 800d800:	b570      	push	{r4, r5, r6, lr}
 800d802:	000c      	movs	r4, r1
 800d804:	250e      	movs	r5, #14
 800d806:	5f49      	ldrsh	r1, [r1, r5]
 800d808:	f000 f860 	bl	800d8cc <_lseek_r>
 800d80c:	89a3      	ldrh	r3, [r4, #12]
 800d80e:	1c42      	adds	r2, r0, #1
 800d810:	d103      	bne.n	800d81a <__sseek+0x1a>
 800d812:	4a05      	ldr	r2, [pc, #20]	; (800d828 <__sseek+0x28>)
 800d814:	4013      	ands	r3, r2
 800d816:	81a3      	strh	r3, [r4, #12]
 800d818:	bd70      	pop	{r4, r5, r6, pc}
 800d81a:	2280      	movs	r2, #128	; 0x80
 800d81c:	0152      	lsls	r2, r2, #5
 800d81e:	4313      	orrs	r3, r2
 800d820:	81a3      	strh	r3, [r4, #12]
 800d822:	6560      	str	r0, [r4, #84]	; 0x54
 800d824:	e7f8      	b.n	800d818 <__sseek+0x18>
 800d826:	46c0      	nop			; (mov r8, r8)
 800d828:	ffffefff 	.word	0xffffefff

0800d82c <__sclose>:
 800d82c:	b510      	push	{r4, lr}
 800d82e:	230e      	movs	r3, #14
 800d830:	5ec9      	ldrsh	r1, [r1, r3]
 800d832:	f000 f815 	bl	800d860 <_close_r>
 800d836:	bd10      	pop	{r4, pc}

0800d838 <_write_r>:
 800d838:	b570      	push	{r4, r5, r6, lr}
 800d83a:	0004      	movs	r4, r0
 800d83c:	0008      	movs	r0, r1
 800d83e:	0011      	movs	r1, r2
 800d840:	001a      	movs	r2, r3
 800d842:	2300      	movs	r3, #0
 800d844:	4d05      	ldr	r5, [pc, #20]	; (800d85c <_write_r+0x24>)
 800d846:	602b      	str	r3, [r5, #0]
 800d848:	f7fd f944 	bl	800aad4 <_write>
 800d84c:	1c43      	adds	r3, r0, #1
 800d84e:	d103      	bne.n	800d858 <_write_r+0x20>
 800d850:	682b      	ldr	r3, [r5, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d000      	beq.n	800d858 <_write_r+0x20>
 800d856:	6023      	str	r3, [r4, #0]
 800d858:	bd70      	pop	{r4, r5, r6, pc}
 800d85a:	46c0      	nop			; (mov r8, r8)
 800d85c:	20000134 	.word	0x20000134

0800d860 <_close_r>:
 800d860:	2300      	movs	r3, #0
 800d862:	b570      	push	{r4, r5, r6, lr}
 800d864:	4d06      	ldr	r5, [pc, #24]	; (800d880 <_close_r+0x20>)
 800d866:	0004      	movs	r4, r0
 800d868:	0008      	movs	r0, r1
 800d86a:	602b      	str	r3, [r5, #0]
 800d86c:	f7fd f94e 	bl	800ab0c <_close>
 800d870:	1c43      	adds	r3, r0, #1
 800d872:	d103      	bne.n	800d87c <_close_r+0x1c>
 800d874:	682b      	ldr	r3, [r5, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d000      	beq.n	800d87c <_close_r+0x1c>
 800d87a:	6023      	str	r3, [r4, #0]
 800d87c:	bd70      	pop	{r4, r5, r6, pc}
 800d87e:	46c0      	nop			; (mov r8, r8)
 800d880:	20000134 	.word	0x20000134

0800d884 <_fstat_r>:
 800d884:	2300      	movs	r3, #0
 800d886:	b570      	push	{r4, r5, r6, lr}
 800d888:	4d06      	ldr	r5, [pc, #24]	; (800d8a4 <_fstat_r+0x20>)
 800d88a:	0004      	movs	r4, r0
 800d88c:	0008      	movs	r0, r1
 800d88e:	0011      	movs	r1, r2
 800d890:	602b      	str	r3, [r5, #0]
 800d892:	f7fd f945 	bl	800ab20 <_fstat>
 800d896:	1c43      	adds	r3, r0, #1
 800d898:	d103      	bne.n	800d8a2 <_fstat_r+0x1e>
 800d89a:	682b      	ldr	r3, [r5, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d000      	beq.n	800d8a2 <_fstat_r+0x1e>
 800d8a0:	6023      	str	r3, [r4, #0]
 800d8a2:	bd70      	pop	{r4, r5, r6, pc}
 800d8a4:	20000134 	.word	0x20000134

0800d8a8 <_isatty_r>:
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	b570      	push	{r4, r5, r6, lr}
 800d8ac:	4d06      	ldr	r5, [pc, #24]	; (800d8c8 <_isatty_r+0x20>)
 800d8ae:	0004      	movs	r4, r0
 800d8b0:	0008      	movs	r0, r1
 800d8b2:	602b      	str	r3, [r5, #0]
 800d8b4:	f7fd f942 	bl	800ab3c <_isatty>
 800d8b8:	1c43      	adds	r3, r0, #1
 800d8ba:	d103      	bne.n	800d8c4 <_isatty_r+0x1c>
 800d8bc:	682b      	ldr	r3, [r5, #0]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d000      	beq.n	800d8c4 <_isatty_r+0x1c>
 800d8c2:	6023      	str	r3, [r4, #0]
 800d8c4:	bd70      	pop	{r4, r5, r6, pc}
 800d8c6:	46c0      	nop			; (mov r8, r8)
 800d8c8:	20000134 	.word	0x20000134

0800d8cc <_lseek_r>:
 800d8cc:	b570      	push	{r4, r5, r6, lr}
 800d8ce:	0004      	movs	r4, r0
 800d8d0:	0008      	movs	r0, r1
 800d8d2:	0011      	movs	r1, r2
 800d8d4:	001a      	movs	r2, r3
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	4d05      	ldr	r5, [pc, #20]	; (800d8f0 <_lseek_r+0x24>)
 800d8da:	602b      	str	r3, [r5, #0]
 800d8dc:	f7fd f937 	bl	800ab4e <_lseek>
 800d8e0:	1c43      	adds	r3, r0, #1
 800d8e2:	d103      	bne.n	800d8ec <_lseek_r+0x20>
 800d8e4:	682b      	ldr	r3, [r5, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d000      	beq.n	800d8ec <_lseek_r+0x20>
 800d8ea:	6023      	str	r3, [r4, #0]
 800d8ec:	bd70      	pop	{r4, r5, r6, pc}
 800d8ee:	46c0      	nop			; (mov r8, r8)
 800d8f0:	20000134 	.word	0x20000134

0800d8f4 <__malloc_lock>:
 800d8f4:	b510      	push	{r4, lr}
 800d8f6:	4802      	ldr	r0, [pc, #8]	; (800d900 <__malloc_lock+0xc>)
 800d8f8:	f7ff fdef 	bl	800d4da <__retarget_lock_acquire_recursive>
 800d8fc:	bd10      	pop	{r4, pc}
 800d8fe:	46c0      	nop			; (mov r8, r8)
 800d900:	20000128 	.word	0x20000128

0800d904 <__malloc_unlock>:
 800d904:	b510      	push	{r4, lr}
 800d906:	4802      	ldr	r0, [pc, #8]	; (800d910 <__malloc_unlock+0xc>)
 800d908:	f7ff fde8 	bl	800d4dc <__retarget_lock_release_recursive>
 800d90c:	bd10      	pop	{r4, pc}
 800d90e:	46c0      	nop			; (mov r8, r8)
 800d910:	20000128 	.word	0x20000128

0800d914 <_read_r>:
 800d914:	b570      	push	{r4, r5, r6, lr}
 800d916:	0004      	movs	r4, r0
 800d918:	0008      	movs	r0, r1
 800d91a:	0011      	movs	r1, r2
 800d91c:	001a      	movs	r2, r3
 800d91e:	2300      	movs	r3, #0
 800d920:	4d05      	ldr	r5, [pc, #20]	; (800d938 <_read_r+0x24>)
 800d922:	602b      	str	r3, [r5, #0]
 800d924:	f7fd f8b9 	bl	800aa9a <_read>
 800d928:	1c43      	adds	r3, r0, #1
 800d92a:	d103      	bne.n	800d934 <_read_r+0x20>
 800d92c:	682b      	ldr	r3, [r5, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d000      	beq.n	800d934 <_read_r+0x20>
 800d932:	6023      	str	r3, [r4, #0]
 800d934:	bd70      	pop	{r4, r5, r6, pc}
 800d936:	46c0      	nop			; (mov r8, r8)
 800d938:	20000134 	.word	0x20000134

0800d93c <_init>:
 800d93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d93e:	46c0      	nop			; (mov r8, r8)
 800d940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d942:	bc08      	pop	{r3}
 800d944:	469e      	mov	lr, r3
 800d946:	4770      	bx	lr

0800d948 <_fini>:
 800d948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d94a:	46c0      	nop			; (mov r8, r8)
 800d94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d94e:	bc08      	pop	{r3}
 800d950:	469e      	mov	lr, r3
 800d952:	4770      	bx	lr
