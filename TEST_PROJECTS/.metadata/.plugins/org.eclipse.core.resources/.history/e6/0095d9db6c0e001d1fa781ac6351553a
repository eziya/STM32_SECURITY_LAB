/*
 * app.c
 *
 *  Created on: 2022. 7. 28.
 *      Author: eziya76@gmail.com
 */

#include "app.h"
#include <stdio.h>

static void AppPrintMenu(void);
static void AppRunMenu(void);
static void AppReadSecureMem(void);


void AppConfigStaticProtection(void)
{

}

void AppHashVerify(void)
{

}

void AppRun(void)
{
  AppRunMenu();

  while(1)
  {
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
    HAL_Delay(100);
  }

}

static void AppPrintMenu(void)
{
  printf("\r\n=================== Test Menu ============================\r\n\n");
  printf("  Test Protection: Secure User memory Read -------------- 1\r\n\n");
  printf("  Previous Menu ----------------------------------------- x\r\n\n");
}

static void AppRunMenu(void)
{
  uint8_t key = 0U;
  uint8_t exit = 0U;

  /* Print Main Menu message*/
  TEST_PROTECTIONS_PrintTestingMenu();

  while (exit == 0U)
  {
    key = 0U;

    /* Clean the input path */
    COM_Flush();

    /* Receive key */
    if (COM_Receive(&key, 1U, RX_TIMEOUT) == HAL_OK)
    {
      switch (key)
      {
        case '1' :
          TEST_PROTECTIONS_Read_SecUserMem();
          break;
        case 'x' :
          exit = 1U;
          break;

        default:
          printf("Invalid Number !\r");
          break;
      }

      /*Print Main Menu message*/
      TEST_PROTECTIONS_PrintTestingMenu();
    }
  }
}

  /**
  * @brief  Test read secure user memory area from application
  * @param  None
  * @retval None
  */
static void AppReadSecureMem(void)
{
  FLASH_OBProgramInitTypeDef flash_option_bytes;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();

  /* Clear OPTVERR bit set on virgin samples */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);

  /* Unlock the Options Bytes *************************************************/
  HAL_FLASH_OB_Unlock();

  /* Get Option Bytes status for WRP AREA_A  **********/
  flash_option_bytes.WRPArea     = OB_WRPAREA_ZONE_A;
  HAL_FLASHEx_OBGetConfig(&flash_option_bytes);

  /* Lock the Options Bytes ***************************************************/
  HAL_FLASH_OB_Lock();

  /* Lock the Flash to disable the flash control register access (recommended
  to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();

  /* 128 bit key + 1 char for NULL-terminated string */
  volatile uint32_t *pdata[] = {(uint32_t*)0x08000000, (uint32_t*)0x080061FC};

  printf("\r\n====== Test Protection: Secure User Memory =================\r\n\n");
  printf("If the Secure User Memory is enabled you should not be able to read the content.\r\n\n");
  printf("  -- Secure User Area size config [0x%08x]\r\n\n", (flash_option_bytes.SecSize * FLASH_PAGE_SIZE) + FLASH_BASE);
  printf("  -- Flash CR SEC_PROT bit value: 0x%d\r\n\n", (FLASH->CR & 0x10000000)>>28);

  printf("  -- Reading from address [0x%08x], [0x%08x]\r\n\n", pdata[0], pdata[1]);
  printf("\r\t [0x%08x]  [0x%08x]\r\n\n", *pdata[0], *pdata[1]);

  return;
}


