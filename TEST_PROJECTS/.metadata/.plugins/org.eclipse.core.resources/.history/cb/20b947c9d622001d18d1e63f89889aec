/*
 * boot.c
 *
 *  Created on: 2022. 8. 23.
 *      Author: jihoo
 */
#include "boot.h"

static void PrintMetaData(void);
static bool VerifyMetaDataMagicNumber(void);
static bool VerifyMetaDataHash(void);
static bool VerifyMetaDataSignature(void);
static bool VerifyAppHash(void);
static bool SingleCallSHA256(const uint8_t* message, const size_t messageLen, uint8_t* digest, size_t* digestLen);
static bool VerifySignatureWithPubKey(const uint8_t* pubKey, size_t pubKeyLen, const uint8_t* hash, size_t hashLen, const uint8_t* signature, size_t signatureLen);


bool VerifyApplication(void)
{

}

void jump_to_application(void)
{

}

static void PrintMetaData(void)
{

}

static bool VerifyMetaDataMagicNumber(void)
{

}

static bool VerifyMetaDataHash(void)
{

}

static bool VerifyMetaDataSignature(void)
{

}
static bool VerifyAppHash(void)
{

}

//calculate SHA256 hash
static bool SingleCallSHA256(const uint8_t* message, const size_t messageLen, uint8_t* digest, size_t* digestLen)
{
  cmox_hash_retval_t retVal;

  retVal = cmox_hash_compute(
      CMOX_SHA256_ALGO,
      message, messageLen,
      digest,
      CMOX_SHA256_SIZE,
      digestLen);

  if((retVal != CMOX_HASH_SUCCESS) || (*digestLen != CMOX_SHA256_SIZE)) return false;

  return true;
}

// verify signature
bool VerifySignatureWithPubKey(const uint8_t* pubKey, size_t pubKeyLen, const uint8_t* hash, size_t hashLen, const uint8_t* signature, size_t signatureLen)
{
  cmox_ecc_retval_t retVal;
  uint32_t fault_check = CMOX_ECC_AUTH_FAIL;

  cmox_ecc_construct(&hECC, CMOX_ECC256_MATH_FUNCS, eccBuffer, sizeof(eccBuffer));

  retVal = cmox_ecdsa_verify(
      &hECC,
      CMOX_ECC_CURVE_SECP256R1,   //SECP256R1
      pubKey,                     //public key for verification
      pubKeyLen,                  //public key length
      hash,                       //hash to compare
      hashLen,                    //hash length
      signature,                  //signature to verify
      signatureLen,               //signature length
      &fault_check);              //verification result

  if((retVal != CMOX_ECC_AUTH_SUCCESS) || (fault_check != CMOX_ECC_AUTH_SUCCESS))
  {
    cmox_ecc_cleanup(&hECC);
    return false;
  }

  cmox_ecc_cleanup(&hECC);

  return true;
}
