
STM32_HAL_SECURE_BOOT_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08004484  08004484  00014484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047a8  080047a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047b0  080047b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047b4  080047b4  000147b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080047b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08004828  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08004828  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d969  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000271f  00000000  00000000  0002da07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00030128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  00030c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0fb  00000000  00000000  000315e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1b3  00000000  00000000  0004b6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b12a  00000000  00000000  0005a88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f59b8  2**0
                  CONTENTS, READONLY
 20 .iar_vfe_header 00000004  00000000  00000000  000f5a08  2**2
                  CONTENTS, READONLY
 21 .debug_frame  00002cc8  00000000  00000000  000f5a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800446c 	.word	0x0800446c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800446c 	.word	0x0800446c

08000104 <cmox_initialize>:
 8000104:	b580      	push	{r7, lr}
 8000106:	2800      	cmp	r0, #0
 8000108:	d009      	beq.n	800011e <cmox_initialize+0x1a>
 800010a:	6801      	ldr	r1, [r0, #0]
 800010c:	2900      	cmp	r1, #0
 800010e:	d005      	beq.n	800011c <cmox_initialize+0x18>
 8000110:	4a04      	ldr	r2, [pc, #16]	; (8000124 <cmox_initialize+0x20>)
 8000112:	4291      	cmp	r1, r2
 8000114:	d102      	bne.n	800011c <cmox_initialize+0x18>
 8000116:	2101      	movs	r1, #1
 8000118:	4a03      	ldr	r2, [pc, #12]	; (8000128 <cmox_initialize+0x24>)
 800011a:	7011      	strb	r1, [r2, #0]
 800011c:	6840      	ldr	r0, [r0, #4]
 800011e:	f000 fb73 	bl	8000808 <cmox_ll_init>
 8000122:	bd02      	pop	{r1, pc}
 8000124:	48370000 	.word	0x48370000
 8000128:	2000008c 	.word	0x2000008c

0800012c <cmox_finalize>:
 800012c:	b580      	push	{r7, lr}
 800012e:	f000 fb8d 	bl	800084c <cmox_ll_deInit>
 8000132:	bd02      	pop	{r1, pc}

08000134 <__gnu_thumb1_case_shi>:
 8000134:	b403      	push	{r0, r1}
 8000136:	4671      	mov	r1, lr
 8000138:	0849      	lsrs	r1, r1, #1
 800013a:	0040      	lsls	r0, r0, #1
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	5e09      	ldrsh	r1, [r1, r0]
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	448e      	add	lr, r1
 8000144:	bc03      	pop	{r0, r1}
 8000146:	4770      	bx	lr

08000148 <__udivsi3>:
 8000148:	2200      	movs	r2, #0
 800014a:	0843      	lsrs	r3, r0, #1
 800014c:	428b      	cmp	r3, r1
 800014e:	d374      	bcc.n	800023a <__udivsi3+0xf2>
 8000150:	0903      	lsrs	r3, r0, #4
 8000152:	428b      	cmp	r3, r1
 8000154:	d35f      	bcc.n	8000216 <__udivsi3+0xce>
 8000156:	0a03      	lsrs	r3, r0, #8
 8000158:	428b      	cmp	r3, r1
 800015a:	d344      	bcc.n	80001e6 <__udivsi3+0x9e>
 800015c:	0b03      	lsrs	r3, r0, #12
 800015e:	428b      	cmp	r3, r1
 8000160:	d328      	bcc.n	80001b4 <__udivsi3+0x6c>
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d30d      	bcc.n	8000184 <__udivsi3+0x3c>
 8000168:	22ff      	movs	r2, #255	; 0xff
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	ba12      	rev	r2, r2
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d302      	bcc.n	800017a <__udivsi3+0x32>
 8000174:	1212      	asrs	r2, r2, #8
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	d065      	beq.n	8000246 <__udivsi3+0xfe>
 800017a:	0b03      	lsrs	r3, r0, #12
 800017c:	428b      	cmp	r3, r1
 800017e:	d319      	bcc.n	80001b4 <__udivsi3+0x6c>
 8000180:	e000      	b.n	8000184 <__udivsi3+0x3c>
 8000182:	0a09      	lsrs	r1, r1, #8
 8000184:	0bc3      	lsrs	r3, r0, #15
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x46>
 800018a:	03cb      	lsls	r3, r1, #15
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b83      	lsrs	r3, r0, #14
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x52>
 8000196:	038b      	lsls	r3, r1, #14
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b43      	lsrs	r3, r0, #13
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x5e>
 80001a2:	034b      	lsls	r3, r1, #13
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b03      	lsrs	r3, r0, #12
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x6a>
 80001ae:	030b      	lsls	r3, r1, #12
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0ac3      	lsrs	r3, r0, #11
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x76>
 80001ba:	02cb      	lsls	r3, r1, #11
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a83      	lsrs	r3, r0, #10
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x82>
 80001c6:	028b      	lsls	r3, r1, #10
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a43      	lsrs	r3, r0, #9
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x8e>
 80001d2:	024b      	lsls	r3, r1, #9
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a03      	lsrs	r3, r0, #8
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x9a>
 80001de:	020b      	lsls	r3, r1, #8
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	d2cd      	bcs.n	8000182 <__udivsi3+0x3a>
 80001e6:	09c3      	lsrs	r3, r0, #7
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xa8>
 80001ec:	01cb      	lsls	r3, r1, #7
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0983      	lsrs	r3, r0, #6
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xb4>
 80001f8:	018b      	lsls	r3, r1, #6
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0943      	lsrs	r3, r0, #5
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xc0>
 8000204:	014b      	lsls	r3, r1, #5
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0903      	lsrs	r3, r0, #4
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xcc>
 8000210:	010b      	lsls	r3, r1, #4
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	08c3      	lsrs	r3, r0, #3
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xd8>
 800021c:	00cb      	lsls	r3, r1, #3
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0883      	lsrs	r3, r0, #2
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xe4>
 8000228:	008b      	lsls	r3, r1, #2
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0843      	lsrs	r3, r0, #1
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xf0>
 8000234:	004b      	lsls	r3, r1, #1
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	1a41      	subs	r1, r0, r1
 800023c:	d200      	bcs.n	8000240 <__udivsi3+0xf8>
 800023e:	4601      	mov	r1, r0
 8000240:	4152      	adcs	r2, r2
 8000242:	4610      	mov	r0, r2
 8000244:	4770      	bx	lr
 8000246:	e7ff      	b.n	8000248 <__udivsi3+0x100>
 8000248:	b501      	push	{r0, lr}
 800024a:	2000      	movs	r0, #0
 800024c:	f000 f8f0 	bl	8000430 <__aeabi_idiv0>
 8000250:	bd02      	pop	{r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)

08000254 <__aeabi_uidivmod>:
 8000254:	2900      	cmp	r1, #0
 8000256:	d0f7      	beq.n	8000248 <__udivsi3+0x100>
 8000258:	e776      	b.n	8000148 <__udivsi3>
 800025a:	4770      	bx	lr

0800025c <__divsi3>:
 800025c:	4603      	mov	r3, r0
 800025e:	430b      	orrs	r3, r1
 8000260:	d47f      	bmi.n	8000362 <__divsi3+0x106>
 8000262:	2200      	movs	r2, #0
 8000264:	0843      	lsrs	r3, r0, #1
 8000266:	428b      	cmp	r3, r1
 8000268:	d374      	bcc.n	8000354 <__divsi3+0xf8>
 800026a:	0903      	lsrs	r3, r0, #4
 800026c:	428b      	cmp	r3, r1
 800026e:	d35f      	bcc.n	8000330 <__divsi3+0xd4>
 8000270:	0a03      	lsrs	r3, r0, #8
 8000272:	428b      	cmp	r3, r1
 8000274:	d344      	bcc.n	8000300 <__divsi3+0xa4>
 8000276:	0b03      	lsrs	r3, r0, #12
 8000278:	428b      	cmp	r3, r1
 800027a:	d328      	bcc.n	80002ce <__divsi3+0x72>
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d30d      	bcc.n	800029e <__divsi3+0x42>
 8000282:	22ff      	movs	r2, #255	; 0xff
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	ba12      	rev	r2, r2
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d302      	bcc.n	8000294 <__divsi3+0x38>
 800028e:	1212      	asrs	r2, r2, #8
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	d065      	beq.n	8000360 <__divsi3+0x104>
 8000294:	0b03      	lsrs	r3, r0, #12
 8000296:	428b      	cmp	r3, r1
 8000298:	d319      	bcc.n	80002ce <__divsi3+0x72>
 800029a:	e000      	b.n	800029e <__divsi3+0x42>
 800029c:	0a09      	lsrs	r1, r1, #8
 800029e:	0bc3      	lsrs	r3, r0, #15
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x4c>
 80002a4:	03cb      	lsls	r3, r1, #15
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b83      	lsrs	r3, r0, #14
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x58>
 80002b0:	038b      	lsls	r3, r1, #14
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b43      	lsrs	r3, r0, #13
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x64>
 80002bc:	034b      	lsls	r3, r1, #13
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b03      	lsrs	r3, r0, #12
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x70>
 80002c8:	030b      	lsls	r3, r1, #12
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0ac3      	lsrs	r3, r0, #11
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x7c>
 80002d4:	02cb      	lsls	r3, r1, #11
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a83      	lsrs	r3, r0, #10
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x88>
 80002e0:	028b      	lsls	r3, r1, #10
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a43      	lsrs	r3, r0, #9
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x94>
 80002ec:	024b      	lsls	r3, r1, #9
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a03      	lsrs	r3, r0, #8
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0xa0>
 80002f8:	020b      	lsls	r3, r1, #8
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	d2cd      	bcs.n	800029c <__divsi3+0x40>
 8000300:	09c3      	lsrs	r3, r0, #7
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xae>
 8000306:	01cb      	lsls	r3, r1, #7
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0983      	lsrs	r3, r0, #6
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xba>
 8000312:	018b      	lsls	r3, r1, #6
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0943      	lsrs	r3, r0, #5
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xc6>
 800031e:	014b      	lsls	r3, r1, #5
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0903      	lsrs	r3, r0, #4
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xd2>
 800032a:	010b      	lsls	r3, r1, #4
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	08c3      	lsrs	r3, r0, #3
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xde>
 8000336:	00cb      	lsls	r3, r1, #3
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0883      	lsrs	r3, r0, #2
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xea>
 8000342:	008b      	lsls	r3, r1, #2
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0843      	lsrs	r3, r0, #1
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xf6>
 800034e:	004b      	lsls	r3, r1, #1
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	1a41      	subs	r1, r0, r1
 8000356:	d200      	bcs.n	800035a <__divsi3+0xfe>
 8000358:	4601      	mov	r1, r0
 800035a:	4152      	adcs	r2, r2
 800035c:	4610      	mov	r0, r2
 800035e:	4770      	bx	lr
 8000360:	e05d      	b.n	800041e <__divsi3+0x1c2>
 8000362:	0fca      	lsrs	r2, r1, #31
 8000364:	d000      	beq.n	8000368 <__divsi3+0x10c>
 8000366:	4249      	negs	r1, r1
 8000368:	1003      	asrs	r3, r0, #32
 800036a:	d300      	bcc.n	800036e <__divsi3+0x112>
 800036c:	4240      	negs	r0, r0
 800036e:	4053      	eors	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	469c      	mov	ip, r3
 8000374:	0903      	lsrs	r3, r0, #4
 8000376:	428b      	cmp	r3, r1
 8000378:	d32d      	bcc.n	80003d6 <__divsi3+0x17a>
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d312      	bcc.n	80003a6 <__divsi3+0x14a>
 8000380:	22fc      	movs	r2, #252	; 0xfc
 8000382:	0189      	lsls	r1, r1, #6
 8000384:	ba12      	rev	r2, r2
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d30c      	bcc.n	80003a6 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d308      	bcc.n	80003a6 <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d304      	bcc.n	80003a6 <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	d03a      	beq.n	8000416 <__divsi3+0x1ba>
 80003a0:	1192      	asrs	r2, r2, #6
 80003a2:	e000      	b.n	80003a6 <__divsi3+0x14a>
 80003a4:	0989      	lsrs	r1, r1, #6
 80003a6:	09c3      	lsrs	r3, r0, #7
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x154>
 80003ac:	01cb      	lsls	r3, r1, #7
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0983      	lsrs	r3, r0, #6
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x160>
 80003b8:	018b      	lsls	r3, r1, #6
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0943      	lsrs	r3, r0, #5
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x16c>
 80003c4:	014b      	lsls	r3, r1, #5
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0903      	lsrs	r3, r0, #4
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x178>
 80003d0:	010b      	lsls	r3, r1, #4
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	08c3      	lsrs	r3, r0, #3
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x184>
 80003dc:	00cb      	lsls	r3, r1, #3
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	0883      	lsrs	r3, r0, #2
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x190>
 80003e8:	008b      	lsls	r3, r1, #2
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	d2d9      	bcs.n	80003a4 <__divsi3+0x148>
 80003f0:	0843      	lsrs	r3, r0, #1
 80003f2:	428b      	cmp	r3, r1
 80003f4:	d301      	bcc.n	80003fa <__divsi3+0x19e>
 80003f6:	004b      	lsls	r3, r1, #1
 80003f8:	1ac0      	subs	r0, r0, r3
 80003fa:	4152      	adcs	r2, r2
 80003fc:	1a41      	subs	r1, r0, r1
 80003fe:	d200      	bcs.n	8000402 <__divsi3+0x1a6>
 8000400:	4601      	mov	r1, r0
 8000402:	4663      	mov	r3, ip
 8000404:	4152      	adcs	r2, r2
 8000406:	105b      	asrs	r3, r3, #1
 8000408:	4610      	mov	r0, r2
 800040a:	d301      	bcc.n	8000410 <__divsi3+0x1b4>
 800040c:	4240      	negs	r0, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d500      	bpl.n	8000414 <__divsi3+0x1b8>
 8000412:	4249      	negs	r1, r1
 8000414:	4770      	bx	lr
 8000416:	4663      	mov	r3, ip
 8000418:	105b      	asrs	r3, r3, #1
 800041a:	d300      	bcc.n	800041e <__divsi3+0x1c2>
 800041c:	4240      	negs	r0, r0
 800041e:	b501      	push	{r0, lr}
 8000420:	2000      	movs	r0, #0
 8000422:	f000 f805 	bl	8000430 <__aeabi_idiv0>
 8000426:	bd02      	pop	{r1, pc}

08000428 <__aeabi_idivmod>:
 8000428:	2900      	cmp	r1, #0
 800042a:	d0f8      	beq.n	800041e <__divsi3+0x1c2>
 800042c:	e716      	b.n	800025c <__divsi3>
 800042e:	4770      	bx	lr

08000430 <__aeabi_idiv0>:
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_uldivmod>:
 8000434:	2b00      	cmp	r3, #0
 8000436:	d111      	bne.n	800045c <__aeabi_uldivmod+0x28>
 8000438:	2a00      	cmp	r2, #0
 800043a:	d10f      	bne.n	800045c <__aeabi_uldivmod+0x28>
 800043c:	2900      	cmp	r1, #0
 800043e:	d100      	bne.n	8000442 <__aeabi_uldivmod+0xe>
 8000440:	2800      	cmp	r0, #0
 8000442:	d002      	beq.n	800044a <__aeabi_uldivmod+0x16>
 8000444:	2100      	movs	r1, #0
 8000446:	43c9      	mvns	r1, r1
 8000448:	0008      	movs	r0, r1
 800044a:	b407      	push	{r0, r1, r2}
 800044c:	4802      	ldr	r0, [pc, #8]	; (8000458 <__aeabi_uldivmod+0x24>)
 800044e:	a102      	add	r1, pc, #8	; (adr r1, 8000458 <__aeabi_uldivmod+0x24>)
 8000450:	1840      	adds	r0, r0, r1
 8000452:	9002      	str	r0, [sp, #8]
 8000454:	bd03      	pop	{r0, r1, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	ffffffd9 	.word	0xffffffd9
 800045c:	b403      	push	{r0, r1}
 800045e:	4668      	mov	r0, sp
 8000460:	b501      	push	{r0, lr}
 8000462:	9802      	ldr	r0, [sp, #8]
 8000464:	f000 f806 	bl	8000474 <__udivmoddi4>
 8000468:	9b01      	ldr	r3, [sp, #4]
 800046a:	469e      	mov	lr, r3
 800046c:	b002      	add	sp, #8
 800046e:	bc0c      	pop	{r2, r3}
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__udivmoddi4>:
 8000474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000476:	4657      	mov	r7, sl
 8000478:	464e      	mov	r6, r9
 800047a:	4645      	mov	r5, r8
 800047c:	46de      	mov	lr, fp
 800047e:	b5e0      	push	{r5, r6, r7, lr}
 8000480:	0004      	movs	r4, r0
 8000482:	000d      	movs	r5, r1
 8000484:	4692      	mov	sl, r2
 8000486:	4699      	mov	r9, r3
 8000488:	b083      	sub	sp, #12
 800048a:	428b      	cmp	r3, r1
 800048c:	d830      	bhi.n	80004f0 <__udivmoddi4+0x7c>
 800048e:	d02d      	beq.n	80004ec <__udivmoddi4+0x78>
 8000490:	4649      	mov	r1, r9
 8000492:	4650      	mov	r0, sl
 8000494:	f000 f8ba 	bl	800060c <__clzdi2>
 8000498:	0029      	movs	r1, r5
 800049a:	0006      	movs	r6, r0
 800049c:	0020      	movs	r0, r4
 800049e:	f000 f8b5 	bl	800060c <__clzdi2>
 80004a2:	1a33      	subs	r3, r6, r0
 80004a4:	4698      	mov	r8, r3
 80004a6:	3b20      	subs	r3, #32
 80004a8:	469b      	mov	fp, r3
 80004aa:	d433      	bmi.n	8000514 <__udivmoddi4+0xa0>
 80004ac:	465a      	mov	r2, fp
 80004ae:	4653      	mov	r3, sl
 80004b0:	4093      	lsls	r3, r2
 80004b2:	4642      	mov	r2, r8
 80004b4:	001f      	movs	r7, r3
 80004b6:	4653      	mov	r3, sl
 80004b8:	4093      	lsls	r3, r2
 80004ba:	001e      	movs	r6, r3
 80004bc:	42af      	cmp	r7, r5
 80004be:	d83a      	bhi.n	8000536 <__udivmoddi4+0xc2>
 80004c0:	42af      	cmp	r7, r5
 80004c2:	d100      	bne.n	80004c6 <__udivmoddi4+0x52>
 80004c4:	e078      	b.n	80005b8 <__udivmoddi4+0x144>
 80004c6:	465b      	mov	r3, fp
 80004c8:	1ba4      	subs	r4, r4, r6
 80004ca:	41bd      	sbcs	r5, r7
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	da00      	bge.n	80004d2 <__udivmoddi4+0x5e>
 80004d0:	e075      	b.n	80005be <__udivmoddi4+0x14a>
 80004d2:	2200      	movs	r2, #0
 80004d4:	2300      	movs	r3, #0
 80004d6:	9200      	str	r2, [sp, #0]
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	2301      	movs	r3, #1
 80004dc:	465a      	mov	r2, fp
 80004de:	4093      	lsls	r3, r2
 80004e0:	9301      	str	r3, [sp, #4]
 80004e2:	2301      	movs	r3, #1
 80004e4:	4642      	mov	r2, r8
 80004e6:	4093      	lsls	r3, r2
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	e028      	b.n	800053e <__udivmoddi4+0xca>
 80004ec:	4282      	cmp	r2, r0
 80004ee:	d9cf      	bls.n	8000490 <__udivmoddi4+0x1c>
 80004f0:	2200      	movs	r2, #0
 80004f2:	2300      	movs	r3, #0
 80004f4:	9200      	str	r2, [sp, #0]
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <__udivmoddi4+0x8e>
 80004fe:	601c      	str	r4, [r3, #0]
 8000500:	605d      	str	r5, [r3, #4]
 8000502:	9800      	ldr	r0, [sp, #0]
 8000504:	9901      	ldr	r1, [sp, #4]
 8000506:	b003      	add	sp, #12
 8000508:	bcf0      	pop	{r4, r5, r6, r7}
 800050a:	46bb      	mov	fp, r7
 800050c:	46b2      	mov	sl, r6
 800050e:	46a9      	mov	r9, r5
 8000510:	46a0      	mov	r8, r4
 8000512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000514:	4642      	mov	r2, r8
 8000516:	2320      	movs	r3, #32
 8000518:	1a9b      	subs	r3, r3, r2
 800051a:	4652      	mov	r2, sl
 800051c:	40da      	lsrs	r2, r3
 800051e:	4641      	mov	r1, r8
 8000520:	0013      	movs	r3, r2
 8000522:	464a      	mov	r2, r9
 8000524:	408a      	lsls	r2, r1
 8000526:	0017      	movs	r7, r2
 8000528:	4642      	mov	r2, r8
 800052a:	431f      	orrs	r7, r3
 800052c:	4653      	mov	r3, sl
 800052e:	4093      	lsls	r3, r2
 8000530:	001e      	movs	r6, r3
 8000532:	42af      	cmp	r7, r5
 8000534:	d9c4      	bls.n	80004c0 <__udivmoddi4+0x4c>
 8000536:	2200      	movs	r2, #0
 8000538:	2300      	movs	r3, #0
 800053a:	9200      	str	r2, [sp, #0]
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	4643      	mov	r3, r8
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0d9      	beq.n	80004f8 <__udivmoddi4+0x84>
 8000544:	07fb      	lsls	r3, r7, #31
 8000546:	0872      	lsrs	r2, r6, #1
 8000548:	431a      	orrs	r2, r3
 800054a:	4646      	mov	r6, r8
 800054c:	087b      	lsrs	r3, r7, #1
 800054e:	e00e      	b.n	800056e <__udivmoddi4+0xfa>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d101      	bne.n	8000558 <__udivmoddi4+0xe4>
 8000554:	42a2      	cmp	r2, r4
 8000556:	d80c      	bhi.n	8000572 <__udivmoddi4+0xfe>
 8000558:	1aa4      	subs	r4, r4, r2
 800055a:	419d      	sbcs	r5, r3
 800055c:	2001      	movs	r0, #1
 800055e:	1924      	adds	r4, r4, r4
 8000560:	416d      	adcs	r5, r5
 8000562:	2100      	movs	r1, #0
 8000564:	3e01      	subs	r6, #1
 8000566:	1824      	adds	r4, r4, r0
 8000568:	414d      	adcs	r5, r1
 800056a:	2e00      	cmp	r6, #0
 800056c:	d006      	beq.n	800057c <__udivmoddi4+0x108>
 800056e:	42ab      	cmp	r3, r5
 8000570:	d9ee      	bls.n	8000550 <__udivmoddi4+0xdc>
 8000572:	3e01      	subs	r6, #1
 8000574:	1924      	adds	r4, r4, r4
 8000576:	416d      	adcs	r5, r5
 8000578:	2e00      	cmp	r6, #0
 800057a:	d1f8      	bne.n	800056e <__udivmoddi4+0xfa>
 800057c:	9800      	ldr	r0, [sp, #0]
 800057e:	9901      	ldr	r1, [sp, #4]
 8000580:	465b      	mov	r3, fp
 8000582:	1900      	adds	r0, r0, r4
 8000584:	4169      	adcs	r1, r5
 8000586:	2b00      	cmp	r3, #0
 8000588:	db24      	blt.n	80005d4 <__udivmoddi4+0x160>
 800058a:	002b      	movs	r3, r5
 800058c:	465a      	mov	r2, fp
 800058e:	4644      	mov	r4, r8
 8000590:	40d3      	lsrs	r3, r2
 8000592:	002a      	movs	r2, r5
 8000594:	40e2      	lsrs	r2, r4
 8000596:	001c      	movs	r4, r3
 8000598:	465b      	mov	r3, fp
 800059a:	0015      	movs	r5, r2
 800059c:	2b00      	cmp	r3, #0
 800059e:	db2a      	blt.n	80005f6 <__udivmoddi4+0x182>
 80005a0:	0026      	movs	r6, r4
 80005a2:	409e      	lsls	r6, r3
 80005a4:	0033      	movs	r3, r6
 80005a6:	0026      	movs	r6, r4
 80005a8:	4647      	mov	r7, r8
 80005aa:	40be      	lsls	r6, r7
 80005ac:	0032      	movs	r2, r6
 80005ae:	1a80      	subs	r0, r0, r2
 80005b0:	4199      	sbcs	r1, r3
 80005b2:	9000      	str	r0, [sp, #0]
 80005b4:	9101      	str	r1, [sp, #4]
 80005b6:	e79f      	b.n	80004f8 <__udivmoddi4+0x84>
 80005b8:	42a3      	cmp	r3, r4
 80005ba:	d8bc      	bhi.n	8000536 <__udivmoddi4+0xc2>
 80005bc:	e783      	b.n	80004c6 <__udivmoddi4+0x52>
 80005be:	4642      	mov	r2, r8
 80005c0:	2320      	movs	r3, #32
 80005c2:	2100      	movs	r1, #0
 80005c4:	1a9b      	subs	r3, r3, r2
 80005c6:	2200      	movs	r2, #0
 80005c8:	9100      	str	r1, [sp, #0]
 80005ca:	9201      	str	r2, [sp, #4]
 80005cc:	2201      	movs	r2, #1
 80005ce:	40da      	lsrs	r2, r3
 80005d0:	9201      	str	r2, [sp, #4]
 80005d2:	e786      	b.n	80004e2 <__udivmoddi4+0x6e>
 80005d4:	4642      	mov	r2, r8
 80005d6:	2320      	movs	r3, #32
 80005d8:	1a9b      	subs	r3, r3, r2
 80005da:	002a      	movs	r2, r5
 80005dc:	4646      	mov	r6, r8
 80005de:	409a      	lsls	r2, r3
 80005e0:	0023      	movs	r3, r4
 80005e2:	40f3      	lsrs	r3, r6
 80005e4:	4644      	mov	r4, r8
 80005e6:	4313      	orrs	r3, r2
 80005e8:	002a      	movs	r2, r5
 80005ea:	40e2      	lsrs	r2, r4
 80005ec:	001c      	movs	r4, r3
 80005ee:	465b      	mov	r3, fp
 80005f0:	0015      	movs	r5, r2
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	dad4      	bge.n	80005a0 <__udivmoddi4+0x12c>
 80005f6:	4642      	mov	r2, r8
 80005f8:	002f      	movs	r7, r5
 80005fa:	2320      	movs	r3, #32
 80005fc:	0026      	movs	r6, r4
 80005fe:	4097      	lsls	r7, r2
 8000600:	1a9b      	subs	r3, r3, r2
 8000602:	40de      	lsrs	r6, r3
 8000604:	003b      	movs	r3, r7
 8000606:	4333      	orrs	r3, r6
 8000608:	e7cd      	b.n	80005a6 <__udivmoddi4+0x132>
 800060a:	46c0      	nop			; (mov r8, r8)

0800060c <__clzdi2>:
 800060c:	b510      	push	{r4, lr}
 800060e:	2900      	cmp	r1, #0
 8000610:	d103      	bne.n	800061a <__clzdi2+0xe>
 8000612:	f000 f807 	bl	8000624 <__clzsi2>
 8000616:	3020      	adds	r0, #32
 8000618:	e002      	b.n	8000620 <__clzdi2+0x14>
 800061a:	0008      	movs	r0, r1
 800061c:	f000 f802 	bl	8000624 <__clzsi2>
 8000620:	bd10      	pop	{r4, pc}
 8000622:	46c0      	nop			; (mov r8, r8)

08000624 <__clzsi2>:
 8000624:	211c      	movs	r1, #28
 8000626:	2301      	movs	r3, #1
 8000628:	041b      	lsls	r3, r3, #16
 800062a:	4298      	cmp	r0, r3
 800062c:	d301      	bcc.n	8000632 <__clzsi2+0xe>
 800062e:	0c00      	lsrs	r0, r0, #16
 8000630:	3910      	subs	r1, #16
 8000632:	0a1b      	lsrs	r3, r3, #8
 8000634:	4298      	cmp	r0, r3
 8000636:	d301      	bcc.n	800063c <__clzsi2+0x18>
 8000638:	0a00      	lsrs	r0, r0, #8
 800063a:	3908      	subs	r1, #8
 800063c:	091b      	lsrs	r3, r3, #4
 800063e:	4298      	cmp	r0, r3
 8000640:	d301      	bcc.n	8000646 <__clzsi2+0x22>
 8000642:	0900      	lsrs	r0, r0, #4
 8000644:	3904      	subs	r1, #4
 8000646:	a202      	add	r2, pc, #8	; (adr r2, 8000650 <__clzsi2+0x2c>)
 8000648:	5c10      	ldrb	r0, [r2, r0]
 800064a:	1840      	adds	r0, r0, r1
 800064c:	4770      	bx	lr
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	02020304 	.word	0x02020304
 8000654:	01010101 	.word	0x01010101
	...

08000660 <AppRun>:
{

}

void AppRun(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  AppHandleMenu();
 8000664:	f000 f828 	bl	80006b8 <AppHandleMenu>

  while(1)
  {
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000668:	23a0      	movs	r3, #160	; 0xa0
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	2120      	movs	r1, #32
 800066e:	0018      	movs	r0, r3
 8000670:	f001 f81d 	bl	80016ae <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000674:	2064      	movs	r0, #100	; 0x64
 8000676:	f000 fc15 	bl	8000ea4 <HAL_Delay>
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800067a:	e7f5      	b.n	8000668 <AppRun+0x8>

0800067c <AppPrintMenu>:
  }
}

//show menu
static void AppPrintMenu(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  printf("\r\n");
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <AppPrintMenu+0x2c>)
 8000682:	0018      	movs	r0, r3
 8000684:	f002 ff2a 	bl	80034dc <puts>
  printf("=================== Test Menu ===========================\r\n\n");
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <AppPrintMenu+0x30>)
 800068a:	0018      	movs	r0, r3
 800068c:	f002 ff26 	bl	80034dc <puts>
  printf("Test Protection: Secure User memory Read -------------- 1\r\n\n");
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <AppPrintMenu+0x34>)
 8000692:	0018      	movs	r0, r3
 8000694:	f002 ff22 	bl	80034dc <puts>
  printf("Previous Menu ----------------------------------------- x\r\n\n");
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <AppPrintMenu+0x38>)
 800069a:	0018      	movs	r0, r3
 800069c:	f002 ff1e 	bl	80034dc <puts>
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	08004484 	.word	0x08004484
 80006ac:	08004488 	.word	0x08004488
 80006b0:	080044c4 	.word	0x080044c4
 80006b4:	08004500 	.word	0x08004500

080006b8 <AppHandleMenu>:

//read & handle uart input
static void AppHandleMenu(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
  uint8_t key = 0U;
 80006be:	1dbb      	adds	r3, r7, #6
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
  uint8_t exit = 0U;
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]

  AppPrintMenu();
 80006ca:	f7ff ffd7 	bl	800067c <AppPrintMenu>

  while(exit == 0U)
 80006ce:	e02b      	b.n	8000728 <AppHandleMenu+0x70>
  {
    __HAL_UART_FLUSH_DRREGISTER(&huart2);
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <AppHandleMenu+0x84>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	699a      	ldr	r2, [r3, #24]
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <AppHandleMenu+0x84>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2108      	movs	r1, #8
 80006dc:	430a      	orrs	r2, r1
 80006de:	619a      	str	r2, [r3, #24]
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <AppHandleMenu+0x84>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	699a      	ldr	r2, [r3, #24]
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <AppHandleMenu+0x84>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2110      	movs	r1, #16
 80006ec:	430a      	orrs	r2, r1
 80006ee:	619a      	str	r2, [r3, #24]

    HAL_UART_Receive(&huart2, &key, 1U, HAL_MAX_DELAY);
 80006f0:	2301      	movs	r3, #1
 80006f2:	425b      	negs	r3, r3
 80006f4:	1db9      	adds	r1, r7, #6
 80006f6:	4811      	ldr	r0, [pc, #68]	; (800073c <AppHandleMenu+0x84>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	f001 ffad 	bl	8002658 <HAL_UART_Receive>

    switch (key)
 80006fe:	1dbb      	adds	r3, r7, #6
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b31      	cmp	r3, #49	; 0x31
 8000704:	d002      	beq.n	800070c <AppHandleMenu+0x54>
 8000706:	2b78      	cmp	r3, #120	; 0x78
 8000708:	d003      	beq.n	8000712 <AppHandleMenu+0x5a>
 800070a:	e006      	b.n	800071a <AppHandleMenu+0x62>
    {
    case '1' :
      AppReadSecureMem();
 800070c:	f000 f81a 	bl	8000744 <AppReadSecureMem>
      break;
 8000710:	e008      	b.n	8000724 <AppHandleMenu+0x6c>
    case 'x' :
      exit = 1U;
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
      break;
 8000718:	e004      	b.n	8000724 <AppHandleMenu+0x6c>
    default:
      printf("Invalid key!\r\n");
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <AppHandleMenu+0x88>)
 800071c:	0018      	movs	r0, r3
 800071e:	f002 fedd 	bl	80034dc <puts>
      break;
 8000722:	46c0      	nop			; (mov r8, r8)
    }

    AppPrintMenu();
 8000724:	f7ff ffaa 	bl	800067c <AppPrintMenu>
  while(exit == 0U)
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0cf      	beq.n	80006d0 <AppHandleMenu+0x18>
  }
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	20000094 	.word	0x20000094
 8000740:	0800453c 	.word	0x0800453c

08000744 <AppReadSecureMem>:

//read secure memory
static void AppReadSecureMem(void)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b091      	sub	sp, #68	; 0x44
 8000748:	af00      	add	r7, sp, #0
  FLASH_OBProgramInitTypeDef flash_option_bytes;

  HAL_FLASH_Unlock();
 800074a:	f000 fc83 	bl	8001054 <HAL_FLASH_Unlock>
  HAL_FLASH_OB_Unlock();
 800074e:	f000 fcc1 	bl	80010d4 <HAL_FLASH_OB_Unlock>

  //clear option error
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000752:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <AppReadSecureMem+0xa4>)
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	0212      	lsls	r2, r2, #8
 8000758:	611a      	str	r2, [r3, #16]

  //read option bytes
  flash_option_bytes.WRPArea = OB_WRPAREA_ZONE_A;
 800075a:	2408      	movs	r4, #8
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2201      	movs	r2, #1
 8000760:	605a      	str	r2, [r3, #4]
  HAL_FLASHEx_OBGetConfig(&flash_option_bytes);
 8000762:	193b      	adds	r3, r7, r4
 8000764:	0018      	movs	r0, r3
 8000766:	f000 fcfb 	bl	8001160 <HAL_FLASHEx_OBGetConfig>

  HAL_FLASH_OB_Lock();
 800076a:	f000 fcdb 	bl	8001124 <HAL_FLASH_OB_Lock>
  HAL_FLASH_Lock();
 800076e:	f000 fc95 	bl	800109c <HAL_FLASH_Lock>

  //configure secure memory address
  volatile uint32_t *pdata[] = {(uint32_t*)0x08000000, (uint32_t*)0x080061FC};
 8000772:	003b      	movs	r3, r7
 8000774:	4a1d      	ldr	r2, [pc, #116]	; (80007ec <AppReadSecureMem+0xa8>)
 8000776:	ca03      	ldmia	r2!, {r0, r1}
 8000778:	c303      	stmia	r3!, {r0, r1}

  //print secure memory information
  printf("====== Test Protection: Secure User Memory =================\r\n\n");
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <AppReadSecureMem+0xac>)
 800077c:	0018      	movs	r0, r3
 800077e:	f002 fead 	bl	80034dc <puts>
  printf("If the Secure User Memory is enabled you should not be able to read the content.\r\n");
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <AppReadSecureMem+0xb0>)
 8000784:	0018      	movs	r0, r3
 8000786:	f002 fea9 	bl	80034dc <puts>
  printf("-- Secure User Area size config [0x%08lx]\r\n", (flash_option_bytes.SecSize * FLASH_PAGE_SIZE) + FLASH_BASE);
 800078a:	193b      	adds	r3, r7, r4
 800078c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	0252      	lsls	r2, r2, #9
 8000792:	4694      	mov	ip, r2
 8000794:	4463      	add	r3, ip
 8000796:	02da      	lsls	r2, r3, #11
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <AppReadSecureMem+0xb4>)
 800079a:	0011      	movs	r1, r2
 800079c:	0018      	movs	r0, r3
 800079e:	f002 fe11 	bl	80033c4 <iprintf>
  printf("-- Flash CR SEC_PROT bit value: 0x%ld\r\n", (FLASH->CR & 0x10000000)>>28);
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <AppReadSecureMem+0xa4>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	0f1b      	lsrs	r3, r3, #28
 80007a8:	2201      	movs	r2, #1
 80007aa:	401a      	ands	r2, r3
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <AppReadSecureMem+0xb8>)
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 fe07 	bl	80033c4 <iprintf>
  printf("-- Reading from address [0x%08lx], [0x%08lx]\r\n", (uint32_t)pdata[0], (uint32_t)pdata[1]);
 80007b6:	003b      	movs	r3, r7
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	0019      	movs	r1, r3
 80007bc:	003b      	movs	r3, r7
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	001a      	movs	r2, r3
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <AppReadSecureMem+0xbc>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f002 fdfd 	bl	80033c4 <iprintf>
  printf("-- [0x%08lx]  [0x%08lx]\r\n", *pdata[0], *pdata[1]);
 80007ca:	003b      	movs	r3, r7
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	6819      	ldr	r1, [r3, #0]
 80007d0:	003b      	movs	r3, r7
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <AppReadSecureMem+0xc0>)
 80007d8:	0018      	movs	r0, r3
 80007da:	f002 fdf3 	bl	80033c4 <iprintf>
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b011      	add	sp, #68	; 0x44
 80007e4:	bd90      	pop	{r4, r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	40022000 	.word	0x40022000
 80007ec:	08004680 	.word	0x08004680
 80007f0:	0800454c 	.word	0x0800454c
 80007f4:	0800458c 	.word	0x0800458c
 80007f8:	080045e0 	.word	0x080045e0
 80007fc:	0800460c 	.word	0x0800460c
 8000800:	08004634 	.word	0x08004634
 8000804:	08004664 	.word	0x08004664

08000808 <cmox_ll_init>:
  * @brief          CMOX library low level initialization
  * @param          pArg User defined parameter that is transmitted from initialize service
  * @retval         Initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_init(void *pArg)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Ensure CRC is enabled for cryptographic processing */
  __HAL_RCC_CRC_RELEASE_RESET();
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <cmox_ll_init+0x3c>)
 8000812:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <cmox_ll_init+0x3c>)
 8000816:	490c      	ldr	r1, [pc, #48]	; (8000848 <cmox_ll_init+0x40>)
 8000818:	400a      	ands	r2, r1
 800081a:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_CRC_CLK_ENABLE();
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <cmox_ll_init+0x3c>)
 800081e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <cmox_ll_init+0x3c>)
 8000822:	2180      	movs	r1, #128	; 0x80
 8000824:	0149      	lsls	r1, r1, #5
 8000826:	430a      	orrs	r2, r1
 8000828:	639a      	str	r2, [r3, #56]	; 0x38
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <cmox_ll_init+0x3c>)
 800082c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	015b      	lsls	r3, r3, #5
 8000832:	4013      	ands	r3, r2
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
  return CMOX_INIT_SUCCESS;
 8000838:	2300      	movs	r3, #0
}
 800083a:	0018      	movs	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	b004      	add	sp, #16
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	40021000 	.word	0x40021000
 8000848:	ffffefff 	.word	0xffffefff

0800084c <cmox_ll_deInit>:
  * @brief          CMOX library low level de-initialization
  * @param          pArg User defined parameter that is transmitted from finalize service
  * @retval         De-initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_deInit(void *pArg)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Do not turn off CRC to avoid side effect on other SW parts using it */
  return CMOX_INIT_SUCCESS;
 8000854:	2300      	movs	r3, #0
}
 8000856:	0018      	movs	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	b002      	add	sp, #8
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b089      	sub	sp, #36	; 0x24
 8000864:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	240c      	movs	r4, #12
 8000868:	193b      	adds	r3, r7, r4
 800086a:	0018      	movs	r0, r3
 800086c:	2314      	movs	r3, #20
 800086e:	001a      	movs	r2, r3
 8000870:	2100      	movs	r1, #0
 8000872:	f002 fd9f 	bl	80033b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	4b29      	ldr	r3, [pc, #164]	; (800091c <MX_GPIO_Init+0xbc>)
 8000878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800087a:	4b28      	ldr	r3, [pc, #160]	; (800091c <MX_GPIO_Init+0xbc>)
 800087c:	2104      	movs	r1, #4
 800087e:	430a      	orrs	r2, r1
 8000880:	635a      	str	r2, [r3, #52]	; 0x34
 8000882:	4b26      	ldr	r3, [pc, #152]	; (800091c <MX_GPIO_Init+0xbc>)
 8000884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000886:	2204      	movs	r2, #4
 8000888:	4013      	ands	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800088e:	4b23      	ldr	r3, [pc, #140]	; (800091c <MX_GPIO_Init+0xbc>)
 8000890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000892:	4b22      	ldr	r3, [pc, #136]	; (800091c <MX_GPIO_Init+0xbc>)
 8000894:	2120      	movs	r1, #32
 8000896:	430a      	orrs	r2, r1
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <MX_GPIO_Init+0xbc>)
 800089c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800089e:	2220      	movs	r2, #32
 80008a0:	4013      	ands	r3, r2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_GPIO_Init+0xbc>)
 80008a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_GPIO_Init+0xbc>)
 80008ac:	2101      	movs	r1, #1
 80008ae:	430a      	orrs	r2, r1
 80008b0:	635a      	str	r2, [r3, #52]	; 0x34
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_GPIO_Init+0xbc>)
 80008b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b6:	2201      	movs	r2, #1
 80008b8:	4013      	ands	r3, r2
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008be:	23a0      	movs	r3, #160	; 0xa0
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	2200      	movs	r2, #0
 80008c4:	2120      	movs	r1, #32
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fed4 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	0192      	lsls	r2, r2, #6
 80008d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	4a0f      	ldr	r2, [pc, #60]	; (8000920 <MX_GPIO_Init+0xc0>)
 80008e4:	0019      	movs	r1, r3
 80008e6:	0010      	movs	r0, r2
 80008e8:	f000 fd60 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008ec:	0021      	movs	r1, r4
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2220      	movs	r2, #32
 80008f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2201      	movs	r2, #1
 80008f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2202      	movs	r2, #2
 8000904:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000906:	187a      	adds	r2, r7, r1
 8000908:	23a0      	movs	r3, #160	; 0xa0
 800090a:	05db      	lsls	r3, r3, #23
 800090c:	0011      	movs	r1, r2
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fd4c 	bl	80013ac <HAL_GPIO_Init>

}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b009      	add	sp, #36	; 0x24
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	40021000 	.word	0x40021000
 8000920:	50000800 	.word	0x50000800

08000924 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar (int ch)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800092c:	2301      	movs	r3, #1
 800092e:	425b      	negs	r3, r3
 8000930:	1d39      	adds	r1, r7, #4
 8000932:	4804      	ldr	r0, [pc, #16]	; (8000944 <__io_putchar+0x20>)
 8000934:	2201      	movs	r2, #1
 8000936:	f001 fdf3 	bl	8002520 <HAL_UART_Transmit>
  return ch;
 800093a:	687b      	ldr	r3, [r7, #4]
}
 800093c:	0018      	movs	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	b002      	add	sp, #8
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000094 	.word	0x20000094

08000948 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094c:	f000 fa2d 	bl	8000daa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000950:	f000 f815 	bl	800097e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000954:	f7ff ff84 	bl	8000860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000958:	f000 f950 	bl	8000bfc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  if(cmox_initialize(NULL) != CMOX_INIT_SUCCESS)
 800095c:	2000      	movs	r0, #0
 800095e:	f7ff fbd1 	bl	8000104 <cmox_initialize>
 8000962:	1e03      	subs	r3, r0, #0
 8000964:	d001      	beq.n	800096a <main+0x22>
  {
    Error_Handler();
 8000966:	f000 f868 	bl	8000a3a <Error_Handler>
  }

  AppRun();
 800096a:	f7ff fe79 	bl	8000660 <AppRun>


  if(cmox_finalize(NULL) != CMOX_INIT_SUCCESS)
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff fbdc 	bl	800012c <cmox_finalize>
 8000974:	1e03      	subs	r3, r0, #0
 8000976:	d001      	beq.n	800097c <main+0x34>
  {
    Error_Handler();
 8000978:	f000 f85f 	bl	8000a3a <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800097c:	e7fe      	b.n	800097c <main+0x34>

0800097e <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800097e:	b590      	push	{r4, r7, lr}
 8000980:	b093      	sub	sp, #76	; 0x4c
 8000982:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000984:	2410      	movs	r4, #16
 8000986:	193b      	adds	r3, r7, r4
 8000988:	0018      	movs	r0, r3
 800098a:	2338      	movs	r3, #56	; 0x38
 800098c:	001a      	movs	r2, r3
 800098e:	2100      	movs	r1, #0
 8000990:	f002 fd10 	bl	80033b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	003b      	movs	r3, r7
 8000996:	0018      	movs	r0, r3
 8000998:	2310      	movs	r3, #16
 800099a:	001a      	movs	r2, r3
 800099c:	2100      	movs	r1, #0
 800099e:	f002 fd09 	bl	80033b4 <memset>

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 fe9c 	bl	80016e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	2202      	movs	r2, #2
 80009b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	0052      	lsls	r2, r2, #1
 80009b8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80009ba:	0021      	movs	r1, r4
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2240      	movs	r2, #64	; 0x40
 80009c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2202      	movs	r2, #2
 80009cc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2202      	movs	r2, #2
 80009d2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2208      	movs	r2, #8
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	0292      	lsls	r2, r2, #10
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2280      	movs	r2, #128	; 0x80
 80009ec:	0492      	lsls	r2, r2, #18
 80009ee:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	0592      	lsls	r2, r2, #22
 80009f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 febe 	bl	800177c <HAL_RCC_OscConfig>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a04:	f000 f819 	bl	8000a3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	003b      	movs	r3, r7
 8000a0a:	2207      	movs	r2, #7
 8000a0c:	601a      	str	r2, [r3, #0]
      |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	003b      	movs	r3, r7
 8000a10:	2202      	movs	r2, #2
 8000a12:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	003b      	movs	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	003b      	movs	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a20:	003b      	movs	r3, r7
 8000a22:	2102      	movs	r1, #2
 8000a24:	0018      	movs	r0, r3
 8000a26:	f001 f9c3 	bl	8001db0 <HAL_RCC_ClockConfig>
 8000a2a:	1e03      	subs	r3, r0, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a2e:	f000 f804 	bl	8000a3a <Error_Handler>
  }
}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b013      	add	sp, #76	; 0x4c
 8000a38:	bd90      	pop	{r4, r7, pc}

08000a3a <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3e:	b672      	cpsid	i
}
 8000a40:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <Error_Handler+0x8>

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_MspInit+0x44>)
 8000a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_MspInit+0x44>)
 8000a50:	2101      	movs	r1, #1
 8000a52:	430a      	orrs	r2, r1
 8000a54:	641a      	str	r2, [r3, #64]	; 0x40
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_MspInit+0x44>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_MspInit+0x44>)
 8000a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_MspInit+0x44>)
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	0549      	lsls	r1, r1, #21
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_MspInit+0x44>)
 8000a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	055b      	lsls	r3, r3, #21
 8000a78:	4013      	ands	r3, r2
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	40021000 	.word	0x40021000

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab0:	f000 f9dc 	bl	8000e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	e00a      	b.n	8000ae2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000acc:	e000      	b.n	8000ad0 <_read+0x16>
 8000ace:	bf00      	nop
 8000ad0:	0001      	movs	r1, r0
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	1c5a      	adds	r2, r3, #1
 8000ad6:	60ba      	str	r2, [r7, #8]
 8000ad8:	b2ca      	uxtb	r2, r1
 8000ada:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	dbf0      	blt.n	8000acc <_read+0x12>
	}

return len;
 8000aea:	687b      	ldr	r3, [r7, #4]
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b006      	add	sp, #24
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e009      	b.n	8000b1a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1c5a      	adds	r2, r3, #1
 8000b0a:	60ba      	str	r2, [r7, #8]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f7ff ff08 	bl	8000924 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	3301      	adds	r3, #1
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	dbf1      	blt.n	8000b06 <_write+0x12>
	}
	return len;
 8000b22:	687b      	ldr	r3, [r7, #4]
}
 8000b24:	0018      	movs	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b006      	add	sp, #24
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <_close>:

int _close(int file)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	return -1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	425b      	negs	r3, r3
}
 8000b38:	0018      	movs	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b002      	add	sp, #8
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	0192      	lsls	r2, r2, #6
 8000b50:	605a      	str	r2, [r3, #4]
	return 0;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	0018      	movs	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b002      	add	sp, #8
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <_isatty>:

int _isatty(int file)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	return 1;
 8000b64:	2301      	movs	r3, #1
}
 8000b66:	0018      	movs	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b002      	add	sp, #8
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b084      	sub	sp, #16
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
	return 0;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b004      	add	sp, #16
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b8c:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <_sbrk+0x5c>)
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <_sbrk+0x60>)
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <_sbrk+0x64>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <_sbrk+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	18d3      	adds	r3, r2, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d207      	bcs.n	8000bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb4:	f002 fbd4 	bl	8003360 <__errno>
 8000bb8:	0003      	movs	r3, r0
 8000bba:	220c      	movs	r2, #12
 8000bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	425b      	negs	r3, r3
 8000bc2:	e009      	b.n	8000bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	18d2      	adds	r2, r2, r3
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <_sbrk+0x64>)
 8000bd4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b006      	add	sp, #24
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20009000 	.word	0x20009000
 8000be4:	00000400 	.word	0x00000400
 8000be8:	20000090 	.word	0x20000090
 8000bec:	20000140 	.word	0x20000140

08000bf0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c00:	4b23      	ldr	r3, [pc, #140]	; (8000c90 <MX_USART2_UART_Init+0x94>)
 8000c02:	4a24      	ldr	r2, [pc, #144]	; (8000c94 <MX_USART2_UART_Init+0x98>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c06:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <MX_USART2_UART_Init+0x94>)
 8000c08:	22e1      	movs	r2, #225	; 0xe1
 8000c0a:	0252      	lsls	r2, r2, #9
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <MX_USART2_UART_Init+0x94>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <MX_USART2_UART_Init+0x94>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_USART2_UART_Init+0x94>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_USART2_UART_Init+0x94>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_USART2_UART_Init+0x94>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_USART2_UART_Init+0x94>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_USART2_UART_Init+0x94>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <MX_USART2_UART_Init+0x94>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_USART2_UART_Init+0x94>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <MX_USART2_UART_Init+0x94>)
 8000c46:	0018      	movs	r0, r3
 8000c48:	f001 fc14 	bl	8002474 <HAL_UART_Init>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c50:	f7ff fef3 	bl	8000a3a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_USART2_UART_Init+0x94>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f002 faa1 	bl	80031a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c62:	f7ff feea 	bl	8000a3a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <MX_USART2_UART_Init+0x94>)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f002 fad8 	bl	8003220 <HAL_UARTEx_SetRxFifoThreshold>
 8000c70:	1e03      	subs	r3, r0, #0
 8000c72:	d001      	beq.n	8000c78 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c74:	f7ff fee1 	bl	8000a3a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <MX_USART2_UART_Init+0x94>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f002 fa56 	bl	800312c <HAL_UARTEx_DisableFifoMode>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c84:	f7ff fed9 	bl	8000a3a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	20000094 	.word	0x20000094
 8000c94:	40004400 	.word	0x40004400

08000c98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b097      	sub	sp, #92	; 0x5c
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	2344      	movs	r3, #68	; 0x44
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	2314      	movs	r3, #20
 8000ca8:	001a      	movs	r2, r3
 8000caa:	2100      	movs	r1, #0
 8000cac:	f002 fb82 	bl	80033b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb0:	2410      	movs	r4, #16
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	2334      	movs	r3, #52	; 0x34
 8000cb8:	001a      	movs	r2, r3
 8000cba:	2100      	movs	r1, #0
 8000cbc:	f002 fb7a 	bl	80033b4 <memset>
  if(uartHandle->Instance==USART2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a22      	ldr	r2, [pc, #136]	; (8000d50 <HAL_UART_MspInit+0xb8>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d13e      	bne.n	8000d48 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	2202      	movs	r2, #2
 8000cce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd0:	193b      	adds	r3, r7, r4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f001 fa13 	bl	8002104 <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	1e03      	subs	r3, r0, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ce2:	f7ff feaa 	bl	8000a3a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <HAL_UART_MspInit+0xbc>)
 8000ce8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <HAL_UART_MspInit+0xbc>)
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	0289      	lsls	r1, r1, #10
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <HAL_UART_MspInit+0xbc>)
 8000cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	029b      	lsls	r3, r3, #10
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <HAL_UART_MspInit+0xbc>)
 8000d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_UART_MspInit+0xbc>)
 8000d08:	2101      	movs	r1, #1
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_UART_MspInit+0xbc>)
 8000d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d12:	2201      	movs	r2, #1
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000d1a:	2144      	movs	r1, #68	; 0x44
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	220c      	movs	r2, #12
 8000d20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2202      	movs	r2, #2
 8000d26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2201      	movs	r2, #1
 8000d38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	187a      	adds	r2, r7, r1
 8000d3c:	23a0      	movs	r3, #160	; 0xa0
 8000d3e:	05db      	lsls	r3, r3, #23
 8000d40:	0011      	movs	r1, r2
 8000d42:	0018      	movs	r0, r3
 8000d44:	f000 fb32 	bl	80013ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b017      	add	sp, #92	; 0x5c
 8000d4e:	bd90      	pop	{r4, r7, pc}
 8000d50:	40004400 	.word	0x40004400
 8000d54:	40021000 	.word	0x40021000

08000d58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d5a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d5c:	f7ff ff48 	bl	8000bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d62:	490d      	ldr	r1, [pc, #52]	; (8000d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <LoopForever+0xe>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d78:	4c0a      	ldr	r4, [pc, #40]	; (8000da4 <LoopForever+0x16>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d86:	f002 faf1 	bl	800336c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d8a:	f7ff fddd 	bl	8000948 <main>

08000d8e <LoopForever>:

LoopForever:
  b LoopForever
 8000d8e:	e7fe      	b.n	8000d8e <LoopForever>
  ldr   r0, =_estack
 8000d90:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d9c:	080047b8 	.word	0x080047b8
  ldr r2, =_sbss
 8000da0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000da4:	2000013c 	.word	0x2000013c

08000da8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC1_COMP_IRQHandler>

08000daa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 f80e 	bl	8000dd8 <HAL_InitTick>
 8000dbc:	1e03      	subs	r3, r0, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	e001      	b.n	8000dcc <HAL_Init+0x22>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000dc8:	f7ff fe3c 	bl	8000a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	781b      	ldrb	r3, [r3, #0]
}
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000de0:	230f      	movs	r3, #15
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <HAL_InitTick+0x88>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d02b      	beq.n	8000e48 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <HAL_InitTick+0x8c>)
 8000df2:	681c      	ldr	r4, [r3, #0]
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <HAL_InitTick+0x88>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	0019      	movs	r1, r3
 8000dfa:	23fa      	movs	r3, #250	; 0xfa
 8000dfc:	0098      	lsls	r0, r3, #2
 8000dfe:	f7ff f9a3 	bl	8000148 <__udivsi3>
 8000e02:	0003      	movs	r3, r0
 8000e04:	0019      	movs	r1, r3
 8000e06:	0020      	movs	r0, r4
 8000e08:	f7ff f99e 	bl	8000148 <__udivsi3>
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 f913 	bl	800103a <HAL_SYSTICK_Config>
 8000e14:	1e03      	subs	r3, r0, #0
 8000e16:	d112      	bne.n	8000e3e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d80a      	bhi.n	8000e34 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	2301      	movs	r3, #1
 8000e22:	425b      	negs	r3, r3
 8000e24:	2200      	movs	r2, #0
 8000e26:	0018      	movs	r0, r3
 8000e28:	f000 f8f2 	bl	8001010 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_InitTick+0x90>)
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	e00d      	b.n	8000e50 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e34:	230f      	movs	r3, #15
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	2201      	movs	r2, #1
 8000e3a:	701a      	strb	r2, [r3, #0]
 8000e3c:	e008      	b.n	8000e50 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e3e:	230f      	movs	r3, #15
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	e003      	b.n	8000e50 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e48:	230f      	movs	r3, #15
 8000e4a:	18fb      	adds	r3, r7, r3
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e50:	230f      	movs	r3, #15
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	781b      	ldrb	r3, [r3, #0]
}
 8000e56:	0018      	movs	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b005      	add	sp, #20
 8000e5c:	bd90      	pop	{r4, r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	20000008 	.word	0x20000008
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20000004 	.word	0x20000004

08000e6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <HAL_IncTick+0x1c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	001a      	movs	r2, r3
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <HAL_IncTick+0x20>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	18d2      	adds	r2, r2, r3
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_IncTick+0x20>)
 8000e7e:	601a      	str	r2, [r3, #0]
}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000128 	.word	0x20000128

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b02      	ldr	r3, [pc, #8]	; (8000ea0 <HAL_GetTick+0x10>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	0018      	movs	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	20000128 	.word	0x20000128

08000ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff fff0 	bl	8000e90 <HAL_GetTick>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	d005      	beq.n	8000eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_Delay+0x44>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	001a      	movs	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	189b      	adds	r3, r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	f7ff ffe0 	bl	8000e90 <HAL_GetTick>
 8000ed0:	0002      	movs	r2, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d8f7      	bhi.n	8000ecc <HAL_Delay+0x28>
  {
  }
}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b004      	add	sp, #16
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	20000008 	.word	0x20000008

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b7f      	cmp	r3, #127	; 0x7f
 8000f00:	d828      	bhi.n	8000f54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f02:	4a2f      	ldr	r2, [pc, #188]	; (8000fc0 <__NVIC_SetPriority+0xd4>)
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	33c0      	adds	r3, #192	; 0xc0
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	589b      	ldr	r3, [r3, r2]
 8000f12:	1dfa      	adds	r2, r7, #7
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	0011      	movs	r1, r2
 8000f18:	2203      	movs	r2, #3
 8000f1a:	400a      	ands	r2, r1
 8000f1c:	00d2      	lsls	r2, r2, #3
 8000f1e:	21ff      	movs	r1, #255	; 0xff
 8000f20:	4091      	lsls	r1, r2
 8000f22:	000a      	movs	r2, r1
 8000f24:	43d2      	mvns	r2, r2
 8000f26:	401a      	ands	r2, r3
 8000f28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	019b      	lsls	r3, r3, #6
 8000f2e:	22ff      	movs	r2, #255	; 0xff
 8000f30:	401a      	ands	r2, r3
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	0018      	movs	r0, r3
 8000f38:	2303      	movs	r3, #3
 8000f3a:	4003      	ands	r3, r0
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f40:	481f      	ldr	r0, [pc, #124]	; (8000fc0 <__NVIC_SetPriority+0xd4>)
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	33c0      	adds	r3, #192	; 0xc0
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f52:	e031      	b.n	8000fb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f54:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <__NVIC_SetPriority+0xd8>)
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	400b      	ands	r3, r1
 8000f60:	3b08      	subs	r3, #8
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3306      	adds	r3, #6
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	18d3      	adds	r3, r2, r3
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	1dfa      	adds	r2, r7, #7
 8000f70:	7812      	ldrb	r2, [r2, #0]
 8000f72:	0011      	movs	r1, r2
 8000f74:	2203      	movs	r2, #3
 8000f76:	400a      	ands	r2, r1
 8000f78:	00d2      	lsls	r2, r2, #3
 8000f7a:	21ff      	movs	r1, #255	; 0xff
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	000a      	movs	r2, r1
 8000f80:	43d2      	mvns	r2, r2
 8000f82:	401a      	ands	r2, r3
 8000f84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	019b      	lsls	r3, r3, #6
 8000f8a:	22ff      	movs	r2, #255	; 0xff
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	0018      	movs	r0, r3
 8000f94:	2303      	movs	r3, #3
 8000f96:	4003      	ands	r3, r0
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <__NVIC_SetPriority+0xd8>)
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	001c      	movs	r4, r3
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	4023      	ands	r3, r4
 8000fa8:	3b08      	subs	r3, #8
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	430a      	orrs	r2, r1
 8000fae:	3306      	adds	r3, #6
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	18c3      	adds	r3, r0, r3
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	601a      	str	r2, [r3, #0]
}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b003      	add	sp, #12
 8000fbe:	bd90      	pop	{r4, r7, pc}
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	1e5a      	subs	r2, r3, #1
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	045b      	lsls	r3, r3, #17
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d301      	bcc.n	8000fe0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e010      	b.n	8001002 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <SysTick_Config+0x44>)
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	3a01      	subs	r2, #1
 8000fe6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe8:	2301      	movs	r3, #1
 8000fea:	425b      	negs	r3, r3
 8000fec:	2103      	movs	r1, #3
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f7ff ff7c 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x44>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x44>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	210f      	movs	r1, #15
 800101c:	187b      	adds	r3, r7, r1
 800101e:	1c02      	adds	r2, r0, #0
 8001020:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	187b      	adds	r3, r7, r1
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b25b      	sxtb	r3, r3
 800102a:	0011      	movs	r1, r2
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff ff5d 	bl	8000eec <__NVIC_SetPriority>
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	b004      	add	sp, #16
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	0018      	movs	r0, r3
 8001046:	f7ff ffbf 	bl	8000fc8 <SysTick_Config>
 800104a:	0003      	movs	r3, r0
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b002      	add	sp, #8
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_FLASH_Unlock+0x3c>)
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	2b00      	cmp	r3, #0
 8001066:	da0c      	bge.n	8001082 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_FLASH_Unlock+0x3c>)
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_FLASH_Unlock+0x40>)
 800106c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_FLASH_Unlock+0x3c>)
 8001070:	4a09      	ldr	r2, [pc, #36]	; (8001098 <HAL_FLASH_Unlock+0x44>)
 8001072:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_FLASH_Unlock+0x3c>)
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	2b00      	cmp	r3, #0
 800107a:	da02      	bge.n	8001082 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800107c:	1dfb      	adds	r3, r7, #7
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	781b      	ldrb	r3, [r3, #0]
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b002      	add	sp, #8
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	40022000 	.word	0x40022000
 8001094:	45670123 	.word	0x45670123
 8001098:	cdef89ab 	.word	0xcdef89ab

0800109c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_FLASH_Lock+0x34>)
 80010aa:	695a      	ldr	r2, [r3, #20]
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_FLASH_Lock+0x34>)
 80010ae:	2180      	movs	r1, #128	; 0x80
 80010b0:	0609      	lsls	r1, r1, #24
 80010b2:	430a      	orrs	r2, r1
 80010b4:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_FLASH_Lock+0x34>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	da02      	bge.n	80010c4 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	781b      	ldrb	r3, [r3, #0]
}
 80010c8:	0018      	movs	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b002      	add	sp, #8
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_FLASH_OB_Unlock+0x44>)
 80010e2:	695a      	ldr	r2, [r3, #20]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	05db      	lsls	r3, r3, #23
 80010e8:	4013      	ands	r3, r2
 80010ea:	d00e      	beq.n	800110a <HAL_FLASH_OB_Unlock+0x36>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_FLASH_OB_Unlock+0x44>)
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <HAL_FLASH_OB_Unlock+0x48>)
 80010f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_FLASH_OB_Unlock+0x44>)
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <HAL_FLASH_OB_Unlock+0x4c>)
 80010f6:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <HAL_FLASH_OB_Unlock+0x44>)
 80010fa:	695a      	ldr	r2, [r3, #20]
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	05db      	lsls	r3, r3, #23
 8001100:	4013      	ands	r3, r2
 8001102:	d102      	bne.n	800110a <HAL_FLASH_OB_Unlock+0x36>
    {
      status = HAL_OK;
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
}
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	b002      	add	sp, #8
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	40022000 	.word	0x40022000
 800111c:	08192a3b 	.word	0x08192a3b
 8001120:	4c5d6e7f 	.word	0x4c5d6e7f

08001124 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_FLASH_OB_Lock+0x38>)
 8001132:	695a      	ldr	r2, [r3, #20]
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_FLASH_OB_Lock+0x38>)
 8001136:	2180      	movs	r1, #128	; 0x80
 8001138:	05c9      	lsls	r1, r1, #23
 800113a:	430a      	orrs	r2, r1
 800113c:	615a      	str	r2, [r3, #20]

  /* verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <HAL_FLASH_OB_Lock+0x38>)
 8001140:	695a      	ldr	r2, [r3, #20]
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	05db      	lsls	r3, r3, #23
 8001146:	4013      	ands	r3, r2
 8001148:	d002      	beq.n	8001150 <HAL_FLASH_OB_Lock+0x2c>
  {
    status = HAL_OK;
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001150:	1dfb      	adds	r3, r7, #7
 8001152:	781b      	ldrb	r3, [r3, #0]
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b002      	add	sp, #8
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40022000 	.word	0x40022000

08001160 <HAL_FLASHEx_OBGetConfig>:
  *                  configuration information. The fields pOBInit->WRPArea should
  *                  indicate which area is requested for the WRP.
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_ALL;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	221f      	movs	r2, #31
 800116c:	601a      	str	r2, [r3, #0]

  /* Get write protection on the selected area */
  FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6858      	ldr	r0, [r3, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3308      	adds	r3, #8
 8001176:	0019      	movs	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	330c      	adds	r3, #12
 800117c:	001a      	movs	r2, r3
 800117e:	f000 f837 	bl	80011f0 <FLASH_OB_GetWRP>

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8001182:	f000 f85f 	bl	8001244 <FLASH_OB_GetRDP>
 8001186:	0002      	movs	r2, r0
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800118c:	f000 f872 	bl	8001274 <FLASH_OB_GetUser>
 8001190:	0002      	movs	r2, r0
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	619a      	str	r2, [r3, #24]
  pOBInit->USERType = OB_USER_ALL;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a14      	ldr	r2, [pc, #80]	; (80011ec <HAL_FLASHEx_OBGetConfig+0x8c>)
 800119a:	615a      	str	r2, [r3, #20]

#if defined(FLASH_PCROP_SUPPORT)
  /* Get the Proprietary code readout protection */
  FLASH_OB_GetPCROP1A(&(pOBInit->PCROPConfig), &(pOBInit->PCROP1AStartAddr), &(pOBInit->PCROP1AEndAddr));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	331c      	adds	r3, #28
 80011a0:	0018      	movs	r0, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3320      	adds	r3, #32
 80011a6:	0019      	movs	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3324      	adds	r3, #36	; 0x24
 80011ac:	001a      	movs	r2, r3
 80011ae:	f000 f873 	bl	8001298 <FLASH_OB_GetPCROP1A>
  FLASH_OB_GetPCROP1B(&(pOBInit->PCROP1BStartAddr), &(pOBInit->PCROP1BEndAddr));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3328      	adds	r3, #40	; 0x28
 80011b6:	001a      	movs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	332c      	adds	r3, #44	; 0x2c
 80011bc:	0019      	movs	r1, r3
 80011be:	0010      	movs	r0, r2
 80011c0:	f000 f8aa 	bl	8001318 <FLASH_OB_GetPCROP1B>
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE_A | OB_PCROP_ZONE_B);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	2203      	movs	r2, #3
 80011ca:	431a      	orrs	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	61da      	str	r2, [r3, #28]
#if defined(FLASH_DBANK_SUPPORT)
  /* Get the Securable Memory Area protection */
  FLASH_OB_GetSecMem(&(pOBInit->BootEntryPoint), &(pOBInit->SecSize), &(pOBInit->SecSize2));
#else
  /* Get the Securable Memory Area protection */
  FLASH_OB_GetSecMem(&(pOBInit->BootEntryPoint), &(pOBInit->SecSize));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3330      	adds	r3, #48	; 0x30
 80011d4:	001a      	movs	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3334      	adds	r3, #52	; 0x34
 80011da:	0019      	movs	r1, r3
 80011dc:	0010      	movs	r0, r2
 80011de:	f000 f8cb 	bl	8001378 <FLASH_OB_GetSecMem>
#endif /* FLASH_DBANK_SUPPORT */
#endif /* FLASH_SECURABLE_MEMORY_SUPPORT */
}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b002      	add	sp, #8
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	3f4fff00 	.word	0x3f4fff00

080011f0 <FLASH_OB_GetWRP>:
  * @param[out]  WRDPEndOffset  Dpecifies the address where to copied the end page of
  *                        the write protected area
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRDPEndOffset)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_WRPAREA(WRPArea));

  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_ZONE_A)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d10d      	bne.n	800121e <FLASH_OB_GetWRP+0x2e>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <FLASH_OB_GetWRP+0x50>)
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	223f      	movs	r2, #63	; 0x3f
 8001208:	401a      	ands	r2, r3
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <FLASH_OB_GetWRP+0x50>)
 8001210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001212:	0c1b      	lsrs	r3, r3, #16
 8001214:	223f      	movs	r2, #63	; 0x3f
 8001216:	401a      	ands	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	601a      	str	r2, [r3, #0]
  else
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
  }
}
 800121c:	e00c      	b.n	8001238 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <FLASH_OB_GetWRP+0x50>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	223f      	movs	r2, #63	; 0x3f
 8001224:	401a      	ands	r2, r3
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <FLASH_OB_GetWRP+0x50>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	0c1b      	lsrs	r3, r3, #16
 8001230:	223f      	movs	r2, #63	; 0x3f
 8001232:	401a      	ands	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b004      	add	sp, #16
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40022000 	.word	0x40022000

08001244 <FLASH_OB_GetRDP>:
  *           @arg @ref OB_RDP_LEVEL_0 No protection
  *           @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *           @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <FLASH_OB_GetRDP+0x2c>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	22ff      	movs	r2, #255	; 0xff
 8001250:	4013      	ands	r3, r2
 8001252:	607b      	str	r3, [r7, #4]

  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2baa      	cmp	r3, #170	; 0xaa
 8001258:	d004      	beq.n	8001264 <FLASH_OB_GetRDP+0x20>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2bcc      	cmp	r3, #204	; 0xcc
 800125e:	d001      	beq.n	8001264 <FLASH_OB_GetRDP+0x20>
  {
    return (OB_RDP_LEVEL_1);
 8001260:	23bb      	movs	r3, #187	; 0xbb
 8001262:	e000      	b.n	8001266 <FLASH_OB_GetRDP+0x22>
  }
  else
  {
    return rdplvl;
 8001264:	687b      	ldr	r3, [r7, #4]
  }
}
 8001266:	0018      	movs	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	40022000 	.word	0x40022000

08001274 <FLASH_OB_GetUser>:
  *           @arg @ref FLASH_OB_USER_nBOOT0
  *           @arg @ref FLASH_OB_USER_INPUT_RESET_HOLDER(*)
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <FLASH_OB_GetUser+0x1c>)
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <FLASH_OB_GetUser+0x20>)
 8001280:	4013      	ands	r3, r2
 8001282:	607b      	str	r3, [r7, #4]
  return user;
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	0018      	movs	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	b002      	add	sp, #8
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	40022000 	.word	0x40022000
 8001294:	3f4fff00 	.word	0x3f4fff00

08001298 <FLASH_OB_GetPCROP1A>:
  * @param  PCROP1AEndAddr [out]  Specifies the address where to copied the end address of
  *         the 1A Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP1A(uint32_t *PCROPConfig, uint32_t *PCROP1AStartAddr, uint32_t *PCROP1AEndAddr)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  }
  else
#endif /* FLASH_DBANK_SUPPORT */
  {
    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	051b      	lsls	r3, r3, #20
 80012a8:	617b      	str	r3, [r7, #20]
  }

  pcrop = (FLASH->PCROP1ASR & FLASH_PCROP1ASR_PCROP1A_STRT);
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <FLASH_OB_GetPCROP1A+0x78>)
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	22ff      	movs	r2, #255	; 0xff
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	025a      	lsls	r2, r3, #9
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	601a      	str	r2, [r3, #0]
  *PCROP1AStartAddr += ropbase;
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	18d2      	adds	r2, r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	601a      	str	r2, [r3, #0]

  pcrop = FLASH->PCROP1AER;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <FLASH_OB_GetPCROP1A+0x78>)
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	613b      	str	r3, [r7, #16]
  *PCROP1AEndAddr = ((pcrop & FLASH_PCROP1AER_PCROP1A_END) << FLASH_PCROP_GRANULARITY_OFFSET);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	025a      	lsls	r2, r3, #9
 80012d2:	23ff      	movs	r3, #255	; 0xff
 80012d4:	025b      	lsls	r3, r3, #9
 80012d6:	401a      	ands	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	601a      	str	r2, [r3, #0]
  *PCROP1AEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	18d3      	adds	r3, r2, r3
 80012e4:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <FLASH_OB_GetPCROP1A+0x7c>)
 80012e6:	189a      	adds	r2, r3, r2
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	601a      	str	r2, [r3, #0]

  *PCROPConfig &= ~OB_PCROP_RDP_ERASE;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	085a      	lsrs	r2, r3, #1
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	601a      	str	r2, [r3, #0]
  *PCROPConfig |= (pcrop & FLASH_PCROP1AER_PCROP_RDP);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	0fdb      	lsrs	r3, r3, #31
 8001300:	07db      	lsls	r3, r3, #31
 8001302:	431a      	orrs	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	601a      	str	r2, [r3, #0]
}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b006      	add	sp, #24
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40022000 	.word	0x40022000
 8001314:	000001ff 	.word	0x000001ff

08001318 <FLASH_OB_GetPCROP1B>:
  * @param  PCROP1BEndAddr [out]  Specifies the address where to copied the end address of
  *         the 1B Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP1B(uint32_t *PCROP1BStartAddr, uint32_t *PCROP1BEndAddr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* FLASH_DBANK_SUPPORT */
  {
    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	051b      	lsls	r3, r3, #20
 8001326:	60fb      	str	r3, [r7, #12]
  }

  pcrop = (FLASH->PCROP1BSR & FLASH_PCROP1BSR_PCROP1B_STRT);
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <FLASH_OB_GetPCROP1B+0x58>)
 800132a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132c:	22ff      	movs	r2, #255	; 0xff
 800132e:	4013      	ands	r3, r2
 8001330:	60bb      	str	r3, [r7, #8]
  *PCROP1BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	025a      	lsls	r2, r3, #9
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	601a      	str	r2, [r3, #0]
  *PCROP1BStartAddr += ropbase;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	18d2      	adds	r2, r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	601a      	str	r2, [r3, #0]

  pcrop = (FLASH->PCROP1BER & FLASH_PCROP1BER_PCROP1B_END);
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <FLASH_OB_GetPCROP1B+0x58>)
 8001348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134a:	22ff      	movs	r2, #255	; 0xff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  *PCROP1BEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	025a      	lsls	r2, r3, #9
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	601a      	str	r2, [r3, #0]
  *PCROP1BEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	18d3      	adds	r3, r2, r3
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <FLASH_OB_GetPCROP1B+0x5c>)
 8001362:	189a      	adds	r2, r3, r2
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b004      	add	sp, #16
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40022000 	.word	0x40022000
 8001374:	000001ff 	.word	0x000001ff

08001378 <FLASH_OB_GetSecMem>:
  * @param  SecSize specifies number of pages to protect as secure memory area, starting from
  *         beginning of the Flash (page 0).
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t *BootEntry, uint32_t *SecSize)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t secmem = FLASH->SECR;
 8001382:	4a09      	ldr	r2, [pc, #36]	; (80013a8 <FLASH_OB_GetSecMem+0x30>)
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	58d3      	ldr	r3, [r2, r3]
 8001388:	60fb      	str	r3, [r7, #12]

  *BootEntry = (secmem & FLASH_SECR_BOOT_LOCK);
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	025b      	lsls	r3, r3, #9
 8001390:	401a      	ands	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]
  *SecSize = (secmem & FLASH_SECR_SEC_SIZE);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	227f      	movs	r2, #127	; 0x7f
 800139a:	401a      	ands	r2, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	601a      	str	r2, [r3, #0]
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b004      	add	sp, #16
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40022000 	.word	0x40022000

080013ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ba:	e147      	b.n	800164c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2101      	movs	r1, #1
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4091      	lsls	r1, r2
 80013c6:	000a      	movs	r2, r1
 80013c8:	4013      	ands	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d100      	bne.n	80013d4 <HAL_GPIO_Init+0x28>
 80013d2:	e138      	b.n	8001646 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2203      	movs	r2, #3
 80013da:	4013      	ands	r3, r2
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d005      	beq.n	80013ec <HAL_GPIO_Init+0x40>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2203      	movs	r2, #3
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d130      	bne.n	800144e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	2203      	movs	r2, #3
 80013f8:	409a      	lsls	r2, r3
 80013fa:	0013      	movs	r3, r2
 80013fc:	43da      	mvns	r2, r3
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	68da      	ldr	r2, [r3, #12]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	409a      	lsls	r2, r3
 800140e:	0013      	movs	r3, r2
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001422:	2201      	movs	r2, #1
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
 8001428:	0013      	movs	r3, r2
 800142a:	43da      	mvns	r2, r3
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	091b      	lsrs	r3, r3, #4
 8001438:	2201      	movs	r2, #1
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
 8001440:	0013      	movs	r3, r2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2203      	movs	r2, #3
 8001454:	4013      	ands	r3, r2
 8001456:	2b03      	cmp	r3, #3
 8001458:	d017      	beq.n	800148a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	409a      	lsls	r2, r3
 8001468:	0013      	movs	r3, r2
 800146a:	43da      	mvns	r2, r3
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	409a      	lsls	r2, r3
 800147c:	0013      	movs	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2203      	movs	r2, #3
 8001490:	4013      	ands	r3, r2
 8001492:	2b02      	cmp	r3, #2
 8001494:	d123      	bne.n	80014de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	08da      	lsrs	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3208      	adds	r2, #8
 800149e:	0092      	lsls	r2, r2, #2
 80014a0:	58d3      	ldr	r3, [r2, r3]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	2207      	movs	r2, #7
 80014a8:	4013      	ands	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	220f      	movs	r2, #15
 80014ae:	409a      	lsls	r2, r3
 80014b0:	0013      	movs	r3, r2
 80014b2:	43da      	mvns	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	691a      	ldr	r2, [r3, #16]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2107      	movs	r1, #7
 80014c2:	400b      	ands	r3, r1
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	409a      	lsls	r2, r3
 80014c8:	0013      	movs	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	08da      	lsrs	r2, r3, #3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3208      	adds	r2, #8
 80014d8:	0092      	lsls	r2, r2, #2
 80014da:	6939      	ldr	r1, [r7, #16]
 80014dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	43da      	mvns	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2203      	movs	r2, #3
 80014fc:	401a      	ands	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	409a      	lsls	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	23c0      	movs	r3, #192	; 0xc0
 8001518:	029b      	lsls	r3, r3, #10
 800151a:	4013      	ands	r3, r2
 800151c:	d100      	bne.n	8001520 <HAL_GPIO_Init+0x174>
 800151e:	e092      	b.n	8001646 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001520:	4a50      	ldr	r2, [pc, #320]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3318      	adds	r3, #24
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	589b      	ldr	r3, [r3, r2]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2203      	movs	r2, #3
 8001532:	4013      	ands	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	220f      	movs	r2, #15
 8001538:	409a      	lsls	r2, r3
 800153a:	0013      	movs	r3, r2
 800153c:	43da      	mvns	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	23a0      	movs	r3, #160	; 0xa0
 8001548:	05db      	lsls	r3, r3, #23
 800154a:	429a      	cmp	r2, r3
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_Init+0x1ca>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a45      	ldr	r2, [pc, #276]	; (8001668 <HAL_GPIO_Init+0x2bc>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d00d      	beq.n	8001572 <HAL_GPIO_Init+0x1c6>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a44      	ldr	r2, [pc, #272]	; (800166c <HAL_GPIO_Init+0x2c0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d007      	beq.n	800156e <HAL_GPIO_Init+0x1c2>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a43      	ldr	r2, [pc, #268]	; (8001670 <HAL_GPIO_Init+0x2c4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d101      	bne.n	800156a <HAL_GPIO_Init+0x1be>
 8001566:	2303      	movs	r3, #3
 8001568:	e006      	b.n	8001578 <HAL_GPIO_Init+0x1cc>
 800156a:	2305      	movs	r3, #5
 800156c:	e004      	b.n	8001578 <HAL_GPIO_Init+0x1cc>
 800156e:	2302      	movs	r3, #2
 8001570:	e002      	b.n	8001578 <HAL_GPIO_Init+0x1cc>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <HAL_GPIO_Init+0x1cc>
 8001576:	2300      	movs	r3, #0
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	2103      	movs	r1, #3
 800157c:	400a      	ands	r2, r1
 800157e:	00d2      	lsls	r2, r2, #3
 8001580:	4093      	lsls	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001588:	4936      	ldr	r1, [pc, #216]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	089b      	lsrs	r3, r3, #2
 800158e:	3318      	adds	r3, #24
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001596:	4b33      	ldr	r3, [pc, #204]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43da      	mvns	r2, r3
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	035b      	lsls	r3, r3, #13
 80015ae:	4013      	ands	r3, r2
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ba:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	43da      	mvns	r2, r3
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	039b      	lsls	r3, r3, #14
 80015d8:	4013      	ands	r3, r2
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e4:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015ea:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 80015ec:	2384      	movs	r3, #132	; 0x84
 80015ee:	58d3      	ldr	r3, [r2, r3]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43da      	mvns	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	029b      	lsls	r3, r3, #10
 8001604:	4013      	ands	r3, r2
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001610:	4914      	ldr	r1, [pc, #80]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 8001612:	2284      	movs	r2, #132	; 0x84
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001618:	4a12      	ldr	r2, [pc, #72]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	58d3      	ldr	r3, [r2, r3]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43da      	mvns	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	025b      	lsls	r3, r3, #9
 8001632:	4013      	ands	r3, r2
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800163e:	4909      	ldr	r1, [pc, #36]	; (8001664 <HAL_GPIO_Init+0x2b8>)
 8001640:	2280      	movs	r2, #128	; 0x80
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	40da      	lsrs	r2, r3
 8001654:	1e13      	subs	r3, r2, #0
 8001656:	d000      	beq.n	800165a <HAL_GPIO_Init+0x2ae>
 8001658:	e6b0      	b.n	80013bc <HAL_GPIO_Init+0x10>
  }
}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46c0      	nop			; (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	b006      	add	sp, #24
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021800 	.word	0x40021800
 8001668:	50000400 	.word	0x50000400
 800166c:	50000800 	.word	0x50000800
 8001670:	50000c00 	.word	0x50000c00

08001674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	0008      	movs	r0, r1
 800167e:	0011      	movs	r1, r2
 8001680:	1cbb      	adds	r3, r7, #2
 8001682:	1c02      	adds	r2, r0, #0
 8001684:	801a      	strh	r2, [r3, #0]
 8001686:	1c7b      	adds	r3, r7, #1
 8001688:	1c0a      	adds	r2, r1, #0
 800168a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800168c:	1c7b      	adds	r3, r7, #1
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d004      	beq.n	800169e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001694:	1cbb      	adds	r3, r7, #2
 8001696:	881a      	ldrh	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800169c:	e003      	b.n	80016a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800169e:	1cbb      	adds	r3, r7, #2
 80016a0:	881a      	ldrh	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b002      	add	sp, #8
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	000a      	movs	r2, r1
 80016b8:	1cbb      	adds	r3, r7, #2
 80016ba:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016c2:	1cbb      	adds	r3, r7, #2
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	4013      	ands	r3, r2
 80016ca:	041a      	lsls	r2, r3, #16
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	1cb9      	adds	r1, r7, #2
 80016d2:	8809      	ldrh	r1, [r1, #0]
 80016d4:	400b      	ands	r3, r1
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	619a      	str	r2, [r3, #24]
}
 80016dc:	46c0      	nop			; (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	b004      	add	sp, #16
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a19      	ldr	r2, [pc, #100]	; (8001758 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	0019      	movs	r1, r3
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	429a      	cmp	r2, r3
 8001706:	d11f      	bne.n	8001748 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	0013      	movs	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	189b      	adds	r3, r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4912      	ldr	r1, [pc, #72]	; (8001760 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001716:	0018      	movs	r0, r3
 8001718:	f7fe fd16 	bl	8000148 <__udivsi3>
 800171c:	0003      	movs	r3, r0
 800171e:	3301      	adds	r3, #1
 8001720:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001722:	e008      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3b01      	subs	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	e001      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e009      	b.n	800174a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	401a      	ands	r2, r3
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	429a      	cmp	r2, r3
 8001746:	d0ed      	beq.n	8001724 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	0018      	movs	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	b004      	add	sp, #16
 8001750:	bd80      	pop	{r7, pc}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	40007000 	.word	0x40007000
 8001758:	fffff9ff 	.word	0xfffff9ff
 800175c:	20000000 	.word	0x20000000
 8001760:	000f4240 	.word	0x000f4240

08001764 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <LL_RCC_GetAPB1Prescaler+0x14>)
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	23e0      	movs	r3, #224	; 0xe0
 800176e:	01db      	lsls	r3, r3, #7
 8001770:	4013      	ands	r3, r2
}
 8001772:	0018      	movs	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021000 	.word	0x40021000

0800177c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e2fe      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2201      	movs	r2, #1
 8001794:	4013      	ands	r3, r2
 8001796:	d100      	bne.n	800179a <HAL_RCC_OscConfig+0x1e>
 8001798:	e07c      	b.n	8001894 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800179a:	4bc3      	ldr	r3, [pc, #780]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2238      	movs	r2, #56	; 0x38
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017a4:	4bc0      	ldr	r3, [pc, #768]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2203      	movs	r2, #3
 80017aa:	4013      	ands	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d102      	bne.n	80017ba <HAL_RCC_OscConfig+0x3e>
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d002      	beq.n	80017c0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d10b      	bne.n	80017d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c0:	4bb9      	ldr	r3, [pc, #740]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	029b      	lsls	r3, r3, #10
 80017c8:	4013      	ands	r3, r2
 80017ca:	d062      	beq.n	8001892 <HAL_RCC_OscConfig+0x116>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d15e      	bne.n	8001892 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e2d9      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	025b      	lsls	r3, r3, #9
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d107      	bne.n	80017f4 <HAL_RCC_OscConfig+0x78>
 80017e4:	4bb0      	ldr	r3, [pc, #704]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4baf      	ldr	r3, [pc, #700]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	0249      	lsls	r1, r1, #9
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	e020      	b.n	8001836 <HAL_RCC_OscConfig+0xba>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	23a0      	movs	r3, #160	; 0xa0
 80017fa:	02db      	lsls	r3, r3, #11
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d10e      	bne.n	800181e <HAL_RCC_OscConfig+0xa2>
 8001800:	4ba9      	ldr	r3, [pc, #676]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4ba8      	ldr	r3, [pc, #672]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	02c9      	lsls	r1, r1, #11
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	4ba6      	ldr	r3, [pc, #664]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4ba5      	ldr	r3, [pc, #660]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	0249      	lsls	r1, r1, #9
 8001818:	430a      	orrs	r2, r1
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	e00b      	b.n	8001836 <HAL_RCC_OscConfig+0xba>
 800181e:	4ba2      	ldr	r3, [pc, #648]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4ba1      	ldr	r3, [pc, #644]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001824:	49a1      	ldr	r1, [pc, #644]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001826:	400a      	ands	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	4b9f      	ldr	r3, [pc, #636]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4b9e      	ldr	r3, [pc, #632]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001830:	499f      	ldr	r1, [pc, #636]	; (8001ab0 <HAL_RCC_OscConfig+0x334>)
 8001832:	400a      	ands	r2, r1
 8001834:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d014      	beq.n	8001868 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183e:	f7ff fb27 	bl	8000e90 <HAL_GetTick>
 8001842:	0003      	movs	r3, r0
 8001844:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fb22 	bl	8000e90 <HAL_GetTick>
 800184c:	0002      	movs	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e298      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185a:	4b93      	ldr	r3, [pc, #588]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	029b      	lsls	r3, r3, #10
 8001862:	4013      	ands	r3, r2
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0xcc>
 8001866:	e015      	b.n	8001894 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff fb12 	bl	8000e90 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001872:	f7ff fb0d 	bl	8000e90 <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b64      	cmp	r3, #100	; 0x64
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e283      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001884:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	029b      	lsls	r3, r3, #10
 800188c:	4013      	ands	r3, r2
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0xf6>
 8001890:	e000      	b.n	8001894 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001892:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2202      	movs	r2, #2
 800189a:	4013      	ands	r3, r2
 800189c:	d100      	bne.n	80018a0 <HAL_RCC_OscConfig+0x124>
 800189e:	e099      	b.n	80019d4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018a0:	4b81      	ldr	r3, [pc, #516]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2238      	movs	r2, #56	; 0x38
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018aa:	4b7f      	ldr	r3, [pc, #508]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2203      	movs	r2, #3
 80018b0:	4013      	ands	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2b10      	cmp	r3, #16
 80018b8:	d102      	bne.n	80018c0 <HAL_RCC_OscConfig+0x144>
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d002      	beq.n	80018c6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d135      	bne.n	8001932 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c6:	4b78      	ldr	r3, [pc, #480]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4013      	ands	r3, r2
 80018d0:	d005      	beq.n	80018de <HAL_RCC_OscConfig+0x162>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e256      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	4b72      	ldr	r3, [pc, #456]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4a74      	ldr	r2, [pc, #464]	; (8001ab4 <HAL_RCC_OscConfig+0x338>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	0019      	movs	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	021a      	lsls	r2, r3, #8
 80018ee:	4b6e      	ldr	r3, [pc, #440]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80018f0:	430a      	orrs	r2, r1
 80018f2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d112      	bne.n	8001920 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018fa:	4b6b      	ldr	r3, [pc, #428]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a6e      	ldr	r2, [pc, #440]	; (8001ab8 <HAL_RCC_OscConfig+0x33c>)
 8001900:	4013      	ands	r3, r2
 8001902:	0019      	movs	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	4b67      	ldr	r3, [pc, #412]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800190e:	4b66      	ldr	r3, [pc, #408]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	0adb      	lsrs	r3, r3, #11
 8001914:	2207      	movs	r2, #7
 8001916:	4013      	ands	r3, r2
 8001918:	4a68      	ldr	r2, [pc, #416]	; (8001abc <HAL_RCC_OscConfig+0x340>)
 800191a:	40da      	lsrs	r2, r3
 800191c:	4b68      	ldr	r3, [pc, #416]	; (8001ac0 <HAL_RCC_OscConfig+0x344>)
 800191e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001920:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <HAL_RCC_OscConfig+0x348>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	0018      	movs	r0, r3
 8001926:	f7ff fa57 	bl	8000dd8 <HAL_InitTick>
 800192a:	1e03      	subs	r3, r0, #0
 800192c:	d051      	beq.n	80019d2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e22c      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d030      	beq.n	800199c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a5e      	ldr	r2, [pc, #376]	; (8001ab8 <HAL_RCC_OscConfig+0x33c>)
 8001940:	4013      	ands	r3, r2
 8001942:	0019      	movs	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691a      	ldr	r2, [r3, #16]
 8001948:	4b57      	ldr	r3, [pc, #348]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800194a:	430a      	orrs	r2, r1
 800194c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800194e:	4b56      	ldr	r3, [pc, #344]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4b55      	ldr	r3, [pc, #340]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001954:	2180      	movs	r1, #128	; 0x80
 8001956:	0049      	lsls	r1, r1, #1
 8001958:	430a      	orrs	r2, r1
 800195a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff fa98 	bl	8000e90 <HAL_GetTick>
 8001960:	0003      	movs	r3, r0
 8001962:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001966:	f7ff fa93 	bl	8000e90 <HAL_GetTick>
 800196a:	0002      	movs	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e209      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001978:	4b4b      	ldr	r3, [pc, #300]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4013      	ands	r3, r2
 8001982:	d0f0      	beq.n	8001966 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001984:	4b48      	ldr	r3, [pc, #288]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4a4a      	ldr	r2, [pc, #296]	; (8001ab4 <HAL_RCC_OscConfig+0x338>)
 800198a:	4013      	ands	r3, r2
 800198c:	0019      	movs	r1, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	021a      	lsls	r2, r3, #8
 8001994:	4b44      	ldr	r3, [pc, #272]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001996:	430a      	orrs	r2, r1
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	e01b      	b.n	80019d4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800199c:	4b42      	ldr	r3, [pc, #264]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	4949      	ldr	r1, [pc, #292]	; (8001ac8 <HAL_RCC_OscConfig+0x34c>)
 80019a4:	400a      	ands	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff fa72 	bl	8000e90 <HAL_GetTick>
 80019ac:	0003      	movs	r3, r0
 80019ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b2:	f7ff fa6d 	bl	8000e90 <HAL_GetTick>
 80019b6:	0002      	movs	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e1e3      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019c4:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4013      	ands	r3, r2
 80019ce:	d1f0      	bne.n	80019b2 <HAL_RCC_OscConfig+0x236>
 80019d0:	e000      	b.n	80019d4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2208      	movs	r2, #8
 80019da:	4013      	ands	r3, r2
 80019dc:	d047      	beq.n	8001a6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019de:	4b32      	ldr	r3, [pc, #200]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2238      	movs	r2, #56	; 0x38
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b18      	cmp	r3, #24
 80019e8:	d10a      	bne.n	8001a00 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80019ea:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80019ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ee:	2202      	movs	r2, #2
 80019f0:	4013      	ands	r3, r2
 80019f2:	d03c      	beq.n	8001a6e <HAL_RCC_OscConfig+0x2f2>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d138      	bne.n	8001a6e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e1c5      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d019      	beq.n	8001a3c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001a0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a0c:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	2101      	movs	r1, #1
 8001a10:	430a      	orrs	r2, r1
 8001a12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff fa3c 	bl	8000e90 <HAL_GetTick>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fa37 	bl	8000e90 <HAL_GetTick>
 8001a22:	0002      	movs	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e1ad      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a30:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a34:	2202      	movs	r2, #2
 8001a36:	4013      	ands	r3, r2
 8001a38:	d0f1      	beq.n	8001a1e <HAL_RCC_OscConfig+0x2a2>
 8001a3a:	e018      	b.n	8001a6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001a3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001a42:	2101      	movs	r1, #1
 8001a44:	438a      	bics	r2, r1
 8001a46:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff fa22 	bl	8000e90 <HAL_GetTick>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a52:	f7ff fa1d 	bl	8000e90 <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e193      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a64:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a68:	2202      	movs	r2, #2
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d1f1      	bne.n	8001a52 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2204      	movs	r2, #4
 8001a74:	4013      	ands	r3, r2
 8001a76:	d100      	bne.n	8001a7a <HAL_RCC_OscConfig+0x2fe>
 8001a78:	e0c6      	b.n	8001c08 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7a:	231f      	movs	r3, #31
 8001a7c:	18fb      	adds	r3, r7, r3
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2238      	movs	r2, #56	; 0x38
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	d11e      	bne.n	8001acc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a92:	2202      	movs	r2, #2
 8001a94:	4013      	ands	r3, r2
 8001a96:	d100      	bne.n	8001a9a <HAL_RCC_OscConfig+0x31e>
 8001a98:	e0b6      	b.n	8001c08 <HAL_RCC_OscConfig+0x48c>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d000      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x328>
 8001aa2:	e0b1      	b.n	8001c08 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e171      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	fffeffff 	.word	0xfffeffff
 8001ab0:	fffbffff 	.word	0xfffbffff
 8001ab4:	ffff80ff 	.word	0xffff80ff
 8001ab8:	ffffc7ff 	.word	0xffffc7ff
 8001abc:	00f42400 	.word	0x00f42400
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	20000004 	.word	0x20000004
 8001ac8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001acc:	4bb1      	ldr	r3, [pc, #708]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	055b      	lsls	r3, r3, #21
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_OscConfig+0x360>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <HAL_RCC_OscConfig+0x362>
 8001adc:	2300      	movs	r3, #0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d011      	beq.n	8001b06 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	4bac      	ldr	r3, [pc, #688]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001ae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ae6:	4bab      	ldr	r3, [pc, #684]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001ae8:	2180      	movs	r1, #128	; 0x80
 8001aea:	0549      	lsls	r1, r1, #21
 8001aec:	430a      	orrs	r2, r1
 8001aee:	63da      	str	r2, [r3, #60]	; 0x3c
 8001af0:	4ba8      	ldr	r3, [pc, #672]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	055b      	lsls	r3, r3, #21
 8001af8:	4013      	ands	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001afe:	231f      	movs	r3, #31
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b06:	4ba4      	ldr	r3, [pc, #656]	; (8001d98 <HAL_RCC_OscConfig+0x61c>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d11a      	bne.n	8001b48 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b12:	4ba1      	ldr	r3, [pc, #644]	; (8001d98 <HAL_RCC_OscConfig+0x61c>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4ba0      	ldr	r3, [pc, #640]	; (8001d98 <HAL_RCC_OscConfig+0x61c>)
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0049      	lsls	r1, r1, #1
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b20:	f7ff f9b6 	bl	8000e90 <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2a:	f7ff f9b1 	bl	8000e90 <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e127      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b3c:	4b96      	ldr	r3, [pc, #600]	; (8001d98 <HAL_RCC_OscConfig+0x61c>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4013      	ands	r3, r2
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d106      	bne.n	8001b5e <HAL_RCC_OscConfig+0x3e2>
 8001b50:	4b90      	ldr	r3, [pc, #576]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001b52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b54:	4b8f      	ldr	r3, [pc, #572]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001b56:	2101      	movs	r1, #1
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b5c:	e01c      	b.n	8001b98 <HAL_RCC_OscConfig+0x41c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b05      	cmp	r3, #5
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x404>
 8001b66:	4b8b      	ldr	r3, [pc, #556]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001b68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b6a:	4b8a      	ldr	r3, [pc, #552]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001b6c:	2104      	movs	r1, #4
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b72:	4b88      	ldr	r3, [pc, #544]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001b74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b76:	4b87      	ldr	r3, [pc, #540]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001b78:	2101      	movs	r1, #1
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b7e:	e00b      	b.n	8001b98 <HAL_RCC_OscConfig+0x41c>
 8001b80:	4b84      	ldr	r3, [pc, #528]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001b82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b84:	4b83      	ldr	r3, [pc, #524]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	438a      	bics	r2, r1
 8001b8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b8c:	4b81      	ldr	r3, [pc, #516]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001b8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b90:	4b80      	ldr	r3, [pc, #512]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001b92:	2104      	movs	r1, #4
 8001b94:	438a      	bics	r2, r1
 8001b96:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d014      	beq.n	8001bca <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f976 	bl	8000e90 <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba8:	e009      	b.n	8001bbe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7ff f971 	bl	8000e90 <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	4a79      	ldr	r2, [pc, #484]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e0e6      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bbe:	4b75      	ldr	r3, [pc, #468]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x42e>
 8001bc8:	e013      	b.n	8001bf2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bca:	f7ff f961 	bl	8000e90 <HAL_GetTick>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd2:	e009      	b.n	8001be8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f7ff f95c 	bl	8000e90 <HAL_GetTick>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	4a6f      	ldr	r2, [pc, #444]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e0d1      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be8:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bec:	2202      	movs	r2, #2
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001bf2:	231f      	movs	r3, #31
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d105      	bne.n	8001c08 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001bfc:	4b65      	ldr	r3, [pc, #404]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c00:	4b64      	ldr	r3, [pc, #400]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001c02:	4967      	ldr	r1, [pc, #412]	; (8001da0 <HAL_RCC_OscConfig+0x624>)
 8001c04:	400a      	ands	r2, r1
 8001c06:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d100      	bne.n	8001c12 <HAL_RCC_OscConfig+0x496>
 8001c10:	e0bb      	b.n	8001d8a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c12:	4b60      	ldr	r3, [pc, #384]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2238      	movs	r2, #56	; 0x38
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d100      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4a4>
 8001c1e:	e07b      	b.n	8001d18 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d156      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c28:	4b5a      	ldr	r3, [pc, #360]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b59      	ldr	r3, [pc, #356]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001c2e:	495d      	ldr	r1, [pc, #372]	; (8001da4 <HAL_RCC_OscConfig+0x628>)
 8001c30:	400a      	ands	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7ff f92c 	bl	8000e90 <HAL_GetTick>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7ff f927 	bl	8000e90 <HAL_GetTick>
 8001c42:	0002      	movs	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e09d      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c50:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	049b      	lsls	r3, r3, #18
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d1f0      	bne.n	8001c3e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5c:	4b4d      	ldr	r3, [pc, #308]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4a51      	ldr	r2, [pc, #324]	; (8001da8 <HAL_RCC_OscConfig+0x62c>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	0019      	movs	r1, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1a      	ldr	r2, [r3, #32]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	4b42      	ldr	r3, [pc, #264]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c90:	4b40      	ldr	r3, [pc, #256]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b3f      	ldr	r3, [pc, #252]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001c96:	2180      	movs	r1, #128	; 0x80
 8001c98:	0449      	lsls	r1, r1, #17
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c9e:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	4b3c      	ldr	r3, [pc, #240]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	0549      	lsls	r1, r1, #21
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7ff f8f0 	bl	8000e90 <HAL_GetTick>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7ff f8eb 	bl	8000e90 <HAL_GetTick>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e061      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc8:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	049b      	lsls	r3, r3, #18
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x53a>
 8001cd4:	e059      	b.n	8001d8a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4b2e      	ldr	r3, [pc, #184]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001cdc:	4931      	ldr	r1, [pc, #196]	; (8001da4 <HAL_RCC_OscConfig+0x628>)
 8001cde:	400a      	ands	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce2:	f7ff f8d5 	bl	8000e90 <HAL_GetTick>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff f8d0 	bl	8000e90 <HAL_GetTick>
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e046      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cfe:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	049b      	lsls	r3, r3, #18
 8001d06:	4013      	ands	r3, r2
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d0a:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001d10:	4926      	ldr	r1, [pc, #152]	; (8001dac <HAL_RCC_OscConfig+0x630>)
 8001d12:	400a      	ands	r2, r1
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	e038      	b.n	8001d8a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e033      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d24:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <HAL_RCC_OscConfig+0x618>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	401a      	ands	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d126      	bne.n	8001d86 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2270      	movs	r2, #112	; 0x70
 8001d3c:	401a      	ands	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d11f      	bne.n	8001d86 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	23fe      	movs	r3, #254	; 0xfe
 8001d4a:	01db      	lsls	r3, r3, #7
 8001d4c:	401a      	ands	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d116      	bne.n	8001d86 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	23f8      	movs	r3, #248	; 0xf8
 8001d5c:	039b      	lsls	r3, r3, #14
 8001d5e:	401a      	ands	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d10e      	bne.n	8001d86 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	23e0      	movs	r3, #224	; 0xe0
 8001d6c:	051b      	lsls	r3, r3, #20
 8001d6e:	401a      	ands	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	0f5b      	lsrs	r3, r3, #29
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d001      	beq.n	8001d8a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b008      	add	sp, #32
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	00001388 	.word	0x00001388
 8001da0:	efffffff 	.word	0xefffffff
 8001da4:	feffffff 	.word	0xfeffffff
 8001da8:	11c1808c 	.word	0x11c1808c
 8001dac:	eefefffc 	.word	0xeefefffc

08001db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0e9      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc4:	4b76      	ldr	r3, [pc, #472]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2207      	movs	r2, #7
 8001dca:	4013      	ands	r3, r2
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d91e      	bls.n	8001e10 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd2:	4b73      	ldr	r3, [pc, #460]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2207      	movs	r2, #7
 8001dd8:	4393      	bics	r3, r2
 8001dda:	0019      	movs	r1, r3
 8001ddc:	4b70      	ldr	r3, [pc, #448]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001de4:	f7ff f854 	bl	8000e90 <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dec:	e009      	b.n	8001e02 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dee:	f7ff f84f 	bl	8000e90 <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	4a6a      	ldr	r2, [pc, #424]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e0ca      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2207      	movs	r2, #7
 8001e08:	4013      	ands	r3, r2
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d1ee      	bne.n	8001dee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2202      	movs	r2, #2
 8001e16:	4013      	ands	r3, r2
 8001e18:	d015      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2204      	movs	r2, #4
 8001e20:	4013      	ands	r3, r2
 8001e22:	d006      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e24:	4b60      	ldr	r3, [pc, #384]	; (8001fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	4b5f      	ldr	r3, [pc, #380]	; (8001fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e2a:	21e0      	movs	r1, #224	; 0xe0
 8001e2c:	01c9      	lsls	r1, r1, #7
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e32:	4b5d      	ldr	r3, [pc, #372]	; (8001fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	4a5d      	ldr	r2, [pc, #372]	; (8001fac <HAL_RCC_ClockConfig+0x1fc>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e42:	430a      	orrs	r2, r1
 8001e44:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d057      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e58:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	029b      	lsls	r3, r3, #10
 8001e60:	4013      	ands	r3, r2
 8001e62:	d12b      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e097      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e70:	4b4d      	ldr	r3, [pc, #308]	; (8001fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	049b      	lsls	r3, r3, #18
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d11f      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e08b      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d107      	bne.n	8001e98 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e88:	4b47      	ldr	r3, [pc, #284]	; (8001fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4013      	ands	r3, r2
 8001e92:	d113      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e07f      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ea0:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d108      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e074      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eae:	4b3e      	ldr	r3, [pc, #248]	; (8001fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e06d      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ebc:	4b3a      	ldr	r3, [pc, #232]	; (8001fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	4393      	bics	r3, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4b37      	ldr	r3, [pc, #220]	; (8001fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed0:	f7fe ffde 	bl	8000e90 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed8:	e009      	b.n	8001eee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eda:	f7fe ffd9 	bl	8000e90 <HAL_GetTick>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	4a2f      	ldr	r2, [pc, #188]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e054      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	4b2e      	ldr	r3, [pc, #184]	; (8001fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2238      	movs	r2, #56	; 0x38
 8001ef4:	401a      	ands	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d1ec      	bne.n	8001eda <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f00:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2207      	movs	r2, #7
 8001f06:	4013      	ands	r3, r2
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d21e      	bcs.n	8001f4c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2207      	movs	r2, #7
 8001f14:	4393      	bics	r3, r2
 8001f16:	0019      	movs	r1, r3
 8001f18:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f20:	f7fe ffb6 	bl	8000e90 <HAL_GetTick>
 8001f24:	0003      	movs	r3, r0
 8001f26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f28:	e009      	b.n	8001f3e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2a:	f7fe ffb1 	bl	8000e90 <HAL_GetTick>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	4a1b      	ldr	r2, [pc, #108]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e02c      	b.n	8001f98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2207      	movs	r2, #7
 8001f44:	4013      	ands	r3, r2
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d1ee      	bne.n	8001f2a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2204      	movs	r2, #4
 8001f52:	4013      	ands	r3, r2
 8001f54:	d009      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f56:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	4a15      	ldr	r2, [pc, #84]	; (8001fb0 <HAL_RCC_ClockConfig+0x200>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f66:	430a      	orrs	r2, r1
 8001f68:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f6a:	f000 f829 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8001f6e:	0001      	movs	r1, r0
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	220f      	movs	r2, #15
 8001f78:	401a      	ands	r2, r3
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <HAL_RCC_ClockConfig+0x204>)
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	58d3      	ldr	r3, [r2, r3]
 8001f80:	221f      	movs	r2, #31
 8001f82:	4013      	ands	r3, r2
 8001f84:	000a      	movs	r2, r1
 8001f86:	40da      	lsrs	r2, r3
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_RCC_ClockConfig+0x208>)
 8001f8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_RCC_ClockConfig+0x20c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0018      	movs	r0, r3
 8001f92:	f7fe ff21 	bl	8000dd8 <HAL_InitTick>
 8001f96:	0003      	movs	r3, r0
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b004      	add	sp, #16
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	00001388 	.word	0x00001388
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	fffff0ff 	.word	0xfffff0ff
 8001fb0:	ffff8fff 	.word	0xffff8fff
 8001fb4:	08004688 	.word	0x08004688
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fc6:	4b3c      	ldr	r3, [pc, #240]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2238      	movs	r2, #56	; 0x38
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d10f      	bne.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001fd0:	4b39      	ldr	r3, [pc, #228]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	0adb      	lsrs	r3, r3, #11
 8001fd6:	2207      	movs	r2, #7
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2201      	movs	r2, #1
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	0013      	movs	r3, r2
 8001fe0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001fe2:	6839      	ldr	r1, [r7, #0]
 8001fe4:	4835      	ldr	r0, [pc, #212]	; (80020bc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fe6:	f7fe f8af 	bl	8000148 <__udivsi3>
 8001fea:	0003      	movs	r3, r0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	e05d      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff0:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2238      	movs	r2, #56	; 0x38
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d102      	bne.n	8002002 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ffc:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	e054      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002002:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2238      	movs	r2, #56	; 0x38
 8002008:	4013      	ands	r3, r2
 800200a:	2b10      	cmp	r3, #16
 800200c:	d138      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800200e:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2203      	movs	r2, #3
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002018:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	2207      	movs	r2, #7
 8002020:	4013      	ands	r3, r2
 8002022:	3301      	adds	r3, #1
 8002024:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d10d      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	4824      	ldr	r0, [pc, #144]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002030:	f7fe f88a 	bl	8000148 <__udivsi3>
 8002034:	0003      	movs	r3, r0
 8002036:	0019      	movs	r1, r3
 8002038:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	227f      	movs	r2, #127	; 0x7f
 8002040:	4013      	ands	r3, r2
 8002042:	434b      	muls	r3, r1
 8002044:	617b      	str	r3, [r7, #20]
        break;
 8002046:	e00d      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	481c      	ldr	r0, [pc, #112]	; (80020bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800204c:	f7fe f87c 	bl	8000148 <__udivsi3>
 8002050:	0003      	movs	r3, r0
 8002052:	0019      	movs	r1, r3
 8002054:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	227f      	movs	r2, #127	; 0x7f
 800205c:	4013      	ands	r3, r2
 800205e:	434b      	muls	r3, r1
 8002060:	617b      	str	r3, [r7, #20]
        break;
 8002062:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	0f5b      	lsrs	r3, r3, #29
 800206a:	2207      	movs	r2, #7
 800206c:	4013      	ands	r3, r2
 800206e:	3301      	adds	r3, #1
 8002070:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	6978      	ldr	r0, [r7, #20]
 8002076:	f7fe f867 	bl	8000148 <__udivsi3>
 800207a:	0003      	movs	r3, r0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	e015      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2238      	movs	r2, #56	; 0x38
 8002086:	4013      	ands	r3, r2
 8002088:	2b20      	cmp	r3, #32
 800208a:	d103      	bne.n	8002094 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	021b      	lsls	r3, r3, #8
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	e00b      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2238      	movs	r2, #56	; 0x38
 800209a:	4013      	ands	r3, r2
 800209c:	2b18      	cmp	r3, #24
 800209e:	d103      	bne.n	80020a8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020a0:	23fa      	movs	r3, #250	; 0xfa
 80020a2:	01db      	lsls	r3, r3, #7
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	e001      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020ac:	693b      	ldr	r3, [r7, #16]
}
 80020ae:	0018      	movs	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b006      	add	sp, #24
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	40021000 	.word	0x40021000
 80020bc:	00f42400 	.word	0x00f42400
 80020c0:	007a1200 	.word	0x007a1200

080020c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c8:	4b02      	ldr	r3, [pc, #8]	; (80020d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	20000000 	.word	0x20000000

080020d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d8:	b5b0      	push	{r4, r5, r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80020dc:	f7ff fff2 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 80020e0:	0004      	movs	r4, r0
 80020e2:	f7ff fb3f 	bl	8001764 <LL_RCC_GetAPB1Prescaler>
 80020e6:	0003      	movs	r3, r0
 80020e8:	0b1a      	lsrs	r2, r3, #12
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ec:	0092      	lsls	r2, r2, #2
 80020ee:	58d3      	ldr	r3, [r2, r3]
 80020f0:	221f      	movs	r2, #31
 80020f2:	4013      	ands	r3, r2
 80020f4:	40dc      	lsrs	r4, r3
 80020f6:	0023      	movs	r3, r4
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bdb0      	pop	{r4, r5, r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	080046c8 	.word	0x080046c8

08002104 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800210c:	2313      	movs	r3, #19
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002114:	2312      	movs	r3, #18
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	029b      	lsls	r3, r3, #10
 8002124:	4013      	ands	r3, r2
 8002126:	d100      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002128:	e0a3      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212a:	2011      	movs	r0, #17
 800212c:	183b      	adds	r3, r7, r0
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002132:	4bc3      	ldr	r3, [pc, #780]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002134:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	055b      	lsls	r3, r3, #21
 800213a:	4013      	ands	r3, r2
 800213c:	d110      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	4bc0      	ldr	r3, [pc, #768]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002140:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002142:	4bbf      	ldr	r3, [pc, #764]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002144:	2180      	movs	r1, #128	; 0x80
 8002146:	0549      	lsls	r1, r1, #21
 8002148:	430a      	orrs	r2, r1
 800214a:	63da      	str	r2, [r3, #60]	; 0x3c
 800214c:	4bbc      	ldr	r3, [pc, #752]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800214e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	055b      	lsls	r3, r3, #21
 8002154:	4013      	ands	r3, r2
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215a:	183b      	adds	r3, r7, r0
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002160:	4bb8      	ldr	r3, [pc, #736]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4bb7      	ldr	r3, [pc, #732]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002166:	2180      	movs	r1, #128	; 0x80
 8002168:	0049      	lsls	r1, r1, #1
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800216e:	f7fe fe8f 	bl	8000e90 <HAL_GetTick>
 8002172:	0003      	movs	r3, r0
 8002174:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002176:	e00b      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002178:	f7fe fe8a 	bl	8000e90 <HAL_GetTick>
 800217c:	0002      	movs	r2, r0
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d904      	bls.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002186:	2313      	movs	r3, #19
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	2203      	movs	r2, #3
 800218c:	701a      	strb	r2, [r3, #0]
        break;
 800218e:	e005      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002190:	4bac      	ldr	r3, [pc, #688]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4013      	ands	r3, r2
 800219a:	d0ed      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800219c:	2313      	movs	r3, #19
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d154      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021a6:	4ba6      	ldr	r3, [pc, #664]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021aa:	23c0      	movs	r3, #192	; 0xc0
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4013      	ands	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d019      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d014      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021c2:	4b9f      	ldr	r3, [pc, #636]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	4aa0      	ldr	r2, [pc, #640]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021cc:	4b9c      	ldr	r3, [pc, #624]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021d0:	4b9b      	ldr	r3, [pc, #620]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d2:	2180      	movs	r1, #128	; 0x80
 80021d4:	0249      	lsls	r1, r1, #9
 80021d6:	430a      	orrs	r2, r1
 80021d8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021da:	4b99      	ldr	r3, [pc, #612]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021de:	4b98      	ldr	r3, [pc, #608]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e0:	499a      	ldr	r1, [pc, #616]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80021e2:	400a      	ands	r2, r1
 80021e4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021e6:	4b96      	ldr	r3, [pc, #600]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2201      	movs	r2, #1
 80021f0:	4013      	ands	r3, r2
 80021f2:	d016      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7fe fe4c 	bl	8000e90 <HAL_GetTick>
 80021f8:	0003      	movs	r3, r0
 80021fa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021fc:	e00c      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7fe fe47 	bl	8000e90 <HAL_GetTick>
 8002202:	0002      	movs	r2, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	4a91      	ldr	r2, [pc, #580]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d904      	bls.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800220e:	2313      	movs	r3, #19
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	2203      	movs	r2, #3
 8002214:	701a      	strb	r2, [r3, #0]
            break;
 8002216:	e004      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002218:	4b89      	ldr	r3, [pc, #548]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800221a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221c:	2202      	movs	r2, #2
 800221e:	4013      	ands	r3, r2
 8002220:	d0ed      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002222:	2313      	movs	r3, #19
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10a      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800222c:	4b84      	ldr	r3, [pc, #528]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800222e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002230:	4a85      	ldr	r2, [pc, #532]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002232:	4013      	ands	r3, r2
 8002234:	0019      	movs	r1, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800223a:	4b81      	ldr	r3, [pc, #516]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800223c:	430a      	orrs	r2, r1
 800223e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002240:	e00c      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002242:	2312      	movs	r3, #18
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	2213      	movs	r2, #19
 8002248:	18ba      	adds	r2, r7, r2
 800224a:	7812      	ldrb	r2, [r2, #0]
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	e005      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002250:	2312      	movs	r3, #18
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	2213      	movs	r2, #19
 8002256:	18ba      	adds	r2, r7, r2
 8002258:	7812      	ldrb	r2, [r2, #0]
 800225a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800225c:	2311      	movs	r3, #17
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d105      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002266:	4b76      	ldr	r3, [pc, #472]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800226a:	4b75      	ldr	r3, [pc, #468]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800226c:	4979      	ldr	r1, [pc, #484]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800226e:	400a      	ands	r2, r1
 8002270:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2201      	movs	r2, #1
 8002278:	4013      	ands	r3, r2
 800227a:	d009      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800227c:	4b70      	ldr	r3, [pc, #448]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	2203      	movs	r2, #3
 8002282:	4393      	bics	r3, r2
 8002284:	0019      	movs	r1, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	4b6d      	ldr	r3, [pc, #436]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800228c:	430a      	orrs	r2, r1
 800228e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2202      	movs	r2, #2
 8002296:	4013      	ands	r3, r2
 8002298:	d009      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800229a:	4b69      	ldr	r3, [pc, #420]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800229c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229e:	220c      	movs	r2, #12
 80022a0:	4393      	bics	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	4b65      	ldr	r3, [pc, #404]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022aa:	430a      	orrs	r2, r1
 80022ac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2210      	movs	r2, #16
 80022b4:	4013      	ands	r3, r2
 80022b6:	d009      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022b8:	4b61      	ldr	r3, [pc, #388]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022bc:	4a66      	ldr	r2, [pc, #408]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80022be:	4013      	ands	r3, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	4b5e      	ldr	r3, [pc, #376]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c8:	430a      	orrs	r2, r1
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4013      	ands	r3, r2
 80022d6:	d009      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022d8:	4b59      	ldr	r3, [pc, #356]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022dc:	4a5f      	ldr	r2, [pc, #380]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80022de:	4013      	ands	r3, r2
 80022e0:	0019      	movs	r1, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	4b56      	ldr	r3, [pc, #344]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022e8:	430a      	orrs	r2, r1
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4013      	ands	r3, r2
 80022f6:	d009      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022f8:	4b51      	ldr	r3, [pc, #324]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fc:	4a58      	ldr	r2, [pc, #352]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022fe:	4013      	ands	r3, r2
 8002300:	0019      	movs	r1, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69da      	ldr	r2, [r3, #28]
 8002306:	4b4e      	ldr	r3, [pc, #312]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002308:	430a      	orrs	r2, r1
 800230a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2220      	movs	r2, #32
 8002312:	4013      	ands	r3, r2
 8002314:	d009      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002316:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	4a52      	ldr	r2, [pc, #328]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800231c:	4013      	ands	r3, r2
 800231e:	0019      	movs	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	4b46      	ldr	r3, [pc, #280]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002326:	430a      	orrs	r2, r1
 8002328:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	01db      	lsls	r3, r3, #7
 8002332:	4013      	ands	r3, r2
 8002334:	d015      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002336:	4b42      	ldr	r3, [pc, #264]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	0899      	lsrs	r1, r3, #2
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1a      	ldr	r2, [r3, #32]
 8002342:	4b3f      	ldr	r3, [pc, #252]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002344:	430a      	orrs	r2, r1
 8002346:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1a      	ldr	r2, [r3, #32]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	05db      	lsls	r3, r3, #23
 8002350:	429a      	cmp	r2, r3
 8002352:	d106      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002354:	4b3a      	ldr	r3, [pc, #232]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	4b39      	ldr	r3, [pc, #228]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800235a:	2180      	movs	r1, #128	; 0x80
 800235c:	0249      	lsls	r1, r1, #9
 800235e:	430a      	orrs	r2, r1
 8002360:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	031b      	lsls	r3, r3, #12
 800236a:	4013      	ands	r3, r2
 800236c:	d009      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800236e:	4b34      	ldr	r3, [pc, #208]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002372:	2240      	movs	r2, #64	; 0x40
 8002374:	4393      	bics	r3, r2
 8002376:	0019      	movs	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800237c:	4b30      	ldr	r3, [pc, #192]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800237e:	430a      	orrs	r2, r1
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	039b      	lsls	r3, r3, #14
 800238a:	4013      	ands	r3, r2
 800238c:	d016      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800238e:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002392:	4a35      	ldr	r2, [pc, #212]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002394:	4013      	ands	r3, r2
 8002396:	0019      	movs	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800239c:	4b28      	ldr	r3, [pc, #160]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239e:	430a      	orrs	r2, r1
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	03db      	lsls	r3, r3, #15
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d106      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023ae:	4b24      	ldr	r3, [pc, #144]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	4b23      	ldr	r3, [pc, #140]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b4:	2180      	movs	r1, #128	; 0x80
 80023b6:	0449      	lsls	r1, r1, #17
 80023b8:	430a      	orrs	r2, r1
 80023ba:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	03db      	lsls	r3, r3, #15
 80023c4:	4013      	ands	r3, r2
 80023c6:	d016      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80023c8:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023cc:	4a27      	ldr	r2, [pc, #156]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d6:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023d8:	430a      	orrs	r2, r1
 80023da:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	045b      	lsls	r3, r3, #17
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d106      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023e8:	4b15      	ldr	r3, [pc, #84]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	4b14      	ldr	r3, [pc, #80]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	0449      	lsls	r1, r1, #17
 80023f2:	430a      	orrs	r2, r1
 80023f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	4013      	ands	r3, r2
 8002400:	d016      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002402:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002406:	4a1a      	ldr	r2, [pc, #104]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002408:	4013      	ands	r3, r2
 800240a:	0019      	movs	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002412:	430a      	orrs	r2, r1
 8002414:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	01db      	lsls	r3, r3, #7
 800241e:	429a      	cmp	r2, r3
 8002420:	d106      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	0249      	lsls	r1, r1, #9
 800242c:	430a      	orrs	r2, r1
 800242e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002430:	2312      	movs	r3, #18
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	781b      	ldrb	r3, [r3, #0]
}
 8002436:	0018      	movs	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	b006      	add	sp, #24
 800243c:	bd80      	pop	{r7, pc}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	40021000 	.word	0x40021000
 8002444:	40007000 	.word	0x40007000
 8002448:	fffffcff 	.word	0xfffffcff
 800244c:	fffeffff 	.word	0xfffeffff
 8002450:	00001388 	.word	0x00001388
 8002454:	efffffff 	.word	0xefffffff
 8002458:	fffff3ff 	.word	0xfffff3ff
 800245c:	fff3ffff 	.word	0xfff3ffff
 8002460:	ffcfffff 	.word	0xffcfffff
 8002464:	ffffcfff 	.word	0xffffcfff
 8002468:	ffbfffff 	.word	0xffbfffff
 800246c:	feffffff 	.word	0xfeffffff
 8002470:	ffff3fff 	.word	0xffff3fff

08002474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e046      	b.n	8002514 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2288      	movs	r2, #136	; 0x88
 800248a:	589b      	ldr	r3, [r3, r2]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d107      	bne.n	80024a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2284      	movs	r2, #132	; 0x84
 8002494:	2100      	movs	r1, #0
 8002496:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	0018      	movs	r0, r3
 800249c:	f7fe fbfc 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2288      	movs	r2, #136	; 0x88
 80024a4:	2124      	movs	r1, #36	; 0x24
 80024a6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2101      	movs	r1, #1
 80024b4:	438a      	bics	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 f9ae 	bl	800281c <UART_SetConfig>
 80024c0:	0003      	movs	r3, r0
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e024      	b.n	8002514 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 fc5f 	bl	8002d98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	490d      	ldr	r1, [pc, #52]	; (800251c <HAL_UART_Init+0xa8>)
 80024e6:	400a      	ands	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	212a      	movs	r1, #42	; 0x2a
 80024f6:	438a      	bics	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2101      	movs	r1, #1
 8002506:	430a      	orrs	r2, r1
 8002508:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	0018      	movs	r0, r3
 800250e:	f000 fcf7 	bl	8002f00 <UART_CheckIdleState>
 8002512:	0003      	movs	r3, r0
}
 8002514:	0018      	movs	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	b002      	add	sp, #8
 800251a:	bd80      	pop	{r7, pc}
 800251c:	ffffb7ff 	.word	0xffffb7ff

08002520 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	1dbb      	adds	r3, r7, #6
 800252e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2288      	movs	r2, #136	; 0x88
 8002534:	589b      	ldr	r3, [r3, r2]
 8002536:	2b20      	cmp	r3, #32
 8002538:	d000      	beq.n	800253c <HAL_UART_Transmit+0x1c>
 800253a:	e088      	b.n	800264e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_UART_Transmit+0x2a>
 8002542:	1dbb      	adds	r3, r7, #6
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e080      	b.n	8002650 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	015b      	lsls	r3, r3, #5
 8002556:	429a      	cmp	r2, r3
 8002558:	d109      	bne.n	800256e <HAL_UART_Transmit+0x4e>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d105      	bne.n	800256e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2201      	movs	r2, #1
 8002566:	4013      	ands	r3, r2
 8002568:	d001      	beq.n	800256e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e070      	b.n	8002650 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2290      	movs	r2, #144	; 0x90
 8002572:	2100      	movs	r1, #0
 8002574:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2288      	movs	r2, #136	; 0x88
 800257a:	2121      	movs	r1, #33	; 0x21
 800257c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800257e:	f7fe fc87 	bl	8000e90 <HAL_GetTick>
 8002582:	0003      	movs	r3, r0
 8002584:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1dba      	adds	r2, r7, #6
 800258a:	2154      	movs	r1, #84	; 0x54
 800258c:	8812      	ldrh	r2, [r2, #0]
 800258e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1dba      	adds	r2, r7, #6
 8002594:	2156      	movs	r1, #86	; 0x56
 8002596:	8812      	ldrh	r2, [r2, #0]
 8002598:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	015b      	lsls	r3, r3, #5
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d108      	bne.n	80025b8 <HAL_UART_Transmit+0x98>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d104      	bne.n	80025b8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	e003      	b.n	80025c0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025c0:	e02c      	b.n	800261c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	0013      	movs	r3, r2
 80025cc:	2200      	movs	r2, #0
 80025ce:	2180      	movs	r1, #128	; 0x80
 80025d0:	f000 fce4 	bl	8002f9c <UART_WaitOnFlagUntilTimeout>
 80025d4:	1e03      	subs	r3, r0, #0
 80025d6:	d001      	beq.n	80025dc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e039      	b.n	8002650 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10b      	bne.n	80025fa <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	001a      	movs	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	05d2      	lsls	r2, r2, #23
 80025ee:	0dd2      	lsrs	r2, r2, #23
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	3302      	adds	r3, #2
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	e007      	b.n	800260a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	781a      	ldrb	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	3301      	adds	r3, #1
 8002608:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2256      	movs	r2, #86	; 0x56
 800260e:	5a9b      	ldrh	r3, [r3, r2]
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b299      	uxth	r1, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2256      	movs	r2, #86	; 0x56
 800261a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2256      	movs	r2, #86	; 0x56
 8002620:	5a9b      	ldrh	r3, [r3, r2]
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1cc      	bne.n	80025c2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	0013      	movs	r3, r2
 8002632:	2200      	movs	r2, #0
 8002634:	2140      	movs	r1, #64	; 0x40
 8002636:	f000 fcb1 	bl	8002f9c <UART_WaitOnFlagUntilTimeout>
 800263a:	1e03      	subs	r3, r0, #0
 800263c:	d001      	beq.n	8002642 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e006      	b.n	8002650 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2288      	movs	r2, #136	; 0x88
 8002646:	2120      	movs	r1, #32
 8002648:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	e000      	b.n	8002650 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800264e:	2302      	movs	r3, #2
  }
}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	b008      	add	sp, #32
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	1dbb      	adds	r3, r7, #6
 8002666:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	228c      	movs	r2, #140	; 0x8c
 800266c:	589b      	ldr	r3, [r3, r2]
 800266e:	2b20      	cmp	r3, #32
 8002670:	d000      	beq.n	8002674 <HAL_UART_Receive+0x1c>
 8002672:	e0cc      	b.n	800280e <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_UART_Receive+0x2a>
 800267a:	1dbb      	adds	r3, r7, #6
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e0c4      	b.n	8002810 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	015b      	lsls	r3, r3, #5
 800268e:	429a      	cmp	r2, r3
 8002690:	d109      	bne.n	80026a6 <HAL_UART_Receive+0x4e>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d105      	bne.n	80026a6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2201      	movs	r2, #1
 800269e:	4013      	ands	r3, r2
 80026a0:	d001      	beq.n	80026a6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e0b4      	b.n	8002810 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2290      	movs	r2, #144	; 0x90
 80026aa:	2100      	movs	r1, #0
 80026ac:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	228c      	movs	r2, #140	; 0x8c
 80026b2:	2122      	movs	r1, #34	; 0x22
 80026b4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026bc:	f7fe fbe8 	bl	8000e90 <HAL_GetTick>
 80026c0:	0003      	movs	r3, r0
 80026c2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1dba      	adds	r2, r7, #6
 80026c8:	215c      	movs	r1, #92	; 0x5c
 80026ca:	8812      	ldrh	r2, [r2, #0]
 80026cc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1dba      	adds	r2, r7, #6
 80026d2:	215e      	movs	r1, #94	; 0x5e
 80026d4:	8812      	ldrh	r2, [r2, #0]
 80026d6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	015b      	lsls	r3, r3, #5
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d10d      	bne.n	8002700 <HAL_UART_Receive+0xa8>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d104      	bne.n	80026f6 <HAL_UART_Receive+0x9e>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2260      	movs	r2, #96	; 0x60
 80026f0:	4949      	ldr	r1, [pc, #292]	; (8002818 <HAL_UART_Receive+0x1c0>)
 80026f2:	5299      	strh	r1, [r3, r2]
 80026f4:	e02e      	b.n	8002754 <HAL_UART_Receive+0xfc>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2260      	movs	r2, #96	; 0x60
 80026fa:	21ff      	movs	r1, #255	; 0xff
 80026fc:	5299      	strh	r1, [r3, r2]
 80026fe:	e029      	b.n	8002754 <HAL_UART_Receive+0xfc>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10d      	bne.n	8002724 <HAL_UART_Receive+0xcc>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d104      	bne.n	800271a <HAL_UART_Receive+0xc2>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2260      	movs	r2, #96	; 0x60
 8002714:	21ff      	movs	r1, #255	; 0xff
 8002716:	5299      	strh	r1, [r3, r2]
 8002718:	e01c      	b.n	8002754 <HAL_UART_Receive+0xfc>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2260      	movs	r2, #96	; 0x60
 800271e:	217f      	movs	r1, #127	; 0x7f
 8002720:	5299      	strh	r1, [r3, r2]
 8002722:	e017      	b.n	8002754 <HAL_UART_Receive+0xfc>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	055b      	lsls	r3, r3, #21
 800272c:	429a      	cmp	r2, r3
 800272e:	d10d      	bne.n	800274c <HAL_UART_Receive+0xf4>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d104      	bne.n	8002742 <HAL_UART_Receive+0xea>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2260      	movs	r2, #96	; 0x60
 800273c:	217f      	movs	r1, #127	; 0x7f
 800273e:	5299      	strh	r1, [r3, r2]
 8002740:	e008      	b.n	8002754 <HAL_UART_Receive+0xfc>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2260      	movs	r2, #96	; 0x60
 8002746:	213f      	movs	r1, #63	; 0x3f
 8002748:	5299      	strh	r1, [r3, r2]
 800274a:	e003      	b.n	8002754 <HAL_UART_Receive+0xfc>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2260      	movs	r2, #96	; 0x60
 8002750:	2100      	movs	r1, #0
 8002752:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002754:	2312      	movs	r3, #18
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	2160      	movs	r1, #96	; 0x60
 800275c:	5a52      	ldrh	r2, [r2, r1]
 800275e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	015b      	lsls	r3, r3, #5
 8002768:	429a      	cmp	r2, r3
 800276a:	d108      	bne.n	800277e <HAL_UART_Receive+0x126>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d104      	bne.n	800277e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002774:	2300      	movs	r3, #0
 8002776:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	61bb      	str	r3, [r7, #24]
 800277c:	e003      	b.n	8002786 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002786:	e036      	b.n	80027f6 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	0013      	movs	r3, r2
 8002792:	2200      	movs	r2, #0
 8002794:	2120      	movs	r1, #32
 8002796:	f000 fc01 	bl	8002f9c <UART_WaitOnFlagUntilTimeout>
 800279a:	1e03      	subs	r3, r0, #0
 800279c:	d001      	beq.n	80027a2 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e036      	b.n	8002810 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10e      	bne.n	80027c6 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2212      	movs	r2, #18
 80027b2:	18ba      	adds	r2, r7, r2
 80027b4:	8812      	ldrh	r2, [r2, #0]
 80027b6:	4013      	ands	r3, r2
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	3302      	adds	r3, #2
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	e00e      	b.n	80027e4 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2212      	movs	r2, #18
 80027d0:	18ba      	adds	r2, r7, r2
 80027d2:	8812      	ldrh	r2, [r2, #0]
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	4013      	ands	r3, r2
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3301      	adds	r3, #1
 80027e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	225e      	movs	r2, #94	; 0x5e
 80027e8:	5a9b      	ldrh	r3, [r3, r2]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b299      	uxth	r1, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	225e      	movs	r2, #94	; 0x5e
 80027f4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	225e      	movs	r2, #94	; 0x5e
 80027fa:	5a9b      	ldrh	r3, [r3, r2]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1c2      	bne.n	8002788 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	228c      	movs	r2, #140	; 0x8c
 8002806:	2120      	movs	r1, #32
 8002808:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	e000      	b.n	8002810 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800280e:	2302      	movs	r3, #2
  }
}
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	b008      	add	sp, #32
 8002816:	bd80      	pop	{r7, pc}
 8002818:	000001ff 	.word	0x000001ff

0800281c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800281c:	b5b0      	push	{r4, r5, r7, lr}
 800281e:	b090      	sub	sp, #64	; 0x40
 8002820:	af00      	add	r7, sp, #0
 8002822:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002824:	231a      	movs	r3, #26
 8002826:	2220      	movs	r2, #32
 8002828:	189b      	adds	r3, r3, r2
 800282a:	19db      	adds	r3, r3, r7
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	431a      	orrs	r2, r3
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	431a      	orrs	r2, r3
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	4313      	orrs	r3, r2
 8002846:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4aaf      	ldr	r2, [pc, #700]	; (8002b0c <UART_SetConfig+0x2f0>)
 8002850:	4013      	ands	r3, r2
 8002852:	0019      	movs	r1, r3
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800285a:	430b      	orrs	r3, r1
 800285c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4aaa      	ldr	r2, [pc, #680]	; (8002b10 <UART_SetConfig+0x2f4>)
 8002866:	4013      	ands	r3, r2
 8002868:	0018      	movs	r0, r3
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	68d9      	ldr	r1, [r3, #12]
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	0003      	movs	r3, r0
 8002874:	430b      	orrs	r3, r1
 8002876:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4aa4      	ldr	r2, [pc, #656]	; (8002b14 <UART_SetConfig+0x2f8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d004      	beq.n	8002892 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800288e:	4313      	orrs	r3, r2
 8002890:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a9f      	ldr	r2, [pc, #636]	; (8002b18 <UART_SetConfig+0x2fc>)
 800289a:	4013      	ands	r3, r2
 800289c:	0019      	movs	r1, r3
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	220f      	movs	r2, #15
 80028b0:	4393      	bics	r3, r2
 80028b2:	0018      	movs	r0, r3
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	0003      	movs	r3, r0
 80028be:	430b      	orrs	r3, r1
 80028c0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a95      	ldr	r2, [pc, #596]	; (8002b1c <UART_SetConfig+0x300>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d131      	bne.n	8002930 <UART_SetConfig+0x114>
 80028cc:	4b94      	ldr	r3, [pc, #592]	; (8002b20 <UART_SetConfig+0x304>)
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	2203      	movs	r2, #3
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d01d      	beq.n	8002914 <UART_SetConfig+0xf8>
 80028d8:	d823      	bhi.n	8002922 <UART_SetConfig+0x106>
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d00c      	beq.n	80028f8 <UART_SetConfig+0xdc>
 80028de:	d820      	bhi.n	8002922 <UART_SetConfig+0x106>
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <UART_SetConfig+0xce>
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d00e      	beq.n	8002906 <UART_SetConfig+0xea>
 80028e8:	e01b      	b.n	8002922 <UART_SetConfig+0x106>
 80028ea:	231b      	movs	r3, #27
 80028ec:	2220      	movs	r2, #32
 80028ee:	189b      	adds	r3, r3, r2
 80028f0:	19db      	adds	r3, r3, r7
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e0b4      	b.n	8002a62 <UART_SetConfig+0x246>
 80028f8:	231b      	movs	r3, #27
 80028fa:	2220      	movs	r2, #32
 80028fc:	189b      	adds	r3, r3, r2
 80028fe:	19db      	adds	r3, r3, r7
 8002900:	2202      	movs	r2, #2
 8002902:	701a      	strb	r2, [r3, #0]
 8002904:	e0ad      	b.n	8002a62 <UART_SetConfig+0x246>
 8002906:	231b      	movs	r3, #27
 8002908:	2220      	movs	r2, #32
 800290a:	189b      	adds	r3, r3, r2
 800290c:	19db      	adds	r3, r3, r7
 800290e:	2204      	movs	r2, #4
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	e0a6      	b.n	8002a62 <UART_SetConfig+0x246>
 8002914:	231b      	movs	r3, #27
 8002916:	2220      	movs	r2, #32
 8002918:	189b      	adds	r3, r3, r2
 800291a:	19db      	adds	r3, r3, r7
 800291c:	2208      	movs	r2, #8
 800291e:	701a      	strb	r2, [r3, #0]
 8002920:	e09f      	b.n	8002a62 <UART_SetConfig+0x246>
 8002922:	231b      	movs	r3, #27
 8002924:	2220      	movs	r2, #32
 8002926:	189b      	adds	r3, r3, r2
 8002928:	19db      	adds	r3, r3, r7
 800292a:	2210      	movs	r2, #16
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e098      	b.n	8002a62 <UART_SetConfig+0x246>
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a7b      	ldr	r2, [pc, #492]	; (8002b24 <UART_SetConfig+0x308>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d131      	bne.n	800299e <UART_SetConfig+0x182>
 800293a:	4b79      	ldr	r3, [pc, #484]	; (8002b20 <UART_SetConfig+0x304>)
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	220c      	movs	r2, #12
 8002940:	4013      	ands	r3, r2
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d01d      	beq.n	8002982 <UART_SetConfig+0x166>
 8002946:	d823      	bhi.n	8002990 <UART_SetConfig+0x174>
 8002948:	2b08      	cmp	r3, #8
 800294a:	d00c      	beq.n	8002966 <UART_SetConfig+0x14a>
 800294c:	d820      	bhi.n	8002990 <UART_SetConfig+0x174>
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <UART_SetConfig+0x13c>
 8002952:	2b04      	cmp	r3, #4
 8002954:	d00e      	beq.n	8002974 <UART_SetConfig+0x158>
 8002956:	e01b      	b.n	8002990 <UART_SetConfig+0x174>
 8002958:	231b      	movs	r3, #27
 800295a:	2220      	movs	r2, #32
 800295c:	189b      	adds	r3, r3, r2
 800295e:	19db      	adds	r3, r3, r7
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	e07d      	b.n	8002a62 <UART_SetConfig+0x246>
 8002966:	231b      	movs	r3, #27
 8002968:	2220      	movs	r2, #32
 800296a:	189b      	adds	r3, r3, r2
 800296c:	19db      	adds	r3, r3, r7
 800296e:	2202      	movs	r2, #2
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e076      	b.n	8002a62 <UART_SetConfig+0x246>
 8002974:	231b      	movs	r3, #27
 8002976:	2220      	movs	r2, #32
 8002978:	189b      	adds	r3, r3, r2
 800297a:	19db      	adds	r3, r3, r7
 800297c:	2204      	movs	r2, #4
 800297e:	701a      	strb	r2, [r3, #0]
 8002980:	e06f      	b.n	8002a62 <UART_SetConfig+0x246>
 8002982:	231b      	movs	r3, #27
 8002984:	2220      	movs	r2, #32
 8002986:	189b      	adds	r3, r3, r2
 8002988:	19db      	adds	r3, r3, r7
 800298a:	2208      	movs	r2, #8
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	e068      	b.n	8002a62 <UART_SetConfig+0x246>
 8002990:	231b      	movs	r3, #27
 8002992:	2220      	movs	r2, #32
 8002994:	189b      	adds	r3, r3, r2
 8002996:	19db      	adds	r3, r3, r7
 8002998:	2210      	movs	r2, #16
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	e061      	b.n	8002a62 <UART_SetConfig+0x246>
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a61      	ldr	r2, [pc, #388]	; (8002b28 <UART_SetConfig+0x30c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d106      	bne.n	80029b6 <UART_SetConfig+0x19a>
 80029a8:	231b      	movs	r3, #27
 80029aa:	2220      	movs	r2, #32
 80029ac:	189b      	adds	r3, r3, r2
 80029ae:	19db      	adds	r3, r3, r7
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	e055      	b.n	8002a62 <UART_SetConfig+0x246>
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a5c      	ldr	r2, [pc, #368]	; (8002b2c <UART_SetConfig+0x310>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d106      	bne.n	80029ce <UART_SetConfig+0x1b2>
 80029c0:	231b      	movs	r3, #27
 80029c2:	2220      	movs	r2, #32
 80029c4:	189b      	adds	r3, r3, r2
 80029c6:	19db      	adds	r3, r3, r7
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	e049      	b.n	8002a62 <UART_SetConfig+0x246>
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a50      	ldr	r2, [pc, #320]	; (8002b14 <UART_SetConfig+0x2f8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d13e      	bne.n	8002a56 <UART_SetConfig+0x23a>
 80029d8:	4b51      	ldr	r3, [pc, #324]	; (8002b20 <UART_SetConfig+0x304>)
 80029da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029dc:	23c0      	movs	r3, #192	; 0xc0
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	4013      	ands	r3, r2
 80029e2:	22c0      	movs	r2, #192	; 0xc0
 80029e4:	0112      	lsls	r2, r2, #4
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d027      	beq.n	8002a3a <UART_SetConfig+0x21e>
 80029ea:	22c0      	movs	r2, #192	; 0xc0
 80029ec:	0112      	lsls	r2, r2, #4
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d82a      	bhi.n	8002a48 <UART_SetConfig+0x22c>
 80029f2:	2280      	movs	r2, #128	; 0x80
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d011      	beq.n	8002a1e <UART_SetConfig+0x202>
 80029fa:	2280      	movs	r2, #128	; 0x80
 80029fc:	0112      	lsls	r2, r2, #4
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d822      	bhi.n	8002a48 <UART_SetConfig+0x22c>
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d004      	beq.n	8002a10 <UART_SetConfig+0x1f4>
 8002a06:	2280      	movs	r2, #128	; 0x80
 8002a08:	00d2      	lsls	r2, r2, #3
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00e      	beq.n	8002a2c <UART_SetConfig+0x210>
 8002a0e:	e01b      	b.n	8002a48 <UART_SetConfig+0x22c>
 8002a10:	231b      	movs	r3, #27
 8002a12:	2220      	movs	r2, #32
 8002a14:	189b      	adds	r3, r3, r2
 8002a16:	19db      	adds	r3, r3, r7
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
 8002a1c:	e021      	b.n	8002a62 <UART_SetConfig+0x246>
 8002a1e:	231b      	movs	r3, #27
 8002a20:	2220      	movs	r2, #32
 8002a22:	189b      	adds	r3, r3, r2
 8002a24:	19db      	adds	r3, r3, r7
 8002a26:	2202      	movs	r2, #2
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e01a      	b.n	8002a62 <UART_SetConfig+0x246>
 8002a2c:	231b      	movs	r3, #27
 8002a2e:	2220      	movs	r2, #32
 8002a30:	189b      	adds	r3, r3, r2
 8002a32:	19db      	adds	r3, r3, r7
 8002a34:	2204      	movs	r2, #4
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	e013      	b.n	8002a62 <UART_SetConfig+0x246>
 8002a3a:	231b      	movs	r3, #27
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	189b      	adds	r3, r3, r2
 8002a40:	19db      	adds	r3, r3, r7
 8002a42:	2208      	movs	r2, #8
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e00c      	b.n	8002a62 <UART_SetConfig+0x246>
 8002a48:	231b      	movs	r3, #27
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	189b      	adds	r3, r3, r2
 8002a4e:	19db      	adds	r3, r3, r7
 8002a50:	2210      	movs	r2, #16
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e005      	b.n	8002a62 <UART_SetConfig+0x246>
 8002a56:	231b      	movs	r3, #27
 8002a58:	2220      	movs	r2, #32
 8002a5a:	189b      	adds	r3, r3, r2
 8002a5c:	19db      	adds	r3, r3, r7
 8002a5e:	2210      	movs	r2, #16
 8002a60:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a2b      	ldr	r2, [pc, #172]	; (8002b14 <UART_SetConfig+0x2f8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d000      	beq.n	8002a6e <UART_SetConfig+0x252>
 8002a6c:	e0a9      	b.n	8002bc2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a6e:	231b      	movs	r3, #27
 8002a70:	2220      	movs	r2, #32
 8002a72:	189b      	adds	r3, r3, r2
 8002a74:	19db      	adds	r3, r3, r7
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d015      	beq.n	8002aa8 <UART_SetConfig+0x28c>
 8002a7c:	dc18      	bgt.n	8002ab0 <UART_SetConfig+0x294>
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d00d      	beq.n	8002a9e <UART_SetConfig+0x282>
 8002a82:	dc15      	bgt.n	8002ab0 <UART_SetConfig+0x294>
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <UART_SetConfig+0x272>
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d005      	beq.n	8002a98 <UART_SetConfig+0x27c>
 8002a8c:	e010      	b.n	8002ab0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a8e:	f7ff fb23 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 8002a92:	0003      	movs	r3, r0
 8002a94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a96:	e014      	b.n	8002ac2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a98:	4b25      	ldr	r3, [pc, #148]	; (8002b30 <UART_SetConfig+0x314>)
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a9c:	e011      	b.n	8002ac2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a9e:	f7ff fa8f 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8002aa2:	0003      	movs	r3, r0
 8002aa4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002aa6:	e00c      	b.n	8002ac2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002aae:	e008      	b.n	8002ac2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002ab4:	231a      	movs	r3, #26
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	189b      	adds	r3, r3, r2
 8002aba:	19db      	adds	r3, r3, r7
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
        break;
 8002ac0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d100      	bne.n	8002aca <UART_SetConfig+0x2ae>
 8002ac8:	e14b      	b.n	8002d62 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ace:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <UART_SetConfig+0x318>)
 8002ad0:	0052      	lsls	r2, r2, #1
 8002ad2:	5ad3      	ldrh	r3, [r2, r3]
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ad8:	f7fd fb36 	bl	8000148 <__udivsi3>
 8002adc:	0003      	movs	r3, r0
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	189b      	adds	r3, r3, r2
 8002aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d305      	bcc.n	8002afc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d91d      	bls.n	8002b38 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002afc:	231a      	movs	r3, #26
 8002afe:	2220      	movs	r2, #32
 8002b00:	189b      	adds	r3, r3, r2
 8002b02:	19db      	adds	r3, r3, r7
 8002b04:	2201      	movs	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e12b      	b.n	8002d62 <UART_SetConfig+0x546>
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	cfff69f3 	.word	0xcfff69f3
 8002b10:	ffffcfff 	.word	0xffffcfff
 8002b14:	40008000 	.word	0x40008000
 8002b18:	11fff4ff 	.word	0x11fff4ff
 8002b1c:	40013800 	.word	0x40013800
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40004400 	.word	0x40004400
 8002b28:	40004800 	.word	0x40004800
 8002b2c:	40004c00 	.word	0x40004c00
 8002b30:	00f42400 	.word	0x00f42400
 8002b34:	080046e8 	.word	0x080046e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3a:	61bb      	str	r3, [r7, #24]
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b44:	4b92      	ldr	r3, [pc, #584]	; (8002d90 <UART_SetConfig+0x574>)
 8002b46:	0052      	lsls	r2, r2, #1
 8002b48:	5ad3      	ldrh	r3, [r2, r3]
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	69b8      	ldr	r0, [r7, #24]
 8002b56:	69f9      	ldr	r1, [r7, #28]
 8002b58:	f7fd fc6c 	bl	8000434 <__aeabi_uldivmod>
 8002b5c:	0002      	movs	r2, r0
 8002b5e:	000b      	movs	r3, r1
 8002b60:	0e11      	lsrs	r1, r2, #24
 8002b62:	021d      	lsls	r5, r3, #8
 8002b64:	430d      	orrs	r5, r1
 8002b66:	0214      	lsls	r4, r2, #8
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	085b      	lsrs	r3, r3, #1
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68b8      	ldr	r0, [r7, #8]
 8002b76:	68f9      	ldr	r1, [r7, #12]
 8002b78:	1900      	adds	r0, r0, r4
 8002b7a:	4169      	adcs	r1, r5
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f7fd fc53 	bl	8000434 <__aeabi_uldivmod>
 8002b8e:	0002      	movs	r2, r0
 8002b90:	000b      	movs	r3, r1
 8002b92:	0013      	movs	r3, r2
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b98:	23c0      	movs	r3, #192	; 0xc0
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d309      	bcc.n	8002bb4 <UART_SetConfig+0x398>
 8002ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	035b      	lsls	r3, r3, #13
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d204      	bcs.n	8002bb4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	e0d6      	b.n	8002d62 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002bb4:	231a      	movs	r3, #26
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	189b      	adds	r3, r3, r2
 8002bba:	19db      	adds	r3, r3, r7
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]
 8002bc0:	e0cf      	b.n	8002d62 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d000      	beq.n	8002bd0 <UART_SetConfig+0x3b4>
 8002bce:	e070      	b.n	8002cb2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002bd0:	231b      	movs	r3, #27
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	189b      	adds	r3, r3, r2
 8002bd6:	19db      	adds	r3, r3, r7
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d015      	beq.n	8002c0a <UART_SetConfig+0x3ee>
 8002bde:	dc18      	bgt.n	8002c12 <UART_SetConfig+0x3f6>
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d00d      	beq.n	8002c00 <UART_SetConfig+0x3e4>
 8002be4:	dc15      	bgt.n	8002c12 <UART_SetConfig+0x3f6>
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <UART_SetConfig+0x3d4>
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d005      	beq.n	8002bfa <UART_SetConfig+0x3de>
 8002bee:	e010      	b.n	8002c12 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bf0:	f7ff fa72 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bf8:	e014      	b.n	8002c24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bfa:	4b66      	ldr	r3, [pc, #408]	; (8002d94 <UART_SetConfig+0x578>)
 8002bfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bfe:	e011      	b.n	8002c24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c00:	f7ff f9de 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8002c04:	0003      	movs	r3, r0
 8002c06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c08:	e00c      	b.n	8002c24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	021b      	lsls	r3, r3, #8
 8002c0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c10:	e008      	b.n	8002c24 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002c16:	231a      	movs	r3, #26
 8002c18:	2220      	movs	r2, #32
 8002c1a:	189b      	adds	r3, r3, r2
 8002c1c:	19db      	adds	r3, r3, r7
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]
        break;
 8002c22:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d100      	bne.n	8002c2c <UART_SetConfig+0x410>
 8002c2a:	e09a      	b.n	8002d62 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c30:	4b57      	ldr	r3, [pc, #348]	; (8002d90 <UART_SetConfig+0x574>)
 8002c32:	0052      	lsls	r2, r2, #1
 8002c34:	5ad3      	ldrh	r3, [r2, r3]
 8002c36:	0019      	movs	r1, r3
 8002c38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c3a:	f7fd fa85 	bl	8000148 <__udivsi3>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	005a      	lsls	r2, r3, #1
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	085b      	lsrs	r3, r3, #1
 8002c48:	18d2      	adds	r2, r2, r3
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	0019      	movs	r1, r3
 8002c50:	0010      	movs	r0, r2
 8002c52:	f7fd fa79 	bl	8000148 <__udivsi3>
 8002c56:	0003      	movs	r3, r0
 8002c58:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	2b0f      	cmp	r3, #15
 8002c5e:	d921      	bls.n	8002ca4 <UART_SetConfig+0x488>
 8002c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	025b      	lsls	r3, r3, #9
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d21c      	bcs.n	8002ca4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	200e      	movs	r0, #14
 8002c70:	2420      	movs	r4, #32
 8002c72:	1903      	adds	r3, r0, r4
 8002c74:	19db      	adds	r3, r3, r7
 8002c76:	210f      	movs	r1, #15
 8002c78:	438a      	bics	r2, r1
 8002c7a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2207      	movs	r2, #7
 8002c84:	4013      	ands	r3, r2
 8002c86:	b299      	uxth	r1, r3
 8002c88:	1903      	adds	r3, r0, r4
 8002c8a:	19db      	adds	r3, r3, r7
 8002c8c:	1902      	adds	r2, r0, r4
 8002c8e:	19d2      	adds	r2, r2, r7
 8002c90:	8812      	ldrh	r2, [r2, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	1902      	adds	r2, r0, r4
 8002c9c:	19d2      	adds	r2, r2, r7
 8002c9e:	8812      	ldrh	r2, [r2, #0]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	e05e      	b.n	8002d62 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002ca4:	231a      	movs	r3, #26
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	189b      	adds	r3, r3, r2
 8002caa:	19db      	adds	r3, r3, r7
 8002cac:	2201      	movs	r2, #1
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e057      	b.n	8002d62 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cb2:	231b      	movs	r3, #27
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	189b      	adds	r3, r3, r2
 8002cb8:	19db      	adds	r3, r3, r7
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d015      	beq.n	8002cec <UART_SetConfig+0x4d0>
 8002cc0:	dc18      	bgt.n	8002cf4 <UART_SetConfig+0x4d8>
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d00d      	beq.n	8002ce2 <UART_SetConfig+0x4c6>
 8002cc6:	dc15      	bgt.n	8002cf4 <UART_SetConfig+0x4d8>
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <UART_SetConfig+0x4b6>
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d005      	beq.n	8002cdc <UART_SetConfig+0x4c0>
 8002cd0:	e010      	b.n	8002cf4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cd2:	f7ff fa01 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cda:	e014      	b.n	8002d06 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cdc:	4b2d      	ldr	r3, [pc, #180]	; (8002d94 <UART_SetConfig+0x578>)
 8002cde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ce0:	e011      	b.n	8002d06 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ce2:	f7ff f96d 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cea:	e00c      	b.n	8002d06 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	021b      	lsls	r3, r3, #8
 8002cf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cf2:	e008      	b.n	8002d06 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002cf8:	231a      	movs	r3, #26
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	189b      	adds	r3, r3, r2
 8002cfe:	19db      	adds	r3, r3, r7
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]
        break;
 8002d04:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d02a      	beq.n	8002d62 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d10:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <UART_SetConfig+0x574>)
 8002d12:	0052      	lsls	r2, r2, #1
 8002d14:	5ad3      	ldrh	r3, [r2, r3]
 8002d16:	0019      	movs	r1, r3
 8002d18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d1a:	f7fd fa15 	bl	8000148 <__udivsi3>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	001a      	movs	r2, r3
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	085b      	lsrs	r3, r3, #1
 8002d28:	18d2      	adds	r2, r2, r3
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	0019      	movs	r1, r3
 8002d30:	0010      	movs	r0, r2
 8002d32:	f7fd fa09 	bl	8000148 <__udivsi3>
 8002d36:	0003      	movs	r3, r0
 8002d38:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	2b0f      	cmp	r3, #15
 8002d3e:	d90a      	bls.n	8002d56 <UART_SetConfig+0x53a>
 8002d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	025b      	lsls	r3, r3, #9
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d205      	bcs.n	8002d56 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60da      	str	r2, [r3, #12]
 8002d54:	e005      	b.n	8002d62 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002d56:	231a      	movs	r3, #26
 8002d58:	2220      	movs	r2, #32
 8002d5a:	189b      	adds	r3, r3, r2
 8002d5c:	19db      	adds	r3, r3, r7
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	226a      	movs	r2, #106	; 0x6a
 8002d66:	2101      	movs	r1, #1
 8002d68:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	2268      	movs	r2, #104	; 0x68
 8002d6e:	2101      	movs	r1, #1
 8002d70:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	2200      	movs	r2, #0
 8002d76:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002d7e:	231a      	movs	r3, #26
 8002d80:	2220      	movs	r2, #32
 8002d82:	189b      	adds	r3, r3, r2
 8002d84:	19db      	adds	r3, r3, r7
 8002d86:	781b      	ldrb	r3, [r3, #0]
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b010      	add	sp, #64	; 0x40
 8002d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d90:	080046e8 	.word	0x080046e8
 8002d94:	00f42400 	.word	0x00f42400

08002d98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	2201      	movs	r2, #1
 8002da6:	4013      	ands	r3, r2
 8002da8:	d00b      	beq.n	8002dc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4a4a      	ldr	r2, [pc, #296]	; (8002edc <UART_AdvFeatureConfig+0x144>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	0019      	movs	r1, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d00b      	beq.n	8002de4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4a43      	ldr	r2, [pc, #268]	; (8002ee0 <UART_AdvFeatureConfig+0x148>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	2204      	movs	r2, #4
 8002dea:	4013      	ands	r3, r2
 8002dec:	d00b      	beq.n	8002e06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4a3b      	ldr	r2, [pc, #236]	; (8002ee4 <UART_AdvFeatureConfig+0x14c>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	0019      	movs	r1, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d00b      	beq.n	8002e28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4a34      	ldr	r2, [pc, #208]	; (8002ee8 <UART_AdvFeatureConfig+0x150>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d00b      	beq.n	8002e4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4a2c      	ldr	r2, [pc, #176]	; (8002eec <UART_AdvFeatureConfig+0x154>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	2220      	movs	r2, #32
 8002e50:	4013      	ands	r3, r2
 8002e52:	d00b      	beq.n	8002e6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	4a25      	ldr	r2, [pc, #148]	; (8002ef0 <UART_AdvFeatureConfig+0x158>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	0019      	movs	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	2240      	movs	r2, #64	; 0x40
 8002e72:	4013      	ands	r3, r2
 8002e74:	d01d      	beq.n	8002eb2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a1d      	ldr	r2, [pc, #116]	; (8002ef4 <UART_AdvFeatureConfig+0x15c>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	0019      	movs	r1, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	035b      	lsls	r3, r3, #13
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d10b      	bne.n	8002eb2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <UART_AdvFeatureConfig+0x160>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d00b      	beq.n	8002ed4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <UART_AdvFeatureConfig+0x164>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	605a      	str	r2, [r3, #4]
  }
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b002      	add	sp, #8
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	fffdffff 	.word	0xfffdffff
 8002ee0:	fffeffff 	.word	0xfffeffff
 8002ee4:	fffbffff 	.word	0xfffbffff
 8002ee8:	ffff7fff 	.word	0xffff7fff
 8002eec:	ffffefff 	.word	0xffffefff
 8002ef0:	ffffdfff 	.word	0xffffdfff
 8002ef4:	ffefffff 	.word	0xffefffff
 8002ef8:	ff9fffff 	.word	0xff9fffff
 8002efc:	fff7ffff 	.word	0xfff7ffff

08002f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2290      	movs	r2, #144	; 0x90
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f10:	f7fd ffbe 	bl	8000e90 <HAL_GetTick>
 8002f14:	0003      	movs	r3, r0
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2208      	movs	r2, #8
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d10c      	bne.n	8002f40 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2280      	movs	r2, #128	; 0x80
 8002f2a:	0391      	lsls	r1, r2, #14
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4a1a      	ldr	r2, [pc, #104]	; (8002f98 <UART_CheckIdleState+0x98>)
 8002f30:	9200      	str	r2, [sp, #0]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f000 f832 	bl	8002f9c <UART_WaitOnFlagUntilTimeout>
 8002f38:	1e03      	subs	r3, r0, #0
 8002f3a:	d001      	beq.n	8002f40 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e026      	b.n	8002f8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2204      	movs	r2, #4
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d10c      	bne.n	8002f68 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2280      	movs	r2, #128	; 0x80
 8002f52:	03d1      	lsls	r1, r2, #15
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4a10      	ldr	r2, [pc, #64]	; (8002f98 <UART_CheckIdleState+0x98>)
 8002f58:	9200      	str	r2, [sp, #0]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f000 f81e 	bl	8002f9c <UART_WaitOnFlagUntilTimeout>
 8002f60:	1e03      	subs	r3, r0, #0
 8002f62:	d001      	beq.n	8002f68 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e012      	b.n	8002f8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2288      	movs	r2, #136	; 0x88
 8002f6c:	2120      	movs	r1, #32
 8002f6e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	228c      	movs	r2, #140	; 0x8c
 8002f74:	2120      	movs	r1, #32
 8002f76:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2284      	movs	r2, #132	; 0x84
 8002f88:	2100      	movs	r1, #0
 8002f8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b004      	add	sp, #16
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	01ffffff 	.word	0x01ffffff

08002f9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b094      	sub	sp, #80	; 0x50
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	1dfb      	adds	r3, r7, #7
 8002faa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fac:	e0a7      	b.n	80030fe <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	d100      	bne.n	8002fb6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002fb4:	e0a3      	b.n	80030fe <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb6:	f7fd ff6b 	bl	8000e90 <HAL_GetTick>
 8002fba:	0002      	movs	r2, r0
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x30>
 8002fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d13f      	bne.n	800304c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	f383 8810 	msr	PRIMASK, r3
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	494e      	ldr	r1, [pc, #312]	; (8003128 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002fee:	400a      	ands	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	f383 8810 	msr	PRIMASK, r3
}
 8002ffc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8003002:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003006:	643b      	str	r3, [r7, #64]	; 0x40
 8003008:	2301      	movs	r3, #1
 800300a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300e:	f383 8810 	msr	PRIMASK, r3
}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2101      	movs	r1, #1
 8003020:	438a      	bics	r2, r1
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003026:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302a:	f383 8810 	msr	PRIMASK, r3
}
 800302e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2288      	movs	r2, #136	; 0x88
 8003034:	2120      	movs	r1, #32
 8003036:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	228c      	movs	r2, #140	; 0x8c
 800303c:	2120      	movs	r1, #32
 800303e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2284      	movs	r2, #132	; 0x84
 8003044:	2100      	movs	r1, #0
 8003046:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e069      	b.n	8003120 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2204      	movs	r2, #4
 8003054:	4013      	ands	r3, r2
 8003056:	d052      	beq.n	80030fe <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69da      	ldr	r2, [r3, #28]
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	401a      	ands	r2, r3
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	429a      	cmp	r2, r3
 800306a:	d148      	bne.n	80030fe <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2280      	movs	r2, #128	; 0x80
 8003072:	0112      	lsls	r2, r2, #4
 8003074:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003076:	f3ef 8310 	mrs	r3, PRIMASK
 800307a:	613b      	str	r3, [r7, #16]
  return(result);
 800307c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800307e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003080:	2301      	movs	r3, #1
 8003082:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f383 8810 	msr	PRIMASK, r3
}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4924      	ldr	r1, [pc, #144]	; (8003128 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003098:	400a      	ands	r2, r1
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f383 8810 	msr	PRIMASK, r3
}
 80030a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a8:	f3ef 8310 	mrs	r3, PRIMASK
 80030ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80030ae:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80030b2:	2301      	movs	r3, #1
 80030b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	f383 8810 	msr	PRIMASK, r3
}
 80030bc:	46c0      	nop			; (mov r8, r8)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2101      	movs	r1, #1
 80030ca:	438a      	bics	r2, r1
 80030cc:	609a      	str	r2, [r3, #8]
 80030ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	f383 8810 	msr	PRIMASK, r3
}
 80030d8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2288      	movs	r2, #136	; 0x88
 80030de:	2120      	movs	r1, #32
 80030e0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	228c      	movs	r2, #140	; 0x8c
 80030e6:	2120      	movs	r1, #32
 80030e8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2290      	movs	r2, #144	; 0x90
 80030ee:	2120      	movs	r1, #32
 80030f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2284      	movs	r2, #132	; 0x84
 80030f6:	2100      	movs	r1, #0
 80030f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e010      	b.n	8003120 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	4013      	ands	r3, r2
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	425a      	negs	r2, r3
 800310e:	4153      	adcs	r3, r2
 8003110:	b2db      	uxtb	r3, r3
 8003112:	001a      	movs	r2, r3
 8003114:	1dfb      	adds	r3, r7, #7
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d100      	bne.n	800311e <UART_WaitOnFlagUntilTimeout+0x182>
 800311c:	e747      	b.n	8002fae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	b014      	add	sp, #80	; 0x50
 8003126:	bd80      	pop	{r7, pc}
 8003128:	fffffe5f 	.word	0xfffffe5f

0800312c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2284      	movs	r2, #132	; 0x84
 8003138:	5c9b      	ldrb	r3, [r3, r2]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_UARTEx_DisableFifoMode+0x16>
 800313e:	2302      	movs	r3, #2
 8003140:	e027      	b.n	8003192 <HAL_UARTEx_DisableFifoMode+0x66>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2284      	movs	r2, #132	; 0x84
 8003146:	2101      	movs	r1, #1
 8003148:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2288      	movs	r2, #136	; 0x88
 800314e:	2124      	movs	r1, #36	; 0x24
 8003150:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2101      	movs	r1, #1
 8003166:	438a      	bics	r2, r1
 8003168:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a0b      	ldr	r2, [pc, #44]	; (800319c <HAL_UARTEx_DisableFifoMode+0x70>)
 800316e:	4013      	ands	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2288      	movs	r2, #136	; 0x88
 8003184:	2120      	movs	r1, #32
 8003186:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2284      	movs	r2, #132	; 0x84
 800318c:	2100      	movs	r1, #0
 800318e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	0018      	movs	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	b004      	add	sp, #16
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	dfffffff 	.word	0xdfffffff

080031a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2284      	movs	r2, #132	; 0x84
 80031ae:	5c9b      	ldrb	r3, [r3, r2]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e02e      	b.n	8003216 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2284      	movs	r2, #132	; 0x84
 80031bc:	2101      	movs	r1, #1
 80031be:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2288      	movs	r2, #136	; 0x88
 80031c4:	2124      	movs	r1, #36	; 0x24
 80031c6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2101      	movs	r1, #1
 80031dc:	438a      	bics	r2, r1
 80031de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	08d9      	lsrs	r1, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	0018      	movs	r0, r3
 80031f8:	f000 f854 	bl	80032a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2288      	movs	r2, #136	; 0x88
 8003208:	2120      	movs	r1, #32
 800320a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2284      	movs	r2, #132	; 0x84
 8003210:	2100      	movs	r1, #0
 8003212:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b004      	add	sp, #16
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2284      	movs	r2, #132	; 0x84
 800322e:	5c9b      	ldrb	r3, [r3, r2]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003234:	2302      	movs	r3, #2
 8003236:	e02f      	b.n	8003298 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2284      	movs	r2, #132	; 0x84
 800323c:	2101      	movs	r1, #1
 800323e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2288      	movs	r2, #136	; 0x88
 8003244:	2124      	movs	r1, #36	; 0x24
 8003246:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2101      	movs	r1, #1
 800325c:	438a      	bics	r2, r1
 800325e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003268:	4013      	ands	r3, r2
 800326a:	0019      	movs	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	0018      	movs	r0, r3
 800327a:	f000 f813 	bl	80032a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2288      	movs	r2, #136	; 0x88
 800328a:	2120      	movs	r1, #32
 800328c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2284      	movs	r2, #132	; 0x84
 8003292:	2100      	movs	r1, #0
 8003294:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	0018      	movs	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	b004      	add	sp, #16
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	f1ffffff 	.word	0xf1ffffff

080032a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80032a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d108      	bne.n	80032c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	226a      	movs	r2, #106	; 0x6a
 80032b8:	2101      	movs	r1, #1
 80032ba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2268      	movs	r2, #104	; 0x68
 80032c0:	2101      	movs	r1, #1
 80032c2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80032c4:	e043      	b.n	800334e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80032c6:	260f      	movs	r6, #15
 80032c8:	19bb      	adds	r3, r7, r6
 80032ca:	2208      	movs	r2, #8
 80032cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80032ce:	200e      	movs	r0, #14
 80032d0:	183b      	adds	r3, r7, r0
 80032d2:	2208      	movs	r2, #8
 80032d4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	0e5b      	lsrs	r3, r3, #25
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	240d      	movs	r4, #13
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	2107      	movs	r1, #7
 80032e6:	400a      	ands	r2, r1
 80032e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	0f5b      	lsrs	r3, r3, #29
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	250c      	movs	r5, #12
 80032f6:	197b      	adds	r3, r7, r5
 80032f8:	2107      	movs	r1, #7
 80032fa:	400a      	ands	r2, r1
 80032fc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80032fe:	183b      	adds	r3, r7, r0
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	197a      	adds	r2, r7, r5
 8003304:	7812      	ldrb	r2, [r2, #0]
 8003306:	4914      	ldr	r1, [pc, #80]	; (8003358 <UARTEx_SetNbDataToProcess+0xb4>)
 8003308:	5c8a      	ldrb	r2, [r1, r2]
 800330a:	435a      	muls	r2, r3
 800330c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800330e:	197b      	adds	r3, r7, r5
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	4a12      	ldr	r2, [pc, #72]	; (800335c <UARTEx_SetNbDataToProcess+0xb8>)
 8003314:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003316:	0019      	movs	r1, r3
 8003318:	f7fc ffa0 	bl	800025c <__divsi3>
 800331c:	0003      	movs	r3, r0
 800331e:	b299      	uxth	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	226a      	movs	r2, #106	; 0x6a
 8003324:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003326:	19bb      	adds	r3, r7, r6
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	193a      	adds	r2, r7, r4
 800332c:	7812      	ldrb	r2, [r2, #0]
 800332e:	490a      	ldr	r1, [pc, #40]	; (8003358 <UARTEx_SetNbDataToProcess+0xb4>)
 8003330:	5c8a      	ldrb	r2, [r1, r2]
 8003332:	435a      	muls	r2, r3
 8003334:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003336:	193b      	adds	r3, r7, r4
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	4a08      	ldr	r2, [pc, #32]	; (800335c <UARTEx_SetNbDataToProcess+0xb8>)
 800333c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800333e:	0019      	movs	r1, r3
 8003340:	f7fc ff8c 	bl	800025c <__divsi3>
 8003344:	0003      	movs	r3, r0
 8003346:	b299      	uxth	r1, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2268      	movs	r2, #104	; 0x68
 800334c:	5299      	strh	r1, [r3, r2]
}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	46bd      	mov	sp, r7
 8003352:	b005      	add	sp, #20
 8003354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	08004700 	.word	0x08004700
 800335c:	08004708 	.word	0x08004708

08003360 <__errno>:
 8003360:	4b01      	ldr	r3, [pc, #4]	; (8003368 <__errno+0x8>)
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	4770      	bx	lr
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	2000000c 	.word	0x2000000c

0800336c <__libc_init_array>:
 800336c:	b570      	push	{r4, r5, r6, lr}
 800336e:	2600      	movs	r6, #0
 8003370:	4d0c      	ldr	r5, [pc, #48]	; (80033a4 <__libc_init_array+0x38>)
 8003372:	4c0d      	ldr	r4, [pc, #52]	; (80033a8 <__libc_init_array+0x3c>)
 8003374:	1b64      	subs	r4, r4, r5
 8003376:	10a4      	asrs	r4, r4, #2
 8003378:	42a6      	cmp	r6, r4
 800337a:	d109      	bne.n	8003390 <__libc_init_array+0x24>
 800337c:	2600      	movs	r6, #0
 800337e:	f001 f875 	bl	800446c <_init>
 8003382:	4d0a      	ldr	r5, [pc, #40]	; (80033ac <__libc_init_array+0x40>)
 8003384:	4c0a      	ldr	r4, [pc, #40]	; (80033b0 <__libc_init_array+0x44>)
 8003386:	1b64      	subs	r4, r4, r5
 8003388:	10a4      	asrs	r4, r4, #2
 800338a:	42a6      	cmp	r6, r4
 800338c:	d105      	bne.n	800339a <__libc_init_array+0x2e>
 800338e:	bd70      	pop	{r4, r5, r6, pc}
 8003390:	00b3      	lsls	r3, r6, #2
 8003392:	58eb      	ldr	r3, [r5, r3]
 8003394:	4798      	blx	r3
 8003396:	3601      	adds	r6, #1
 8003398:	e7ee      	b.n	8003378 <__libc_init_array+0xc>
 800339a:	00b3      	lsls	r3, r6, #2
 800339c:	58eb      	ldr	r3, [r5, r3]
 800339e:	4798      	blx	r3
 80033a0:	3601      	adds	r6, #1
 80033a2:	e7f2      	b.n	800338a <__libc_init_array+0x1e>
 80033a4:	080047b0 	.word	0x080047b0
 80033a8:	080047b0 	.word	0x080047b0
 80033ac:	080047b0 	.word	0x080047b0
 80033b0:	080047b4 	.word	0x080047b4

080033b4 <memset>:
 80033b4:	0003      	movs	r3, r0
 80033b6:	1882      	adds	r2, r0, r2
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d100      	bne.n	80033be <memset+0xa>
 80033bc:	4770      	bx	lr
 80033be:	7019      	strb	r1, [r3, #0]
 80033c0:	3301      	adds	r3, #1
 80033c2:	e7f9      	b.n	80033b8 <memset+0x4>

080033c4 <iprintf>:
 80033c4:	b40f      	push	{r0, r1, r2, r3}
 80033c6:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <iprintf+0x30>)
 80033c8:	b513      	push	{r0, r1, r4, lr}
 80033ca:	681c      	ldr	r4, [r3, #0]
 80033cc:	2c00      	cmp	r4, #0
 80033ce:	d005      	beq.n	80033dc <iprintf+0x18>
 80033d0:	69a3      	ldr	r3, [r4, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <iprintf+0x18>
 80033d6:	0020      	movs	r0, r4
 80033d8:	f000 fa86 	bl	80038e8 <__sinit>
 80033dc:	ab05      	add	r3, sp, #20
 80033de:	0020      	movs	r0, r4
 80033e0:	9a04      	ldr	r2, [sp, #16]
 80033e2:	68a1      	ldr	r1, [r4, #8]
 80033e4:	9301      	str	r3, [sp, #4]
 80033e6:	f000 fc99 	bl	8003d1c <_vfiprintf_r>
 80033ea:	bc16      	pop	{r1, r2, r4}
 80033ec:	bc08      	pop	{r3}
 80033ee:	b004      	add	sp, #16
 80033f0:	4718      	bx	r3
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	2000000c 	.word	0x2000000c

080033f8 <_puts_r>:
 80033f8:	b570      	push	{r4, r5, r6, lr}
 80033fa:	0005      	movs	r5, r0
 80033fc:	000e      	movs	r6, r1
 80033fe:	2800      	cmp	r0, #0
 8003400:	d004      	beq.n	800340c <_puts_r+0x14>
 8003402:	6983      	ldr	r3, [r0, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <_puts_r+0x14>
 8003408:	f000 fa6e 	bl	80038e8 <__sinit>
 800340c:	69ab      	ldr	r3, [r5, #24]
 800340e:	68ac      	ldr	r4, [r5, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <_puts_r+0x22>
 8003414:	0028      	movs	r0, r5
 8003416:	f000 fa67 	bl	80038e8 <__sinit>
 800341a:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <_puts_r+0xd8>)
 800341c:	429c      	cmp	r4, r3
 800341e:	d122      	bne.n	8003466 <_puts_r+0x6e>
 8003420:	686c      	ldr	r4, [r5, #4]
 8003422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003424:	07db      	lsls	r3, r3, #31
 8003426:	d405      	bmi.n	8003434 <_puts_r+0x3c>
 8003428:	89a3      	ldrh	r3, [r4, #12]
 800342a:	059b      	lsls	r3, r3, #22
 800342c:	d402      	bmi.n	8003434 <_puts_r+0x3c>
 800342e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003430:	f000 fafb 	bl	8003a2a <__retarget_lock_acquire_recursive>
 8003434:	89a3      	ldrh	r3, [r4, #12]
 8003436:	071b      	lsls	r3, r3, #28
 8003438:	d502      	bpl.n	8003440 <_puts_r+0x48>
 800343a:	6923      	ldr	r3, [r4, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d129      	bne.n	8003494 <_puts_r+0x9c>
 8003440:	0021      	movs	r1, r4
 8003442:	0028      	movs	r0, r5
 8003444:	f000 f8aa 	bl	800359c <__swsetup_r>
 8003448:	2800      	cmp	r0, #0
 800344a:	d023      	beq.n	8003494 <_puts_r+0x9c>
 800344c:	2501      	movs	r5, #1
 800344e:	426d      	negs	r5, r5
 8003450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003452:	07db      	lsls	r3, r3, #31
 8003454:	d405      	bmi.n	8003462 <_puts_r+0x6a>
 8003456:	89a3      	ldrh	r3, [r4, #12]
 8003458:	059b      	lsls	r3, r3, #22
 800345a:	d402      	bmi.n	8003462 <_puts_r+0x6a>
 800345c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800345e:	f000 fae5 	bl	8003a2c <__retarget_lock_release_recursive>
 8003462:	0028      	movs	r0, r5
 8003464:	bd70      	pop	{r4, r5, r6, pc}
 8003466:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <_puts_r+0xdc>)
 8003468:	429c      	cmp	r4, r3
 800346a:	d101      	bne.n	8003470 <_puts_r+0x78>
 800346c:	68ac      	ldr	r4, [r5, #8]
 800346e:	e7d8      	b.n	8003422 <_puts_r+0x2a>
 8003470:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <_puts_r+0xe0>)
 8003472:	429c      	cmp	r4, r3
 8003474:	d1d5      	bne.n	8003422 <_puts_r+0x2a>
 8003476:	68ec      	ldr	r4, [r5, #12]
 8003478:	e7d3      	b.n	8003422 <_puts_r+0x2a>
 800347a:	3601      	adds	r6, #1
 800347c:	60a3      	str	r3, [r4, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	da04      	bge.n	800348c <_puts_r+0x94>
 8003482:	69a2      	ldr	r2, [r4, #24]
 8003484:	429a      	cmp	r2, r3
 8003486:	dc16      	bgt.n	80034b6 <_puts_r+0xbe>
 8003488:	290a      	cmp	r1, #10
 800348a:	d014      	beq.n	80034b6 <_puts_r+0xbe>
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	6022      	str	r2, [r4, #0]
 8003492:	7019      	strb	r1, [r3, #0]
 8003494:	68a3      	ldr	r3, [r4, #8]
 8003496:	7831      	ldrb	r1, [r6, #0]
 8003498:	3b01      	subs	r3, #1
 800349a:	2900      	cmp	r1, #0
 800349c:	d1ed      	bne.n	800347a <_puts_r+0x82>
 800349e:	60a3      	str	r3, [r4, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	da0f      	bge.n	80034c4 <_puts_r+0xcc>
 80034a4:	0028      	movs	r0, r5
 80034a6:	0022      	movs	r2, r4
 80034a8:	310a      	adds	r1, #10
 80034aa:	f000 f821 	bl	80034f0 <__swbuf_r>
 80034ae:	250a      	movs	r5, #10
 80034b0:	1c43      	adds	r3, r0, #1
 80034b2:	d1cd      	bne.n	8003450 <_puts_r+0x58>
 80034b4:	e7ca      	b.n	800344c <_puts_r+0x54>
 80034b6:	0022      	movs	r2, r4
 80034b8:	0028      	movs	r0, r5
 80034ba:	f000 f819 	bl	80034f0 <__swbuf_r>
 80034be:	1c43      	adds	r3, r0, #1
 80034c0:	d1e8      	bne.n	8003494 <_puts_r+0x9c>
 80034c2:	e7c3      	b.n	800344c <_puts_r+0x54>
 80034c4:	250a      	movs	r5, #10
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	6022      	str	r2, [r4, #0]
 80034cc:	701d      	strb	r5, [r3, #0]
 80034ce:	e7bf      	b.n	8003450 <_puts_r+0x58>
 80034d0:	08004734 	.word	0x08004734
 80034d4:	08004754 	.word	0x08004754
 80034d8:	08004714 	.word	0x08004714

080034dc <puts>:
 80034dc:	b510      	push	{r4, lr}
 80034de:	4b03      	ldr	r3, [pc, #12]	; (80034ec <puts+0x10>)
 80034e0:	0001      	movs	r1, r0
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	f7ff ff88 	bl	80033f8 <_puts_r>
 80034e8:	bd10      	pop	{r4, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	2000000c 	.word	0x2000000c

080034f0 <__swbuf_r>:
 80034f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f2:	0005      	movs	r5, r0
 80034f4:	000e      	movs	r6, r1
 80034f6:	0014      	movs	r4, r2
 80034f8:	2800      	cmp	r0, #0
 80034fa:	d004      	beq.n	8003506 <__swbuf_r+0x16>
 80034fc:	6983      	ldr	r3, [r0, #24]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <__swbuf_r+0x16>
 8003502:	f000 f9f1 	bl	80038e8 <__sinit>
 8003506:	4b22      	ldr	r3, [pc, #136]	; (8003590 <__swbuf_r+0xa0>)
 8003508:	429c      	cmp	r4, r3
 800350a:	d12e      	bne.n	800356a <__swbuf_r+0x7a>
 800350c:	686c      	ldr	r4, [r5, #4]
 800350e:	69a3      	ldr	r3, [r4, #24]
 8003510:	60a3      	str	r3, [r4, #8]
 8003512:	89a3      	ldrh	r3, [r4, #12]
 8003514:	071b      	lsls	r3, r3, #28
 8003516:	d532      	bpl.n	800357e <__swbuf_r+0x8e>
 8003518:	6923      	ldr	r3, [r4, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d02f      	beq.n	800357e <__swbuf_r+0x8e>
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	6922      	ldr	r2, [r4, #16]
 8003522:	b2f7      	uxtb	r7, r6
 8003524:	1a98      	subs	r0, r3, r2
 8003526:	6963      	ldr	r3, [r4, #20]
 8003528:	b2f6      	uxtb	r6, r6
 800352a:	4283      	cmp	r3, r0
 800352c:	dc05      	bgt.n	800353a <__swbuf_r+0x4a>
 800352e:	0021      	movs	r1, r4
 8003530:	0028      	movs	r0, r5
 8003532:	f000 f937 	bl	80037a4 <_fflush_r>
 8003536:	2800      	cmp	r0, #0
 8003538:	d127      	bne.n	800358a <__swbuf_r+0x9a>
 800353a:	68a3      	ldr	r3, [r4, #8]
 800353c:	3001      	adds	r0, #1
 800353e:	3b01      	subs	r3, #1
 8003540:	60a3      	str	r3, [r4, #8]
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	6022      	str	r2, [r4, #0]
 8003548:	701f      	strb	r7, [r3, #0]
 800354a:	6963      	ldr	r3, [r4, #20]
 800354c:	4283      	cmp	r3, r0
 800354e:	d004      	beq.n	800355a <__swbuf_r+0x6a>
 8003550:	89a3      	ldrh	r3, [r4, #12]
 8003552:	07db      	lsls	r3, r3, #31
 8003554:	d507      	bpl.n	8003566 <__swbuf_r+0x76>
 8003556:	2e0a      	cmp	r6, #10
 8003558:	d105      	bne.n	8003566 <__swbuf_r+0x76>
 800355a:	0021      	movs	r1, r4
 800355c:	0028      	movs	r0, r5
 800355e:	f000 f921 	bl	80037a4 <_fflush_r>
 8003562:	2800      	cmp	r0, #0
 8003564:	d111      	bne.n	800358a <__swbuf_r+0x9a>
 8003566:	0030      	movs	r0, r6
 8003568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800356a:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <__swbuf_r+0xa4>)
 800356c:	429c      	cmp	r4, r3
 800356e:	d101      	bne.n	8003574 <__swbuf_r+0x84>
 8003570:	68ac      	ldr	r4, [r5, #8]
 8003572:	e7cc      	b.n	800350e <__swbuf_r+0x1e>
 8003574:	4b08      	ldr	r3, [pc, #32]	; (8003598 <__swbuf_r+0xa8>)
 8003576:	429c      	cmp	r4, r3
 8003578:	d1c9      	bne.n	800350e <__swbuf_r+0x1e>
 800357a:	68ec      	ldr	r4, [r5, #12]
 800357c:	e7c7      	b.n	800350e <__swbuf_r+0x1e>
 800357e:	0021      	movs	r1, r4
 8003580:	0028      	movs	r0, r5
 8003582:	f000 f80b 	bl	800359c <__swsetup_r>
 8003586:	2800      	cmp	r0, #0
 8003588:	d0c9      	beq.n	800351e <__swbuf_r+0x2e>
 800358a:	2601      	movs	r6, #1
 800358c:	4276      	negs	r6, r6
 800358e:	e7ea      	b.n	8003566 <__swbuf_r+0x76>
 8003590:	08004734 	.word	0x08004734
 8003594:	08004754 	.word	0x08004754
 8003598:	08004714 	.word	0x08004714

0800359c <__swsetup_r>:
 800359c:	4b37      	ldr	r3, [pc, #220]	; (800367c <__swsetup_r+0xe0>)
 800359e:	b570      	push	{r4, r5, r6, lr}
 80035a0:	681d      	ldr	r5, [r3, #0]
 80035a2:	0006      	movs	r6, r0
 80035a4:	000c      	movs	r4, r1
 80035a6:	2d00      	cmp	r5, #0
 80035a8:	d005      	beq.n	80035b6 <__swsetup_r+0x1a>
 80035aa:	69ab      	ldr	r3, [r5, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d102      	bne.n	80035b6 <__swsetup_r+0x1a>
 80035b0:	0028      	movs	r0, r5
 80035b2:	f000 f999 	bl	80038e8 <__sinit>
 80035b6:	4b32      	ldr	r3, [pc, #200]	; (8003680 <__swsetup_r+0xe4>)
 80035b8:	429c      	cmp	r4, r3
 80035ba:	d10f      	bne.n	80035dc <__swsetup_r+0x40>
 80035bc:	686c      	ldr	r4, [r5, #4]
 80035be:	230c      	movs	r3, #12
 80035c0:	5ee2      	ldrsh	r2, [r4, r3]
 80035c2:	b293      	uxth	r3, r2
 80035c4:	0711      	lsls	r1, r2, #28
 80035c6:	d42d      	bmi.n	8003624 <__swsetup_r+0x88>
 80035c8:	06d9      	lsls	r1, r3, #27
 80035ca:	d411      	bmi.n	80035f0 <__swsetup_r+0x54>
 80035cc:	2309      	movs	r3, #9
 80035ce:	2001      	movs	r0, #1
 80035d0:	6033      	str	r3, [r6, #0]
 80035d2:	3337      	adds	r3, #55	; 0x37
 80035d4:	4313      	orrs	r3, r2
 80035d6:	81a3      	strh	r3, [r4, #12]
 80035d8:	4240      	negs	r0, r0
 80035da:	bd70      	pop	{r4, r5, r6, pc}
 80035dc:	4b29      	ldr	r3, [pc, #164]	; (8003684 <__swsetup_r+0xe8>)
 80035de:	429c      	cmp	r4, r3
 80035e0:	d101      	bne.n	80035e6 <__swsetup_r+0x4a>
 80035e2:	68ac      	ldr	r4, [r5, #8]
 80035e4:	e7eb      	b.n	80035be <__swsetup_r+0x22>
 80035e6:	4b28      	ldr	r3, [pc, #160]	; (8003688 <__swsetup_r+0xec>)
 80035e8:	429c      	cmp	r4, r3
 80035ea:	d1e8      	bne.n	80035be <__swsetup_r+0x22>
 80035ec:	68ec      	ldr	r4, [r5, #12]
 80035ee:	e7e6      	b.n	80035be <__swsetup_r+0x22>
 80035f0:	075b      	lsls	r3, r3, #29
 80035f2:	d513      	bpl.n	800361c <__swsetup_r+0x80>
 80035f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035f6:	2900      	cmp	r1, #0
 80035f8:	d008      	beq.n	800360c <__swsetup_r+0x70>
 80035fa:	0023      	movs	r3, r4
 80035fc:	3344      	adds	r3, #68	; 0x44
 80035fe:	4299      	cmp	r1, r3
 8003600:	d002      	beq.n	8003608 <__swsetup_r+0x6c>
 8003602:	0030      	movs	r0, r6
 8003604:	f000 fa80 	bl	8003b08 <_free_r>
 8003608:	2300      	movs	r3, #0
 800360a:	6363      	str	r3, [r4, #52]	; 0x34
 800360c:	2224      	movs	r2, #36	; 0x24
 800360e:	89a3      	ldrh	r3, [r4, #12]
 8003610:	4393      	bics	r3, r2
 8003612:	81a3      	strh	r3, [r4, #12]
 8003614:	2300      	movs	r3, #0
 8003616:	6063      	str	r3, [r4, #4]
 8003618:	6923      	ldr	r3, [r4, #16]
 800361a:	6023      	str	r3, [r4, #0]
 800361c:	2308      	movs	r3, #8
 800361e:	89a2      	ldrh	r2, [r4, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	81a3      	strh	r3, [r4, #12]
 8003624:	6923      	ldr	r3, [r4, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10b      	bne.n	8003642 <__swsetup_r+0xa6>
 800362a:	21a0      	movs	r1, #160	; 0xa0
 800362c:	2280      	movs	r2, #128	; 0x80
 800362e:	89a3      	ldrh	r3, [r4, #12]
 8003630:	0089      	lsls	r1, r1, #2
 8003632:	0092      	lsls	r2, r2, #2
 8003634:	400b      	ands	r3, r1
 8003636:	4293      	cmp	r3, r2
 8003638:	d003      	beq.n	8003642 <__swsetup_r+0xa6>
 800363a:	0021      	movs	r1, r4
 800363c:	0030      	movs	r0, r6
 800363e:	f000 fa1f 	bl	8003a80 <__smakebuf_r>
 8003642:	220c      	movs	r2, #12
 8003644:	5ea3      	ldrsh	r3, [r4, r2]
 8003646:	2001      	movs	r0, #1
 8003648:	001a      	movs	r2, r3
 800364a:	b299      	uxth	r1, r3
 800364c:	4002      	ands	r2, r0
 800364e:	4203      	tst	r3, r0
 8003650:	d00f      	beq.n	8003672 <__swsetup_r+0xd6>
 8003652:	2200      	movs	r2, #0
 8003654:	60a2      	str	r2, [r4, #8]
 8003656:	6962      	ldr	r2, [r4, #20]
 8003658:	4252      	negs	r2, r2
 800365a:	61a2      	str	r2, [r4, #24]
 800365c:	2000      	movs	r0, #0
 800365e:	6922      	ldr	r2, [r4, #16]
 8003660:	4282      	cmp	r2, r0
 8003662:	d1ba      	bne.n	80035da <__swsetup_r+0x3e>
 8003664:	060a      	lsls	r2, r1, #24
 8003666:	d5b8      	bpl.n	80035da <__swsetup_r+0x3e>
 8003668:	2240      	movs	r2, #64	; 0x40
 800366a:	4313      	orrs	r3, r2
 800366c:	81a3      	strh	r3, [r4, #12]
 800366e:	3801      	subs	r0, #1
 8003670:	e7b3      	b.n	80035da <__swsetup_r+0x3e>
 8003672:	0788      	lsls	r0, r1, #30
 8003674:	d400      	bmi.n	8003678 <__swsetup_r+0xdc>
 8003676:	6962      	ldr	r2, [r4, #20]
 8003678:	60a2      	str	r2, [r4, #8]
 800367a:	e7ef      	b.n	800365c <__swsetup_r+0xc0>
 800367c:	2000000c 	.word	0x2000000c
 8003680:	08004734 	.word	0x08004734
 8003684:	08004754 	.word	0x08004754
 8003688:	08004714 	.word	0x08004714

0800368c <__sflush_r>:
 800368c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800368e:	898b      	ldrh	r3, [r1, #12]
 8003690:	0005      	movs	r5, r0
 8003692:	000c      	movs	r4, r1
 8003694:	071a      	lsls	r2, r3, #28
 8003696:	d45f      	bmi.n	8003758 <__sflush_r+0xcc>
 8003698:	684a      	ldr	r2, [r1, #4]
 800369a:	2a00      	cmp	r2, #0
 800369c:	dc04      	bgt.n	80036a8 <__sflush_r+0x1c>
 800369e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80036a0:	2a00      	cmp	r2, #0
 80036a2:	dc01      	bgt.n	80036a8 <__sflush_r+0x1c>
 80036a4:	2000      	movs	r0, #0
 80036a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036a8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80036aa:	2f00      	cmp	r7, #0
 80036ac:	d0fa      	beq.n	80036a4 <__sflush_r+0x18>
 80036ae:	2200      	movs	r2, #0
 80036b0:	2180      	movs	r1, #128	; 0x80
 80036b2:	682e      	ldr	r6, [r5, #0]
 80036b4:	602a      	str	r2, [r5, #0]
 80036b6:	001a      	movs	r2, r3
 80036b8:	0149      	lsls	r1, r1, #5
 80036ba:	400a      	ands	r2, r1
 80036bc:	420b      	tst	r3, r1
 80036be:	d034      	beq.n	800372a <__sflush_r+0x9e>
 80036c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036c2:	89a3      	ldrh	r3, [r4, #12]
 80036c4:	075b      	lsls	r3, r3, #29
 80036c6:	d506      	bpl.n	80036d6 <__sflush_r+0x4a>
 80036c8:	6863      	ldr	r3, [r4, #4]
 80036ca:	1ac0      	subs	r0, r0, r3
 80036cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <__sflush_r+0x4a>
 80036d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036d4:	1ac0      	subs	r0, r0, r3
 80036d6:	0002      	movs	r2, r0
 80036d8:	6a21      	ldr	r1, [r4, #32]
 80036da:	2300      	movs	r3, #0
 80036dc:	0028      	movs	r0, r5
 80036de:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80036e0:	47b8      	blx	r7
 80036e2:	89a1      	ldrh	r1, [r4, #12]
 80036e4:	1c43      	adds	r3, r0, #1
 80036e6:	d106      	bne.n	80036f6 <__sflush_r+0x6a>
 80036e8:	682b      	ldr	r3, [r5, #0]
 80036ea:	2b1d      	cmp	r3, #29
 80036ec:	d831      	bhi.n	8003752 <__sflush_r+0xc6>
 80036ee:	4a2c      	ldr	r2, [pc, #176]	; (80037a0 <__sflush_r+0x114>)
 80036f0:	40da      	lsrs	r2, r3
 80036f2:	07d3      	lsls	r3, r2, #31
 80036f4:	d52d      	bpl.n	8003752 <__sflush_r+0xc6>
 80036f6:	2300      	movs	r3, #0
 80036f8:	6063      	str	r3, [r4, #4]
 80036fa:	6923      	ldr	r3, [r4, #16]
 80036fc:	6023      	str	r3, [r4, #0]
 80036fe:	04cb      	lsls	r3, r1, #19
 8003700:	d505      	bpl.n	800370e <__sflush_r+0x82>
 8003702:	1c43      	adds	r3, r0, #1
 8003704:	d102      	bne.n	800370c <__sflush_r+0x80>
 8003706:	682b      	ldr	r3, [r5, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d100      	bne.n	800370e <__sflush_r+0x82>
 800370c:	6560      	str	r0, [r4, #84]	; 0x54
 800370e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003710:	602e      	str	r6, [r5, #0]
 8003712:	2900      	cmp	r1, #0
 8003714:	d0c6      	beq.n	80036a4 <__sflush_r+0x18>
 8003716:	0023      	movs	r3, r4
 8003718:	3344      	adds	r3, #68	; 0x44
 800371a:	4299      	cmp	r1, r3
 800371c:	d002      	beq.n	8003724 <__sflush_r+0x98>
 800371e:	0028      	movs	r0, r5
 8003720:	f000 f9f2 	bl	8003b08 <_free_r>
 8003724:	2000      	movs	r0, #0
 8003726:	6360      	str	r0, [r4, #52]	; 0x34
 8003728:	e7bd      	b.n	80036a6 <__sflush_r+0x1a>
 800372a:	2301      	movs	r3, #1
 800372c:	0028      	movs	r0, r5
 800372e:	6a21      	ldr	r1, [r4, #32]
 8003730:	47b8      	blx	r7
 8003732:	1c43      	adds	r3, r0, #1
 8003734:	d1c5      	bne.n	80036c2 <__sflush_r+0x36>
 8003736:	682b      	ldr	r3, [r5, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0c2      	beq.n	80036c2 <__sflush_r+0x36>
 800373c:	2b1d      	cmp	r3, #29
 800373e:	d001      	beq.n	8003744 <__sflush_r+0xb8>
 8003740:	2b16      	cmp	r3, #22
 8003742:	d101      	bne.n	8003748 <__sflush_r+0xbc>
 8003744:	602e      	str	r6, [r5, #0]
 8003746:	e7ad      	b.n	80036a4 <__sflush_r+0x18>
 8003748:	2340      	movs	r3, #64	; 0x40
 800374a:	89a2      	ldrh	r2, [r4, #12]
 800374c:	4313      	orrs	r3, r2
 800374e:	81a3      	strh	r3, [r4, #12]
 8003750:	e7a9      	b.n	80036a6 <__sflush_r+0x1a>
 8003752:	2340      	movs	r3, #64	; 0x40
 8003754:	430b      	orrs	r3, r1
 8003756:	e7fa      	b.n	800374e <__sflush_r+0xc2>
 8003758:	690f      	ldr	r7, [r1, #16]
 800375a:	2f00      	cmp	r7, #0
 800375c:	d0a2      	beq.n	80036a4 <__sflush_r+0x18>
 800375e:	680a      	ldr	r2, [r1, #0]
 8003760:	600f      	str	r7, [r1, #0]
 8003762:	1bd2      	subs	r2, r2, r7
 8003764:	9201      	str	r2, [sp, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	079b      	lsls	r3, r3, #30
 800376a:	d100      	bne.n	800376e <__sflush_r+0xe2>
 800376c:	694a      	ldr	r2, [r1, #20]
 800376e:	60a2      	str	r2, [r4, #8]
 8003770:	9b01      	ldr	r3, [sp, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	dc00      	bgt.n	8003778 <__sflush_r+0xec>
 8003776:	e795      	b.n	80036a4 <__sflush_r+0x18>
 8003778:	003a      	movs	r2, r7
 800377a:	0028      	movs	r0, r5
 800377c:	9b01      	ldr	r3, [sp, #4]
 800377e:	6a21      	ldr	r1, [r4, #32]
 8003780:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003782:	47b0      	blx	r6
 8003784:	2800      	cmp	r0, #0
 8003786:	dc06      	bgt.n	8003796 <__sflush_r+0x10a>
 8003788:	2340      	movs	r3, #64	; 0x40
 800378a:	2001      	movs	r0, #1
 800378c:	89a2      	ldrh	r2, [r4, #12]
 800378e:	4240      	negs	r0, r0
 8003790:	4313      	orrs	r3, r2
 8003792:	81a3      	strh	r3, [r4, #12]
 8003794:	e787      	b.n	80036a6 <__sflush_r+0x1a>
 8003796:	9b01      	ldr	r3, [sp, #4]
 8003798:	183f      	adds	r7, r7, r0
 800379a:	1a1b      	subs	r3, r3, r0
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	e7e7      	b.n	8003770 <__sflush_r+0xe4>
 80037a0:	20400001 	.word	0x20400001

080037a4 <_fflush_r>:
 80037a4:	690b      	ldr	r3, [r1, #16]
 80037a6:	b570      	push	{r4, r5, r6, lr}
 80037a8:	0005      	movs	r5, r0
 80037aa:	000c      	movs	r4, r1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d102      	bne.n	80037b6 <_fflush_r+0x12>
 80037b0:	2500      	movs	r5, #0
 80037b2:	0028      	movs	r0, r5
 80037b4:	bd70      	pop	{r4, r5, r6, pc}
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d004      	beq.n	80037c4 <_fflush_r+0x20>
 80037ba:	6983      	ldr	r3, [r0, #24]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <_fflush_r+0x20>
 80037c0:	f000 f892 	bl	80038e8 <__sinit>
 80037c4:	4b14      	ldr	r3, [pc, #80]	; (8003818 <_fflush_r+0x74>)
 80037c6:	429c      	cmp	r4, r3
 80037c8:	d11b      	bne.n	8003802 <_fflush_r+0x5e>
 80037ca:	686c      	ldr	r4, [r5, #4]
 80037cc:	220c      	movs	r2, #12
 80037ce:	5ea3      	ldrsh	r3, [r4, r2]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0ed      	beq.n	80037b0 <_fflush_r+0xc>
 80037d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037d6:	07d2      	lsls	r2, r2, #31
 80037d8:	d404      	bmi.n	80037e4 <_fflush_r+0x40>
 80037da:	059b      	lsls	r3, r3, #22
 80037dc:	d402      	bmi.n	80037e4 <_fflush_r+0x40>
 80037de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037e0:	f000 f923 	bl	8003a2a <__retarget_lock_acquire_recursive>
 80037e4:	0028      	movs	r0, r5
 80037e6:	0021      	movs	r1, r4
 80037e8:	f7ff ff50 	bl	800368c <__sflush_r>
 80037ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037ee:	0005      	movs	r5, r0
 80037f0:	07db      	lsls	r3, r3, #31
 80037f2:	d4de      	bmi.n	80037b2 <_fflush_r+0xe>
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	059b      	lsls	r3, r3, #22
 80037f8:	d4db      	bmi.n	80037b2 <_fflush_r+0xe>
 80037fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037fc:	f000 f916 	bl	8003a2c <__retarget_lock_release_recursive>
 8003800:	e7d7      	b.n	80037b2 <_fflush_r+0xe>
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <_fflush_r+0x78>)
 8003804:	429c      	cmp	r4, r3
 8003806:	d101      	bne.n	800380c <_fflush_r+0x68>
 8003808:	68ac      	ldr	r4, [r5, #8]
 800380a:	e7df      	b.n	80037cc <_fflush_r+0x28>
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <_fflush_r+0x7c>)
 800380e:	429c      	cmp	r4, r3
 8003810:	d1dc      	bne.n	80037cc <_fflush_r+0x28>
 8003812:	68ec      	ldr	r4, [r5, #12]
 8003814:	e7da      	b.n	80037cc <_fflush_r+0x28>
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	08004734 	.word	0x08004734
 800381c:	08004754 	.word	0x08004754
 8003820:	08004714 	.word	0x08004714

08003824 <std>:
 8003824:	2300      	movs	r3, #0
 8003826:	b510      	push	{r4, lr}
 8003828:	0004      	movs	r4, r0
 800382a:	6003      	str	r3, [r0, #0]
 800382c:	6043      	str	r3, [r0, #4]
 800382e:	6083      	str	r3, [r0, #8]
 8003830:	8181      	strh	r1, [r0, #12]
 8003832:	6643      	str	r3, [r0, #100]	; 0x64
 8003834:	0019      	movs	r1, r3
 8003836:	81c2      	strh	r2, [r0, #14]
 8003838:	6103      	str	r3, [r0, #16]
 800383a:	6143      	str	r3, [r0, #20]
 800383c:	6183      	str	r3, [r0, #24]
 800383e:	2208      	movs	r2, #8
 8003840:	305c      	adds	r0, #92	; 0x5c
 8003842:	f7ff fdb7 	bl	80033b4 <memset>
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <std+0x38>)
 8003848:	6224      	str	r4, [r4, #32]
 800384a:	6263      	str	r3, [r4, #36]	; 0x24
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <std+0x3c>)
 800384e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <std+0x40>)
 8003852:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <std+0x44>)
 8003856:	6323      	str	r3, [r4, #48]	; 0x30
 8003858:	bd10      	pop	{r4, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	080042b9 	.word	0x080042b9
 8003860:	080042e1 	.word	0x080042e1
 8003864:	08004319 	.word	0x08004319
 8003868:	08004345 	.word	0x08004345

0800386c <_cleanup_r>:
 800386c:	b510      	push	{r4, lr}
 800386e:	4902      	ldr	r1, [pc, #8]	; (8003878 <_cleanup_r+0xc>)
 8003870:	f000 f8ba 	bl	80039e8 <_fwalk_reent>
 8003874:	bd10      	pop	{r4, pc}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	080037a5 	.word	0x080037a5

0800387c <__sfmoreglue>:
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	2568      	movs	r5, #104	; 0x68
 8003880:	1e4a      	subs	r2, r1, #1
 8003882:	4355      	muls	r5, r2
 8003884:	000e      	movs	r6, r1
 8003886:	0029      	movs	r1, r5
 8003888:	3174      	adds	r1, #116	; 0x74
 800388a:	f000 f9a9 	bl	8003be0 <_malloc_r>
 800388e:	1e04      	subs	r4, r0, #0
 8003890:	d008      	beq.n	80038a4 <__sfmoreglue+0x28>
 8003892:	2100      	movs	r1, #0
 8003894:	002a      	movs	r2, r5
 8003896:	6001      	str	r1, [r0, #0]
 8003898:	6046      	str	r6, [r0, #4]
 800389a:	300c      	adds	r0, #12
 800389c:	60a0      	str	r0, [r4, #8]
 800389e:	3268      	adds	r2, #104	; 0x68
 80038a0:	f7ff fd88 	bl	80033b4 <memset>
 80038a4:	0020      	movs	r0, r4
 80038a6:	bd70      	pop	{r4, r5, r6, pc}

080038a8 <__sfp_lock_acquire>:
 80038a8:	b510      	push	{r4, lr}
 80038aa:	4802      	ldr	r0, [pc, #8]	; (80038b4 <__sfp_lock_acquire+0xc>)
 80038ac:	f000 f8bd 	bl	8003a2a <__retarget_lock_acquire_recursive>
 80038b0:	bd10      	pop	{r4, pc}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	2000012d 	.word	0x2000012d

080038b8 <__sfp_lock_release>:
 80038b8:	b510      	push	{r4, lr}
 80038ba:	4802      	ldr	r0, [pc, #8]	; (80038c4 <__sfp_lock_release+0xc>)
 80038bc:	f000 f8b6 	bl	8003a2c <__retarget_lock_release_recursive>
 80038c0:	bd10      	pop	{r4, pc}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	2000012d 	.word	0x2000012d

080038c8 <__sinit_lock_acquire>:
 80038c8:	b510      	push	{r4, lr}
 80038ca:	4802      	ldr	r0, [pc, #8]	; (80038d4 <__sinit_lock_acquire+0xc>)
 80038cc:	f000 f8ad 	bl	8003a2a <__retarget_lock_acquire_recursive>
 80038d0:	bd10      	pop	{r4, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	2000012e 	.word	0x2000012e

080038d8 <__sinit_lock_release>:
 80038d8:	b510      	push	{r4, lr}
 80038da:	4802      	ldr	r0, [pc, #8]	; (80038e4 <__sinit_lock_release+0xc>)
 80038dc:	f000 f8a6 	bl	8003a2c <__retarget_lock_release_recursive>
 80038e0:	bd10      	pop	{r4, pc}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	2000012e 	.word	0x2000012e

080038e8 <__sinit>:
 80038e8:	b513      	push	{r0, r1, r4, lr}
 80038ea:	0004      	movs	r4, r0
 80038ec:	f7ff ffec 	bl	80038c8 <__sinit_lock_acquire>
 80038f0:	69a3      	ldr	r3, [r4, #24]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <__sinit+0x14>
 80038f6:	f7ff ffef 	bl	80038d8 <__sinit_lock_release>
 80038fa:	bd13      	pop	{r0, r1, r4, pc}
 80038fc:	64a3      	str	r3, [r4, #72]	; 0x48
 80038fe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003900:	6523      	str	r3, [r4, #80]	; 0x50
 8003902:	4b13      	ldr	r3, [pc, #76]	; (8003950 <__sinit+0x68>)
 8003904:	4a13      	ldr	r2, [pc, #76]	; (8003954 <__sinit+0x6c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	62a2      	str	r2, [r4, #40]	; 0x28
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	42a3      	cmp	r3, r4
 800390e:	d101      	bne.n	8003914 <__sinit+0x2c>
 8003910:	2301      	movs	r3, #1
 8003912:	61a3      	str	r3, [r4, #24]
 8003914:	0020      	movs	r0, r4
 8003916:	f000 f81f 	bl	8003958 <__sfp>
 800391a:	6060      	str	r0, [r4, #4]
 800391c:	0020      	movs	r0, r4
 800391e:	f000 f81b 	bl	8003958 <__sfp>
 8003922:	60a0      	str	r0, [r4, #8]
 8003924:	0020      	movs	r0, r4
 8003926:	f000 f817 	bl	8003958 <__sfp>
 800392a:	2200      	movs	r2, #0
 800392c:	2104      	movs	r1, #4
 800392e:	60e0      	str	r0, [r4, #12]
 8003930:	6860      	ldr	r0, [r4, #4]
 8003932:	f7ff ff77 	bl	8003824 <std>
 8003936:	2201      	movs	r2, #1
 8003938:	2109      	movs	r1, #9
 800393a:	68a0      	ldr	r0, [r4, #8]
 800393c:	f7ff ff72 	bl	8003824 <std>
 8003940:	2202      	movs	r2, #2
 8003942:	2112      	movs	r1, #18
 8003944:	68e0      	ldr	r0, [r4, #12]
 8003946:	f7ff ff6d 	bl	8003824 <std>
 800394a:	2301      	movs	r3, #1
 800394c:	61a3      	str	r3, [r4, #24]
 800394e:	e7d2      	b.n	80038f6 <__sinit+0xe>
 8003950:	08004710 	.word	0x08004710
 8003954:	0800386d 	.word	0x0800386d

08003958 <__sfp>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	0007      	movs	r7, r0
 800395c:	f7ff ffa4 	bl	80038a8 <__sfp_lock_acquire>
 8003960:	4b1f      	ldr	r3, [pc, #124]	; (80039e0 <__sfp+0x88>)
 8003962:	681e      	ldr	r6, [r3, #0]
 8003964:	69b3      	ldr	r3, [r6, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <__sfp+0x18>
 800396a:	0030      	movs	r0, r6
 800396c:	f7ff ffbc 	bl	80038e8 <__sinit>
 8003970:	3648      	adds	r6, #72	; 0x48
 8003972:	68b4      	ldr	r4, [r6, #8]
 8003974:	6873      	ldr	r3, [r6, #4]
 8003976:	3b01      	subs	r3, #1
 8003978:	d504      	bpl.n	8003984 <__sfp+0x2c>
 800397a:	6833      	ldr	r3, [r6, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d022      	beq.n	80039c6 <__sfp+0x6e>
 8003980:	6836      	ldr	r6, [r6, #0]
 8003982:	e7f6      	b.n	8003972 <__sfp+0x1a>
 8003984:	220c      	movs	r2, #12
 8003986:	5ea5      	ldrsh	r5, [r4, r2]
 8003988:	2d00      	cmp	r5, #0
 800398a:	d11a      	bne.n	80039c2 <__sfp+0x6a>
 800398c:	0020      	movs	r0, r4
 800398e:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <__sfp+0x8c>)
 8003990:	3058      	adds	r0, #88	; 0x58
 8003992:	60e3      	str	r3, [r4, #12]
 8003994:	6665      	str	r5, [r4, #100]	; 0x64
 8003996:	f000 f847 	bl	8003a28 <__retarget_lock_init_recursive>
 800399a:	f7ff ff8d 	bl	80038b8 <__sfp_lock_release>
 800399e:	0020      	movs	r0, r4
 80039a0:	2208      	movs	r2, #8
 80039a2:	0029      	movs	r1, r5
 80039a4:	6025      	str	r5, [r4, #0]
 80039a6:	60a5      	str	r5, [r4, #8]
 80039a8:	6065      	str	r5, [r4, #4]
 80039aa:	6125      	str	r5, [r4, #16]
 80039ac:	6165      	str	r5, [r4, #20]
 80039ae:	61a5      	str	r5, [r4, #24]
 80039b0:	305c      	adds	r0, #92	; 0x5c
 80039b2:	f7ff fcff 	bl	80033b4 <memset>
 80039b6:	6365      	str	r5, [r4, #52]	; 0x34
 80039b8:	63a5      	str	r5, [r4, #56]	; 0x38
 80039ba:	64a5      	str	r5, [r4, #72]	; 0x48
 80039bc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80039be:	0020      	movs	r0, r4
 80039c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039c2:	3468      	adds	r4, #104	; 0x68
 80039c4:	e7d7      	b.n	8003976 <__sfp+0x1e>
 80039c6:	2104      	movs	r1, #4
 80039c8:	0038      	movs	r0, r7
 80039ca:	f7ff ff57 	bl	800387c <__sfmoreglue>
 80039ce:	1e04      	subs	r4, r0, #0
 80039d0:	6030      	str	r0, [r6, #0]
 80039d2:	d1d5      	bne.n	8003980 <__sfp+0x28>
 80039d4:	f7ff ff70 	bl	80038b8 <__sfp_lock_release>
 80039d8:	230c      	movs	r3, #12
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	e7ef      	b.n	80039be <__sfp+0x66>
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	08004710 	.word	0x08004710
 80039e4:	ffff0001 	.word	0xffff0001

080039e8 <_fwalk_reent>:
 80039e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039ea:	0004      	movs	r4, r0
 80039ec:	0006      	movs	r6, r0
 80039ee:	2700      	movs	r7, #0
 80039f0:	9101      	str	r1, [sp, #4]
 80039f2:	3448      	adds	r4, #72	; 0x48
 80039f4:	6863      	ldr	r3, [r4, #4]
 80039f6:	68a5      	ldr	r5, [r4, #8]
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	9b00      	ldr	r3, [sp, #0]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	d504      	bpl.n	8003a0c <_fwalk_reent+0x24>
 8003a02:	6824      	ldr	r4, [r4, #0]
 8003a04:	2c00      	cmp	r4, #0
 8003a06:	d1f5      	bne.n	80039f4 <_fwalk_reent+0xc>
 8003a08:	0038      	movs	r0, r7
 8003a0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a0c:	89ab      	ldrh	r3, [r5, #12]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d908      	bls.n	8003a24 <_fwalk_reent+0x3c>
 8003a12:	220e      	movs	r2, #14
 8003a14:	5eab      	ldrsh	r3, [r5, r2]
 8003a16:	3301      	adds	r3, #1
 8003a18:	d004      	beq.n	8003a24 <_fwalk_reent+0x3c>
 8003a1a:	0029      	movs	r1, r5
 8003a1c:	0030      	movs	r0, r6
 8003a1e:	9b01      	ldr	r3, [sp, #4]
 8003a20:	4798      	blx	r3
 8003a22:	4307      	orrs	r7, r0
 8003a24:	3568      	adds	r5, #104	; 0x68
 8003a26:	e7e8      	b.n	80039fa <_fwalk_reent+0x12>

08003a28 <__retarget_lock_init_recursive>:
 8003a28:	4770      	bx	lr

08003a2a <__retarget_lock_acquire_recursive>:
 8003a2a:	4770      	bx	lr

08003a2c <__retarget_lock_release_recursive>:
 8003a2c:	4770      	bx	lr
	...

08003a30 <__swhatbuf_r>:
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	000e      	movs	r6, r1
 8003a34:	001d      	movs	r5, r3
 8003a36:	230e      	movs	r3, #14
 8003a38:	5ec9      	ldrsh	r1, [r1, r3]
 8003a3a:	0014      	movs	r4, r2
 8003a3c:	b096      	sub	sp, #88	; 0x58
 8003a3e:	2900      	cmp	r1, #0
 8003a40:	da08      	bge.n	8003a54 <__swhatbuf_r+0x24>
 8003a42:	220c      	movs	r2, #12
 8003a44:	5eb3      	ldrsh	r3, [r6, r2]
 8003a46:	2200      	movs	r2, #0
 8003a48:	602a      	str	r2, [r5, #0]
 8003a4a:	061b      	lsls	r3, r3, #24
 8003a4c:	d411      	bmi.n	8003a72 <__swhatbuf_r+0x42>
 8003a4e:	2380      	movs	r3, #128	; 0x80
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	e00f      	b.n	8003a74 <__swhatbuf_r+0x44>
 8003a54:	466a      	mov	r2, sp
 8003a56:	f000 fca1 	bl	800439c <_fstat_r>
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	dbf1      	blt.n	8003a42 <__swhatbuf_r+0x12>
 8003a5e:	23f0      	movs	r3, #240	; 0xf0
 8003a60:	9901      	ldr	r1, [sp, #4]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	4019      	ands	r1, r3
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <__swhatbuf_r+0x4c>)
 8003a68:	18c9      	adds	r1, r1, r3
 8003a6a:	424b      	negs	r3, r1
 8003a6c:	4159      	adcs	r1, r3
 8003a6e:	6029      	str	r1, [r5, #0]
 8003a70:	e7ed      	b.n	8003a4e <__swhatbuf_r+0x1e>
 8003a72:	2340      	movs	r3, #64	; 0x40
 8003a74:	2000      	movs	r0, #0
 8003a76:	6023      	str	r3, [r4, #0]
 8003a78:	b016      	add	sp, #88	; 0x58
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}
 8003a7c:	ffffe000 	.word	0xffffe000

08003a80 <__smakebuf_r>:
 8003a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a82:	2602      	movs	r6, #2
 8003a84:	898b      	ldrh	r3, [r1, #12]
 8003a86:	0005      	movs	r5, r0
 8003a88:	000c      	movs	r4, r1
 8003a8a:	4233      	tst	r3, r6
 8003a8c:	d006      	beq.n	8003a9c <__smakebuf_r+0x1c>
 8003a8e:	0023      	movs	r3, r4
 8003a90:	3347      	adds	r3, #71	; 0x47
 8003a92:	6023      	str	r3, [r4, #0]
 8003a94:	6123      	str	r3, [r4, #16]
 8003a96:	2301      	movs	r3, #1
 8003a98:	6163      	str	r3, [r4, #20]
 8003a9a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003a9c:	466a      	mov	r2, sp
 8003a9e:	ab01      	add	r3, sp, #4
 8003aa0:	f7ff ffc6 	bl	8003a30 <__swhatbuf_r>
 8003aa4:	9900      	ldr	r1, [sp, #0]
 8003aa6:	0007      	movs	r7, r0
 8003aa8:	0028      	movs	r0, r5
 8003aaa:	f000 f899 	bl	8003be0 <_malloc_r>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d108      	bne.n	8003ac4 <__smakebuf_r+0x44>
 8003ab2:	220c      	movs	r2, #12
 8003ab4:	5ea3      	ldrsh	r3, [r4, r2]
 8003ab6:	059a      	lsls	r2, r3, #22
 8003ab8:	d4ef      	bmi.n	8003a9a <__smakebuf_r+0x1a>
 8003aba:	2203      	movs	r2, #3
 8003abc:	4393      	bics	r3, r2
 8003abe:	431e      	orrs	r6, r3
 8003ac0:	81a6      	strh	r6, [r4, #12]
 8003ac2:	e7e4      	b.n	8003a8e <__smakebuf_r+0xe>
 8003ac4:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <__smakebuf_r+0x84>)
 8003ac6:	62ab      	str	r3, [r5, #40]	; 0x28
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	89a2      	ldrh	r2, [r4, #12]
 8003acc:	6020      	str	r0, [r4, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	81a3      	strh	r3, [r4, #12]
 8003ad2:	9b00      	ldr	r3, [sp, #0]
 8003ad4:	6120      	str	r0, [r4, #16]
 8003ad6:	6163      	str	r3, [r4, #20]
 8003ad8:	9b01      	ldr	r3, [sp, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00d      	beq.n	8003afa <__smakebuf_r+0x7a>
 8003ade:	0028      	movs	r0, r5
 8003ae0:	230e      	movs	r3, #14
 8003ae2:	5ee1      	ldrsh	r1, [r4, r3]
 8003ae4:	f000 fc6c 	bl	80043c0 <_isatty_r>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	d006      	beq.n	8003afa <__smakebuf_r+0x7a>
 8003aec:	2203      	movs	r2, #3
 8003aee:	89a3      	ldrh	r3, [r4, #12]
 8003af0:	4393      	bics	r3, r2
 8003af2:	001a      	movs	r2, r3
 8003af4:	2301      	movs	r3, #1
 8003af6:	4313      	orrs	r3, r2
 8003af8:	81a3      	strh	r3, [r4, #12]
 8003afa:	89a0      	ldrh	r0, [r4, #12]
 8003afc:	4307      	orrs	r7, r0
 8003afe:	81a7      	strh	r7, [r4, #12]
 8003b00:	e7cb      	b.n	8003a9a <__smakebuf_r+0x1a>
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	0800386d 	.word	0x0800386d

08003b08 <_free_r>:
 8003b08:	b570      	push	{r4, r5, r6, lr}
 8003b0a:	0005      	movs	r5, r0
 8003b0c:	2900      	cmp	r1, #0
 8003b0e:	d010      	beq.n	8003b32 <_free_r+0x2a>
 8003b10:	1f0c      	subs	r4, r1, #4
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	da00      	bge.n	8003b1a <_free_r+0x12>
 8003b18:	18e4      	adds	r4, r4, r3
 8003b1a:	0028      	movs	r0, r5
 8003b1c:	f000 fc82 	bl	8004424 <__malloc_lock>
 8003b20:	4a1d      	ldr	r2, [pc, #116]	; (8003b98 <_free_r+0x90>)
 8003b22:	6813      	ldr	r3, [r2, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d105      	bne.n	8003b34 <_free_r+0x2c>
 8003b28:	6063      	str	r3, [r4, #4]
 8003b2a:	6014      	str	r4, [r2, #0]
 8003b2c:	0028      	movs	r0, r5
 8003b2e:	f000 fc81 	bl	8004434 <__malloc_unlock>
 8003b32:	bd70      	pop	{r4, r5, r6, pc}
 8003b34:	42a3      	cmp	r3, r4
 8003b36:	d908      	bls.n	8003b4a <_free_r+0x42>
 8003b38:	6821      	ldr	r1, [r4, #0]
 8003b3a:	1860      	adds	r0, r4, r1
 8003b3c:	4283      	cmp	r3, r0
 8003b3e:	d1f3      	bne.n	8003b28 <_free_r+0x20>
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	1841      	adds	r1, r0, r1
 8003b46:	6021      	str	r1, [r4, #0]
 8003b48:	e7ee      	b.n	8003b28 <_free_r+0x20>
 8003b4a:	001a      	movs	r2, r3
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <_free_r+0x4e>
 8003b52:	42a3      	cmp	r3, r4
 8003b54:	d9f9      	bls.n	8003b4a <_free_r+0x42>
 8003b56:	6811      	ldr	r1, [r2, #0]
 8003b58:	1850      	adds	r0, r2, r1
 8003b5a:	42a0      	cmp	r0, r4
 8003b5c:	d10b      	bne.n	8003b76 <_free_r+0x6e>
 8003b5e:	6820      	ldr	r0, [r4, #0]
 8003b60:	1809      	adds	r1, r1, r0
 8003b62:	1850      	adds	r0, r2, r1
 8003b64:	6011      	str	r1, [r2, #0]
 8003b66:	4283      	cmp	r3, r0
 8003b68:	d1e0      	bne.n	8003b2c <_free_r+0x24>
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	1841      	adds	r1, r0, r1
 8003b70:	6011      	str	r1, [r2, #0]
 8003b72:	6053      	str	r3, [r2, #4]
 8003b74:	e7da      	b.n	8003b2c <_free_r+0x24>
 8003b76:	42a0      	cmp	r0, r4
 8003b78:	d902      	bls.n	8003b80 <_free_r+0x78>
 8003b7a:	230c      	movs	r3, #12
 8003b7c:	602b      	str	r3, [r5, #0]
 8003b7e:	e7d5      	b.n	8003b2c <_free_r+0x24>
 8003b80:	6821      	ldr	r1, [r4, #0]
 8003b82:	1860      	adds	r0, r4, r1
 8003b84:	4283      	cmp	r3, r0
 8003b86:	d103      	bne.n	8003b90 <_free_r+0x88>
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	1841      	adds	r1, r0, r1
 8003b8e:	6021      	str	r1, [r4, #0]
 8003b90:	6063      	str	r3, [r4, #4]
 8003b92:	6054      	str	r4, [r2, #4]
 8003b94:	e7ca      	b.n	8003b2c <_free_r+0x24>
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	20000130 	.word	0x20000130

08003b9c <sbrk_aligned>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	4e0f      	ldr	r6, [pc, #60]	; (8003bdc <sbrk_aligned+0x40>)
 8003ba0:	000d      	movs	r5, r1
 8003ba2:	6831      	ldr	r1, [r6, #0]
 8003ba4:	0004      	movs	r4, r0
 8003ba6:	2900      	cmp	r1, #0
 8003ba8:	d102      	bne.n	8003bb0 <sbrk_aligned+0x14>
 8003baa:	f000 fb73 	bl	8004294 <_sbrk_r>
 8003bae:	6030      	str	r0, [r6, #0]
 8003bb0:	0029      	movs	r1, r5
 8003bb2:	0020      	movs	r0, r4
 8003bb4:	f000 fb6e 	bl	8004294 <_sbrk_r>
 8003bb8:	1c43      	adds	r3, r0, #1
 8003bba:	d00a      	beq.n	8003bd2 <sbrk_aligned+0x36>
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	1cc5      	adds	r5, r0, #3
 8003bc0:	439d      	bics	r5, r3
 8003bc2:	42a8      	cmp	r0, r5
 8003bc4:	d007      	beq.n	8003bd6 <sbrk_aligned+0x3a>
 8003bc6:	1a29      	subs	r1, r5, r0
 8003bc8:	0020      	movs	r0, r4
 8003bca:	f000 fb63 	bl	8004294 <_sbrk_r>
 8003bce:	1c43      	adds	r3, r0, #1
 8003bd0:	d101      	bne.n	8003bd6 <sbrk_aligned+0x3a>
 8003bd2:	2501      	movs	r5, #1
 8003bd4:	426d      	negs	r5, r5
 8003bd6:	0028      	movs	r0, r5
 8003bd8:	bd70      	pop	{r4, r5, r6, pc}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	20000134 	.word	0x20000134

08003be0 <_malloc_r>:
 8003be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003be2:	2203      	movs	r2, #3
 8003be4:	1ccb      	adds	r3, r1, #3
 8003be6:	4393      	bics	r3, r2
 8003be8:	3308      	adds	r3, #8
 8003bea:	0006      	movs	r6, r0
 8003bec:	001f      	movs	r7, r3
 8003bee:	2b0c      	cmp	r3, #12
 8003bf0:	d232      	bcs.n	8003c58 <_malloc_r+0x78>
 8003bf2:	270c      	movs	r7, #12
 8003bf4:	42b9      	cmp	r1, r7
 8003bf6:	d831      	bhi.n	8003c5c <_malloc_r+0x7c>
 8003bf8:	0030      	movs	r0, r6
 8003bfa:	f000 fc13 	bl	8004424 <__malloc_lock>
 8003bfe:	4d32      	ldr	r5, [pc, #200]	; (8003cc8 <_malloc_r+0xe8>)
 8003c00:	682b      	ldr	r3, [r5, #0]
 8003c02:	001c      	movs	r4, r3
 8003c04:	2c00      	cmp	r4, #0
 8003c06:	d12e      	bne.n	8003c66 <_malloc_r+0x86>
 8003c08:	0039      	movs	r1, r7
 8003c0a:	0030      	movs	r0, r6
 8003c0c:	f7ff ffc6 	bl	8003b9c <sbrk_aligned>
 8003c10:	0004      	movs	r4, r0
 8003c12:	1c43      	adds	r3, r0, #1
 8003c14:	d11e      	bne.n	8003c54 <_malloc_r+0x74>
 8003c16:	682c      	ldr	r4, [r5, #0]
 8003c18:	0025      	movs	r5, r4
 8003c1a:	2d00      	cmp	r5, #0
 8003c1c:	d14a      	bne.n	8003cb4 <_malloc_r+0xd4>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	0029      	movs	r1, r5
 8003c22:	18e3      	adds	r3, r4, r3
 8003c24:	0030      	movs	r0, r6
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	f000 fb34 	bl	8004294 <_sbrk_r>
 8003c2c:	9b01      	ldr	r3, [sp, #4]
 8003c2e:	4283      	cmp	r3, r0
 8003c30:	d143      	bne.n	8003cba <_malloc_r+0xda>
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	3703      	adds	r7, #3
 8003c36:	1aff      	subs	r7, r7, r3
 8003c38:	2303      	movs	r3, #3
 8003c3a:	439f      	bics	r7, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	2f0c      	cmp	r7, #12
 8003c40:	d200      	bcs.n	8003c44 <_malloc_r+0x64>
 8003c42:	270c      	movs	r7, #12
 8003c44:	0039      	movs	r1, r7
 8003c46:	0030      	movs	r0, r6
 8003c48:	f7ff ffa8 	bl	8003b9c <sbrk_aligned>
 8003c4c:	1c43      	adds	r3, r0, #1
 8003c4e:	d034      	beq.n	8003cba <_malloc_r+0xda>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	19df      	adds	r7, r3, r7
 8003c54:	6027      	str	r7, [r4, #0]
 8003c56:	e013      	b.n	8003c80 <_malloc_r+0xa0>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	dacb      	bge.n	8003bf4 <_malloc_r+0x14>
 8003c5c:	230c      	movs	r3, #12
 8003c5e:	2500      	movs	r5, #0
 8003c60:	6033      	str	r3, [r6, #0]
 8003c62:	0028      	movs	r0, r5
 8003c64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c66:	6822      	ldr	r2, [r4, #0]
 8003c68:	1bd1      	subs	r1, r2, r7
 8003c6a:	d420      	bmi.n	8003cae <_malloc_r+0xce>
 8003c6c:	290b      	cmp	r1, #11
 8003c6e:	d917      	bls.n	8003ca0 <_malloc_r+0xc0>
 8003c70:	19e2      	adds	r2, r4, r7
 8003c72:	6027      	str	r7, [r4, #0]
 8003c74:	42a3      	cmp	r3, r4
 8003c76:	d111      	bne.n	8003c9c <_malloc_r+0xbc>
 8003c78:	602a      	str	r2, [r5, #0]
 8003c7a:	6863      	ldr	r3, [r4, #4]
 8003c7c:	6011      	str	r1, [r2, #0]
 8003c7e:	6053      	str	r3, [r2, #4]
 8003c80:	0030      	movs	r0, r6
 8003c82:	0025      	movs	r5, r4
 8003c84:	f000 fbd6 	bl	8004434 <__malloc_unlock>
 8003c88:	2207      	movs	r2, #7
 8003c8a:	350b      	adds	r5, #11
 8003c8c:	1d23      	adds	r3, r4, #4
 8003c8e:	4395      	bics	r5, r2
 8003c90:	1aea      	subs	r2, r5, r3
 8003c92:	429d      	cmp	r5, r3
 8003c94:	d0e5      	beq.n	8003c62 <_malloc_r+0x82>
 8003c96:	1b5b      	subs	r3, r3, r5
 8003c98:	50a3      	str	r3, [r4, r2]
 8003c9a:	e7e2      	b.n	8003c62 <_malloc_r+0x82>
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	e7ec      	b.n	8003c7a <_malloc_r+0x9a>
 8003ca0:	6862      	ldr	r2, [r4, #4]
 8003ca2:	42a3      	cmp	r3, r4
 8003ca4:	d101      	bne.n	8003caa <_malloc_r+0xca>
 8003ca6:	602a      	str	r2, [r5, #0]
 8003ca8:	e7ea      	b.n	8003c80 <_malloc_r+0xa0>
 8003caa:	605a      	str	r2, [r3, #4]
 8003cac:	e7e8      	b.n	8003c80 <_malloc_r+0xa0>
 8003cae:	0023      	movs	r3, r4
 8003cb0:	6864      	ldr	r4, [r4, #4]
 8003cb2:	e7a7      	b.n	8003c04 <_malloc_r+0x24>
 8003cb4:	002c      	movs	r4, r5
 8003cb6:	686d      	ldr	r5, [r5, #4]
 8003cb8:	e7af      	b.n	8003c1a <_malloc_r+0x3a>
 8003cba:	230c      	movs	r3, #12
 8003cbc:	0030      	movs	r0, r6
 8003cbe:	6033      	str	r3, [r6, #0]
 8003cc0:	f000 fbb8 	bl	8004434 <__malloc_unlock>
 8003cc4:	e7cd      	b.n	8003c62 <_malloc_r+0x82>
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	20000130 	.word	0x20000130

08003ccc <__sfputc_r>:
 8003ccc:	6893      	ldr	r3, [r2, #8]
 8003cce:	b510      	push	{r4, lr}
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	6093      	str	r3, [r2, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	da04      	bge.n	8003ce2 <__sfputc_r+0x16>
 8003cd8:	6994      	ldr	r4, [r2, #24]
 8003cda:	42a3      	cmp	r3, r4
 8003cdc:	db07      	blt.n	8003cee <__sfputc_r+0x22>
 8003cde:	290a      	cmp	r1, #10
 8003ce0:	d005      	beq.n	8003cee <__sfputc_r+0x22>
 8003ce2:	6813      	ldr	r3, [r2, #0]
 8003ce4:	1c58      	adds	r0, r3, #1
 8003ce6:	6010      	str	r0, [r2, #0]
 8003ce8:	7019      	strb	r1, [r3, #0]
 8003cea:	0008      	movs	r0, r1
 8003cec:	bd10      	pop	{r4, pc}
 8003cee:	f7ff fbff 	bl	80034f0 <__swbuf_r>
 8003cf2:	0001      	movs	r1, r0
 8003cf4:	e7f9      	b.n	8003cea <__sfputc_r+0x1e>

08003cf6 <__sfputs_r>:
 8003cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf8:	0006      	movs	r6, r0
 8003cfa:	000f      	movs	r7, r1
 8003cfc:	0014      	movs	r4, r2
 8003cfe:	18d5      	adds	r5, r2, r3
 8003d00:	42ac      	cmp	r4, r5
 8003d02:	d101      	bne.n	8003d08 <__sfputs_r+0x12>
 8003d04:	2000      	movs	r0, #0
 8003d06:	e007      	b.n	8003d18 <__sfputs_r+0x22>
 8003d08:	7821      	ldrb	r1, [r4, #0]
 8003d0a:	003a      	movs	r2, r7
 8003d0c:	0030      	movs	r0, r6
 8003d0e:	f7ff ffdd 	bl	8003ccc <__sfputc_r>
 8003d12:	3401      	adds	r4, #1
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	d1f3      	bne.n	8003d00 <__sfputs_r+0xa>
 8003d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d1c <_vfiprintf_r>:
 8003d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d1e:	b0a1      	sub	sp, #132	; 0x84
 8003d20:	0006      	movs	r6, r0
 8003d22:	000c      	movs	r4, r1
 8003d24:	001f      	movs	r7, r3
 8003d26:	9203      	str	r2, [sp, #12]
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	d004      	beq.n	8003d36 <_vfiprintf_r+0x1a>
 8003d2c:	6983      	ldr	r3, [r0, #24]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <_vfiprintf_r+0x1a>
 8003d32:	f7ff fdd9 	bl	80038e8 <__sinit>
 8003d36:	4b8e      	ldr	r3, [pc, #568]	; (8003f70 <_vfiprintf_r+0x254>)
 8003d38:	429c      	cmp	r4, r3
 8003d3a:	d11c      	bne.n	8003d76 <_vfiprintf_r+0x5a>
 8003d3c:	6874      	ldr	r4, [r6, #4]
 8003d3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d40:	07db      	lsls	r3, r3, #31
 8003d42:	d405      	bmi.n	8003d50 <_vfiprintf_r+0x34>
 8003d44:	89a3      	ldrh	r3, [r4, #12]
 8003d46:	059b      	lsls	r3, r3, #22
 8003d48:	d402      	bmi.n	8003d50 <_vfiprintf_r+0x34>
 8003d4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d4c:	f7ff fe6d 	bl	8003a2a <__retarget_lock_acquire_recursive>
 8003d50:	89a3      	ldrh	r3, [r4, #12]
 8003d52:	071b      	lsls	r3, r3, #28
 8003d54:	d502      	bpl.n	8003d5c <_vfiprintf_r+0x40>
 8003d56:	6923      	ldr	r3, [r4, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d11d      	bne.n	8003d98 <_vfiprintf_r+0x7c>
 8003d5c:	0021      	movs	r1, r4
 8003d5e:	0030      	movs	r0, r6
 8003d60:	f7ff fc1c 	bl	800359c <__swsetup_r>
 8003d64:	2800      	cmp	r0, #0
 8003d66:	d017      	beq.n	8003d98 <_vfiprintf_r+0x7c>
 8003d68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d6a:	07db      	lsls	r3, r3, #31
 8003d6c:	d50d      	bpl.n	8003d8a <_vfiprintf_r+0x6e>
 8003d6e:	2001      	movs	r0, #1
 8003d70:	4240      	negs	r0, r0
 8003d72:	b021      	add	sp, #132	; 0x84
 8003d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d76:	4b7f      	ldr	r3, [pc, #508]	; (8003f74 <_vfiprintf_r+0x258>)
 8003d78:	429c      	cmp	r4, r3
 8003d7a:	d101      	bne.n	8003d80 <_vfiprintf_r+0x64>
 8003d7c:	68b4      	ldr	r4, [r6, #8]
 8003d7e:	e7de      	b.n	8003d3e <_vfiprintf_r+0x22>
 8003d80:	4b7d      	ldr	r3, [pc, #500]	; (8003f78 <_vfiprintf_r+0x25c>)
 8003d82:	429c      	cmp	r4, r3
 8003d84:	d1db      	bne.n	8003d3e <_vfiprintf_r+0x22>
 8003d86:	68f4      	ldr	r4, [r6, #12]
 8003d88:	e7d9      	b.n	8003d3e <_vfiprintf_r+0x22>
 8003d8a:	89a3      	ldrh	r3, [r4, #12]
 8003d8c:	059b      	lsls	r3, r3, #22
 8003d8e:	d4ee      	bmi.n	8003d6e <_vfiprintf_r+0x52>
 8003d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d92:	f7ff fe4b 	bl	8003a2c <__retarget_lock_release_recursive>
 8003d96:	e7ea      	b.n	8003d6e <_vfiprintf_r+0x52>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	ad08      	add	r5, sp, #32
 8003d9c:	616b      	str	r3, [r5, #20]
 8003d9e:	3320      	adds	r3, #32
 8003da0:	766b      	strb	r3, [r5, #25]
 8003da2:	3310      	adds	r3, #16
 8003da4:	76ab      	strb	r3, [r5, #26]
 8003da6:	9707      	str	r7, [sp, #28]
 8003da8:	9f03      	ldr	r7, [sp, #12]
 8003daa:	783b      	ldrb	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <_vfiprintf_r+0x98>
 8003db0:	2b25      	cmp	r3, #37	; 0x25
 8003db2:	d14e      	bne.n	8003e52 <_vfiprintf_r+0x136>
 8003db4:	9b03      	ldr	r3, [sp, #12]
 8003db6:	1afb      	subs	r3, r7, r3
 8003db8:	9305      	str	r3, [sp, #20]
 8003dba:	9b03      	ldr	r3, [sp, #12]
 8003dbc:	429f      	cmp	r7, r3
 8003dbe:	d00d      	beq.n	8003ddc <_vfiprintf_r+0xc0>
 8003dc0:	9b05      	ldr	r3, [sp, #20]
 8003dc2:	0021      	movs	r1, r4
 8003dc4:	0030      	movs	r0, r6
 8003dc6:	9a03      	ldr	r2, [sp, #12]
 8003dc8:	f7ff ff95 	bl	8003cf6 <__sfputs_r>
 8003dcc:	1c43      	adds	r3, r0, #1
 8003dce:	d100      	bne.n	8003dd2 <_vfiprintf_r+0xb6>
 8003dd0:	e0b5      	b.n	8003f3e <_vfiprintf_r+0x222>
 8003dd2:	696a      	ldr	r2, [r5, #20]
 8003dd4:	9b05      	ldr	r3, [sp, #20]
 8003dd6:	4694      	mov	ip, r2
 8003dd8:	4463      	add	r3, ip
 8003dda:	616b      	str	r3, [r5, #20]
 8003ddc:	783b      	ldrb	r3, [r7, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d100      	bne.n	8003de4 <_vfiprintf_r+0xc8>
 8003de2:	e0ac      	b.n	8003f3e <_vfiprintf_r+0x222>
 8003de4:	2201      	movs	r2, #1
 8003de6:	1c7b      	adds	r3, r7, #1
 8003de8:	9303      	str	r3, [sp, #12]
 8003dea:	2300      	movs	r3, #0
 8003dec:	4252      	negs	r2, r2
 8003dee:	606a      	str	r2, [r5, #4]
 8003df0:	a904      	add	r1, sp, #16
 8003df2:	3254      	adds	r2, #84	; 0x54
 8003df4:	1852      	adds	r2, r2, r1
 8003df6:	602b      	str	r3, [r5, #0]
 8003df8:	60eb      	str	r3, [r5, #12]
 8003dfa:	60ab      	str	r3, [r5, #8]
 8003dfc:	7013      	strb	r3, [r2, #0]
 8003dfe:	65ab      	str	r3, [r5, #88]	; 0x58
 8003e00:	9b03      	ldr	r3, [sp, #12]
 8003e02:	2205      	movs	r2, #5
 8003e04:	7819      	ldrb	r1, [r3, #0]
 8003e06:	485d      	ldr	r0, [pc, #372]	; (8003f7c <_vfiprintf_r+0x260>)
 8003e08:	f000 fb00 	bl	800440c <memchr>
 8003e0c:	9b03      	ldr	r3, [sp, #12]
 8003e0e:	1c5f      	adds	r7, r3, #1
 8003e10:	2800      	cmp	r0, #0
 8003e12:	d120      	bne.n	8003e56 <_vfiprintf_r+0x13a>
 8003e14:	682a      	ldr	r2, [r5, #0]
 8003e16:	06d3      	lsls	r3, r2, #27
 8003e18:	d504      	bpl.n	8003e24 <_vfiprintf_r+0x108>
 8003e1a:	2353      	movs	r3, #83	; 0x53
 8003e1c:	a904      	add	r1, sp, #16
 8003e1e:	185b      	adds	r3, r3, r1
 8003e20:	2120      	movs	r1, #32
 8003e22:	7019      	strb	r1, [r3, #0]
 8003e24:	0713      	lsls	r3, r2, #28
 8003e26:	d504      	bpl.n	8003e32 <_vfiprintf_r+0x116>
 8003e28:	2353      	movs	r3, #83	; 0x53
 8003e2a:	a904      	add	r1, sp, #16
 8003e2c:	185b      	adds	r3, r3, r1
 8003e2e:	212b      	movs	r1, #43	; 0x2b
 8003e30:	7019      	strb	r1, [r3, #0]
 8003e32:	9b03      	ldr	r3, [sp, #12]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b2a      	cmp	r3, #42	; 0x2a
 8003e38:	d016      	beq.n	8003e68 <_vfiprintf_r+0x14c>
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	68eb      	ldr	r3, [r5, #12]
 8003e3e:	9f03      	ldr	r7, [sp, #12]
 8003e40:	783a      	ldrb	r2, [r7, #0]
 8003e42:	1c78      	adds	r0, r7, #1
 8003e44:	3a30      	subs	r2, #48	; 0x30
 8003e46:	4684      	mov	ip, r0
 8003e48:	2a09      	cmp	r2, #9
 8003e4a:	d94f      	bls.n	8003eec <_vfiprintf_r+0x1d0>
 8003e4c:	2900      	cmp	r1, #0
 8003e4e:	d111      	bne.n	8003e74 <_vfiprintf_r+0x158>
 8003e50:	e017      	b.n	8003e82 <_vfiprintf_r+0x166>
 8003e52:	3701      	adds	r7, #1
 8003e54:	e7a9      	b.n	8003daa <_vfiprintf_r+0x8e>
 8003e56:	4b49      	ldr	r3, [pc, #292]	; (8003f7c <_vfiprintf_r+0x260>)
 8003e58:	682a      	ldr	r2, [r5, #0]
 8003e5a:	1ac0      	subs	r0, r0, r3
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	4083      	lsls	r3, r0
 8003e60:	4313      	orrs	r3, r2
 8003e62:	602b      	str	r3, [r5, #0]
 8003e64:	9703      	str	r7, [sp, #12]
 8003e66:	e7cb      	b.n	8003e00 <_vfiprintf_r+0xe4>
 8003e68:	9b07      	ldr	r3, [sp, #28]
 8003e6a:	1d19      	adds	r1, r3, #4
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	9107      	str	r1, [sp, #28]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	db01      	blt.n	8003e78 <_vfiprintf_r+0x15c>
 8003e74:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e76:	e004      	b.n	8003e82 <_vfiprintf_r+0x166>
 8003e78:	425b      	negs	r3, r3
 8003e7a:	60eb      	str	r3, [r5, #12]
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	602b      	str	r3, [r5, #0]
 8003e82:	783b      	ldrb	r3, [r7, #0]
 8003e84:	2b2e      	cmp	r3, #46	; 0x2e
 8003e86:	d10a      	bne.n	8003e9e <_vfiprintf_r+0x182>
 8003e88:	787b      	ldrb	r3, [r7, #1]
 8003e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e8c:	d137      	bne.n	8003efe <_vfiprintf_r+0x1e2>
 8003e8e:	9b07      	ldr	r3, [sp, #28]
 8003e90:	3702      	adds	r7, #2
 8003e92:	1d1a      	adds	r2, r3, #4
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	9207      	str	r2, [sp, #28]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	db2d      	blt.n	8003ef8 <_vfiprintf_r+0x1dc>
 8003e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	7839      	ldrb	r1, [r7, #0]
 8003ea2:	4837      	ldr	r0, [pc, #220]	; (8003f80 <_vfiprintf_r+0x264>)
 8003ea4:	f000 fab2 	bl	800440c <memchr>
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	d007      	beq.n	8003ebc <_vfiprintf_r+0x1a0>
 8003eac:	4b34      	ldr	r3, [pc, #208]	; (8003f80 <_vfiprintf_r+0x264>)
 8003eae:	682a      	ldr	r2, [r5, #0]
 8003eb0:	1ac0      	subs	r0, r0, r3
 8003eb2:	2340      	movs	r3, #64	; 0x40
 8003eb4:	4083      	lsls	r3, r0
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	3701      	adds	r7, #1
 8003eba:	602b      	str	r3, [r5, #0]
 8003ebc:	7839      	ldrb	r1, [r7, #0]
 8003ebe:	1c7b      	adds	r3, r7, #1
 8003ec0:	2206      	movs	r2, #6
 8003ec2:	4830      	ldr	r0, [pc, #192]	; (8003f84 <_vfiprintf_r+0x268>)
 8003ec4:	9303      	str	r3, [sp, #12]
 8003ec6:	7629      	strb	r1, [r5, #24]
 8003ec8:	f000 faa0 	bl	800440c <memchr>
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d045      	beq.n	8003f5c <_vfiprintf_r+0x240>
 8003ed0:	4b2d      	ldr	r3, [pc, #180]	; (8003f88 <_vfiprintf_r+0x26c>)
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d127      	bne.n	8003f26 <_vfiprintf_r+0x20a>
 8003ed6:	2207      	movs	r2, #7
 8003ed8:	9b07      	ldr	r3, [sp, #28]
 8003eda:	3307      	adds	r3, #7
 8003edc:	4393      	bics	r3, r2
 8003ede:	3308      	adds	r3, #8
 8003ee0:	9307      	str	r3, [sp, #28]
 8003ee2:	696b      	ldr	r3, [r5, #20]
 8003ee4:	9a04      	ldr	r2, [sp, #16]
 8003ee6:	189b      	adds	r3, r3, r2
 8003ee8:	616b      	str	r3, [r5, #20]
 8003eea:	e75d      	b.n	8003da8 <_vfiprintf_r+0x8c>
 8003eec:	210a      	movs	r1, #10
 8003eee:	434b      	muls	r3, r1
 8003ef0:	4667      	mov	r7, ip
 8003ef2:	189b      	adds	r3, r3, r2
 8003ef4:	3909      	subs	r1, #9
 8003ef6:	e7a3      	b.n	8003e40 <_vfiprintf_r+0x124>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	425b      	negs	r3, r3
 8003efc:	e7ce      	b.n	8003e9c <_vfiprintf_r+0x180>
 8003efe:	2300      	movs	r3, #0
 8003f00:	001a      	movs	r2, r3
 8003f02:	3701      	adds	r7, #1
 8003f04:	606b      	str	r3, [r5, #4]
 8003f06:	7839      	ldrb	r1, [r7, #0]
 8003f08:	1c78      	adds	r0, r7, #1
 8003f0a:	3930      	subs	r1, #48	; 0x30
 8003f0c:	4684      	mov	ip, r0
 8003f0e:	2909      	cmp	r1, #9
 8003f10:	d903      	bls.n	8003f1a <_vfiprintf_r+0x1fe>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0c3      	beq.n	8003e9e <_vfiprintf_r+0x182>
 8003f16:	9209      	str	r2, [sp, #36]	; 0x24
 8003f18:	e7c1      	b.n	8003e9e <_vfiprintf_r+0x182>
 8003f1a:	230a      	movs	r3, #10
 8003f1c:	435a      	muls	r2, r3
 8003f1e:	4667      	mov	r7, ip
 8003f20:	1852      	adds	r2, r2, r1
 8003f22:	3b09      	subs	r3, #9
 8003f24:	e7ef      	b.n	8003f06 <_vfiprintf_r+0x1ea>
 8003f26:	ab07      	add	r3, sp, #28
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	0022      	movs	r2, r4
 8003f2c:	0029      	movs	r1, r5
 8003f2e:	0030      	movs	r0, r6
 8003f30:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <_vfiprintf_r+0x270>)
 8003f32:	e000      	b.n	8003f36 <_vfiprintf_r+0x21a>
 8003f34:	bf00      	nop
 8003f36:	9004      	str	r0, [sp, #16]
 8003f38:	9b04      	ldr	r3, [sp, #16]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	d1d1      	bne.n	8003ee2 <_vfiprintf_r+0x1c6>
 8003f3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f40:	07db      	lsls	r3, r3, #31
 8003f42:	d405      	bmi.n	8003f50 <_vfiprintf_r+0x234>
 8003f44:	89a3      	ldrh	r3, [r4, #12]
 8003f46:	059b      	lsls	r3, r3, #22
 8003f48:	d402      	bmi.n	8003f50 <_vfiprintf_r+0x234>
 8003f4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f4c:	f7ff fd6e 	bl	8003a2c <__retarget_lock_release_recursive>
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	065b      	lsls	r3, r3, #25
 8003f54:	d500      	bpl.n	8003f58 <_vfiprintf_r+0x23c>
 8003f56:	e70a      	b.n	8003d6e <_vfiprintf_r+0x52>
 8003f58:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003f5a:	e70a      	b.n	8003d72 <_vfiprintf_r+0x56>
 8003f5c:	ab07      	add	r3, sp, #28
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	0022      	movs	r2, r4
 8003f62:	0029      	movs	r1, r5
 8003f64:	0030      	movs	r0, r6
 8003f66:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <_vfiprintf_r+0x270>)
 8003f68:	f000 f882 	bl	8004070 <_printf_i>
 8003f6c:	e7e3      	b.n	8003f36 <_vfiprintf_r+0x21a>
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	08004734 	.word	0x08004734
 8003f74:	08004754 	.word	0x08004754
 8003f78:	08004714 	.word	0x08004714
 8003f7c:	08004774 	.word	0x08004774
 8003f80:	0800477a 	.word	0x0800477a
 8003f84:	0800477e 	.word	0x0800477e
 8003f88:	00000000 	.word	0x00000000
 8003f8c:	08003cf7 	.word	0x08003cf7

08003f90 <_printf_common>:
 8003f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f92:	0015      	movs	r5, r2
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	688a      	ldr	r2, [r1, #8]
 8003f98:	690b      	ldr	r3, [r1, #16]
 8003f9a:	000c      	movs	r4, r1
 8003f9c:	9000      	str	r0, [sp, #0]
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	da00      	bge.n	8003fa4 <_printf_common+0x14>
 8003fa2:	0013      	movs	r3, r2
 8003fa4:	0022      	movs	r2, r4
 8003fa6:	602b      	str	r3, [r5, #0]
 8003fa8:	3243      	adds	r2, #67	; 0x43
 8003faa:	7812      	ldrb	r2, [r2, #0]
 8003fac:	2a00      	cmp	r2, #0
 8003fae:	d001      	beq.n	8003fb4 <_printf_common+0x24>
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	602b      	str	r3, [r5, #0]
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	069b      	lsls	r3, r3, #26
 8003fb8:	d502      	bpl.n	8003fc0 <_printf_common+0x30>
 8003fba:	682b      	ldr	r3, [r5, #0]
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	602b      	str	r3, [r5, #0]
 8003fc0:	6822      	ldr	r2, [r4, #0]
 8003fc2:	2306      	movs	r3, #6
 8003fc4:	0017      	movs	r7, r2
 8003fc6:	401f      	ands	r7, r3
 8003fc8:	421a      	tst	r2, r3
 8003fca:	d027      	beq.n	800401c <_printf_common+0x8c>
 8003fcc:	0023      	movs	r3, r4
 8003fce:	3343      	adds	r3, #67	; 0x43
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	1e5a      	subs	r2, r3, #1
 8003fd4:	4193      	sbcs	r3, r2
 8003fd6:	6822      	ldr	r2, [r4, #0]
 8003fd8:	0692      	lsls	r2, r2, #26
 8003fda:	d430      	bmi.n	800403e <_printf_common+0xae>
 8003fdc:	0022      	movs	r2, r4
 8003fde:	9901      	ldr	r1, [sp, #4]
 8003fe0:	9800      	ldr	r0, [sp, #0]
 8003fe2:	9e08      	ldr	r6, [sp, #32]
 8003fe4:	3243      	adds	r2, #67	; 0x43
 8003fe6:	47b0      	blx	r6
 8003fe8:	1c43      	adds	r3, r0, #1
 8003fea:	d025      	beq.n	8004038 <_printf_common+0xa8>
 8003fec:	2306      	movs	r3, #6
 8003fee:	6820      	ldr	r0, [r4, #0]
 8003ff0:	682a      	ldr	r2, [r5, #0]
 8003ff2:	68e1      	ldr	r1, [r4, #12]
 8003ff4:	2500      	movs	r5, #0
 8003ff6:	4003      	ands	r3, r0
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d103      	bne.n	8004004 <_printf_common+0x74>
 8003ffc:	1a8d      	subs	r5, r1, r2
 8003ffe:	43eb      	mvns	r3, r5
 8004000:	17db      	asrs	r3, r3, #31
 8004002:	401d      	ands	r5, r3
 8004004:	68a3      	ldr	r3, [r4, #8]
 8004006:	6922      	ldr	r2, [r4, #16]
 8004008:	4293      	cmp	r3, r2
 800400a:	dd01      	ble.n	8004010 <_printf_common+0x80>
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	18ed      	adds	r5, r5, r3
 8004010:	2700      	movs	r7, #0
 8004012:	42bd      	cmp	r5, r7
 8004014:	d120      	bne.n	8004058 <_printf_common+0xc8>
 8004016:	2000      	movs	r0, #0
 8004018:	e010      	b.n	800403c <_printf_common+0xac>
 800401a:	3701      	adds	r7, #1
 800401c:	68e3      	ldr	r3, [r4, #12]
 800401e:	682a      	ldr	r2, [r5, #0]
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	42bb      	cmp	r3, r7
 8004024:	ddd2      	ble.n	8003fcc <_printf_common+0x3c>
 8004026:	0022      	movs	r2, r4
 8004028:	2301      	movs	r3, #1
 800402a:	9901      	ldr	r1, [sp, #4]
 800402c:	9800      	ldr	r0, [sp, #0]
 800402e:	9e08      	ldr	r6, [sp, #32]
 8004030:	3219      	adds	r2, #25
 8004032:	47b0      	blx	r6
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d1f0      	bne.n	800401a <_printf_common+0x8a>
 8004038:	2001      	movs	r0, #1
 800403a:	4240      	negs	r0, r0
 800403c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800403e:	2030      	movs	r0, #48	; 0x30
 8004040:	18e1      	adds	r1, r4, r3
 8004042:	3143      	adds	r1, #67	; 0x43
 8004044:	7008      	strb	r0, [r1, #0]
 8004046:	0021      	movs	r1, r4
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	3145      	adds	r1, #69	; 0x45
 800404c:	7809      	ldrb	r1, [r1, #0]
 800404e:	18a2      	adds	r2, r4, r2
 8004050:	3243      	adds	r2, #67	; 0x43
 8004052:	3302      	adds	r3, #2
 8004054:	7011      	strb	r1, [r2, #0]
 8004056:	e7c1      	b.n	8003fdc <_printf_common+0x4c>
 8004058:	0022      	movs	r2, r4
 800405a:	2301      	movs	r3, #1
 800405c:	9901      	ldr	r1, [sp, #4]
 800405e:	9800      	ldr	r0, [sp, #0]
 8004060:	9e08      	ldr	r6, [sp, #32]
 8004062:	321a      	adds	r2, #26
 8004064:	47b0      	blx	r6
 8004066:	1c43      	adds	r3, r0, #1
 8004068:	d0e6      	beq.n	8004038 <_printf_common+0xa8>
 800406a:	3701      	adds	r7, #1
 800406c:	e7d1      	b.n	8004012 <_printf_common+0x82>
	...

08004070 <_printf_i>:
 8004070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004072:	b08b      	sub	sp, #44	; 0x2c
 8004074:	9206      	str	r2, [sp, #24]
 8004076:	000a      	movs	r2, r1
 8004078:	3243      	adds	r2, #67	; 0x43
 800407a:	9307      	str	r3, [sp, #28]
 800407c:	9005      	str	r0, [sp, #20]
 800407e:	9204      	str	r2, [sp, #16]
 8004080:	7e0a      	ldrb	r2, [r1, #24]
 8004082:	000c      	movs	r4, r1
 8004084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004086:	2a78      	cmp	r2, #120	; 0x78
 8004088:	d807      	bhi.n	800409a <_printf_i+0x2a>
 800408a:	2a62      	cmp	r2, #98	; 0x62
 800408c:	d809      	bhi.n	80040a2 <_printf_i+0x32>
 800408e:	2a00      	cmp	r2, #0
 8004090:	d100      	bne.n	8004094 <_printf_i+0x24>
 8004092:	e0c1      	b.n	8004218 <_printf_i+0x1a8>
 8004094:	2a58      	cmp	r2, #88	; 0x58
 8004096:	d100      	bne.n	800409a <_printf_i+0x2a>
 8004098:	e08c      	b.n	80041b4 <_printf_i+0x144>
 800409a:	0026      	movs	r6, r4
 800409c:	3642      	adds	r6, #66	; 0x42
 800409e:	7032      	strb	r2, [r6, #0]
 80040a0:	e022      	b.n	80040e8 <_printf_i+0x78>
 80040a2:	0010      	movs	r0, r2
 80040a4:	3863      	subs	r0, #99	; 0x63
 80040a6:	2815      	cmp	r0, #21
 80040a8:	d8f7      	bhi.n	800409a <_printf_i+0x2a>
 80040aa:	f7fc f843 	bl	8000134 <__gnu_thumb1_case_shi>
 80040ae:	0016      	.short	0x0016
 80040b0:	fff6001f 	.word	0xfff6001f
 80040b4:	fff6fff6 	.word	0xfff6fff6
 80040b8:	001ffff6 	.word	0x001ffff6
 80040bc:	fff6fff6 	.word	0xfff6fff6
 80040c0:	fff6fff6 	.word	0xfff6fff6
 80040c4:	003600a8 	.word	0x003600a8
 80040c8:	fff6009a 	.word	0xfff6009a
 80040cc:	00b9fff6 	.word	0x00b9fff6
 80040d0:	0036fff6 	.word	0x0036fff6
 80040d4:	fff6fff6 	.word	0xfff6fff6
 80040d8:	009e      	.short	0x009e
 80040da:	0026      	movs	r6, r4
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	3642      	adds	r6, #66	; 0x42
 80040e0:	1d11      	adds	r1, r2, #4
 80040e2:	6019      	str	r1, [r3, #0]
 80040e4:	6813      	ldr	r3, [r2, #0]
 80040e6:	7033      	strb	r3, [r6, #0]
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0a7      	b.n	800423c <_printf_i+0x1cc>
 80040ec:	6808      	ldr	r0, [r1, #0]
 80040ee:	6819      	ldr	r1, [r3, #0]
 80040f0:	1d0a      	adds	r2, r1, #4
 80040f2:	0605      	lsls	r5, r0, #24
 80040f4:	d50b      	bpl.n	800410e <_printf_i+0x9e>
 80040f6:	680d      	ldr	r5, [r1, #0]
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	2d00      	cmp	r5, #0
 80040fc:	da03      	bge.n	8004106 <_printf_i+0x96>
 80040fe:	232d      	movs	r3, #45	; 0x2d
 8004100:	9a04      	ldr	r2, [sp, #16]
 8004102:	426d      	negs	r5, r5
 8004104:	7013      	strb	r3, [r2, #0]
 8004106:	4b61      	ldr	r3, [pc, #388]	; (800428c <_printf_i+0x21c>)
 8004108:	270a      	movs	r7, #10
 800410a:	9303      	str	r3, [sp, #12]
 800410c:	e01b      	b.n	8004146 <_printf_i+0xd6>
 800410e:	680d      	ldr	r5, [r1, #0]
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	0641      	lsls	r1, r0, #25
 8004114:	d5f1      	bpl.n	80040fa <_printf_i+0x8a>
 8004116:	b22d      	sxth	r5, r5
 8004118:	e7ef      	b.n	80040fa <_printf_i+0x8a>
 800411a:	680d      	ldr	r5, [r1, #0]
 800411c:	6819      	ldr	r1, [r3, #0]
 800411e:	1d08      	adds	r0, r1, #4
 8004120:	6018      	str	r0, [r3, #0]
 8004122:	062e      	lsls	r6, r5, #24
 8004124:	d501      	bpl.n	800412a <_printf_i+0xba>
 8004126:	680d      	ldr	r5, [r1, #0]
 8004128:	e003      	b.n	8004132 <_printf_i+0xc2>
 800412a:	066d      	lsls	r5, r5, #25
 800412c:	d5fb      	bpl.n	8004126 <_printf_i+0xb6>
 800412e:	680d      	ldr	r5, [r1, #0]
 8004130:	b2ad      	uxth	r5, r5
 8004132:	4b56      	ldr	r3, [pc, #344]	; (800428c <_printf_i+0x21c>)
 8004134:	2708      	movs	r7, #8
 8004136:	9303      	str	r3, [sp, #12]
 8004138:	2a6f      	cmp	r2, #111	; 0x6f
 800413a:	d000      	beq.n	800413e <_printf_i+0xce>
 800413c:	3702      	adds	r7, #2
 800413e:	0023      	movs	r3, r4
 8004140:	2200      	movs	r2, #0
 8004142:	3343      	adds	r3, #67	; 0x43
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	6863      	ldr	r3, [r4, #4]
 8004148:	60a3      	str	r3, [r4, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	db03      	blt.n	8004156 <_printf_i+0xe6>
 800414e:	2204      	movs	r2, #4
 8004150:	6821      	ldr	r1, [r4, #0]
 8004152:	4391      	bics	r1, r2
 8004154:	6021      	str	r1, [r4, #0]
 8004156:	2d00      	cmp	r5, #0
 8004158:	d102      	bne.n	8004160 <_printf_i+0xf0>
 800415a:	9e04      	ldr	r6, [sp, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00c      	beq.n	800417a <_printf_i+0x10a>
 8004160:	9e04      	ldr	r6, [sp, #16]
 8004162:	0028      	movs	r0, r5
 8004164:	0039      	movs	r1, r7
 8004166:	f7fc f875 	bl	8000254 <__aeabi_uidivmod>
 800416a:	9b03      	ldr	r3, [sp, #12]
 800416c:	3e01      	subs	r6, #1
 800416e:	5c5b      	ldrb	r3, [r3, r1]
 8004170:	7033      	strb	r3, [r6, #0]
 8004172:	002b      	movs	r3, r5
 8004174:	0005      	movs	r5, r0
 8004176:	429f      	cmp	r7, r3
 8004178:	d9f3      	bls.n	8004162 <_printf_i+0xf2>
 800417a:	2f08      	cmp	r7, #8
 800417c:	d109      	bne.n	8004192 <_printf_i+0x122>
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	07db      	lsls	r3, r3, #31
 8004182:	d506      	bpl.n	8004192 <_printf_i+0x122>
 8004184:	6863      	ldr	r3, [r4, #4]
 8004186:	6922      	ldr	r2, [r4, #16]
 8004188:	4293      	cmp	r3, r2
 800418a:	dc02      	bgt.n	8004192 <_printf_i+0x122>
 800418c:	2330      	movs	r3, #48	; 0x30
 800418e:	3e01      	subs	r6, #1
 8004190:	7033      	strb	r3, [r6, #0]
 8004192:	9b04      	ldr	r3, [sp, #16]
 8004194:	1b9b      	subs	r3, r3, r6
 8004196:	6123      	str	r3, [r4, #16]
 8004198:	9b07      	ldr	r3, [sp, #28]
 800419a:	0021      	movs	r1, r4
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	9805      	ldr	r0, [sp, #20]
 80041a0:	9b06      	ldr	r3, [sp, #24]
 80041a2:	aa09      	add	r2, sp, #36	; 0x24
 80041a4:	f7ff fef4 	bl	8003f90 <_printf_common>
 80041a8:	1c43      	adds	r3, r0, #1
 80041aa:	d14c      	bne.n	8004246 <_printf_i+0x1d6>
 80041ac:	2001      	movs	r0, #1
 80041ae:	4240      	negs	r0, r0
 80041b0:	b00b      	add	sp, #44	; 0x2c
 80041b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b4:	3145      	adds	r1, #69	; 0x45
 80041b6:	700a      	strb	r2, [r1, #0]
 80041b8:	4a34      	ldr	r2, [pc, #208]	; (800428c <_printf_i+0x21c>)
 80041ba:	9203      	str	r2, [sp, #12]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	6821      	ldr	r1, [r4, #0]
 80041c0:	ca20      	ldmia	r2!, {r5}
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	0608      	lsls	r0, r1, #24
 80041c6:	d516      	bpl.n	80041f6 <_printf_i+0x186>
 80041c8:	07cb      	lsls	r3, r1, #31
 80041ca:	d502      	bpl.n	80041d2 <_printf_i+0x162>
 80041cc:	2320      	movs	r3, #32
 80041ce:	4319      	orrs	r1, r3
 80041d0:	6021      	str	r1, [r4, #0]
 80041d2:	2710      	movs	r7, #16
 80041d4:	2d00      	cmp	r5, #0
 80041d6:	d1b2      	bne.n	800413e <_printf_i+0xce>
 80041d8:	2320      	movs	r3, #32
 80041da:	6822      	ldr	r2, [r4, #0]
 80041dc:	439a      	bics	r2, r3
 80041de:	6022      	str	r2, [r4, #0]
 80041e0:	e7ad      	b.n	800413e <_printf_i+0xce>
 80041e2:	2220      	movs	r2, #32
 80041e4:	6809      	ldr	r1, [r1, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	6022      	str	r2, [r4, #0]
 80041ea:	0022      	movs	r2, r4
 80041ec:	2178      	movs	r1, #120	; 0x78
 80041ee:	3245      	adds	r2, #69	; 0x45
 80041f0:	7011      	strb	r1, [r2, #0]
 80041f2:	4a27      	ldr	r2, [pc, #156]	; (8004290 <_printf_i+0x220>)
 80041f4:	e7e1      	b.n	80041ba <_printf_i+0x14a>
 80041f6:	0648      	lsls	r0, r1, #25
 80041f8:	d5e6      	bpl.n	80041c8 <_printf_i+0x158>
 80041fa:	b2ad      	uxth	r5, r5
 80041fc:	e7e4      	b.n	80041c8 <_printf_i+0x158>
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	680d      	ldr	r5, [r1, #0]
 8004202:	1d10      	adds	r0, r2, #4
 8004204:	6949      	ldr	r1, [r1, #20]
 8004206:	6018      	str	r0, [r3, #0]
 8004208:	6813      	ldr	r3, [r2, #0]
 800420a:	062e      	lsls	r6, r5, #24
 800420c:	d501      	bpl.n	8004212 <_printf_i+0x1a2>
 800420e:	6019      	str	r1, [r3, #0]
 8004210:	e002      	b.n	8004218 <_printf_i+0x1a8>
 8004212:	066d      	lsls	r5, r5, #25
 8004214:	d5fb      	bpl.n	800420e <_printf_i+0x19e>
 8004216:	8019      	strh	r1, [r3, #0]
 8004218:	2300      	movs	r3, #0
 800421a:	9e04      	ldr	r6, [sp, #16]
 800421c:	6123      	str	r3, [r4, #16]
 800421e:	e7bb      	b.n	8004198 <_printf_i+0x128>
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	1d11      	adds	r1, r2, #4
 8004224:	6019      	str	r1, [r3, #0]
 8004226:	6816      	ldr	r6, [r2, #0]
 8004228:	2100      	movs	r1, #0
 800422a:	0030      	movs	r0, r6
 800422c:	6862      	ldr	r2, [r4, #4]
 800422e:	f000 f8ed 	bl	800440c <memchr>
 8004232:	2800      	cmp	r0, #0
 8004234:	d001      	beq.n	800423a <_printf_i+0x1ca>
 8004236:	1b80      	subs	r0, r0, r6
 8004238:	6060      	str	r0, [r4, #4]
 800423a:	6863      	ldr	r3, [r4, #4]
 800423c:	6123      	str	r3, [r4, #16]
 800423e:	2300      	movs	r3, #0
 8004240:	9a04      	ldr	r2, [sp, #16]
 8004242:	7013      	strb	r3, [r2, #0]
 8004244:	e7a8      	b.n	8004198 <_printf_i+0x128>
 8004246:	6923      	ldr	r3, [r4, #16]
 8004248:	0032      	movs	r2, r6
 800424a:	9906      	ldr	r1, [sp, #24]
 800424c:	9805      	ldr	r0, [sp, #20]
 800424e:	9d07      	ldr	r5, [sp, #28]
 8004250:	47a8      	blx	r5
 8004252:	1c43      	adds	r3, r0, #1
 8004254:	d0aa      	beq.n	80041ac <_printf_i+0x13c>
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	079b      	lsls	r3, r3, #30
 800425a:	d415      	bmi.n	8004288 <_printf_i+0x218>
 800425c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800425e:	68e0      	ldr	r0, [r4, #12]
 8004260:	4298      	cmp	r0, r3
 8004262:	daa5      	bge.n	80041b0 <_printf_i+0x140>
 8004264:	0018      	movs	r0, r3
 8004266:	e7a3      	b.n	80041b0 <_printf_i+0x140>
 8004268:	0022      	movs	r2, r4
 800426a:	2301      	movs	r3, #1
 800426c:	9906      	ldr	r1, [sp, #24]
 800426e:	9805      	ldr	r0, [sp, #20]
 8004270:	9e07      	ldr	r6, [sp, #28]
 8004272:	3219      	adds	r2, #25
 8004274:	47b0      	blx	r6
 8004276:	1c43      	adds	r3, r0, #1
 8004278:	d098      	beq.n	80041ac <_printf_i+0x13c>
 800427a:	3501      	adds	r5, #1
 800427c:	68e3      	ldr	r3, [r4, #12]
 800427e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	42ab      	cmp	r3, r5
 8004284:	dcf0      	bgt.n	8004268 <_printf_i+0x1f8>
 8004286:	e7e9      	b.n	800425c <_printf_i+0x1ec>
 8004288:	2500      	movs	r5, #0
 800428a:	e7f7      	b.n	800427c <_printf_i+0x20c>
 800428c:	08004785 	.word	0x08004785
 8004290:	08004796 	.word	0x08004796

08004294 <_sbrk_r>:
 8004294:	2300      	movs	r3, #0
 8004296:	b570      	push	{r4, r5, r6, lr}
 8004298:	4d06      	ldr	r5, [pc, #24]	; (80042b4 <_sbrk_r+0x20>)
 800429a:	0004      	movs	r4, r0
 800429c:	0008      	movs	r0, r1
 800429e:	602b      	str	r3, [r5, #0]
 80042a0:	f7fc fc70 	bl	8000b84 <_sbrk>
 80042a4:	1c43      	adds	r3, r0, #1
 80042a6:	d103      	bne.n	80042b0 <_sbrk_r+0x1c>
 80042a8:	682b      	ldr	r3, [r5, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d000      	beq.n	80042b0 <_sbrk_r+0x1c>
 80042ae:	6023      	str	r3, [r4, #0]
 80042b0:	bd70      	pop	{r4, r5, r6, pc}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	20000138 	.word	0x20000138

080042b8 <__sread>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	000c      	movs	r4, r1
 80042bc:	250e      	movs	r5, #14
 80042be:	5f49      	ldrsh	r1, [r1, r5]
 80042c0:	f000 f8c0 	bl	8004444 <_read_r>
 80042c4:	2800      	cmp	r0, #0
 80042c6:	db03      	blt.n	80042d0 <__sread+0x18>
 80042c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042ca:	181b      	adds	r3, r3, r0
 80042cc:	6563      	str	r3, [r4, #84]	; 0x54
 80042ce:	bd70      	pop	{r4, r5, r6, pc}
 80042d0:	89a3      	ldrh	r3, [r4, #12]
 80042d2:	4a02      	ldr	r2, [pc, #8]	; (80042dc <__sread+0x24>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	81a3      	strh	r3, [r4, #12]
 80042d8:	e7f9      	b.n	80042ce <__sread+0x16>
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	ffffefff 	.word	0xffffefff

080042e0 <__swrite>:
 80042e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e2:	001f      	movs	r7, r3
 80042e4:	898b      	ldrh	r3, [r1, #12]
 80042e6:	0005      	movs	r5, r0
 80042e8:	000c      	movs	r4, r1
 80042ea:	0016      	movs	r6, r2
 80042ec:	05db      	lsls	r3, r3, #23
 80042ee:	d505      	bpl.n	80042fc <__swrite+0x1c>
 80042f0:	230e      	movs	r3, #14
 80042f2:	5ec9      	ldrsh	r1, [r1, r3]
 80042f4:	2200      	movs	r2, #0
 80042f6:	2302      	movs	r3, #2
 80042f8:	f000 f874 	bl	80043e4 <_lseek_r>
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	4a05      	ldr	r2, [pc, #20]	; (8004314 <__swrite+0x34>)
 8004300:	0028      	movs	r0, r5
 8004302:	4013      	ands	r3, r2
 8004304:	81a3      	strh	r3, [r4, #12]
 8004306:	0032      	movs	r2, r6
 8004308:	230e      	movs	r3, #14
 800430a:	5ee1      	ldrsh	r1, [r4, r3]
 800430c:	003b      	movs	r3, r7
 800430e:	f000 f81f 	bl	8004350 <_write_r>
 8004312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004314:	ffffefff 	.word	0xffffefff

08004318 <__sseek>:
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	000c      	movs	r4, r1
 800431c:	250e      	movs	r5, #14
 800431e:	5f49      	ldrsh	r1, [r1, r5]
 8004320:	f000 f860 	bl	80043e4 <_lseek_r>
 8004324:	89a3      	ldrh	r3, [r4, #12]
 8004326:	1c42      	adds	r2, r0, #1
 8004328:	d103      	bne.n	8004332 <__sseek+0x1a>
 800432a:	4a05      	ldr	r2, [pc, #20]	; (8004340 <__sseek+0x28>)
 800432c:	4013      	ands	r3, r2
 800432e:	81a3      	strh	r3, [r4, #12]
 8004330:	bd70      	pop	{r4, r5, r6, pc}
 8004332:	2280      	movs	r2, #128	; 0x80
 8004334:	0152      	lsls	r2, r2, #5
 8004336:	4313      	orrs	r3, r2
 8004338:	81a3      	strh	r3, [r4, #12]
 800433a:	6560      	str	r0, [r4, #84]	; 0x54
 800433c:	e7f8      	b.n	8004330 <__sseek+0x18>
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	ffffefff 	.word	0xffffefff

08004344 <__sclose>:
 8004344:	b510      	push	{r4, lr}
 8004346:	230e      	movs	r3, #14
 8004348:	5ec9      	ldrsh	r1, [r1, r3]
 800434a:	f000 f815 	bl	8004378 <_close_r>
 800434e:	bd10      	pop	{r4, pc}

08004350 <_write_r>:
 8004350:	b570      	push	{r4, r5, r6, lr}
 8004352:	0004      	movs	r4, r0
 8004354:	0008      	movs	r0, r1
 8004356:	0011      	movs	r1, r2
 8004358:	001a      	movs	r2, r3
 800435a:	2300      	movs	r3, #0
 800435c:	4d05      	ldr	r5, [pc, #20]	; (8004374 <_write_r+0x24>)
 800435e:	602b      	str	r3, [r5, #0]
 8004360:	f7fc fbc8 	bl	8000af4 <_write>
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	d103      	bne.n	8004370 <_write_r+0x20>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d000      	beq.n	8004370 <_write_r+0x20>
 800436e:	6023      	str	r3, [r4, #0]
 8004370:	bd70      	pop	{r4, r5, r6, pc}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	20000138 	.word	0x20000138

08004378 <_close_r>:
 8004378:	2300      	movs	r3, #0
 800437a:	b570      	push	{r4, r5, r6, lr}
 800437c:	4d06      	ldr	r5, [pc, #24]	; (8004398 <_close_r+0x20>)
 800437e:	0004      	movs	r4, r0
 8004380:	0008      	movs	r0, r1
 8004382:	602b      	str	r3, [r5, #0]
 8004384:	f7fc fbd2 	bl	8000b2c <_close>
 8004388:	1c43      	adds	r3, r0, #1
 800438a:	d103      	bne.n	8004394 <_close_r+0x1c>
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d000      	beq.n	8004394 <_close_r+0x1c>
 8004392:	6023      	str	r3, [r4, #0]
 8004394:	bd70      	pop	{r4, r5, r6, pc}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	20000138 	.word	0x20000138

0800439c <_fstat_r>:
 800439c:	2300      	movs	r3, #0
 800439e:	b570      	push	{r4, r5, r6, lr}
 80043a0:	4d06      	ldr	r5, [pc, #24]	; (80043bc <_fstat_r+0x20>)
 80043a2:	0004      	movs	r4, r0
 80043a4:	0008      	movs	r0, r1
 80043a6:	0011      	movs	r1, r2
 80043a8:	602b      	str	r3, [r5, #0]
 80043aa:	f7fc fbc9 	bl	8000b40 <_fstat>
 80043ae:	1c43      	adds	r3, r0, #1
 80043b0:	d103      	bne.n	80043ba <_fstat_r+0x1e>
 80043b2:	682b      	ldr	r3, [r5, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d000      	beq.n	80043ba <_fstat_r+0x1e>
 80043b8:	6023      	str	r3, [r4, #0]
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
 80043bc:	20000138 	.word	0x20000138

080043c0 <_isatty_r>:
 80043c0:	2300      	movs	r3, #0
 80043c2:	b570      	push	{r4, r5, r6, lr}
 80043c4:	4d06      	ldr	r5, [pc, #24]	; (80043e0 <_isatty_r+0x20>)
 80043c6:	0004      	movs	r4, r0
 80043c8:	0008      	movs	r0, r1
 80043ca:	602b      	str	r3, [r5, #0]
 80043cc:	f7fc fbc6 	bl	8000b5c <_isatty>
 80043d0:	1c43      	adds	r3, r0, #1
 80043d2:	d103      	bne.n	80043dc <_isatty_r+0x1c>
 80043d4:	682b      	ldr	r3, [r5, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d000      	beq.n	80043dc <_isatty_r+0x1c>
 80043da:	6023      	str	r3, [r4, #0]
 80043dc:	bd70      	pop	{r4, r5, r6, pc}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	20000138 	.word	0x20000138

080043e4 <_lseek_r>:
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	0004      	movs	r4, r0
 80043e8:	0008      	movs	r0, r1
 80043ea:	0011      	movs	r1, r2
 80043ec:	001a      	movs	r2, r3
 80043ee:	2300      	movs	r3, #0
 80043f0:	4d05      	ldr	r5, [pc, #20]	; (8004408 <_lseek_r+0x24>)
 80043f2:	602b      	str	r3, [r5, #0]
 80043f4:	f7fc fbbb 	bl	8000b6e <_lseek>
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d103      	bne.n	8004404 <_lseek_r+0x20>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d000      	beq.n	8004404 <_lseek_r+0x20>
 8004402:	6023      	str	r3, [r4, #0]
 8004404:	bd70      	pop	{r4, r5, r6, pc}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	20000138 	.word	0x20000138

0800440c <memchr>:
 800440c:	b2c9      	uxtb	r1, r1
 800440e:	1882      	adds	r2, r0, r2
 8004410:	4290      	cmp	r0, r2
 8004412:	d101      	bne.n	8004418 <memchr+0xc>
 8004414:	2000      	movs	r0, #0
 8004416:	4770      	bx	lr
 8004418:	7803      	ldrb	r3, [r0, #0]
 800441a:	428b      	cmp	r3, r1
 800441c:	d0fb      	beq.n	8004416 <memchr+0xa>
 800441e:	3001      	adds	r0, #1
 8004420:	e7f6      	b.n	8004410 <memchr+0x4>
	...

08004424 <__malloc_lock>:
 8004424:	b510      	push	{r4, lr}
 8004426:	4802      	ldr	r0, [pc, #8]	; (8004430 <__malloc_lock+0xc>)
 8004428:	f7ff faff 	bl	8003a2a <__retarget_lock_acquire_recursive>
 800442c:	bd10      	pop	{r4, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	2000012c 	.word	0x2000012c

08004434 <__malloc_unlock>:
 8004434:	b510      	push	{r4, lr}
 8004436:	4802      	ldr	r0, [pc, #8]	; (8004440 <__malloc_unlock+0xc>)
 8004438:	f7ff faf8 	bl	8003a2c <__retarget_lock_release_recursive>
 800443c:	bd10      	pop	{r4, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	2000012c 	.word	0x2000012c

08004444 <_read_r>:
 8004444:	b570      	push	{r4, r5, r6, lr}
 8004446:	0004      	movs	r4, r0
 8004448:	0008      	movs	r0, r1
 800444a:	0011      	movs	r1, r2
 800444c:	001a      	movs	r2, r3
 800444e:	2300      	movs	r3, #0
 8004450:	4d05      	ldr	r5, [pc, #20]	; (8004468 <_read_r+0x24>)
 8004452:	602b      	str	r3, [r5, #0]
 8004454:	f7fc fb31 	bl	8000aba <_read>
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	d103      	bne.n	8004464 <_read_r+0x20>
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d000      	beq.n	8004464 <_read_r+0x20>
 8004462:	6023      	str	r3, [r4, #0]
 8004464:	bd70      	pop	{r4, r5, r6, pc}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	20000138 	.word	0x20000138

0800446c <_init>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004472:	bc08      	pop	{r3}
 8004474:	469e      	mov	lr, r3
 8004476:	4770      	bx	lr

08004478 <_fini>:
 8004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447e:	bc08      	pop	{r3}
 8004480:	469e      	mov	lr, r3
 8004482:	4770      	bx	lr
