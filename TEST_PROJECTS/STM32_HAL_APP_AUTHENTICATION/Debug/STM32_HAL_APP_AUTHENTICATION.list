
STM32_HAL_APP_AUTHENTICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093f0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a14  080094ac  080094ac  000194ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 CMOX_CTA_PROTECTED_DATA 00000264  08009ec0  08009ec0  00019ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800a124  0800a124  000200b0  2**0
                  CONTENTS
  5 .ARM          00000008  0800a124  0800a124  0001a124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800a12c  0800a12c  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800a12c  0800a12c  0001a12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800a130  0800a130  0001a130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000b0  20000000  0800a134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000008d0  200000b0  0800a1e4  000200b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000980  0800a1e4  00020980  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de2f  00000000  00000000  000200de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027e4  00000000  00000000  0002df0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  000306f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009e8  00000000  00000000  000311f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b45d  00000000  00000000  00031be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125cb  00000000  00000000  0004d03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b58f  00000000  00000000  0005f608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fab97  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000050  00000000  00000000  000fabe8  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00002e00  00000000  00000000  000fac38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000b0 	.word	0x200000b0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009494 	.word	0x08009494

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000b4 	.word	0x200000b4
 8000100:	08009494 	.word	0x08009494

08000104 <cmox_ecc_construct>:
 8000104:	b510      	push	{r4, lr}
 8000106:	0004      	movs	r4, r0
 8000108:	0008      	movs	r0, r1
 800010a:	0011      	movs	r1, r2
 800010c:	001a      	movs	r2, r3
 800010e:	2c00      	cmp	r4, #0
 8000110:	d00b      	beq.n	800012a <cmox_ecc_construct+0x26>
 8000112:	2800      	cmp	r0, #0
 8000114:	d009      	beq.n	800012a <cmox_ecc_construct+0x26>
 8000116:	2900      	cmp	r1, #0
 8000118:	d007      	beq.n	800012a <cmox_ecc_construct+0x26>
 800011a:	2a00      	cmp	r2, #0
 800011c:	d005      	beq.n	800012a <cmox_ecc_construct+0x26>
 800011e:	6120      	str	r0, [r4, #16]
 8000120:	0020      	movs	r0, r4
 8000122:	f001 fc04 	bl	800192e <cmox_membuf_init>
 8000126:	4801      	ldr	r0, [pc, #4]	; (800012c <cmox_ecc_construct+0x28>)
 8000128:	6160      	str	r0, [r4, #20]
 800012a:	bd10      	pop	{r4, pc}
 800012c:	5e1caffe 	.word	0x5e1caffe

08000130 <cmox_ecc_cleanup>:
 8000130:	b510      	push	{r4, lr}
 8000132:	0004      	movs	r4, r0
 8000134:	d005      	beq.n	8000142 <cmox_ecc_cleanup+0x12>
 8000136:	f001 fc40 	bl	80019ba <cmox_membuf_cleanup>
 800013a:	2118      	movs	r1, #24
 800013c:	0020      	movs	r0, r4
 800013e:	f008 f8fb 	bl	8008338 <__aeabi_memclr>
 8000142:	bd10      	pop	{r4, pc}

08000144 <cmox_ECC_InvertModN>:
 8000144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000146:	b084      	sub	sp, #16
 8000148:	0004      	movs	r4, r0
 800014a:	d010      	beq.n	800016e <cmox_ECC_InvertModN+0x2a>
 800014c:	000e      	movs	r6, r1
 800014e:	d00e      	beq.n	800016e <cmox_ECC_InvertModN+0x2a>
 8000150:	9203      	str	r2, [sp, #12]
 8000152:	2a00      	cmp	r2, #0
 8000154:	d00b      	beq.n	800016e <cmox_ECC_InvertModN+0x2a>
 8000156:	001d      	movs	r5, r3
 8000158:	d009      	beq.n	800016e <cmox_ECC_InvertModN+0x2a>
 800015a:	69a0      	ldr	r0, [r4, #24]
 800015c:	6800      	ldr	r0, [r0, #0]
 800015e:	6880      	ldr	r0, [r0, #8]
 8000160:	6801      	ldr	r1, [r0, #0]
 8000162:	6832      	ldr	r2, [r6, #0]
 8000164:	428a      	cmp	r2, r1
 8000166:	d302      	bcc.n	800016e <cmox_ECC_InvertModN+0x2a>
 8000168:	682a      	ldr	r2, [r5, #0]
 800016a:	428a      	cmp	r2, r1
 800016c:	d201      	bcs.n	8000172 <cmox_ECC_InvertModN+0x2e>
 800016e:	2001      	movs	r0, #1
 8000170:	e012      	b.n	8000198 <cmox_ECC_InvertModN+0x54>
 8000172:	002a      	movs	r2, r5
 8000174:	2101      	movs	r1, #1
 8000176:	43c9      	mvns	r1, r1
 8000178:	f001 fa03 	bl	8001582 <cmox_AddBN_Int>
 800017c:	69a0      	ldr	r0, [r4, #24]
 800017e:	69c7      	ldr	r7, [r0, #28]
 8000180:	6a20      	ldr	r0, [r4, #32]
 8000182:	9002      	str	r0, [sp, #8]
 8000184:	69e0      	ldr	r0, [r4, #28]
 8000186:	9001      	str	r0, [sp, #4]
 8000188:	9803      	ldr	r0, [sp, #12]
 800018a:	9000      	str	r0, [sp, #0]
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	0022      	movs	r2, r4
 8000190:	0029      	movs	r1, r5
 8000192:	0030      	movs	r0, r6
 8000194:	683c      	ldr	r4, [r7, #0]
 8000196:	47a0      	blx	r4
 8000198:	b005      	add	sp, #20
 800019a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800019c <cmox_ECC_InitCurve>:
 800019c:	b510      	push	{r4, lr}
 800019e:	2800      	cmp	r0, #0
 80001a0:	d001      	beq.n	80001a6 <cmox_ECC_InitCurve+0xa>
 80001a2:	2900      	cmp	r1, #0
 80001a4:	d101      	bne.n	80001aa <cmox_ECC_InitCurve+0xe>
 80001a6:	2001      	movs	r0, #1
 80001a8:	bd10      	pop	{r4, pc}
 80001aa:	2400      	movs	r4, #0
 80001ac:	6144      	str	r4, [r0, #20]
 80001ae:	6181      	str	r1, [r0, #24]
 80001b0:	61c2      	str	r2, [r0, #28]
 80001b2:	6203      	str	r3, [r0, #32]
 80001b4:	2000      	movs	r0, #0
 80001b6:	bd10      	pop	{r4, pc}

080001b8 <cmox_ECC_InitCurveModDomainP>:
 80001b8:	b580      	push	{r7, lr}
 80001ba:	0002      	movs	r2, r0
 80001bc:	6990      	ldr	r0, [r2, #24]
 80001be:	6800      	ldr	r0, [r0, #0]
 80001c0:	69d3      	ldr	r3, [r2, #28]
 80001c2:	6841      	ldr	r1, [r0, #4]
 80001c4:	6800      	ldr	r0, [r0, #0]
 80001c6:	f001 faeb 	bl	80017a0 <cmox_ModularBN_InitWithR2>
 80001ca:	bd02      	pop	{r1, pc}

080001cc <cmox_ECC_InitCurveModDomainN>:
 80001cc:	b580      	push	{r7, lr}
 80001ce:	0002      	movs	r2, r0
 80001d0:	6990      	ldr	r0, [r2, #24]
 80001d2:	6800      	ldr	r0, [r0, #0]
 80001d4:	69d3      	ldr	r3, [r2, #28]
 80001d6:	68c1      	ldr	r1, [r0, #12]
 80001d8:	6880      	ldr	r0, [r0, #8]
 80001da:	f001 fae1 	bl	80017a0 <cmox_ModularBN_InitWithR2>
 80001de:	bd02      	pop	{r1, pc}

080001e0 <cmox_ECC_DeInitCurveModDomain>:
 80001e0:	b580      	push	{r7, lr}
 80001e2:	69c1      	ldr	r1, [r0, #28]
 80001e4:	f001 fb62 	bl	80018ac <cmox_ModularBN_DeinitWithR2>
 80001e8:	bd01      	pop	{r0, pc}

080001ea <cmox_ECC_AllocPoint>:
 80001ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001ec:	0005      	movs	r5, r0
 80001ee:	000f      	movs	r7, r1
 80001f0:	2214      	movs	r2, #20
 80001f2:	69e8      	ldr	r0, [r5, #28]
 80001f4:	f001 fbaa 	bl	800194c <cmox_membuf_alloc>
 80001f8:	0004      	movs	r4, r0
 80001fa:	d148      	bne.n	800028e <cmox_ECC_AllocPoint+0xa4>
 80001fc:	6839      	ldr	r1, [r7, #0]
 80001fe:	2600      	movs	r6, #0
 8000200:	610e      	str	r6, [r1, #16]
 8000202:	69a8      	ldr	r0, [r5, #24]
 8000204:	6800      	ldr	r0, [r0, #0]
 8000206:	6800      	ldr	r0, [r0, #0]
 8000208:	6802      	ldr	r2, [r0, #0]
 800020a:	69e8      	ldr	r0, [r5, #28]
 800020c:	f002 ff8a 	bl	8003124 <cmox_bn_alloc>
 8000210:	0004      	movs	r4, r0
 8000212:	d137      	bne.n	8000284 <cmox_ECC_AllocPoint+0x9a>
 8000214:	69a8      	ldr	r0, [r5, #24]
 8000216:	6800      	ldr	r0, [r0, #0]
 8000218:	6800      	ldr	r0, [r0, #0]
 800021a:	6802      	ldr	r2, [r0, #0]
 800021c:	6839      	ldr	r1, [r7, #0]
 800021e:	3108      	adds	r1, #8
 8000220:	69e8      	ldr	r0, [r5, #28]
 8000222:	f002 ff7f 	bl	8003124 <cmox_bn_alloc>
 8000226:	0004      	movs	r4, r0
 8000228:	d128      	bne.n	800027c <cmox_ECC_AllocPoint+0x92>
 800022a:	69a9      	ldr	r1, [r5, #24]
 800022c:	6838      	ldr	r0, [r7, #0]
 800022e:	684a      	ldr	r2, [r1, #4]
 8000230:	69d2      	ldr	r2, [r2, #28]
 8000232:	2a03      	cmp	r2, #3
 8000234:	d02f      	beq.n	8000296 <cmox_ECC_AllocPoint+0xac>
 8000236:	6809      	ldr	r1, [r1, #0]
 8000238:	6809      	ldr	r1, [r1, #0]
 800023a:	680a      	ldr	r2, [r1, #0]
 800023c:	1d01      	adds	r1, r0, #4
 800023e:	69e8      	ldr	r0, [r5, #28]
 8000240:	f002 ff70 	bl	8003124 <cmox_bn_alloc>
 8000244:	0004      	movs	r4, r0
 8000246:	d114      	bne.n	8000272 <cmox_ECC_AllocPoint+0x88>
 8000248:	69a9      	ldr	r1, [r5, #24]
 800024a:	6838      	ldr	r0, [r7, #0]
 800024c:	684a      	ldr	r2, [r1, #4]
 800024e:	69d2      	ldr	r2, [r2, #28]
 8000250:	2a02      	cmp	r2, #2
 8000252:	d11e      	bne.n	8000292 <cmox_ECC_AllocPoint+0xa8>
 8000254:	6809      	ldr	r1, [r1, #0]
 8000256:	6809      	ldr	r1, [r1, #0]
 8000258:	680a      	ldr	r2, [r1, #0]
 800025a:	0001      	movs	r1, r0
 800025c:	310c      	adds	r1, #12
 800025e:	69e8      	ldr	r0, [r5, #28]
 8000260:	f002 ff60 	bl	8003124 <cmox_bn_alloc>
 8000264:	0004      	movs	r4, r0
 8000266:	d012      	beq.n	800028e <cmox_ECC_AllocPoint+0xa4>
 8000268:	6838      	ldr	r0, [r7, #0]
 800026a:	1d01      	adds	r1, r0, #4
 800026c:	69e8      	ldr	r0, [r5, #28]
 800026e:	f002 ff65 	bl	800313c <cmox_bn_free>
 8000272:	6839      	ldr	r1, [r7, #0]
 8000274:	3108      	adds	r1, #8
 8000276:	69e8      	ldr	r0, [r5, #28]
 8000278:	f002 ff60 	bl	800313c <cmox_bn_free>
 800027c:	6839      	ldr	r1, [r7, #0]
 800027e:	69e8      	ldr	r0, [r5, #28]
 8000280:	f002 ff5c 	bl	800313c <cmox_bn_free>
 8000284:	2214      	movs	r2, #20
 8000286:	0039      	movs	r1, r7
 8000288:	69e8      	ldr	r0, [r5, #28]
 800028a:	f001 fb7f 	bl	800198c <cmox_membuf_free>
 800028e:	0020      	movs	r0, r4
 8000290:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8000292:	60c6      	str	r6, [r0, #12]
 8000294:	e7fb      	b.n	800028e <cmox_ECC_AllocPoint+0xa4>
 8000296:	6046      	str	r6, [r0, #4]
 8000298:	e7fb      	b.n	8000292 <cmox_ECC_AllocPoint+0xa8>

0800029a <cmox_ECC_FreePoint>:
 800029a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800029c:	000d      	movs	r5, r1
 800029e:	2400      	movs	r4, #0
 80002a0:	2700      	movs	r7, #0
 80002a2:	2d00      	cmp	r5, #0
 80002a4:	d002      	beq.n	80002ac <cmox_ECC_FreePoint+0x12>
 80002a6:	6829      	ldr	r1, [r5, #0]
 80002a8:	2900      	cmp	r1, #0
 80002aa:	d101      	bne.n	80002b0 <cmox_ECC_FreePoint+0x16>
 80002ac:	2701      	movs	r7, #1
 80002ae:	e022      	b.n	80002f6 <cmox_ECC_FreePoint+0x5c>
 80002b0:	0006      	movs	r6, r0
 80002b2:	69b0      	ldr	r0, [r6, #24]
 80002b4:	6840      	ldr	r0, [r0, #4]
 80002b6:	69c0      	ldr	r0, [r0, #28]
 80002b8:	2802      	cmp	r0, #2
 80002ba:	d103      	bne.n	80002c4 <cmox_ECC_FreePoint+0x2a>
 80002bc:	310c      	adds	r1, #12
 80002be:	69f0      	ldr	r0, [r6, #28]
 80002c0:	f002 ff3c 	bl	800313c <cmox_bn_free>
 80002c4:	69b0      	ldr	r0, [r6, #24]
 80002c6:	6840      	ldr	r0, [r0, #4]
 80002c8:	69c0      	ldr	r0, [r0, #28]
 80002ca:	2803      	cmp	r0, #3
 80002cc:	d004      	beq.n	80002d8 <cmox_ECC_FreePoint+0x3e>
 80002ce:	6828      	ldr	r0, [r5, #0]
 80002d0:	1d01      	adds	r1, r0, #4
 80002d2:	69f0      	ldr	r0, [r6, #28]
 80002d4:	f002 ff32 	bl	800313c <cmox_bn_free>
 80002d8:	6829      	ldr	r1, [r5, #0]
 80002da:	3108      	adds	r1, #8
 80002dc:	69f0      	ldr	r0, [r6, #28]
 80002de:	f002 ff2d 	bl	800313c <cmox_bn_free>
 80002e2:	6829      	ldr	r1, [r5, #0]
 80002e4:	69f0      	ldr	r0, [r6, #28]
 80002e6:	f002 ff29 	bl	800313c <cmox_bn_free>
 80002ea:	2214      	movs	r2, #20
 80002ec:	0029      	movs	r1, r5
 80002ee:	69f0      	ldr	r0, [r6, #28]
 80002f0:	f001 fb4c 	bl	800198c <cmox_membuf_free>
 80002f4:	602c      	str	r4, [r5, #0]
 80002f6:	0038      	movs	r0, r7
 80002f8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080002fa <cmox_ECC_CondCopyPoint>:
 80002fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fc:	000c      	movs	r4, r1
 80002fe:	2500      	movs	r5, #0
 8000300:	2c00      	cmp	r4, #0
 8000302:	d00d      	beq.n	8000320 <cmox_ECC_CondCopyPoint+0x26>
 8000304:	0016      	movs	r6, r2
 8000306:	d00b      	beq.n	8000320 <cmox_ECC_CondCopyPoint+0x26>
 8000308:	6821      	ldr	r1, [r4, #0]
 800030a:	2900      	cmp	r1, #0
 800030c:	d008      	beq.n	8000320 <cmox_ECC_CondCopyPoint+0x26>
 800030e:	68a2      	ldr	r2, [r4, #8]
 8000310:	2a00      	cmp	r2, #0
 8000312:	d005      	beq.n	8000320 <cmox_ECC_CondCopyPoint+0x26>
 8000314:	6832      	ldr	r2, [r6, #0]
 8000316:	2a00      	cmp	r2, #0
 8000318:	d002      	beq.n	8000320 <cmox_ECC_CondCopyPoint+0x26>
 800031a:	68b3      	ldr	r3, [r6, #8]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d101      	bne.n	8000324 <cmox_ECC_CondCopyPoint+0x2a>
 8000320:	2501      	movs	r5, #1
 8000322:	e01c      	b.n	800035e <cmox_ECC_CondCopyPoint+0x64>
 8000324:	0007      	movs	r7, r0
 8000326:	6920      	ldr	r0, [r4, #16]
 8000328:	6130      	str	r0, [r6, #16]
 800032a:	0038      	movs	r0, r7
 800032c:	f002 ff25 	bl	800317a <cmox_bn_cCopy>
 8000330:	6861      	ldr	r1, [r4, #4]
 8000332:	2900      	cmp	r1, #0
 8000334:	d005      	beq.n	8000342 <cmox_ECC_CondCopyPoint+0x48>
 8000336:	6872      	ldr	r2, [r6, #4]
 8000338:	2a00      	cmp	r2, #0
 800033a:	d002      	beq.n	8000342 <cmox_ECC_CondCopyPoint+0x48>
 800033c:	0038      	movs	r0, r7
 800033e:	f002 ff1c 	bl	800317a <cmox_bn_cCopy>
 8000342:	68b2      	ldr	r2, [r6, #8]
 8000344:	68a1      	ldr	r1, [r4, #8]
 8000346:	0038      	movs	r0, r7
 8000348:	f002 ff17 	bl	800317a <cmox_bn_cCopy>
 800034c:	68e1      	ldr	r1, [r4, #12]
 800034e:	2900      	cmp	r1, #0
 8000350:	d005      	beq.n	800035e <cmox_ECC_CondCopyPoint+0x64>
 8000352:	68f2      	ldr	r2, [r6, #12]
 8000354:	2a00      	cmp	r2, #0
 8000356:	d002      	beq.n	800035e <cmox_ECC_CondCopyPoint+0x64>
 8000358:	0038      	movs	r0, r7
 800035a:	f002 ff0e 	bl	800317a <cmox_bn_cCopy>
 800035e:	0028      	movs	r0, r5
 8000360:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08000362 <cmox_ECC_CondSymmetricPoint>:
 8000362:	b570      	push	{r4, r5, r6, lr}
 8000364:	0006      	movs	r6, r0
 8000366:	000d      	movs	r5, r1
 8000368:	0014      	movs	r4, r2
 800036a:	2001      	movs	r0, #1
 800036c:	69aa      	ldr	r2, [r5, #24]
 800036e:	6811      	ldr	r1, [r2, #0]
 8000370:	69cb      	ldr	r3, [r1, #28]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d007      	beq.n	8000386 <cmox_ECC_CondSymmetricPoint+0x24>
 8000376:	2b02      	cmp	r3, #2
 8000378:	d001      	beq.n	800037e <cmox_ECC_CondSymmetricPoint+0x1c>
 800037a:	d307      	bcc.n	800038c <cmox_ECC_CondSymmetricPoint+0x2a>
 800037c:	bd70      	pop	{r4, r5, r6, pc}
 800037e:	6852      	ldr	r2, [r2, #4]
 8000380:	69d2      	ldr	r2, [r2, #28]
 8000382:	2a03      	cmp	r2, #3
 8000384:	d012      	beq.n	80003ac <cmox_ECC_CondSymmetricPoint+0x4a>
 8000386:	680a      	ldr	r2, [r1, #0]
 8000388:	6861      	ldr	r1, [r4, #4]
 800038a:	e00c      	b.n	80003a6 <cmox_ECC_CondSymmetricPoint+0x44>
 800038c:	680a      	ldr	r2, [r1, #0]
 800038e:	6821      	ldr	r1, [r4, #0]
 8000390:	0030      	movs	r0, r6
 8000392:	f001 f9d7 	bl	8001744 <cmox_FieldBN_CondNegate>
 8000396:	69a9      	ldr	r1, [r5, #24]
 8000398:	684a      	ldr	r2, [r1, #4]
 800039a:	69d2      	ldr	r2, [r2, #28]
 800039c:	2a02      	cmp	r2, #2
 800039e:	d105      	bne.n	80003ac <cmox_ECC_CondSymmetricPoint+0x4a>
 80003a0:	6808      	ldr	r0, [r1, #0]
 80003a2:	6802      	ldr	r2, [r0, #0]
 80003a4:	68e1      	ldr	r1, [r4, #12]
 80003a6:	0030      	movs	r0, r6
 80003a8:	f001 f9cc 	bl	8001744 <cmox_FieldBN_CondNegate>
 80003ac:	bd70      	pop	{r4, r5, r6, pc}

080003ae <cmox_ECC_SetPointAtInfinity>:
 80003ae:	b570      	push	{r4, r5, r6, lr}
 80003b0:	0006      	movs	r6, r0
 80003b2:	000c      	movs	r4, r1
 80003b4:	2500      	movs	r5, #0
 80003b6:	2001      	movs	r0, #1
 80003b8:	6921      	ldr	r1, [r4, #16]
 80003ba:	4301      	orrs	r1, r0
 80003bc:	6121      	str	r1, [r4, #16]
 80003be:	69b1      	ldr	r1, [r6, #24]
 80003c0:	680a      	ldr	r2, [r1, #0]
 80003c2:	69d2      	ldr	r2, [r2, #28]
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	d003      	beq.n	80003d0 <cmox_ECC_SetPointAtInfinity+0x22>
 80003c8:	2a02      	cmp	r2, #2
 80003ca:	d008      	beq.n	80003de <cmox_ECC_SetPointAtInfinity+0x30>
 80003cc:	d318      	bcc.n	8000400 <cmox_ECC_SetPointAtInfinity+0x52>
 80003ce:	e02d      	b.n	800042c <cmox_ECC_SetPointAtInfinity+0x7e>
 80003d0:	2100      	movs	r1, #0
 80003d2:	6820      	ldr	r0, [r4, #0]
 80003d4:	f002 febe 	bl	8003154 <cmox_bn_init>
 80003d8:	2101      	movs	r1, #1
 80003da:	6860      	ldr	r0, [r4, #4]
 80003dc:	e00b      	b.n	80003f6 <cmox_ECC_SetPointAtInfinity+0x48>
 80003de:	6820      	ldr	r0, [r4, #0]
 80003e0:	6849      	ldr	r1, [r1, #4]
 80003e2:	69c9      	ldr	r1, [r1, #28]
 80003e4:	2903      	cmp	r1, #3
 80003e6:	d101      	bne.n	80003ec <cmox_ECC_SetPointAtInfinity+0x3e>
 80003e8:	2101      	movs	r1, #1
 80003ea:	e004      	b.n	80003f6 <cmox_ECC_SetPointAtInfinity+0x48>
 80003ec:	2100      	movs	r1, #0
 80003ee:	f002 feb1 	bl	8003154 <cmox_bn_init>
 80003f2:	2101      	movs	r1, #1
 80003f4:	6860      	ldr	r0, [r4, #4]
 80003f6:	f002 fead 	bl	8003154 <cmox_bn_init>
 80003fa:	2100      	movs	r1, #0
 80003fc:	68a0      	ldr	r0, [r4, #8]
 80003fe:	e012      	b.n	8000426 <cmox_ECC_SetPointAtInfinity+0x78>
 8000400:	2100      	movs	r1, #0
 8000402:	6820      	ldr	r0, [r4, #0]
 8000404:	f002 fea6 	bl	8003154 <cmox_bn_init>
 8000408:	2101      	movs	r1, #1
 800040a:	6860      	ldr	r0, [r4, #4]
 800040c:	f002 fea2 	bl	8003154 <cmox_bn_init>
 8000410:	2101      	movs	r1, #1
 8000412:	68a0      	ldr	r0, [r4, #8]
 8000414:	f002 fe9e 	bl	8003154 <cmox_bn_init>
 8000418:	69b0      	ldr	r0, [r6, #24]
 800041a:	6840      	ldr	r0, [r0, #4]
 800041c:	69c0      	ldr	r0, [r0, #28]
 800041e:	2802      	cmp	r0, #2
 8000420:	d105      	bne.n	800042e <cmox_ECC_SetPointAtInfinity+0x80>
 8000422:	2100      	movs	r1, #0
 8000424:	68e0      	ldr	r0, [r4, #12]
 8000426:	f002 fe95 	bl	8003154 <cmox_bn_init>
 800042a:	e000      	b.n	800042e <cmox_ECC_SetPointAtInfinity+0x80>
 800042c:	2501      	movs	r5, #1
 800042e:	0028      	movs	r0, r5
 8000430:	bd70      	pop	{r4, r5, r6, pc}

08000432 <cmox_ECC_CondImportPoint>:
 8000432:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000434:	b085      	sub	sp, #20
 8000436:	000d      	movs	r5, r1
 8000438:	0014      	movs	r4, r2
 800043a:	001f      	movs	r7, r3
 800043c:	2100      	movs	r1, #0
 800043e:	9103      	str	r1, [sp, #12]
 8000440:	2c00      	cmp	r4, #0
 8000442:	d008      	beq.n	8000456 <cmox_ECC_CondImportPoint+0x24>
 8000444:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8000446:	2e00      	cmp	r6, #0
 8000448:	d005      	beq.n	8000456 <cmox_ECC_CondImportPoint+0x24>
 800044a:	6831      	ldr	r1, [r6, #0]
 800044c:	2900      	cmp	r1, #0
 800044e:	d002      	beq.n	8000456 <cmox_ECC_CondImportPoint+0x24>
 8000450:	68b2      	ldr	r2, [r6, #8]
 8000452:	2a00      	cmp	r2, #0
 8000454:	d104      	bne.n	8000460 <cmox_ECC_CondImportPoint+0x2e>
 8000456:	2001      	movs	r0, #1
 8000458:	9003      	str	r0, [sp, #12]
 800045a:	9803      	ldr	r0, [sp, #12]
 800045c:	b005      	add	sp, #20
 800045e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000462:	9002      	str	r0, [sp, #8]
 8000464:	6132      	str	r2, [r6, #16]
 8000466:	684a      	ldr	r2, [r1, #4]
 8000468:	6821      	ldr	r1, [r4, #0]
 800046a:	9802      	ldr	r0, [sp, #8]
 800046c:	f001 fa2d 	bl	80018ca <cmox_mathUtils_mux>
 8000470:	6831      	ldr	r1, [r6, #0]
 8000472:	6048      	str	r0, [r1, #4]
 8000474:	6870      	ldr	r0, [r6, #4]
 8000476:	9500      	str	r5, [sp, #0]
 8000478:	2800      	cmp	r0, #0
 800047a:	d007      	beq.n	800048c <cmox_ECC_CondImportPoint+0x5a>
 800047c:	6842      	ldr	r2, [r0, #4]
 800047e:	00a8      	lsls	r0, r5, #2
 8000480:	5821      	ldr	r1, [r4, r0]
 8000482:	9802      	ldr	r0, [sp, #8]
 8000484:	f001 fa21 	bl	80018ca <cmox_mathUtils_mux>
 8000488:	6871      	ldr	r1, [r6, #4]
 800048a:	6048      	str	r0, [r1, #4]
 800048c:	9701      	str	r7, [sp, #4]
 800048e:	68b0      	ldr	r0, [r6, #8]
 8000490:	6842      	ldr	r2, [r0, #4]
 8000492:	2f00      	cmp	r7, #0
 8000494:	d101      	bne.n	800049a <cmox_ECC_CondImportPoint+0x68>
 8000496:	2101      	movs	r1, #1
 8000498:	e000      	b.n	800049c <cmox_ECC_CondImportPoint+0x6a>
 800049a:	6839      	ldr	r1, [r7, #0]
 800049c:	9802      	ldr	r0, [sp, #8]
 800049e:	f001 fa14 	bl	80018ca <cmox_mathUtils_mux>
 80004a2:	68b1      	ldr	r1, [r6, #8]
 80004a4:	6048      	str	r0, [r1, #4]
 80004a6:	68f0      	ldr	r0, [r6, #12]
 80004a8:	2800      	cmp	r0, #0
 80004aa:	d008      	beq.n	80004be <cmox_ECC_CondImportPoint+0x8c>
 80004ac:	6842      	ldr	r2, [r0, #4]
 80004ae:	9800      	ldr	r0, [sp, #0]
 80004b0:	00c0      	lsls	r0, r0, #3
 80004b2:	5821      	ldr	r1, [r4, r0]
 80004b4:	9802      	ldr	r0, [sp, #8]
 80004b6:	f001 fa08 	bl	80018ca <cmox_mathUtils_mux>
 80004ba:	68f1      	ldr	r1, [r6, #12]
 80004bc:	6048      	str	r0, [r1, #4]
 80004be:	9f02      	ldr	r7, [sp, #8]
 80004c0:	9404      	str	r4, [sp, #16]
 80004c2:	2402      	movs	r4, #2
 80004c4:	e016      	b.n	80004f4 <cmox_ECC_CondImportPoint+0xc2>
 80004c6:	1f00      	subs	r0, r0, #4
 80004c8:	5941      	ldr	r1, [r0, r5]
 80004ca:	0038      	movs	r0, r7
 80004cc:	f001 f9fd 	bl	80018ca <cmox_mathUtils_mux>
 80004d0:	68b1      	ldr	r1, [r6, #8]
 80004d2:	5148      	str	r0, [r1, r5]
 80004d4:	68f0      	ldr	r0, [r6, #12]
 80004d6:	2800      	cmp	r0, #0
 80004d8:	d00b      	beq.n	80004f2 <cmox_ECC_CondImportPoint+0xc0>
 80004da:	5942      	ldr	r2, [r0, r5]
 80004dc:	9802      	ldr	r0, [sp, #8]
 80004de:	9900      	ldr	r1, [sp, #0]
 80004e0:	0049      	lsls	r1, r1, #1
 80004e2:	1861      	adds	r1, r4, r1
 80004e4:	0089      	lsls	r1, r1, #2
 80004e6:	5841      	ldr	r1, [r0, r1]
 80004e8:	0038      	movs	r0, r7
 80004ea:	f001 f9ee 	bl	80018ca <cmox_mathUtils_mux>
 80004ee:	68f1      	ldr	r1, [r6, #12]
 80004f0:	5148      	str	r0, [r1, r5]
 80004f2:	1c64      	adds	r4, r4, #1
 80004f4:	9800      	ldr	r0, [sp, #0]
 80004f6:	42a0      	cmp	r0, r4
 80004f8:	d3af      	bcc.n	800045a <cmox_ECC_CondImportPoint+0x28>
 80004fa:	00a5      	lsls	r5, r4, #2
 80004fc:	9804      	ldr	r0, [sp, #16]
 80004fe:	1f00      	subs	r0, r0, #4
 8000500:	9002      	str	r0, [sp, #8]
 8000502:	6830      	ldr	r0, [r6, #0]
 8000504:	5942      	ldr	r2, [r0, r5]
 8000506:	9802      	ldr	r0, [sp, #8]
 8000508:	5941      	ldr	r1, [r0, r5]
 800050a:	0038      	movs	r0, r7
 800050c:	f001 f9dd 	bl	80018ca <cmox_mathUtils_mux>
 8000510:	6831      	ldr	r1, [r6, #0]
 8000512:	5148      	str	r0, [r1, r5]
 8000514:	6870      	ldr	r0, [r6, #4]
 8000516:	2800      	cmp	r0, #0
 8000518:	d00a      	beq.n	8000530 <cmox_ECC_CondImportPoint+0xfe>
 800051a:	5942      	ldr	r2, [r0, r5]
 800051c:	9802      	ldr	r0, [sp, #8]
 800051e:	9900      	ldr	r1, [sp, #0]
 8000520:	1861      	adds	r1, r4, r1
 8000522:	0089      	lsls	r1, r1, #2
 8000524:	5841      	ldr	r1, [r0, r1]
 8000526:	0038      	movs	r0, r7
 8000528:	f001 f9cf 	bl	80018ca <cmox_mathUtils_mux>
 800052c:	6871      	ldr	r1, [r6, #4]
 800052e:	5148      	str	r0, [r1, r5]
 8000530:	68b0      	ldr	r0, [r6, #8]
 8000532:	5942      	ldr	r2, [r0, r5]
 8000534:	9801      	ldr	r0, [sp, #4]
 8000536:	2800      	cmp	r0, #0
 8000538:	d1c5      	bne.n	80004c6 <cmox_ECC_CondImportPoint+0x94>
 800053a:	2100      	movs	r1, #0
 800053c:	e7c5      	b.n	80004ca <cmox_ECC_CondImportPoint+0x98>

0800053e <cmox_ECC_PointToModularDomain>:
 800053e:	b570      	push	{r4, r5, r6, lr}
 8000540:	0004      	movs	r4, r0
 8000542:	000d      	movs	r5, r1
 8000544:	2600      	movs	r6, #0
 8000546:	69a0      	ldr	r0, [r4, #24]
 8000548:	6840      	ldr	r0, [r0, #4]
 800054a:	69c0      	ldr	r0, [r0, #28]
 800054c:	2800      	cmp	r0, #0
 800054e:	d00a      	beq.n	8000566 <cmox_ECC_PointToModularDomain+0x28>
 8000550:	2802      	cmp	r0, #2
 8000552:	d003      	beq.n	800055c <cmox_ECC_PointToModularDomain+0x1e>
 8000554:	d307      	bcc.n	8000566 <cmox_ECC_PointToModularDomain+0x28>
 8000556:	2803      	cmp	r0, #3
 8000558:	d00a      	beq.n	8000570 <cmox_ECC_PointToModularDomain+0x32>
 800055a:	e014      	b.n	8000586 <cmox_ECC_PointToModularDomain+0x48>
 800055c:	6a22      	ldr	r2, [r4, #32]
 800055e:	0021      	movs	r1, r4
 8000560:	68e8      	ldr	r0, [r5, #12]
 8000562:	f001 f936 	bl	80017d2 <cmox_ModularBN_Enter>
 8000566:	6a22      	ldr	r2, [r4, #32]
 8000568:	0021      	movs	r1, r4
 800056a:	6868      	ldr	r0, [r5, #4]
 800056c:	f001 f931 	bl	80017d2 <cmox_ModularBN_Enter>
 8000570:	6a22      	ldr	r2, [r4, #32]
 8000572:	0021      	movs	r1, r4
 8000574:	6828      	ldr	r0, [r5, #0]
 8000576:	f001 f92c 	bl	80017d2 <cmox_ModularBN_Enter>
 800057a:	6a22      	ldr	r2, [r4, #32]
 800057c:	0021      	movs	r1, r4
 800057e:	68a8      	ldr	r0, [r5, #8]
 8000580:	f001 f927 	bl	80017d2 <cmox_ModularBN_Enter>
 8000584:	e000      	b.n	8000588 <cmox_ECC_PointToModularDomain+0x4a>
 8000586:	2601      	movs	r6, #1
 8000588:	6928      	ldr	r0, [r5, #16]
 800058a:	2104      	movs	r1, #4
 800058c:	4301      	orrs	r1, r0
 800058e:	6129      	str	r1, [r5, #16]
 8000590:	0030      	movs	r0, r6
 8000592:	bd70      	pop	{r4, r5, r6, pc}

08000594 <cmox_ECC_PointFromModularDomain>:
 8000594:	b538      	push	{r3, r4, r5, lr}
 8000596:	0004      	movs	r4, r0
 8000598:	000d      	movs	r5, r1
 800059a:	69a0      	ldr	r0, [r4, #24]
 800059c:	6840      	ldr	r0, [r0, #4]
 800059e:	69c0      	ldr	r0, [r0, #28]
 80005a0:	2800      	cmp	r0, #0
 80005a2:	d00d      	beq.n	80005c0 <cmox_ECC_PointFromModularDomain+0x2c>
 80005a4:	2802      	cmp	r0, #2
 80005a6:	d003      	beq.n	80005b0 <cmox_ECC_PointFromModularDomain+0x1c>
 80005a8:	d30a      	bcc.n	80005c0 <cmox_ECC_PointFromModularDomain+0x2c>
 80005aa:	2803      	cmp	r0, #3
 80005ac:	d010      	beq.n	80005d0 <cmox_ECC_PointFromModularDomain+0x3c>
 80005ae:	e01e      	b.n	80005ee <cmox_ECC_PointFromModularDomain+0x5a>
 80005b0:	6a23      	ldr	r3, [r4, #32]
 80005b2:	69e2      	ldr	r2, [r4, #28]
 80005b4:	0021      	movs	r1, r4
 80005b6:	68e8      	ldr	r0, [r5, #12]
 80005b8:	f001 f913 	bl	80017e2 <cmox_ModularBN_Exit>
 80005bc:	2800      	cmp	r0, #0
 80005be:	d117      	bne.n	80005f0 <cmox_ECC_PointFromModularDomain+0x5c>
 80005c0:	6a23      	ldr	r3, [r4, #32]
 80005c2:	69e2      	ldr	r2, [r4, #28]
 80005c4:	0021      	movs	r1, r4
 80005c6:	6868      	ldr	r0, [r5, #4]
 80005c8:	f001 f90b 	bl	80017e2 <cmox_ModularBN_Exit>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d10f      	bne.n	80005f0 <cmox_ECC_PointFromModularDomain+0x5c>
 80005d0:	6a23      	ldr	r3, [r4, #32]
 80005d2:	69e2      	ldr	r2, [r4, #28]
 80005d4:	0021      	movs	r1, r4
 80005d6:	6828      	ldr	r0, [r5, #0]
 80005d8:	f001 f903 	bl	80017e2 <cmox_ModularBN_Exit>
 80005dc:	2800      	cmp	r0, #0
 80005de:	d107      	bne.n	80005f0 <cmox_ECC_PointFromModularDomain+0x5c>
 80005e0:	6a23      	ldr	r3, [r4, #32]
 80005e2:	69e2      	ldr	r2, [r4, #28]
 80005e4:	0021      	movs	r1, r4
 80005e6:	68a8      	ldr	r0, [r5, #8]
 80005e8:	f001 f8fb 	bl	80017e2 <cmox_ModularBN_Exit>
 80005ec:	e000      	b.n	80005f0 <cmox_ECC_PointFromModularDomain+0x5c>
 80005ee:	2001      	movs	r0, #1
 80005f0:	6929      	ldr	r1, [r5, #16]
 80005f2:	2204      	movs	r2, #4
 80005f4:	4391      	bics	r1, r2
 80005f6:	6129      	str	r1, [r5, #16]
 80005f8:	bd32      	pop	{r1, r4, r5, pc}

080005fa <cmox_ECC_PointValidation>:
 80005fa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80005fc:	0004      	movs	r4, r0
 80005fe:	2500      	movs	r5, #0
 8000600:	2c00      	cmp	r4, #0
 8000602:	d062      	beq.n	80006ca <cmox_ECC_PointValidation+0xd0>
 8000604:	000e      	movs	r6, r1
 8000606:	d060      	beq.n	80006ca <cmox_ECC_PointValidation+0xd0>
 8000608:	2100      	movs	r1, #0
 800060a:	7c32      	ldrb	r2, [r6, #16]
 800060c:	07d0      	lsls	r0, r2, #31
 800060e:	0fc0      	lsrs	r0, r0, #31
 8000610:	f001 f966 	bl	80018e0 <cmox_mathUtils_neq>
 8000614:	2801      	cmp	r0, #1
 8000616:	d058      	beq.n	80006ca <cmox_ECC_PointValidation+0xd0>
 8000618:	2100      	movs	r1, #0
 800061a:	68b0      	ldr	r0, [r6, #8]
 800061c:	f002 fe3b 	bl	8003296 <cmox_bn_cmpUint>
 8000620:	2801      	cmp	r0, #1
 8000622:	d052      	beq.n	80006ca <cmox_ECC_PointValidation+0xd0>
 8000624:	69a0      	ldr	r0, [r4, #24]
 8000626:	6800      	ldr	r0, [r0, #0]
 8000628:	6801      	ldr	r1, [r0, #0]
 800062a:	6830      	ldr	r0, [r6, #0]
 800062c:	f002 fde5 	bl	80031fa <cmox_bn_cmp>
 8000630:	2800      	cmp	r0, #0
 8000632:	d54a      	bpl.n	80006ca <cmox_ECC_PointValidation+0xd0>
 8000634:	69a0      	ldr	r0, [r4, #24]
 8000636:	6841      	ldr	r1, [r0, #4]
 8000638:	69c9      	ldr	r1, [r1, #28]
 800063a:	2903      	cmp	r1, #3
 800063c:	d006      	beq.n	800064c <cmox_ECC_PointValidation+0x52>
 800063e:	6800      	ldr	r0, [r0, #0]
 8000640:	6801      	ldr	r1, [r0, #0]
 8000642:	6870      	ldr	r0, [r6, #4]
 8000644:	f002 fdd9 	bl	80031fa <cmox_bn_cmp>
 8000648:	2800      	cmp	r0, #0
 800064a:	d53e      	bpl.n	80006ca <cmox_ECC_PointValidation+0xd0>
 800064c:	69a0      	ldr	r0, [r4, #24]
 800064e:	6800      	ldr	r0, [r0, #0]
 8000650:	6901      	ldr	r1, [r0, #16]
 8000652:	2900      	cmp	r1, #0
 8000654:	d03a      	beq.n	80006cc <cmox_ECC_PointValidation+0xd2>
 8000656:	6941      	ldr	r1, [r0, #20]
 8000658:	2900      	cmp	r1, #0
 800065a:	d037      	beq.n	80006cc <cmox_ECC_PointValidation+0xd2>
 800065c:	69c0      	ldr	r0, [r0, #28]
 800065e:	2800      	cmp	r0, #0
 8000660:	d003      	beq.n	800066a <cmox_ECC_PointValidation+0x70>
 8000662:	2802      	cmp	r0, #2
 8000664:	d032      	beq.n	80006cc <cmox_ECC_PointValidation+0xd2>
 8000666:	d333      	bcc.n	80006d0 <cmox_ECC_PointValidation+0xd6>
 8000668:	e02f      	b.n	80006ca <cmox_ECC_PointValidation+0xd0>
 800066a:	6a23      	ldr	r3, [r4, #32]
 800066c:	0022      	movs	r2, r4
 800066e:	6960      	ldr	r0, [r4, #20]
 8000670:	6801      	ldr	r1, [r0, #0]
 8000672:	6830      	ldr	r0, [r6, #0]
 8000674:	f001 f8f8 	bl	8001868 <cmox_ModularBN_Sqr>
 8000678:	69a0      	ldr	r0, [r4, #24]
 800067a:	6801      	ldr	r1, [r0, #0]
 800067c:	6960      	ldr	r0, [r4, #20]
 800067e:	6800      	ldr	r0, [r0, #0]
 8000680:	0003      	movs	r3, r0
 8000682:	680a      	ldr	r2, [r1, #0]
 8000684:	6909      	ldr	r1, [r1, #16]
 8000686:	f000 fe5b 	bl	8001340 <cmox_ModAddBN>
 800068a:	6960      	ldr	r0, [r4, #20]
 800068c:	6802      	ldr	r2, [r0, #0]
 800068e:	6a20      	ldr	r0, [r4, #32]
 8000690:	9000      	str	r0, [sp, #0]
 8000692:	0023      	movs	r3, r4
 8000694:	6831      	ldr	r1, [r6, #0]
 8000696:	0010      	movs	r0, r2
 8000698:	f001 f8c2 	bl	8001820 <cmox_ModularBN_Mul>
 800069c:	69a0      	ldr	r0, [r4, #24]
 800069e:	6801      	ldr	r1, [r0, #0]
 80006a0:	6960      	ldr	r0, [r4, #20]
 80006a2:	6800      	ldr	r0, [r0, #0]
 80006a4:	0003      	movs	r3, r0
 80006a6:	680a      	ldr	r2, [r1, #0]
 80006a8:	6949      	ldr	r1, [r1, #20]
 80006aa:	f000 fe49 	bl	8001340 <cmox_ModAddBN>
 80006ae:	6a23      	ldr	r3, [r4, #32]
 80006b0:	0022      	movs	r2, r4
 80006b2:	6960      	ldr	r0, [r4, #20]
 80006b4:	6841      	ldr	r1, [r0, #4]
 80006b6:	6870      	ldr	r0, [r6, #4]
 80006b8:	f001 f8d6 	bl	8001868 <cmox_ModularBN_Sqr>
 80006bc:	6960      	ldr	r0, [r4, #20]
 80006be:	6841      	ldr	r1, [r0, #4]
 80006c0:	6800      	ldr	r0, [r0, #0]
 80006c2:	f002 fd9a 	bl	80031fa <cmox_bn_cmp>
 80006c6:	2800      	cmp	r0, #0
 80006c8:	d000      	beq.n	80006cc <cmox_ECC_PointValidation+0xd2>
 80006ca:	2504      	movs	r5, #4
 80006cc:	0028      	movs	r0, r5
 80006ce:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80006d0:	6a23      	ldr	r3, [r4, #32]
 80006d2:	0022      	movs	r2, r4
 80006d4:	6960      	ldr	r0, [r4, #20]
 80006d6:	6801      	ldr	r1, [r0, #0]
 80006d8:	6830      	ldr	r0, [r6, #0]
 80006da:	f001 f8c5 	bl	8001868 <cmox_ModularBN_Sqr>
 80006de:	6a23      	ldr	r3, [r4, #32]
 80006e0:	0022      	movs	r2, r4
 80006e2:	6960      	ldr	r0, [r4, #20]
 80006e4:	6841      	ldr	r1, [r0, #4]
 80006e6:	6870      	ldr	r0, [r6, #4]
 80006e8:	f001 f8be 	bl	8001868 <cmox_ModularBN_Sqr>
 80006ec:	6960      	ldr	r0, [r4, #20]
 80006ee:	6801      	ldr	r1, [r0, #0]
 80006f0:	6a20      	ldr	r0, [r4, #32]
 80006f2:	9000      	str	r0, [sp, #0]
 80006f4:	0023      	movs	r3, r4
 80006f6:	000a      	movs	r2, r1
 80006f8:	69a0      	ldr	r0, [r4, #24]
 80006fa:	6800      	ldr	r0, [r0, #0]
 80006fc:	6900      	ldr	r0, [r0, #16]
 80006fe:	f001 f88f 	bl	8001820 <cmox_ModularBN_Mul>
 8000702:	6961      	ldr	r1, [r4, #20]
 8000704:	6808      	ldr	r0, [r1, #0]
 8000706:	0003      	movs	r3, r0
 8000708:	69a2      	ldr	r2, [r4, #24]
 800070a:	6812      	ldr	r2, [r2, #0]
 800070c:	6812      	ldr	r2, [r2, #0]
 800070e:	6849      	ldr	r1, [r1, #4]
 8000710:	f000 fe16 	bl	8001340 <cmox_ModAddBN>
 8000714:	6960      	ldr	r0, [r4, #20]
 8000716:	6840      	ldr	r0, [r0, #4]
 8000718:	6a21      	ldr	r1, [r4, #32]
 800071a:	9100      	str	r1, [sp, #0]
 800071c:	0023      	movs	r3, r4
 800071e:	0002      	movs	r2, r0
 8000720:	6831      	ldr	r1, [r6, #0]
 8000722:	f001 f87d 	bl	8001820 <cmox_ModularBN_Mul>
 8000726:	6960      	ldr	r0, [r4, #20]
 8000728:	6840      	ldr	r0, [r0, #4]
 800072a:	6a21      	ldr	r1, [r4, #32]
 800072c:	9100      	str	r1, [sp, #0]
 800072e:	0023      	movs	r3, r4
 8000730:	0002      	movs	r2, r0
 8000732:	6831      	ldr	r1, [r6, #0]
 8000734:	f001 f874 	bl	8001820 <cmox_ModularBN_Mul>
 8000738:	6960      	ldr	r0, [r4, #20]
 800073a:	6840      	ldr	r0, [r0, #4]
 800073c:	6a21      	ldr	r1, [r4, #32]
 800073e:	9100      	str	r1, [sp, #0]
 8000740:	0023      	movs	r3, r4
 8000742:	0002      	movs	r2, r0
 8000744:	69a1      	ldr	r1, [r4, #24]
 8000746:	6809      	ldr	r1, [r1, #0]
 8000748:	6949      	ldr	r1, [r1, #20]
 800074a:	f001 f869 	bl	8001820 <cmox_ModularBN_Mul>
 800074e:	6960      	ldr	r0, [r4, #20]
 8000750:	6843      	ldr	r3, [r0, #4]
 8000752:	69a0      	ldr	r0, [r4, #24]
 8000754:	6800      	ldr	r0, [r0, #0]
 8000756:	6802      	ldr	r2, [r0, #0]
 8000758:	68b1      	ldr	r1, [r6, #8]
 800075a:	0018      	movs	r0, r3
 800075c:	f000 fdf0 	bl	8001340 <cmox_ModAddBN>
 8000760:	e7ac      	b.n	80006bc <cmox_ECC_PointValidation+0xc2>
	...

08000764 <cmox_ECC_PointToAffine>:
 8000764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	0004      	movs	r4, r0
 800076a:	000e      	movs	r6, r1
 800076c:	2001      	movs	r0, #1
 800076e:	9005      	str	r0, [sp, #20]
 8000770:	2700      	movs	r7, #0
 8000772:	9703      	str	r7, [sp, #12]
 8000774:	9704      	str	r7, [sp, #16]
 8000776:	69a0      	ldr	r0, [r4, #24]
 8000778:	6800      	ldr	r0, [r0, #0]
 800077a:	6800      	ldr	r0, [r0, #0]
 800077c:	6802      	ldr	r2, [r0, #0]
 800077e:	a903      	add	r1, sp, #12
 8000780:	69e0      	ldr	r0, [r4, #28]
 8000782:	f002 fccf 	bl	8003124 <cmox_bn_alloc>
 8000786:	0005      	movs	r5, r0
 8000788:	d000      	beq.n	800078c <cmox_ECC_PointToAffine+0x28>
 800078a:	e0c5      	b.n	8000918 <cmox_ECC_PointToAffine+0x1b4>
 800078c:	69a0      	ldr	r0, [r4, #24]
 800078e:	6800      	ldr	r0, [r0, #0]
 8000790:	6800      	ldr	r0, [r0, #0]
 8000792:	6802      	ldr	r2, [r0, #0]
 8000794:	a904      	add	r1, sp, #16
 8000796:	69e0      	ldr	r0, [r4, #28]
 8000798:	f002 fcc4 	bl	8003124 <cmox_bn_alloc>
 800079c:	0005      	movs	r5, r0
 800079e:	d000      	beq.n	80007a2 <cmox_ECC_PointToAffine+0x3e>
 80007a0:	e0b6      	b.n	8000910 <cmox_ECC_PointToAffine+0x1ac>
 80007a2:	2504      	movs	r5, #4
 80007a4:	2100      	movs	r1, #0
 80007a6:	6930      	ldr	r0, [r6, #16]
 80007a8:	4028      	ands	r0, r5
 80007aa:	f001 f899 	bl	80018e0 <cmox_mathUtils_neq>
 80007ae:	2800      	cmp	r0, #0
 80007b0:	d104      	bne.n	80007bc <cmox_ECC_PointToAffine+0x58>
 80007b2:	9705      	str	r7, [sp, #20]
 80007b4:	0031      	movs	r1, r6
 80007b6:	0020      	movs	r0, r4
 80007b8:	f7ff fec1 	bl	800053e <cmox_ECC_PointToModularDomain>
 80007bc:	4668      	mov	r0, sp
 80007be:	4958      	ldr	r1, [pc, #352]	; (8000920 <cmox_ECC_PointToAffine+0x1bc>)
 80007c0:	c90c      	ldmia	r1!, {r2, r3}
 80007c2:	c00c      	stmia	r0!, {r2, r3}
 80007c4:	4857      	ldr	r0, [pc, #348]	; (8000924 <cmox_ECC_PointToAffine+0x1c0>)
 80007c6:	7800      	ldrb	r0, [r0, #0]
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d101      	bne.n	80007d0 <cmox_ECC_PointToAffine+0x6c>
 80007cc:	2500      	movs	r5, #0
 80007ce:	e000      	b.n	80007d2 <cmox_ECC_PointToAffine+0x6e>
 80007d0:	2704      	movs	r7, #4
 80007d2:	4855      	ldr	r0, [pc, #340]	; (8000928 <cmox_ECC_PointToAffine+0x1c4>)
 80007d4:	59c1      	ldr	r1, [r0, r7]
 80007d6:	466a      	mov	r2, sp
 80007d8:	5952      	ldr	r2, [r2, r5]
 80007da:	1889      	adds	r1, r1, r2
 80007dc:	4a53      	ldr	r2, [pc, #332]	; (800092c <cmox_ECC_PointToAffine+0x1c8>)
 80007de:	600a      	str	r2, [r1, #0]
 80007e0:	680a      	ldr	r2, [r1, #0]
 80007e2:	2701      	movs	r7, #1
 80007e4:	608f      	str	r7, [r1, #8]
 80007e6:	6841      	ldr	r1, [r0, #4]
 80007e8:	4051      	eors	r1, r2
 80007ea:	9a00      	ldr	r2, [sp, #0]
 80007ec:	404a      	eors	r2, r1
 80007ee:	4950      	ldr	r1, [pc, #320]	; (8000930 <cmox_ECC_PointToAffine+0x1cc>)
 80007f0:	4051      	eors	r1, r2
 80007f2:	6800      	ldr	r0, [r0, #0]
 80007f4:	9a01      	ldr	r2, [sp, #4]
 80007f6:	4042      	eors	r2, r0
 80007f8:	484e      	ldr	r0, [pc, #312]	; (8000934 <cmox_ECC_PointToAffine+0x1d0>)
 80007fa:	4050      	eors	r0, r2
 80007fc:	1808      	adds	r0, r1, r0
 80007fe:	494e      	ldr	r1, [pc, #312]	; (8000938 <cmox_ECC_PointToAffine+0x1d4>)
 8000800:	4041      	eors	r1, r0
 8000802:	d001      	beq.n	8000808 <cmox_ECC_PointToAffine+0xa4>
 8000804:	2102      	movs	r1, #2
 8000806:	e000      	b.n	800080a <cmox_ECC_PointToAffine+0xa6>
 8000808:	2101      	movs	r1, #1
 800080a:	43c9      	mvns	r1, r1
 800080c:	9a04      	ldr	r2, [sp, #16]
 800080e:	69a0      	ldr	r0, [r4, #24]
 8000810:	6800      	ldr	r0, [r0, #0]
 8000812:	6800      	ldr	r0, [r0, #0]
 8000814:	f000 feb5 	bl	8001582 <cmox_AddBN_Int>
 8000818:	69a0      	ldr	r0, [r4, #24]
 800081a:	69c5      	ldr	r5, [r0, #28]
 800081c:	6a20      	ldr	r0, [r4, #32]
 800081e:	9002      	str	r0, [sp, #8]
 8000820:	69e0      	ldr	r0, [r4, #28]
 8000822:	9001      	str	r0, [sp, #4]
 8000824:	9803      	ldr	r0, [sp, #12]
 8000826:	9000      	str	r0, [sp, #0]
 8000828:	686b      	ldr	r3, [r5, #4]
 800082a:	0022      	movs	r2, r4
 800082c:	9904      	ldr	r1, [sp, #16]
 800082e:	68b0      	ldr	r0, [r6, #8]
 8000830:	682d      	ldr	r5, [r5, #0]
 8000832:	47a8      	blx	r5
 8000834:	0005      	movs	r5, r0
 8000836:	69a0      	ldr	r0, [r4, #24]
 8000838:	6840      	ldr	r0, [r0, #4]
 800083a:	69c0      	ldr	r0, [r0, #28]
 800083c:	2800      	cmp	r0, #0
 800083e:	d005      	beq.n	800084c <cmox_ECC_PointToAffine+0xe8>
 8000840:	2802      	cmp	r0, #2
 8000842:	d02a      	beq.n	800089a <cmox_ECC_PointToAffine+0x136>
 8000844:	d31f      	bcc.n	8000886 <cmox_ECC_PointToAffine+0x122>
 8000846:	2803      	cmp	r0, #3
 8000848:	d03e      	beq.n	80008c8 <cmox_ECC_PointToAffine+0x164>
 800084a:	e046      	b.n	80008da <cmox_ECC_PointToAffine+0x176>
 800084c:	6a23      	ldr	r3, [r4, #32]
 800084e:	0022      	movs	r2, r4
 8000850:	9904      	ldr	r1, [sp, #16]
 8000852:	9803      	ldr	r0, [sp, #12]
 8000854:	f001 f808 	bl	8001868 <cmox_ModularBN_Sqr>
 8000858:	6832      	ldr	r2, [r6, #0]
 800085a:	6a20      	ldr	r0, [r4, #32]
 800085c:	9000      	str	r0, [sp, #0]
 800085e:	0023      	movs	r3, r4
 8000860:	9904      	ldr	r1, [sp, #16]
 8000862:	0010      	movs	r0, r2
 8000864:	f000 ffdc 	bl	8001820 <cmox_ModularBN_Mul>
 8000868:	6a20      	ldr	r0, [r4, #32]
 800086a:	9000      	str	r0, [sp, #0]
 800086c:	0023      	movs	r3, r4
 800086e:	9a04      	ldr	r2, [sp, #16]
 8000870:	4611      	mov	r1, r2
 8000872:	9803      	ldr	r0, [sp, #12]
 8000874:	f000 ffd4 	bl	8001820 <cmox_ModularBN_Mul>
 8000878:	6870      	ldr	r0, [r6, #4]
 800087a:	6a21      	ldr	r1, [r4, #32]
 800087c:	9100      	str	r1, [sp, #0]
 800087e:	0023      	movs	r3, r4
 8000880:	0002      	movs	r2, r0
 8000882:	9904      	ldr	r1, [sp, #16]
 8000884:	e026      	b.n	80008d4 <cmox_ECC_PointToAffine+0x170>
 8000886:	6830      	ldr	r0, [r6, #0]
 8000888:	6a21      	ldr	r1, [r4, #32]
 800088a:	9100      	str	r1, [sp, #0]
 800088c:	0023      	movs	r3, r4
 800088e:	0002      	movs	r2, r0
 8000890:	9903      	ldr	r1, [sp, #12]
 8000892:	f000 ffc5 	bl	8001820 <cmox_ModularBN_Mul>
 8000896:	6870      	ldr	r0, [r6, #4]
 8000898:	e017      	b.n	80008ca <cmox_ECC_PointToAffine+0x166>
 800089a:	6830      	ldr	r0, [r6, #0]
 800089c:	6a21      	ldr	r1, [r4, #32]
 800089e:	9100      	str	r1, [sp, #0]
 80008a0:	0023      	movs	r3, r4
 80008a2:	0002      	movs	r2, r0
 80008a4:	9903      	ldr	r1, [sp, #12]
 80008a6:	f000 ffbb 	bl	8001820 <cmox_ModularBN_Mul>
 80008aa:	6870      	ldr	r0, [r6, #4]
 80008ac:	6a21      	ldr	r1, [r4, #32]
 80008ae:	9100      	str	r1, [sp, #0]
 80008b0:	0023      	movs	r3, r4
 80008b2:	0002      	movs	r2, r0
 80008b4:	9903      	ldr	r1, [sp, #12]
 80008b6:	f000 ffb3 	bl	8001820 <cmox_ModularBN_Mul>
 80008ba:	6a20      	ldr	r0, [r4, #32]
 80008bc:	9000      	str	r0, [sp, #0]
 80008be:	0023      	movs	r3, r4
 80008c0:	68f2      	ldr	r2, [r6, #12]
 80008c2:	6871      	ldr	r1, [r6, #4]
 80008c4:	6830      	ldr	r0, [r6, #0]
 80008c6:	e005      	b.n	80008d4 <cmox_ECC_PointToAffine+0x170>
 80008c8:	6830      	ldr	r0, [r6, #0]
 80008ca:	6a21      	ldr	r1, [r4, #32]
 80008cc:	9100      	str	r1, [sp, #0]
 80008ce:	0023      	movs	r3, r4
 80008d0:	0002      	movs	r2, r0
 80008d2:	9903      	ldr	r1, [sp, #12]
 80008d4:	f000 ffa4 	bl	8001820 <cmox_ModularBN_Mul>
 80008d8:	e000      	b.n	80008dc <cmox_ECC_PointToAffine+0x178>
 80008da:	2501      	movs	r5, #1
 80008dc:	68b0      	ldr	r0, [r6, #8]
 80008de:	6a21      	ldr	r1, [r4, #32]
 80008e0:	9100      	str	r1, [sp, #0]
 80008e2:	0023      	movs	r3, r4
 80008e4:	0002      	movs	r2, r0
 80008e6:	9903      	ldr	r1, [sp, #12]
 80008e8:	f000 ff9a 	bl	8001820 <cmox_ModularBN_Mul>
 80008ec:	9805      	ldr	r0, [sp, #20]
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d106      	bne.n	8000900 <cmox_ECC_PointToAffine+0x19c>
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d104      	bne.n	8000900 <cmox_ECC_PointToAffine+0x19c>
 80008f6:	0031      	movs	r1, r6
 80008f8:	0020      	movs	r0, r4
 80008fa:	f7ff fe4b 	bl	8000594 <cmox_ECC_PointFromModularDomain>
 80008fe:	0005      	movs	r5, r0
 8000900:	6930      	ldr	r0, [r6, #16]
 8000902:	2102      	movs	r1, #2
 8000904:	4301      	orrs	r1, r0
 8000906:	6131      	str	r1, [r6, #16]
 8000908:	a904      	add	r1, sp, #16
 800090a:	69e0      	ldr	r0, [r4, #28]
 800090c:	f002 fc16 	bl	800313c <cmox_bn_free>
 8000910:	a903      	add	r1, sp, #12
 8000912:	69e0      	ldr	r0, [r4, #28]
 8000914:	f002 fc12 	bl	800313c <cmox_bn_free>
 8000918:	0028      	movs	r0, r5
 800091a:	b007      	add	sp, #28
 800091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800091e:	bf00      	nop
 8000920:	08000f0c 	.word	0x08000f0c
 8000924:	200000cc 	.word	0x200000cc
 8000928:	08009c30 	.word	0x08009c30
 800092c:	ad827e2c 	.word	0xad827e2c
 8000930:	12008504 	.word	0x12008504
 8000934:	7a0168fc 	.word	0x7a0168fc
 8000938:	8e9be2a8 	.word	0x8e9be2a8

0800093c <cmox_ECC_SW_AddPoints_JacoAff>:
 800093c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	0004      	movs	r4, r0
 8000942:	000f      	movs	r7, r1
 8000944:	6960      	ldr	r0, [r4, #20]
 8000946:	6806      	ldr	r6, [r0, #0]
 8000948:	6841      	ldr	r1, [r0, #4]
 800094a:	9102      	str	r1, [sp, #8]
 800094c:	6881      	ldr	r1, [r0, #8]
 800094e:	9101      	str	r1, [sp, #4]
 8000950:	68c0      	ldr	r0, [r0, #12]
 8000952:	9003      	str	r0, [sp, #12]
 8000954:	9808      	ldr	r0, [sp, #32]
 8000956:	6805      	ldr	r5, [r0, #0]
 8000958:	6840      	ldr	r0, [r0, #4]
 800095a:	9005      	str	r0, [sp, #20]
 800095c:	9808      	ldr	r0, [sp, #32]
 800095e:	6880      	ldr	r0, [r0, #8]
 8000960:	9004      	str	r0, [sp, #16]
 8000962:	6a23      	ldr	r3, [r4, #32]
 8000964:	0022      	movs	r2, r4
 8000966:	0031      	movs	r1, r6
 8000968:	68b8      	ldr	r0, [r7, #8]
 800096a:	f000 ff7d 	bl	8001868 <cmox_ModularBN_Sqr>
 800096e:	6a20      	ldr	r0, [r4, #32]
 8000970:	9000      	str	r0, [sp, #0]
 8000972:	0023      	movs	r3, r4
 8000974:	9a02      	ldr	r2, [sp, #8]
 8000976:	0031      	movs	r1, r6
 8000978:	68b8      	ldr	r0, [r7, #8]
 800097a:	f000 ff51 	bl	8001820 <cmox_ModularBN_Mul>
 800097e:	6a20      	ldr	r0, [r4, #32]
 8000980:	9000      	str	r0, [sp, #0]
 8000982:	0023      	movs	r3, r4
 8000984:	0032      	movs	r2, r6
 8000986:	9807      	ldr	r0, [sp, #28]
 8000988:	6801      	ldr	r1, [r0, #0]
 800098a:	0030      	movs	r0, r6
 800098c:	f000 ff48 	bl	8001820 <cmox_ModularBN_Mul>
 8000990:	6a20      	ldr	r0, [r4, #32]
 8000992:	9000      	str	r0, [sp, #0]
 8000994:	0023      	movs	r3, r4
 8000996:	9a02      	ldr	r2, [sp, #8]
 8000998:	9807      	ldr	r0, [sp, #28]
 800099a:	6841      	ldr	r1, [r0, #4]
 800099c:	4610      	mov	r0, r2
 800099e:	f000 ff3f 	bl	8001820 <cmox_ModularBN_Mul>
 80009a2:	0033      	movs	r3, r6
 80009a4:	69a0      	ldr	r0, [r4, #24]
 80009a6:	6800      	ldr	r0, [r0, #0]
 80009a8:	6802      	ldr	r2, [r0, #0]
 80009aa:	6839      	ldr	r1, [r7, #0]
 80009ac:	0030      	movs	r0, r6
 80009ae:	f000 fd5f 	bl	8001470 <cmox_ModSubBN>
 80009b2:	9b02      	ldr	r3, [sp, #8]
 80009b4:	69a0      	ldr	r0, [r4, #24]
 80009b6:	6800      	ldr	r0, [r0, #0]
 80009b8:	6802      	ldr	r2, [r0, #0]
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 fd57 	bl	8001470 <cmox_ModSubBN>
 80009c2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80009c4:	2800      	cmp	r0, #0
 80009c6:	d025      	beq.n	8000a14 <cmox_ECC_SW_AddPoints_JacoAff+0xd8>
 80009c8:	2100      	movs	r1, #0
 80009ca:	0030      	movs	r0, r6
 80009cc:	f002 fc63 	bl	8003296 <cmox_bn_cmpUint>
 80009d0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80009d2:	6008      	str	r0, [r1, #0]
 80009d4:	9908      	ldr	r1, [sp, #32]
 80009d6:	680a      	ldr	r2, [r1, #0]
 80009d8:	9902      	ldr	r1, [sp, #8]
 80009da:	f002 fc07 	bl	80031ec <cmox_bn_mux>
 80009de:	0005      	movs	r5, r0
 80009e0:	9808      	ldr	r0, [sp, #32]
 80009e2:	6842      	ldr	r2, [r0, #4]
 80009e4:	9902      	ldr	r1, [sp, #8]
 80009e6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80009e8:	6800      	ldr	r0, [r0, #0]
 80009ea:	f002 fbff 	bl	80031ec <cmox_bn_mux>
 80009ee:	9005      	str	r0, [sp, #20]
 80009f0:	9808      	ldr	r0, [sp, #32]
 80009f2:	6882      	ldr	r2, [r0, #8]
 80009f4:	9902      	ldr	r1, [sp, #8]
 80009f6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80009f8:	6800      	ldr	r0, [r0, #0]
 80009fa:	f002 fbf7 	bl	80031ec <cmox_bn_mux>
 80009fe:	9004      	str	r0, [sp, #16]
 8000a00:	2100      	movs	r1, #0
 8000a02:	9802      	ldr	r0, [sp, #8]
 8000a04:	f002 fc47 	bl	8003296 <cmox_bn_cmpUint>
 8000a08:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000a0a:	6809      	ldr	r1, [r1, #0]
 8000a0c:	0040      	lsls	r0, r0, #1
 8000a0e:	4308      	orrs	r0, r1
 8000a10:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000a12:	6008      	str	r0, [r1, #0]
 8000a14:	6a20      	ldr	r0, [r4, #32]
 8000a16:	9000      	str	r0, [sp, #0]
 8000a18:	0023      	movs	r3, r4
 8000a1a:	9a04      	ldr	r2, [sp, #16]
 8000a1c:	0031      	movs	r1, r6
 8000a1e:	68b8      	ldr	r0, [r7, #8]
 8000a20:	f000 fefe 	bl	8001820 <cmox_ModularBN_Mul>
 8000a24:	6a23      	ldr	r3, [r4, #32]
 8000a26:	0022      	movs	r2, r4
 8000a28:	9901      	ldr	r1, [sp, #4]
 8000a2a:	0030      	movs	r0, r6
 8000a2c:	f000 ff1c 	bl	8001868 <cmox_ModularBN_Sqr>
 8000a30:	6a20      	ldr	r0, [r4, #32]
 8000a32:	9000      	str	r0, [sp, #0]
 8000a34:	0023      	movs	r3, r4
 8000a36:	9a03      	ldr	r2, [sp, #12]
 8000a38:	9901      	ldr	r1, [sp, #4]
 8000a3a:	0030      	movs	r0, r6
 8000a3c:	f000 fef0 	bl	8001820 <cmox_ModularBN_Mul>
 8000a40:	6a20      	ldr	r0, [r4, #32]
 8000a42:	9000      	str	r0, [sp, #0]
 8000a44:	0023      	movs	r3, r4
 8000a46:	9a01      	ldr	r2, [sp, #4]
 8000a48:	4611      	mov	r1, r2
 8000a4a:	6838      	ldr	r0, [r7, #0]
 8000a4c:	f000 fee8 	bl	8001820 <cmox_ModularBN_Mul>
 8000a50:	0033      	movs	r3, r6
 8000a52:	69a0      	ldr	r0, [r4, #24]
 8000a54:	6800      	ldr	r0, [r0, #0]
 8000a56:	6802      	ldr	r2, [r0, #0]
 8000a58:	9901      	ldr	r1, [sp, #4]
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	f000 fc70 	bl	8001340 <cmox_ModAddBN>
 8000a60:	6a23      	ldr	r3, [r4, #32]
 8000a62:	0022      	movs	r2, r4
 8000a64:	0029      	movs	r1, r5
 8000a66:	9802      	ldr	r0, [sp, #8]
 8000a68:	f000 fefe 	bl	8001868 <cmox_ModularBN_Sqr>
 8000a6c:	002b      	movs	r3, r5
 8000a6e:	69a0      	ldr	r0, [r4, #24]
 8000a70:	6800      	ldr	r0, [r0, #0]
 8000a72:	6802      	ldr	r2, [r0, #0]
 8000a74:	0031      	movs	r1, r6
 8000a76:	0028      	movs	r0, r5
 8000a78:	f000 fcfa 	bl	8001470 <cmox_ModSubBN>
 8000a7c:	002b      	movs	r3, r5
 8000a7e:	69a0      	ldr	r0, [r4, #24]
 8000a80:	6800      	ldr	r0, [r0, #0]
 8000a82:	6802      	ldr	r2, [r0, #0]
 8000a84:	9903      	ldr	r1, [sp, #12]
 8000a86:	0028      	movs	r0, r5
 8000a88:	f000 fcf2 	bl	8001470 <cmox_ModSubBN>
 8000a8c:	9b01      	ldr	r3, [sp, #4]
 8000a8e:	69a0      	ldr	r0, [r4, #24]
 8000a90:	6800      	ldr	r0, [r0, #0]
 8000a92:	6802      	ldr	r2, [r0, #0]
 8000a94:	0029      	movs	r1, r5
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fcea 	bl	8001470 <cmox_ModSubBN>
 8000a9c:	6a20      	ldr	r0, [r4, #32]
 8000a9e:	9000      	str	r0, [sp, #0]
 8000aa0:	0023      	movs	r3, r4
 8000aa2:	9a01      	ldr	r2, [sp, #4]
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	9802      	ldr	r0, [sp, #8]
 8000aa8:	f000 feba 	bl	8001820 <cmox_ModularBN_Mul>
 8000aac:	6a20      	ldr	r0, [r4, #32]
 8000aae:	9000      	str	r0, [sp, #0]
 8000ab0:	0023      	movs	r3, r4
 8000ab2:	9a03      	ldr	r2, [sp, #12]
 8000ab4:	6879      	ldr	r1, [r7, #4]
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	f000 feb2 	bl	8001820 <cmox_ModularBN_Mul>
 8000abc:	9b05      	ldr	r3, [sp, #20]
 8000abe:	69a0      	ldr	r0, [r4, #24]
 8000ac0:	6800      	ldr	r0, [r0, #0]
 8000ac2:	6802      	ldr	r2, [r0, #0]
 8000ac4:	9903      	ldr	r1, [sp, #12]
 8000ac6:	9801      	ldr	r0, [sp, #4]
 8000ac8:	f000 fcd2 	bl	8001470 <cmox_ModSubBN>
 8000acc:	b009      	add	sp, #36	; 0x24
 8000ace:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ad0 <cmox_ECC_SW_AddPoints_Jacobian>:
 8000ad0:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	0004      	movs	r4, r0
 8000ad6:	0017      	movs	r7, r2
 8000ad8:	001d      	movs	r5, r3
 8000ada:	6960      	ldr	r0, [r4, #20]
 8000adc:	6806      	ldr	r6, [r0, #0]
 8000ade:	6841      	ldr	r1, [r0, #4]
 8000ae0:	9101      	str	r1, [sp, #4]
 8000ae2:	6881      	ldr	r1, [r0, #8]
 8000ae4:	9102      	str	r1, [sp, #8]
 8000ae6:	68c0      	ldr	r0, [r0, #12]
 8000ae8:	9003      	str	r0, [sp, #12]
 8000aea:	6a23      	ldr	r3, [r4, #32]
 8000aec:	0022      	movs	r2, r4
 8000aee:	0031      	movs	r1, r6
 8000af0:	9804      	ldr	r0, [sp, #16]
 8000af2:	6880      	ldr	r0, [r0, #8]
 8000af4:	f000 feb8 	bl	8001868 <cmox_ModularBN_Sqr>
 8000af8:	6a20      	ldr	r0, [r4, #32]
 8000afa:	9000      	str	r0, [sp, #0]
 8000afc:	0023      	movs	r3, r4
 8000afe:	9a01      	ldr	r2, [sp, #4]
 8000b00:	0031      	movs	r1, r6
 8000b02:	6838      	ldr	r0, [r7, #0]
 8000b04:	f000 fe8c 	bl	8001820 <cmox_ModularBN_Mul>
 8000b08:	6a20      	ldr	r0, [r4, #32]
 8000b0a:	9000      	str	r0, [sp, #0]
 8000b0c:	0023      	movs	r3, r4
 8000b0e:	0032      	movs	r2, r6
 8000b10:	0031      	movs	r1, r6
 8000b12:	9804      	ldr	r0, [sp, #16]
 8000b14:	6880      	ldr	r0, [r0, #8]
 8000b16:	f000 fe83 	bl	8001820 <cmox_ModularBN_Mul>
 8000b1a:	6a20      	ldr	r0, [r4, #32]
 8000b1c:	9000      	str	r0, [sp, #0]
 8000b1e:	0023      	movs	r3, r4
 8000b20:	0032      	movs	r2, r6
 8000b22:	0031      	movs	r1, r6
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f000 fe7b 	bl	8001820 <cmox_ModularBN_Mul>
 8000b2a:	6a23      	ldr	r3, [r4, #32]
 8000b2c:	0022      	movs	r2, r4
 8000b2e:	9902      	ldr	r1, [sp, #8]
 8000b30:	68b8      	ldr	r0, [r7, #8]
 8000b32:	f000 fe99 	bl	8001868 <cmox_ModularBN_Sqr>
 8000b36:	6a20      	ldr	r0, [r4, #32]
 8000b38:	9000      	str	r0, [sp, #0]
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9a03      	ldr	r2, [sp, #12]
 8000b3e:	9902      	ldr	r1, [sp, #8]
 8000b40:	9804      	ldr	r0, [sp, #16]
 8000b42:	6800      	ldr	r0, [r0, #0]
 8000b44:	f000 fe6c 	bl	8001820 <cmox_ModularBN_Mul>
 8000b48:	6a20      	ldr	r0, [r4, #32]
 8000b4a:	9000      	str	r0, [sp, #0]
 8000b4c:	0023      	movs	r3, r4
 8000b4e:	9a02      	ldr	r2, [sp, #8]
 8000b50:	4611      	mov	r1, r2
 8000b52:	68b8      	ldr	r0, [r7, #8]
 8000b54:	f000 fe64 	bl	8001820 <cmox_ModularBN_Mul>
 8000b58:	6a20      	ldr	r0, [r4, #32]
 8000b5a:	9000      	str	r0, [sp, #0]
 8000b5c:	0023      	movs	r3, r4
 8000b5e:	9a02      	ldr	r2, [sp, #8]
 8000b60:	4611      	mov	r1, r2
 8000b62:	9804      	ldr	r0, [sp, #16]
 8000b64:	6840      	ldr	r0, [r0, #4]
 8000b66:	f000 fe5b 	bl	8001820 <cmox_ModularBN_Mul>
 8000b6a:	9b01      	ldr	r3, [sp, #4]
 8000b6c:	69a0      	ldr	r0, [r4, #24]
 8000b6e:	6800      	ldr	r0, [r0, #0]
 8000b70:	6802      	ldr	r2, [r0, #0]
 8000b72:	9903      	ldr	r1, [sp, #12]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fc7b 	bl	8001470 <cmox_ModSubBN>
 8000b7a:	0033      	movs	r3, r6
 8000b7c:	69a0      	ldr	r0, [r4, #24]
 8000b7e:	6800      	ldr	r0, [r0, #0]
 8000b80:	6802      	ldr	r2, [r0, #0]
 8000b82:	9902      	ldr	r1, [sp, #8]
 8000b84:	0030      	movs	r0, r6
 8000b86:	f000 fc73 	bl	8001470 <cmox_ModSubBN>
 8000b8a:	6a20      	ldr	r0, [r4, #32]
 8000b8c:	9000      	str	r0, [sp, #0]
 8000b8e:	0023      	movs	r3, r4
 8000b90:	682a      	ldr	r2, [r5, #0]
 8000b92:	9901      	ldr	r1, [sp, #4]
 8000b94:	68b8      	ldr	r0, [r7, #8]
 8000b96:	f000 fe43 	bl	8001820 <cmox_ModularBN_Mul>
 8000b9a:	6a20      	ldr	r0, [r4, #32]
 8000b9c:	9000      	str	r0, [sp, #0]
 8000b9e:	0023      	movs	r3, r4
 8000ba0:	68aa      	ldr	r2, [r5, #8]
 8000ba2:	6829      	ldr	r1, [r5, #0]
 8000ba4:	9804      	ldr	r0, [sp, #16]
 8000ba6:	6880      	ldr	r0, [r0, #8]
 8000ba8:	f000 fe3a 	bl	8001820 <cmox_ModularBN_Mul>
 8000bac:	6a23      	ldr	r3, [r4, #32]
 8000bae:	0022      	movs	r2, r4
 8000bb0:	6829      	ldr	r1, [r5, #0]
 8000bb2:	9801      	ldr	r0, [sp, #4]
 8000bb4:	f000 fe58 	bl	8001868 <cmox_ModularBN_Sqr>
 8000bb8:	6a20      	ldr	r0, [r4, #32]
 8000bba:	9000      	str	r0, [sp, #0]
 8000bbc:	0023      	movs	r3, r4
 8000bbe:	686a      	ldr	r2, [r5, #4]
 8000bc0:	6829      	ldr	r1, [r5, #0]
 8000bc2:	9801      	ldr	r0, [sp, #4]
 8000bc4:	f000 fe2c 	bl	8001820 <cmox_ModularBN_Mul>
 8000bc8:	6a20      	ldr	r0, [r4, #32]
 8000bca:	9000      	str	r0, [sp, #0]
 8000bcc:	0023      	movs	r3, r4
 8000bce:	9a01      	ldr	r2, [sp, #4]
 8000bd0:	6829      	ldr	r1, [r5, #0]
 8000bd2:	9803      	ldr	r0, [sp, #12]
 8000bd4:	f000 fe24 	bl	8001820 <cmox_ModularBN_Mul>
 8000bd8:	6a23      	ldr	r3, [r4, #32]
 8000bda:	0022      	movs	r2, r4
 8000bdc:	6829      	ldr	r1, [r5, #0]
 8000bde:	0030      	movs	r0, r6
 8000be0:	f000 fe42 	bl	8001868 <cmox_ModularBN_Sqr>
 8000be4:	6828      	ldr	r0, [r5, #0]
 8000be6:	0003      	movs	r3, r0
 8000be8:	69a1      	ldr	r1, [r4, #24]
 8000bea:	6809      	ldr	r1, [r1, #0]
 8000bec:	680a      	ldr	r2, [r1, #0]
 8000bee:	6869      	ldr	r1, [r5, #4]
 8000bf0:	f000 fc3e 	bl	8001470 <cmox_ModSubBN>
 8000bf4:	6869      	ldr	r1, [r5, #4]
 8000bf6:	6a20      	ldr	r0, [r4, #32]
 8000bf8:	9000      	str	r0, [sp, #0]
 8000bfa:	0023      	movs	r3, r4
 8000bfc:	000a      	movs	r2, r1
 8000bfe:	9802      	ldr	r0, [sp, #8]
 8000c00:	f000 fe0e 	bl	8001820 <cmox_ModularBN_Mul>
 8000c04:	9a02      	ldr	r2, [sp, #8]
 8000c06:	69a0      	ldr	r0, [r4, #24]
 8000c08:	6800      	ldr	r0, [r0, #0]
 8000c0a:	6801      	ldr	r1, [r0, #0]
 8000c0c:	9801      	ldr	r0, [sp, #4]
 8000c0e:	f000 fd32 	bl	8001676 <cmox_FieldBN_Mul2>
 8000c12:	6828      	ldr	r0, [r5, #0]
 8000c14:	0003      	movs	r3, r0
 8000c16:	69a1      	ldr	r1, [r4, #24]
 8000c18:	6809      	ldr	r1, [r1, #0]
 8000c1a:	680a      	ldr	r2, [r1, #0]
 8000c1c:	9902      	ldr	r1, [sp, #8]
 8000c1e:	f000 fc27 	bl	8001470 <cmox_ModSubBN>
 8000c22:	9b01      	ldr	r3, [sp, #4]
 8000c24:	69a0      	ldr	r0, [r4, #24]
 8000c26:	6800      	ldr	r0, [r0, #0]
 8000c28:	6802      	ldr	r2, [r0, #0]
 8000c2a:	6829      	ldr	r1, [r5, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fc1f 	bl	8001470 <cmox_ModSubBN>
 8000c32:	6a20      	ldr	r0, [r4, #32]
 8000c34:	9000      	str	r0, [sp, #0]
 8000c36:	0023      	movs	r3, r4
 8000c38:	0032      	movs	r2, r6
 8000c3a:	9901      	ldr	r1, [sp, #4]
 8000c3c:	0030      	movs	r0, r6
 8000c3e:	f000 fdef 	bl	8001820 <cmox_ModularBN_Mul>
 8000c42:	6869      	ldr	r1, [r5, #4]
 8000c44:	000b      	movs	r3, r1
 8000c46:	69a0      	ldr	r0, [r4, #24]
 8000c48:	6800      	ldr	r0, [r0, #0]
 8000c4a:	6802      	ldr	r2, [r0, #0]
 8000c4c:	0030      	movs	r0, r6
 8000c4e:	f000 fc0f 	bl	8001470 <cmox_ModSubBN>
 8000c52:	b005      	add	sp, #20
 8000c54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c56 <cmox_ECC_SW_DblPoint_Jac_a3>:
 8000c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	0004      	movs	r4, r0
 8000c5c:	000e      	movs	r6, r1
 8000c5e:	0017      	movs	r7, r2
 8000c60:	6960      	ldr	r0, [r4, #20]
 8000c62:	6805      	ldr	r5, [r0, #0]
 8000c64:	6841      	ldr	r1, [r0, #4]
 8000c66:	9101      	str	r1, [sp, #4]
 8000c68:	6881      	ldr	r1, [r0, #8]
 8000c6a:	9103      	str	r1, [sp, #12]
 8000c6c:	68c0      	ldr	r0, [r0, #12]
 8000c6e:	9002      	str	r0, [sp, #8]
 8000c70:	002a      	movs	r2, r5
 8000c72:	6839      	ldr	r1, [r7, #0]
 8000c74:	9806      	ldr	r0, [sp, #24]
 8000c76:	f002 fab9 	bl	80031ec <cmox_bn_mux>
 8000c7a:	9004      	str	r0, [sp, #16]
 8000c7c:	002a      	movs	r2, r5
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	9806      	ldr	r0, [sp, #24]
 8000c82:	f002 fab3 	bl	80031ec <cmox_bn_mux>
 8000c86:	9005      	str	r0, [sp, #20]
 8000c88:	002a      	movs	r2, r5
 8000c8a:	68b9      	ldr	r1, [r7, #8]
 8000c8c:	9806      	ldr	r0, [sp, #24]
 8000c8e:	f002 faad 	bl	80031ec <cmox_bn_mux>
 8000c92:	0007      	movs	r7, r0
 8000c94:	6a23      	ldr	r3, [r4, #32]
 8000c96:	0022      	movs	r2, r4
 8000c98:	0029      	movs	r1, r5
 8000c9a:	68b0      	ldr	r0, [r6, #8]
 8000c9c:	f000 fde4 	bl	8001868 <cmox_ModularBN_Sqr>
 8000ca0:	9b01      	ldr	r3, [sp, #4]
 8000ca2:	69a0      	ldr	r0, [r4, #24]
 8000ca4:	6800      	ldr	r0, [r0, #0]
 8000ca6:	6802      	ldr	r2, [r0, #0]
 8000ca8:	0029      	movs	r1, r5
 8000caa:	6830      	ldr	r0, [r6, #0]
 8000cac:	f000 fb48 	bl	8001340 <cmox_ModAddBN>
 8000cb0:	002b      	movs	r3, r5
 8000cb2:	69a0      	ldr	r0, [r4, #24]
 8000cb4:	6800      	ldr	r0, [r0, #0]
 8000cb6:	6802      	ldr	r2, [r0, #0]
 8000cb8:	0029      	movs	r1, r5
 8000cba:	6830      	ldr	r0, [r6, #0]
 8000cbc:	f000 fbd8 	bl	8001470 <cmox_ModSubBN>
 8000cc0:	6a20      	ldr	r0, [r4, #32]
 8000cc2:	9000      	str	r0, [sp, #0]
 8000cc4:	0023      	movs	r3, r4
 8000cc6:	002a      	movs	r2, r5
 8000cc8:	9901      	ldr	r1, [sp, #4]
 8000cca:	0028      	movs	r0, r5
 8000ccc:	f000 fda8 	bl	8001820 <cmox_ModularBN_Mul>
 8000cd0:	9a01      	ldr	r2, [sp, #4]
 8000cd2:	69a0      	ldr	r0, [r4, #24]
 8000cd4:	6800      	ldr	r0, [r0, #0]
 8000cd6:	6801      	ldr	r1, [r0, #0]
 8000cd8:	0028      	movs	r0, r5
 8000cda:	f000 fc71 	bl	80015c0 <cmox_FieldBN_Div2>
 8000cde:	002b      	movs	r3, r5
 8000ce0:	69a0      	ldr	r0, [r4, #24]
 8000ce2:	6800      	ldr	r0, [r0, #0]
 8000ce4:	6802      	ldr	r2, [r0, #0]
 8000ce6:	9901      	ldr	r1, [sp, #4]
 8000ce8:	0028      	movs	r0, r5
 8000cea:	f000 fb29 	bl	8001340 <cmox_ModAddBN>
 8000cee:	6a23      	ldr	r3, [r4, #32]
 8000cf0:	0022      	movs	r2, r4
 8000cf2:	9901      	ldr	r1, [sp, #4]
 8000cf4:	6870      	ldr	r0, [r6, #4]
 8000cf6:	f000 fdb7 	bl	8001868 <cmox_ModularBN_Sqr>
 8000cfa:	6a20      	ldr	r0, [r4, #32]
 8000cfc:	9000      	str	r0, [sp, #0]
 8000cfe:	0023      	movs	r3, r4
 8000d00:	9a03      	ldr	r2, [sp, #12]
 8000d02:	9901      	ldr	r1, [sp, #4]
 8000d04:	6830      	ldr	r0, [r6, #0]
 8000d06:	f000 fd8b 	bl	8001820 <cmox_ModularBN_Mul>
 8000d0a:	6a23      	ldr	r3, [r4, #32]
 8000d0c:	0022      	movs	r2, r4
 8000d0e:	9902      	ldr	r1, [sp, #8]
 8000d10:	0028      	movs	r0, r5
 8000d12:	f000 fda9 	bl	8001868 <cmox_ModularBN_Sqr>
 8000d16:	9b02      	ldr	r3, [sp, #8]
 8000d18:	69a0      	ldr	r0, [r4, #24]
 8000d1a:	6800      	ldr	r0, [r0, #0]
 8000d1c:	6802      	ldr	r2, [r0, #0]
 8000d1e:	9903      	ldr	r1, [sp, #12]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 fba5 	bl	8001470 <cmox_ModSubBN>
 8000d26:	9b04      	ldr	r3, [sp, #16]
 8000d28:	69a0      	ldr	r0, [r4, #24]
 8000d2a:	6800      	ldr	r0, [r0, #0]
 8000d2c:	6802      	ldr	r2, [r0, #0]
 8000d2e:	9903      	ldr	r1, [sp, #12]
 8000d30:	9802      	ldr	r0, [sp, #8]
 8000d32:	f000 fb9d 	bl	8001470 <cmox_ModSubBN>
 8000d36:	6a20      	ldr	r0, [r4, #32]
 8000d38:	9000      	str	r0, [sp, #0]
 8000d3a:	0023      	movs	r3, r4
 8000d3c:	003a      	movs	r2, r7
 8000d3e:	68b1      	ldr	r1, [r6, #8]
 8000d40:	6870      	ldr	r0, [r6, #4]
 8000d42:	f000 fd6d 	bl	8001820 <cmox_ModularBN_Mul>
 8000d46:	6a23      	ldr	r3, [r4, #32]
 8000d48:	0022      	movs	r2, r4
 8000d4a:	9901      	ldr	r1, [sp, #4]
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	f000 fd8b 	bl	8001868 <cmox_ModularBN_Sqr>
 8000d52:	9b02      	ldr	r3, [sp, #8]
 8000d54:	69a0      	ldr	r0, [r4, #24]
 8000d56:	6800      	ldr	r0, [r0, #0]
 8000d58:	6802      	ldr	r2, [r0, #0]
 8000d5a:	9904      	ldr	r1, [sp, #16]
 8000d5c:	9803      	ldr	r0, [sp, #12]
 8000d5e:	f000 fb87 	bl	8001470 <cmox_ModSubBN>
 8000d62:	6a20      	ldr	r0, [r4, #32]
 8000d64:	9000      	str	r0, [sp, #0]
 8000d66:	0023      	movs	r3, r4
 8000d68:	002a      	movs	r2, r5
 8000d6a:	9902      	ldr	r1, [sp, #8]
 8000d6c:	0028      	movs	r0, r5
 8000d6e:	f000 fd57 	bl	8001820 <cmox_ModularBN_Mul>
 8000d72:	9b05      	ldr	r3, [sp, #20]
 8000d74:	69a0      	ldr	r0, [r4, #24]
 8000d76:	6800      	ldr	r0, [r0, #0]
 8000d78:	6802      	ldr	r2, [r0, #0]
 8000d7a:	9901      	ldr	r1, [sp, #4]
 8000d7c:	0028      	movs	r0, r5
 8000d7e:	f000 fb77 	bl	8001470 <cmox_ModSubBN>
 8000d82:	b007      	add	sp, #28
 8000d84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d86 <cmox_ECC_CompleteMADD>:
 8000d86:	b5f6      	push	{r1, r2, r4, r5, r6, r7, lr}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	0007      	movs	r7, r0
 8000d8c:	000d      	movs	r5, r1
 8000d8e:	001c      	movs	r4, r3
 8000d90:	2000      	movs	r0, #0
 8000d92:	9002      	str	r0, [sp, #8]
 8000d94:	6928      	ldr	r0, [r5, #16]
 8000d96:	6120      	str	r0, [r4, #16]
 8000d98:	2601      	movs	r6, #1
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	6928      	ldr	r0, [r5, #16]
 8000d9e:	4030      	ands	r0, r6
 8000da0:	f000 fd9e 	bl	80018e0 <cmox_mathUtils_neq>
 8000da4:	2801      	cmp	r0, #1
 8000da6:	d107      	bne.n	8000db8 <cmox_ECC_CompleteMADD+0x32>
 8000da8:	2100      	movs	r1, #0
 8000daa:	9804      	ldr	r0, [sp, #16]
 8000dac:	6900      	ldr	r0, [r0, #16]
 8000dae:	4030      	ands	r0, r6
 8000db0:	f000 fd96 	bl	80018e0 <cmox_mathUtils_neq>
 8000db4:	2801      	cmp	r0, #1
 8000db6:	d035      	beq.n	8000e24 <cmox_ECC_CompleteMADD+0x9e>
 8000db8:	2100      	movs	r1, #0
 8000dba:	6928      	ldr	r0, [r5, #16]
 8000dbc:	4030      	ands	r0, r6
 8000dbe:	f000 fd8f 	bl	80018e0 <cmox_mathUtils_neq>
 8000dc2:	2801      	cmp	r0, #1
 8000dc4:	d102      	bne.n	8000dcc <cmox_ECC_CompleteMADD+0x46>
 8000dc6:	0022      	movs	r2, r4
 8000dc8:	9904      	ldr	r1, [sp, #16]
 8000dca:	e009      	b.n	8000de0 <cmox_ECC_CompleteMADD+0x5a>
 8000dcc:	2100      	movs	r1, #0
 8000dce:	9804      	ldr	r0, [sp, #16]
 8000dd0:	6900      	ldr	r0, [r0, #16]
 8000dd2:	4030      	ands	r0, r6
 8000dd4:	f000 fd84 	bl	80018e0 <cmox_mathUtils_neq>
 8000dd8:	2801      	cmp	r0, #1
 8000dda:	d104      	bne.n	8000de6 <cmox_ECC_CompleteMADD+0x60>
 8000ddc:	0022      	movs	r2, r4
 8000dde:	0029      	movs	r1, r5
 8000de0:	f7ff fa8b 	bl	80002fa <cmox_ECC_CondCopyPoint>
 8000de4:	e021      	b.n	8000e2a <cmox_ECC_CompleteMADD+0xa4>
 8000de6:	9701      	str	r7, [sp, #4]
 8000de8:	a802      	add	r0, sp, #8
 8000dea:	9000      	str	r0, [sp, #0]
 8000dec:	0023      	movs	r3, r4
 8000dee:	9a04      	ldr	r2, [sp, #16]
 8000df0:	0029      	movs	r1, r5
 8000df2:	9801      	ldr	r0, [sp, #4]
 8000df4:	6987      	ldr	r7, [r0, #24]
 8000df6:	687f      	ldr	r7, [r7, #4]
 8000df8:	687f      	ldr	r7, [r7, #4]
 8000dfa:	47b8      	blx	r7
 8000dfc:	9802      	ldr	r0, [sp, #8]
 8000dfe:	4030      	ands	r0, r6
 8000e00:	d013      	beq.n	8000e2a <cmox_ECC_CompleteMADD+0xa4>
 8000e02:	9802      	ldr	r0, [sp, #8]
 8000e04:	0840      	lsrs	r0, r0, #1
 8000e06:	4030      	ands	r0, r6
 8000e08:	d00c      	beq.n	8000e24 <cmox_ECC_CompleteMADD+0x9e>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	0022      	movs	r2, r4
 8000e0e:	0029      	movs	r1, r5
 8000e10:	9801      	ldr	r0, [sp, #4]
 8000e12:	6986      	ldr	r6, [r0, #24]
 8000e14:	6876      	ldr	r6, [r6, #4]
 8000e16:	6836      	ldr	r6, [r6, #0]
 8000e18:	47b0      	blx	r6
 8000e1a:	6928      	ldr	r0, [r5, #16]
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4388      	bics	r0, r1
 8000e20:	6120      	str	r0, [r4, #16]
 8000e22:	e002      	b.n	8000e2a <cmox_ECC_CompleteMADD+0xa4>
 8000e24:	6920      	ldr	r0, [r4, #16]
 8000e26:	4306      	orrs	r6, r0
 8000e28:	6126      	str	r6, [r4, #16]
 8000e2a:	b005      	add	sp, #20
 8000e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e2e <cmox_ECC_CompleteADD>:
 8000e2e:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8000e30:	000f      	movs	r7, r1
 8000e32:	0015      	movs	r5, r2
 8000e34:	001c      	movs	r4, r3
 8000e36:	6938      	ldr	r0, [r7, #16]
 8000e38:	6120      	str	r0, [r4, #16]
 8000e3a:	2601      	movs	r6, #1
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	6938      	ldr	r0, [r7, #16]
 8000e40:	4030      	ands	r0, r6
 8000e42:	f000 fd4d 	bl	80018e0 <cmox_mathUtils_neq>
 8000e46:	2801      	cmp	r0, #1
 8000e48:	d106      	bne.n	8000e58 <cmox_ECC_CompleteADD+0x2a>
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	6928      	ldr	r0, [r5, #16]
 8000e4e:	4030      	ands	r0, r6
 8000e50:	f000 fd46 	bl	80018e0 <cmox_mathUtils_neq>
 8000e54:	2801      	cmp	r0, #1
 8000e56:	d036      	beq.n	8000ec6 <cmox_ECC_CompleteADD+0x98>
 8000e58:	2100      	movs	r1, #0
 8000e5a:	6938      	ldr	r0, [r7, #16]
 8000e5c:	4030      	ands	r0, r6
 8000e5e:	f000 fd3f 	bl	80018e0 <cmox_mathUtils_neq>
 8000e62:	2801      	cmp	r0, #1
 8000e64:	d102      	bne.n	8000e6c <cmox_ECC_CompleteADD+0x3e>
 8000e66:	0022      	movs	r2, r4
 8000e68:	0029      	movs	r1, r5
 8000e6a:	e008      	b.n	8000e7e <cmox_ECC_CompleteADD+0x50>
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	6928      	ldr	r0, [r5, #16]
 8000e70:	4030      	ands	r0, r6
 8000e72:	f000 fd35 	bl	80018e0 <cmox_mathUtils_neq>
 8000e76:	2801      	cmp	r0, #1
 8000e78:	d104      	bne.n	8000e84 <cmox_ECC_CompleteADD+0x56>
 8000e7a:	0022      	movs	r2, r4
 8000e7c:	0039      	movs	r1, r7
 8000e7e:	f7ff fa3c 	bl	80002fa <cmox_ECC_CondCopyPoint>
 8000e82:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8000e84:	0023      	movs	r3, r4
 8000e86:	002a      	movs	r2, r5
 8000e88:	0039      	movs	r1, r7
 8000e8a:	9800      	ldr	r0, [sp, #0]
 8000e8c:	6987      	ldr	r7, [r0, #24]
 8000e8e:	687f      	ldr	r7, [r7, #4]
 8000e90:	68bf      	ldr	r7, [r7, #8]
 8000e92:	47b8      	blx	r7
 8000e94:	2100      	movs	r1, #0
 8000e96:	68a0      	ldr	r0, [r4, #8]
 8000e98:	f002 f9fd 	bl	8003296 <cmox_bn_cmpUint>
 8000e9c:	2801      	cmp	r0, #1
 8000e9e:	d115      	bne.n	8000ecc <cmox_ECC_CompleteADD+0x9e>
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	6820      	ldr	r0, [r4, #0]
 8000ea4:	f002 f9f7 	bl	8003296 <cmox_bn_cmpUint>
 8000ea8:	2801      	cmp	r0, #1
 8000eaa:	d10c      	bne.n	8000ec6 <cmox_ECC_CompleteADD+0x98>
 8000eac:	2301      	movs	r3, #1
 8000eae:	0022      	movs	r2, r4
 8000eb0:	0029      	movs	r1, r5
 8000eb2:	9800      	ldr	r0, [sp, #0]
 8000eb4:	6986      	ldr	r6, [r0, #24]
 8000eb6:	6876      	ldr	r6, [r6, #4]
 8000eb8:	6836      	ldr	r6, [r6, #0]
 8000eba:	47b0      	blx	r6
 8000ebc:	6928      	ldr	r0, [r5, #16]
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	4388      	bics	r0, r1
 8000ec2:	6120      	str	r0, [r4, #16]
 8000ec4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8000ec6:	6920      	ldr	r0, [r4, #16]
 8000ec8:	4306      	orrs	r6, r0
 8000eca:	6126      	str	r6, [r4, #16]
 8000ecc:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08000ece <cmox_ECC_CompleteDBL>:
 8000ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed0:	0006      	movs	r6, r0
 8000ed2:	000f      	movs	r7, r1
 8000ed4:	0014      	movs	r4, r2
 8000ed6:	6938      	ldr	r0, [r7, #16]
 8000ed8:	6120      	str	r0, [r4, #16]
 8000eda:	2501      	movs	r5, #1
 8000edc:	2100      	movs	r1, #0
 8000ede:	6938      	ldr	r0, [r7, #16]
 8000ee0:	4028      	ands	r0, r5
 8000ee2:	f000 fcfd 	bl	80018e0 <cmox_mathUtils_neq>
 8000ee6:	2801      	cmp	r0, #1
 8000ee8:	d103      	bne.n	8000ef2 <cmox_ECC_CompleteDBL+0x24>
 8000eea:	6920      	ldr	r0, [r4, #16]
 8000eec:	4305      	orrs	r5, r0
 8000eee:	6125      	str	r5, [r4, #16]
 8000ef0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8000ef2:	0030      	movs	r0, r6
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	0022      	movs	r2, r4
 8000ef8:	0039      	movs	r1, r7
 8000efa:	6985      	ldr	r5, [r0, #24]
 8000efc:	686d      	ldr	r5, [r5, #4]
 8000efe:	682d      	ldr	r5, [r5, #0]
 8000f00:	47a8      	blx	r5
 8000f02:	6920      	ldr	r0, [r4, #16]
 8000f04:	2101      	movs	r1, #1
 8000f06:	4388      	bics	r0, r1
 8000f08:	6120      	str	r0, [r4, #16]
 8000f0a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8000f0c:	0101b004 	.word	0x0101b004
 8000f10:	45011700 	.word	0x45011700

08000f14 <cmox_ecdsa_verify>:
 8000f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f16:	b093      	sub	sp, #76	; 0x4c
 8000f18:	000c      	movs	r4, r1
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	9105      	str	r1, [sp, #20]
 8000f1e:	9104      	str	r1, [sp, #16]
 8000f20:	9109      	str	r1, [sp, #36]	; 0x24
 8000f22:	9108      	str	r1, [sp, #32]
 8000f24:	9106      	str	r1, [sp, #24]
 8000f26:	2c00      	cmp	r4, #0
 8000f28:	d035      	beq.n	8000f96 <cmox_ecdsa_verify+0x82>
 8000f2a:	9202      	str	r2, [sp, #8]
 8000f2c:	2a00      	cmp	r2, #0
 8000f2e:	d032      	beq.n	8000f96 <cmox_ecdsa_verify+0x82>
 8000f30:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8000f32:	2f00      	cmp	r7, #0
 8000f34:	d02f      	beq.n	8000f96 <cmox_ecdsa_verify+0x82>
 8000f36:	991a      	ldr	r1, [sp, #104]	; 0x68
 8000f38:	2900      	cmp	r1, #0
 8000f3a:	d02c      	beq.n	8000f96 <cmox_ecdsa_verify+0x82>
 8000f3c:	0006      	movs	r6, r0
 8000f3e:	d02a      	beq.n	8000f96 <cmox_ecdsa_verify+0x82>
 8000f40:	6970      	ldr	r0, [r6, #20]
 8000f42:	49a1      	ldr	r1, [pc, #644]	; (80011c8 <cmox_ecdsa_verify+0x2b4>)
 8000f44:	4288      	cmp	r0, r1
 8000f46:	d126      	bne.n	8000f96 <cmox_ecdsa_verify+0x82>
 8000f48:	6930      	ldr	r0, [r6, #16]
 8000f4a:	69c0      	ldr	r0, [r0, #28]
 8000f4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f4e:	4001      	ands	r1, r0
 8000f50:	d101      	bne.n	8000f56 <cmox_ecdsa_verify+0x42>
 8000f52:	4c9e      	ldr	r4, [pc, #632]	; (80011cc <cmox_ecdsa_verify+0x2b8>)
 8000f54:	e07d      	b.n	8001052 <cmox_ecdsa_verify+0x13e>
 8000f56:	2028      	movs	r0, #40	; 0x28
 8000f58:	5c20      	ldrb	r0, [r4, r0]
 8000f5a:	07c0      	lsls	r0, r0, #31
 8000f5c:	d401      	bmi.n	8000f62 <cmox_ecdsa_verify+0x4e>
 8000f5e:	4c9c      	ldr	r4, [pc, #624]	; (80011d0 <cmox_ecdsa_verify+0x2bc>)
 8000f60:	e077      	b.n	8001052 <cmox_ecdsa_verify+0x13e>
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	6820      	ldr	r0, [r4, #0]
 8000f66:	6880      	ldr	r0, [r0, #8]
 8000f68:	f002 f9ab 	bl	80032c2 <cmox_bn_countBits>
 8000f6c:	0005      	movs	r5, r0
 8000f6e:	1dc0      	adds	r0, r0, #7
 8000f70:	08c0      	lsrs	r0, r0, #3
 8000f72:	9007      	str	r0, [sp, #28]
 8000f74:	6820      	ldr	r0, [r4, #0]
 8000f76:	6800      	ldr	r0, [r0, #0]
 8000f78:	f002 f9a3 	bl	80032c2 <cmox_bn_countBits>
 8000f7c:	1dc0      	adds	r0, r0, #7
 8000f7e:	08c0      	lsrs	r0, r0, #3
 8000f80:	9001      	str	r0, [sp, #4]
 8000f82:	9800      	ldr	r0, [sp, #0]
 8000f84:	9901      	ldr	r1, [sp, #4]
 8000f86:	0049      	lsls	r1, r1, #1
 8000f88:	4288      	cmp	r0, r1
 8000f8a:	d104      	bne.n	8000f96 <cmox_ecdsa_verify+0x82>
 8000f8c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8000f8e:	9907      	ldr	r1, [sp, #28]
 8000f90:	0049      	lsls	r1, r1, #1
 8000f92:	4288      	cmp	r0, r1
 8000f94:	d001      	beq.n	8000f9a <cmox_ecdsa_verify+0x86>
 8000f96:	4c8f      	ldr	r4, [pc, #572]	; (80011d4 <cmox_ecdsa_verify+0x2c0>)
 8000f98:	e05b      	b.n	8001052 <cmox_ecdsa_verify+0x13e>
 8000f9a:	6933      	ldr	r3, [r6, #16]
 8000f9c:	0032      	movs	r2, r6
 8000f9e:	0021      	movs	r1, r4
 8000fa0:	a80a      	add	r0, sp, #40	; 0x28
 8000fa2:	f7ff f8fb 	bl	800019c <cmox_ECC_InitCurve>
 8000fa6:	4c8c      	ldr	r4, [pc, #560]	; (80011d8 <cmox_ecdsa_verify+0x2c4>)
 8000fa8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8000faa:	6800      	ldr	r0, [r0, #0]
 8000fac:	6880      	ldr	r0, [r0, #8]
 8000fae:	6802      	ldr	r2, [r0, #0]
 8000fb0:	a905      	add	r1, sp, #20
 8000fb2:	0030      	movs	r0, r6
 8000fb4:	f002 f8b6 	bl	8003124 <cmox_bn_alloc>
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	d14a      	bne.n	8001052 <cmox_ecdsa_verify+0x13e>
 8000fbc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8000fbe:	6800      	ldr	r0, [r0, #0]
 8000fc0:	6880      	ldr	r0, [r0, #8]
 8000fc2:	6802      	ldr	r2, [r0, #0]
 8000fc4:	a904      	add	r1, sp, #16
 8000fc6:	0030      	movs	r0, r6
 8000fc8:	f002 f8ac 	bl	8003124 <cmox_bn_alloc>
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	d13c      	bne.n	800104a <cmox_ecdsa_verify+0x136>
 8000fd0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8000fd2:	6800      	ldr	r0, [r0, #0]
 8000fd4:	6880      	ldr	r0, [r0, #8]
 8000fd6:	6802      	ldr	r2, [r0, #0]
 8000fd8:	a909      	add	r1, sp, #36	; 0x24
 8000fda:	0030      	movs	r0, r6
 8000fdc:	f002 f8a2 	bl	8003124 <cmox_bn_alloc>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	d12e      	bne.n	8001042 <cmox_ecdsa_verify+0x12e>
 8000fe4:	9a05      	ldr	r2, [sp, #20]
 8000fe6:	9907      	ldr	r1, [sp, #28]
 8000fe8:	981a      	ldr	r0, [sp, #104]	; 0x68
 8000fea:	1840      	adds	r0, r0, r1
 8000fec:	f002 f9ec 	bl	80033c8 <cmox_bn_fromU8BE>
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	9805      	ldr	r0, [sp, #20]
 8000ff4:	f002 f94f 	bl	8003296 <cmox_bn_cmpUint>
 8000ff8:	2801      	cmp	r0, #1
 8000ffa:	d007      	beq.n	800100c <cmox_ecdsa_verify+0xf8>
 8000ffc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8000ffe:	6800      	ldr	r0, [r0, #0]
 8001000:	6881      	ldr	r1, [r0, #8]
 8001002:	9805      	ldr	r0, [sp, #20]
 8001004:	f002 f8f9 	bl	80031fa <cmox_bn_cmp>
 8001008:	2800      	cmp	r0, #0
 800100a:	d401      	bmi.n	8001010 <cmox_ecdsa_verify+0xfc>
 800100c:	1ee4      	subs	r4, r4, #3
 800100e:	e014      	b.n	800103a <cmox_ecdsa_verify+0x126>
 8001010:	a80a      	add	r0, sp, #40	; 0x28
 8001012:	f7ff f8db 	bl	80001cc <cmox_ECC_InitCurveModDomainN>
 8001016:	2800      	cmp	r0, #0
 8001018:	d10f      	bne.n	800103a <cmox_ecdsa_verify+0x126>
 800101a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800101c:	a90a      	add	r1, sp, #40	; 0x28
 800101e:	9805      	ldr	r0, [sp, #20]
 8001020:	f000 fbd7 	bl	80017d2 <cmox_ModularBN_Enter>
 8001024:	9b04      	ldr	r3, [sp, #16]
 8001026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001028:	9905      	ldr	r1, [sp, #20]
 800102a:	a80a      	add	r0, sp, #40	; 0x28
 800102c:	f7ff f88a 	bl	8000144 <cmox_ECC_InvertModN>
 8001030:	2800      	cmp	r0, #0
 8001032:	d011      	beq.n	8001058 <cmox_ecdsa_verify+0x144>
 8001034:	a80a      	add	r0, sp, #40	; 0x28
 8001036:	f7ff f8d3 	bl	80001e0 <cmox_ECC_DeInitCurveModDomain>
 800103a:	a909      	add	r1, sp, #36	; 0x24
 800103c:	0030      	movs	r0, r6
 800103e:	f002 f87d 	bl	800313c <cmox_bn_free>
 8001042:	a904      	add	r1, sp, #16
 8001044:	0030      	movs	r0, r6
 8001046:	f002 f879 	bl	800313c <cmox_bn_free>
 800104a:	a905      	add	r1, sp, #20
 800104c:	0030      	movs	r0, r6
 800104e:	f002 f875 	bl	800313c <cmox_bn_free>
 8001052:	0020      	movs	r0, r4
 8001054:	b013      	add	sp, #76	; 0x4c
 8001056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001058:	9919      	ldr	r1, [sp, #100]	; 0x64
 800105a:	00c8      	lsls	r0, r1, #3
 800105c:	4285      	cmp	r5, r0
 800105e:	9a04      	ldr	r2, [sp, #16]
 8001060:	d20b      	bcs.n	800107a <cmox_ecdsa_verify+0x166>
 8001062:	9907      	ldr	r1, [sp, #28]
 8001064:	0038      	movs	r0, r7
 8001066:	f002 f9af 	bl	80033c8 <cmox_bn_fromU8BE>
 800106a:	9a04      	ldr	r2, [sp, #16]
 800106c:	9807      	ldr	r0, [sp, #28]
 800106e:	00c0      	lsls	r0, r0, #3
 8001070:	1b41      	subs	r1, r0, r5
 8001072:	4610      	mov	r0, r2
 8001074:	f000 f934 	bl	80012e0 <cmox_RightShiftBN>
 8001078:	e002      	b.n	8001080 <cmox_ecdsa_verify+0x16c>
 800107a:	0038      	movs	r0, r7
 800107c:	f002 f9a4 	bl	80033c8 <cmox_bn_fromU8BE>
 8001080:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001082:	6800      	ldr	r0, [r0, #0]
 8001084:	6881      	ldr	r1, [r0, #8]
 8001086:	9b04      	ldr	r3, [sp, #16]
 8001088:	000a      	movs	r2, r1
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f9f0 	bl	8001470 <cmox_ModSubBN>
 8001090:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001092:	9000      	str	r0, [sp, #0]
 8001094:	ab0a      	add	r3, sp, #40	; 0x28
 8001096:	9a04      	ldr	r2, [sp, #16]
 8001098:	9909      	ldr	r1, [sp, #36]	; 0x24
 800109a:	4610      	mov	r0, r2
 800109c:	f000 fbc0 	bl	8001820 <cmox_ModularBN_Mul>
 80010a0:	9a05      	ldr	r2, [sp, #20]
 80010a2:	9907      	ldr	r1, [sp, #28]
 80010a4:	981a      	ldr	r0, [sp, #104]	; 0x68
 80010a6:	f002 f98f 	bl	80033c8 <cmox_bn_fromU8BE>
 80010aa:	2100      	movs	r1, #0
 80010ac:	9805      	ldr	r0, [sp, #20]
 80010ae:	f002 f8f2 	bl	8003296 <cmox_bn_cmpUint>
 80010b2:	2801      	cmp	r0, #1
 80010b4:	d007      	beq.n	80010c6 <cmox_ecdsa_verify+0x1b2>
 80010b6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80010b8:	6800      	ldr	r0, [r0, #0]
 80010ba:	6881      	ldr	r1, [r0, #8]
 80010bc:	9805      	ldr	r0, [sp, #20]
 80010be:	f002 f89c 	bl	80031fa <cmox_bn_cmp>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	d401      	bmi.n	80010ca <cmox_ecdsa_verify+0x1b6>
 80010c6:	1ee4      	subs	r4, r4, #3
 80010c8:	e7b4      	b.n	8001034 <cmox_ecdsa_verify+0x120>
 80010ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80010cc:	9000      	str	r0, [sp, #0]
 80010ce:	ab0a      	add	r3, sp, #40	; 0x28
 80010d0:	9a05      	ldr	r2, [sp, #20]
 80010d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80010d4:	4610      	mov	r0, r2
 80010d6:	f000 fba3 	bl	8001820 <cmox_ModularBN_Mul>
 80010da:	a80a      	add	r0, sp, #40	; 0x28
 80010dc:	f7ff f880 	bl	80001e0 <cmox_ECC_DeInitCurveModDomain>
 80010e0:	a909      	add	r1, sp, #36	; 0x24
 80010e2:	0030      	movs	r0, r6
 80010e4:	f002 f82a 	bl	800313c <cmox_bn_free>
 80010e8:	a80a      	add	r0, sp, #40	; 0x28
 80010ea:	f7ff f865 	bl	80001b8 <cmox_ECC_InitCurveModDomainP>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	d1a7      	bne.n	8001042 <cmox_ecdsa_verify+0x12e>
 80010f2:	a908      	add	r1, sp, #32
 80010f4:	a80a      	add	r0, sp, #40	; 0x28
 80010f6:	f7ff f878 	bl	80001ea <cmox_ECC_AllocPoint>
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d160      	bne.n	80011c0 <cmox_ecdsa_verify+0x2ac>
 80010fe:	a906      	add	r1, sp, #24
 8001100:	a80a      	add	r0, sp, #40	; 0x28
 8001102:	f7ff f872 	bl	80001ea <cmox_ECC_AllocPoint>
 8001106:	2800      	cmp	r0, #0
 8001108:	d156      	bne.n	80011b8 <cmox_ecdsa_verify+0x2a4>
 800110a:	9806      	ldr	r0, [sp, #24]
 800110c:	6802      	ldr	r2, [r0, #0]
 800110e:	9901      	ldr	r1, [sp, #4]
 8001110:	9802      	ldr	r0, [sp, #8]
 8001112:	f002 f959 	bl	80033c8 <cmox_bn_fromU8BE>
 8001116:	9806      	ldr	r0, [sp, #24]
 8001118:	6842      	ldr	r2, [r0, #4]
 800111a:	9901      	ldr	r1, [sp, #4]
 800111c:	9802      	ldr	r0, [sp, #8]
 800111e:	1840      	adds	r0, r0, r1
 8001120:	f002 f952 	bl	80033c8 <cmox_bn_fromU8BE>
 8001124:	2101      	movs	r1, #1
 8001126:	9806      	ldr	r0, [sp, #24]
 8001128:	6880      	ldr	r0, [r0, #8]
 800112a:	f002 f813 	bl	8003154 <cmox_bn_init>
 800112e:	9806      	ldr	r0, [sp, #24]
 8001130:	6900      	ldr	r0, [r0, #16]
 8001132:	2102      	movs	r1, #2
 8001134:	4301      	orrs	r1, r0
 8001136:	9806      	ldr	r0, [sp, #24]
 8001138:	6101      	str	r1, [r0, #16]
 800113a:	9808      	ldr	r0, [sp, #32]
 800113c:	9000      	str	r0, [sp, #0]
 800113e:	9b04      	ldr	r3, [sp, #16]
 8001140:	9a06      	ldr	r2, [sp, #24]
 8001142:	9905      	ldr	r1, [sp, #20]
 8001144:	a80a      	add	r0, sp, #40	; 0x28
 8001146:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001148:	696d      	ldr	r5, [r5, #20]
 800114a:	682d      	ldr	r5, [r5, #0]
 800114c:	47a8      	blx	r5
 800114e:	2800      	cmp	r0, #0
 8001150:	d003      	beq.n	800115a <cmox_ecdsa_verify+0x246>
 8001152:	2804      	cmp	r0, #4
 8001154:	d12c      	bne.n	80011b0 <cmox_ecdsa_verify+0x29c>
 8001156:	1f24      	subs	r4, r4, #4
 8001158:	e02a      	b.n	80011b0 <cmox_ecdsa_verify+0x29c>
 800115a:	4d20      	ldr	r5, [pc, #128]	; (80011dc <cmox_ecdsa_verify+0x2c8>)
 800115c:	2100      	movs	r1, #0
 800115e:	9808      	ldr	r0, [sp, #32]
 8001160:	7c02      	ldrb	r2, [r0, #16]
 8001162:	07d0      	lsls	r0, r2, #31
 8001164:	0fc0      	lsrs	r0, r0, #31
 8001166:	f000 fbbb 	bl	80018e0 <cmox_mathUtils_neq>
 800116a:	2801      	cmp	r0, #1
 800116c:	d101      	bne.n	8001172 <cmox_ecdsa_verify+0x25e>
 800116e:	002c      	movs	r4, r5
 8001170:	e01e      	b.n	80011b0 <cmox_ecdsa_verify+0x29c>
 8001172:	9908      	ldr	r1, [sp, #32]
 8001174:	a80a      	add	r0, sp, #40	; 0x28
 8001176:	f7ff faf5 	bl	8000764 <cmox_ECC_PointToAffine>
 800117a:	2800      	cmp	r0, #0
 800117c:	d118      	bne.n	80011b0 <cmox_ecdsa_verify+0x29c>
 800117e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001180:	6800      	ldr	r0, [r0, #0]
 8001182:	6881      	ldr	r1, [r0, #8]
 8001184:	9b04      	ldr	r3, [sp, #16]
 8001186:	000a      	movs	r2, r1
 8001188:	9808      	ldr	r0, [sp, #32]
 800118a:	6800      	ldr	r0, [r0, #0]
 800118c:	f000 f970 	bl	8001470 <cmox_ModSubBN>
 8001190:	981c      	ldr	r0, [sp, #112]	; 0x70
 8001192:	9003      	str	r0, [sp, #12]
 8001194:	9502      	str	r5, [sp, #8]
 8001196:	4812      	ldr	r0, [pc, #72]	; (80011e0 <cmox_ecdsa_verify+0x2cc>)
 8001198:	9001      	str	r0, [sp, #4]
 800119a:	4812      	ldr	r0, [pc, #72]	; (80011e4 <cmox_ecdsa_verify+0x2d0>)
 800119c:	6800      	ldr	r0, [r0, #0]
 800119e:	9000      	str	r0, [sp, #0]
 80011a0:	9804      	ldr	r0, [sp, #16]
 80011a2:	6803      	ldr	r3, [r0, #0]
 80011a4:	1d02      	adds	r2, r0, #4
 80011a6:	9907      	ldr	r1, [sp, #28]
 80011a8:	981a      	ldr	r0, [sp, #104]	; 0x68
 80011aa:	f001 ff4f 	bl	800304c <cmox_utils_robustCmp>
 80011ae:	0004      	movs	r4, r0
 80011b0:	a906      	add	r1, sp, #24
 80011b2:	a80a      	add	r0, sp, #40	; 0x28
 80011b4:	f7ff f871 	bl	800029a <cmox_ECC_FreePoint>
 80011b8:	a908      	add	r1, sp, #32
 80011ba:	a80a      	add	r0, sp, #40	; 0x28
 80011bc:	f7ff f86d 	bl	800029a <cmox_ECC_FreePoint>
 80011c0:	a80a      	add	r0, sp, #40	; 0x28
 80011c2:	f7ff f80d 	bl	80001e0 <cmox_ECC_DeInitCurveModDomain>
 80011c6:	e73c      	b.n	8001042 <cmox_ecdsa_verify+0x12e>
 80011c8:	5e1caffe 	.word	0x5e1caffe
 80011cc:	0006000e 	.word	0x0006000e
 80011d0:	0006000f 	.word	0x0006000f
 80011d4:	00060003 	.word	0x00060003
 80011d8:	0006000c 	.word	0x0006000c
 80011dc:	00066e93 	.word	0x00066e93
 80011e0:	0006c726 	.word	0x0006c726
 80011e4:	08009d9c 	.word	0x08009d9c

080011e8 <cmox_hash_compute>:
 80011e8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80011ea:	0004      	movs	r4, r0
 80011ec:	480b      	ldr	r0, [pc, #44]	; (800121c <cmox_hash_compute+0x34>)
 80011ee:	2c00      	cmp	r4, #0
 80011f0:	d012      	beq.n	8001218 <cmox_hash_compute+0x30>
 80011f2:	6825      	ldr	r5, [r4, #0]
 80011f4:	2d00      	cmp	r5, #0
 80011f6:	d00f      	beq.n	8001218 <cmox_hash_compute+0x30>
 80011f8:	001e      	movs	r6, r3
 80011fa:	d00d      	beq.n	8001218 <cmox_hash_compute+0x30>
 80011fc:	000c      	movs	r4, r1
 80011fe:	0011      	movs	r1, r2
 8001200:	2c00      	cmp	r4, #0
 8001202:	d101      	bne.n	8001208 <cmox_hash_compute+0x20>
 8001204:	2900      	cmp	r1, #0
 8001206:	d107      	bne.n	8001218 <cmox_hash_compute+0x30>
 8001208:	9b06      	ldr	r3, [sp, #24]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <cmox_hash_compute+0x30>
 800120e:	9807      	ldr	r0, [sp, #28]
 8001210:	9000      	str	r0, [sp, #0]
 8001212:	0032      	movs	r2, r6
 8001214:	0020      	movs	r0, r4
 8001216:	47a8      	blx	r5
 8001218:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800121a:	bf00      	nop
 800121c:	00020003 	.word	0x00020003

08001220 <cmox_hash_common_compute>:
 8001220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001222:	0004      	movs	r4, r0
 8001224:	000f      	movs	r7, r1
 8001226:	0015      	movs	r5, r2
 8001228:	6821      	ldr	r1, [r4, #0]
 800122a:	6849      	ldr	r1, [r1, #4]
 800122c:	4788      	blx	r1
 800122e:	0006      	movs	r6, r0
 8001230:	2080      	movs	r0, #128	; 0x80
 8001232:	0280      	lsls	r0, r0, #10
 8001234:	4286      	cmp	r6, r0
 8001236:	d11b      	bne.n	8001270 <cmox_hash_common_compute+0x50>
 8001238:	9906      	ldr	r1, [sp, #24]
 800123a:	0020      	movs	r0, r4
 800123c:	6822      	ldr	r2, [r4, #0]
 800123e:	6892      	ldr	r2, [r2, #8]
 8001240:	4790      	blx	r2
 8001242:	0006      	movs	r6, r0
 8001244:	2080      	movs	r0, #128	; 0x80
 8001246:	0280      	lsls	r0, r0, #10
 8001248:	4286      	cmp	r6, r0
 800124a:	d111      	bne.n	8001270 <cmox_hash_common_compute+0x50>
 800124c:	002a      	movs	r2, r5
 800124e:	0039      	movs	r1, r7
 8001250:	0020      	movs	r0, r4
 8001252:	6823      	ldr	r3, [r4, #0]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	4798      	blx	r3
 8001258:	0006      	movs	r6, r0
 800125a:	2080      	movs	r0, #128	; 0x80
 800125c:	0280      	lsls	r0, r0, #10
 800125e:	4286      	cmp	r6, r0
 8001260:	d106      	bne.n	8001270 <cmox_hash_common_compute+0x50>
 8001262:	9a07      	ldr	r2, [sp, #28]
 8001264:	9900      	ldr	r1, [sp, #0]
 8001266:	0020      	movs	r0, r4
 8001268:	6823      	ldr	r3, [r4, #0]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	4798      	blx	r3
 800126e:	0006      	movs	r6, r0
 8001270:	0020      	movs	r0, r4
 8001272:	6821      	ldr	r1, [r4, #0]
 8001274:	6809      	ldr	r1, [r1, #0]
 8001276:	4788      	blx	r1
 8001278:	0030      	movs	r0, r6
 800127a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800127c <cmox_initialize>:
 800127c:	b580      	push	{r7, lr}
 800127e:	2800      	cmp	r0, #0
 8001280:	d009      	beq.n	8001296 <cmox_initialize+0x1a>
 8001282:	6801      	ldr	r1, [r0, #0]
 8001284:	2900      	cmp	r1, #0
 8001286:	d005      	beq.n	8001294 <cmox_initialize+0x18>
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <cmox_initialize+0x20>)
 800128a:	4291      	cmp	r1, r2
 800128c:	d102      	bne.n	8001294 <cmox_initialize+0x18>
 800128e:	2101      	movs	r1, #1
 8001290:	4a03      	ldr	r2, [pc, #12]	; (80012a0 <cmox_initialize+0x24>)
 8001292:	7011      	strb	r1, [r2, #0]
 8001294:	6840      	ldr	r0, [r0, #4]
 8001296:	f004 f8bf 	bl	8005418 <cmox_ll_init>
 800129a:	bd02      	pop	{r1, pc}
 800129c:	48370000 	.word	0x48370000
 80012a0:	200000cc 	.word	0x200000cc

080012a4 <cmox_finalize>:
 80012a4:	b580      	push	{r7, lr}
 80012a6:	f004 f8d9 	bl	800545c <cmox_ll_deInit>
 80012aa:	bd02      	pop	{r1, pc}

080012ac <basic_type_modinv>:
 80012ac:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 80012ae:	0001      	movs	r1, r0
 80012b0:	2701      	movs	r7, #1
 80012b2:	2401      	movs	r4, #1
 80012b4:	2503      	movs	r5, #3
 80012b6:	2002      	movs	r0, #2
 80012b8:	261f      	movs	r6, #31
 80012ba:	9100      	str	r1, [sp, #0]
 80012bc:	9a00      	ldr	r2, [sp, #0]
 80012be:	4362      	muls	r2, r4
 80012c0:	402a      	ands	r2, r5
 80012c2:	2300      	movs	r3, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	1a12      	subs	r2, r2, r0
 80012c8:	418b      	sbcs	r3, r1
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	4001      	ands	r1, r0
 80012ce:	1864      	adds	r4, r4, r1
 80012d0:	0040      	lsls	r0, r0, #1
 80012d2:	006d      	lsls	r5, r5, #1
 80012d4:	407d      	eors	r5, r7
 80012d6:	1e76      	subs	r6, r6, #1
 80012d8:	d1f0      	bne.n	80012bc <basic_type_modinv+0x10>
 80012da:	9801      	ldr	r0, [sp, #4]
 80012dc:	6004      	str	r4, [r0, #0]
 80012de:	bdf3      	pop	{r0, r1, r4, r5, r6, r7, pc}

080012e0 <cmox_RightShiftBN>:
 80012e0:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 80012e2:	0003      	movs	r3, r0
 80012e4:	0008      	movs	r0, r1
 80012e6:	2100      	movs	r1, #0
 80012e8:	2401      	movs	r4, #1
 80012ea:	2820      	cmp	r0, #32
 80012ec:	d301      	bcc.n	80012f2 <cmox_RightShiftBN+0x12>
 80012ee:	2101      	movs	r1, #1
 80012f0:	e024      	b.n	800133c <cmox_RightShiftBN+0x5c>
 80012f2:	6815      	ldr	r5, [r2, #0]
 80012f4:	681e      	ldr	r6, [r3, #0]
 80012f6:	42b5      	cmp	r5, r6
 80012f8:	d201      	bcs.n	80012fe <cmox_RightShiftBN+0x1e>
 80012fa:	2103      	movs	r1, #3
 80012fc:	e01e      	b.n	800133c <cmox_RightShiftBN+0x5c>
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	e007      	b.n	8001312 <cmox_RightShiftBN+0x32>
 8001302:	6874      	ldr	r4, [r6, #4]
 8001304:	2620      	movs	r6, #32
 8001306:	1a36      	subs	r6, r6, r0
 8001308:	40b4      	lsls	r4, r6
 800130a:	431c      	orrs	r4, r3
 800130c:	9b00      	ldr	r3, [sp, #0]
 800130e:	601c      	str	r4, [r3, #0]
 8001310:	002c      	movs	r4, r5
 8001312:	00a5      	lsls	r5, r4, #2
 8001314:	9b01      	ldr	r3, [sp, #4]
 8001316:	195e      	adds	r6, r3, r5
 8001318:	6833      	ldr	r3, [r6, #0]
 800131a:	40c3      	lsrs	r3, r0
 800131c:	1955      	adds	r5, r2, r5
 800131e:	9500      	str	r5, [sp, #0]
 8001320:	1c65      	adds	r5, r4, #1
 8001322:	9f01      	ldr	r7, [sp, #4]
 8001324:	683f      	ldr	r7, [r7, #0]
 8001326:	42bc      	cmp	r4, r7
 8001328:	d3eb      	bcc.n	8001302 <cmox_RightShiftBN+0x22>
 800132a:	9800      	ldr	r0, [sp, #0]
 800132c:	6003      	str	r3, [r0, #0]
 800132e:	e002      	b.n	8001336 <cmox_RightShiftBN+0x56>
 8001330:	00ab      	lsls	r3, r5, #2
 8001332:	50d1      	str	r1, [r2, r3]
 8001334:	1c6d      	adds	r5, r5, #1
 8001336:	6810      	ldr	r0, [r2, #0]
 8001338:	42a8      	cmp	r0, r5
 800133a:	d2f9      	bcs.n	8001330 <cmox_RightShiftBN+0x50>
 800133c:	0008      	movs	r0, r1
 800133e:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}

08001340 <cmox_ModAddBN>:
 8001340:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	0004      	movs	r4, r0
 8001346:	000d      	movs	r5, r1
 8001348:	2200      	movs	r2, #0
 800134a:	2300      	movs	r3, #0
 800134c:	2000      	movs	r0, #0
 800134e:	2100      	movs	r1, #0
 8001350:	ae06      	add	r6, sp, #24
 8001352:	c603      	stmia	r6!, {r0, r1}
 8001354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001356:	6800      	ldr	r0, [r0, #0]
 8001358:	990a      	ldr	r1, [sp, #40]	; 0x28
 800135a:	6809      	ldr	r1, [r1, #0]
 800135c:	4281      	cmp	r1, r0
 800135e:	d305      	bcc.n	800136c <cmox_ModAddBN+0x2c>
 8001360:	6826      	ldr	r6, [r4, #0]
 8001362:	4286      	cmp	r6, r0
 8001364:	d302      	bcc.n	800136c <cmox_ModAddBN+0x2c>
 8001366:	682f      	ldr	r7, [r5, #0]
 8001368:	4287      	cmp	r7, r0
 800136a:	d201      	bcs.n	8001370 <cmox_ModAddBN+0x30>
 800136c:	2003      	movs	r0, #3
 800136e:	e07d      	b.n	800146c <cmox_ModAddBN+0x12c>
 8001370:	42be      	cmp	r6, r7
 8001372:	d303      	bcc.n	800137c <cmox_ModAddBN+0x3c>
 8001374:	9402      	str	r4, [sp, #8]
 8001376:	9600      	str	r6, [sp, #0]
 8001378:	9701      	str	r7, [sp, #4]
 800137a:	e002      	b.n	8001382 <cmox_ModAddBN+0x42>
 800137c:	9502      	str	r5, [sp, #8]
 800137e:	9601      	str	r6, [sp, #4]
 8001380:	9700      	str	r7, [sp, #0]
 8001382:	9800      	ldr	r0, [sp, #0]
 8001384:	4281      	cmp	r1, r0
 8001386:	d200      	bcs.n	800138a <cmox_ModAddBN+0x4a>
 8001388:	9100      	str	r1, [sp, #0]
 800138a:	2701      	movs	r7, #1
 800138c:	9404      	str	r4, [sp, #16]
 800138e:	9503      	str	r5, [sp, #12]
 8001390:	e014      	b.n	80013bc <cmox_ModAddBN+0x7c>
 8001392:	00b8      	lsls	r0, r7, #2
 8001394:	9904      	ldr	r1, [sp, #16]
 8001396:	580c      	ldr	r4, [r1, r0]
 8001398:	2500      	movs	r5, #0
 800139a:	18a4      	adds	r4, r4, r2
 800139c:	415d      	adcs	r5, r3
 800139e:	9903      	ldr	r1, [sp, #12]
 80013a0:	580a      	ldr	r2, [r1, r0]
 80013a2:	2300      	movs	r3, #0
 80013a4:	1912      	adds	r2, r2, r4
 80013a6:	416b      	adcs	r3, r5
 80013a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80013aa:	580c      	ldr	r4, [r1, r0]
 80013ac:	2500      	movs	r5, #0
 80013ae:	1b12      	subs	r2, r2, r4
 80013b0:	41ab      	sbcs	r3, r5
 80013b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80013b4:	500a      	str	r2, [r1, r0]
 80013b6:	001a      	movs	r2, r3
 80013b8:	17db      	asrs	r3, r3, #31
 80013ba:	1c7f      	adds	r7, r7, #1
 80013bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80013be:	6800      	ldr	r0, [r0, #0]
 80013c0:	42b8      	cmp	r0, r7
 80013c2:	d2e6      	bcs.n	8001392 <cmox_ModAddBN+0x52>
 80013c4:	9801      	ldr	r0, [sp, #4]
 80013c6:	42b8      	cmp	r0, r7
 80013c8:	d31b      	bcc.n	8001402 <cmox_ModAddBN+0xc2>
 80013ca:	00be      	lsls	r6, r7, #2
 80013cc:	9804      	ldr	r0, [sp, #16]
 80013ce:	5984      	ldr	r4, [r0, r6]
 80013d0:	2500      	movs	r5, #0
 80013d2:	9803      	ldr	r0, [sp, #12]
 80013d4:	5980      	ldr	r0, [r0, r6]
 80013d6:	2100      	movs	r1, #0
 80013d8:	1900      	adds	r0, r0, r4
 80013da:	4169      	adcs	r1, r5
 80013dc:	1880      	adds	r0, r0, r2
 80013de:	4159      	adcs	r1, r3
 80013e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80013e2:	5190      	str	r0, [r2, r6]
 80013e4:	000a      	movs	r2, r1
 80013e6:	17cb      	asrs	r3, r1, #31
 80013e8:	1c7f      	adds	r7, r7, #1
 80013ea:	e7eb      	b.n	80013c4 <cmox_ModAddBN+0x84>
 80013ec:	00bc      	lsls	r4, r7, #2
 80013ee:	9802      	ldr	r0, [sp, #8]
 80013f0:	5900      	ldr	r0, [r0, r4]
 80013f2:	2100      	movs	r1, #0
 80013f4:	1880      	adds	r0, r0, r2
 80013f6:	4159      	adcs	r1, r3
 80013f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80013fa:	5110      	str	r0, [r2, r4]
 80013fc:	000a      	movs	r2, r1
 80013fe:	17cb      	asrs	r3, r1, #31
 8001400:	1c7f      	adds	r7, r7, #1
 8001402:	9800      	ldr	r0, [sp, #0]
 8001404:	42b8      	cmp	r0, r7
 8001406:	d2f1      	bcs.n	80013ec <cmox_ModAddBN+0xac>
 8001408:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800140a:	0014      	movs	r4, r2
 800140c:	2201      	movs	r2, #1
 800140e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001410:	a806      	add	r0, sp, #24
 8001412:	c803      	ldmia	r0, {r0, r1}
 8001414:	9404      	str	r4, [sp, #16]
 8001416:	e017      	b.n	8001448 <cmox_ModAddBN+0x108>
 8001418:	0094      	lsls	r4, r2, #2
 800141a:	193b      	adds	r3, r7, r4
 800141c:	9002      	str	r0, [sp, #8]
 800141e:	9103      	str	r1, [sp, #12]
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	2100      	movs	r1, #0
 8001424:	9000      	str	r0, [sp, #0]
 8001426:	9101      	str	r1, [sp, #4]
 8001428:	9904      	ldr	r1, [sp, #16]
 800142a:	5930      	ldr	r0, [r6, r4]
 800142c:	4008      	ands	r0, r1
 800142e:	2100      	movs	r1, #0
 8001430:	9c00      	ldr	r4, [sp, #0]
 8001432:	2500      	movs	r5, #0
 8001434:	1900      	adds	r0, r0, r4
 8001436:	4169      	adcs	r1, r5
 8001438:	9c02      	ldr	r4, [sp, #8]
 800143a:	9d03      	ldr	r5, [sp, #12]
 800143c:	1900      	adds	r0, r0, r4
 800143e:	4169      	adcs	r1, r5
 8001440:	6018      	str	r0, [r3, #0]
 8001442:	0008      	movs	r0, r1
 8001444:	2100      	movs	r1, #0
 8001446:	1c52      	adds	r2, r2, #1
 8001448:	6833      	ldr	r3, [r6, #0]
 800144a:	4293      	cmp	r3, r2
 800144c:	d2e4      	bcs.n	8001418 <cmox_ModAddBN+0xd8>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	4293      	cmp	r3, r2
 8001452:	d30a      	bcc.n	800146a <cmox_ModAddBN+0x12a>
 8001454:	0093      	lsls	r3, r2, #2
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	681c      	ldr	r4, [r3, #0]
 800145a:	2500      	movs	r5, #0
 800145c:	1824      	adds	r4, r4, r0
 800145e:	414d      	adcs	r5, r1
 8001460:	601c      	str	r4, [r3, #0]
 8001462:	0028      	movs	r0, r5
 8001464:	2100      	movs	r1, #0
 8001466:	1c52      	adds	r2, r2, #1
 8001468:	e7f1      	b.n	800144e <cmox_ModAddBN+0x10e>
 800146a:	2000      	movs	r0, #0
 800146c:	b00b      	add	sp, #44	; 0x2c
 800146e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001470 <cmox_ModSubBN>:
 8001470:	b5f4      	push	{r2, r4, r5, r6, r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	0005      	movs	r5, r0
 8001476:	000c      	movs	r4, r1
 8001478:	001e      	movs	r6, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	2000      	movs	r0, #0
 8001480:	2100      	movs	r1, #0
 8001482:	af06      	add	r7, sp, #24
 8001484:	c703      	stmia	r7!, {r0, r1}
 8001486:	6837      	ldr	r7, [r6, #0]
 8001488:	9808      	ldr	r0, [sp, #32]
 800148a:	6800      	ldr	r0, [r0, #0]
 800148c:	4287      	cmp	r7, r0
 800148e:	d201      	bcs.n	8001494 <cmox_ModSubBN+0x24>
 8001490:	2003      	movs	r0, #3
 8001492:	e074      	b.n	800157e <cmox_ModSubBN+0x10e>
 8001494:	0020      	movs	r0, r4
 8001496:	6804      	ldr	r4, [r0, #0]
 8001498:	6829      	ldr	r1, [r5, #0]
 800149a:	42a1      	cmp	r1, r4
 800149c:	d304      	bcc.n	80014a8 <cmox_ModSubBN+0x38>
 800149e:	9502      	str	r5, [sp, #8]
 80014a0:	9100      	str	r1, [sp, #0]
 80014a2:	0021      	movs	r1, r4
 80014a4:	9204      	str	r2, [sp, #16]
 80014a6:	e004      	b.n	80014b2 <cmox_ModSubBN+0x42>
 80014a8:	9002      	str	r0, [sp, #8]
 80014aa:	9400      	str	r4, [sp, #0]
 80014ac:	2400      	movs	r4, #0
 80014ae:	43e4      	mvns	r4, r4
 80014b0:	9404      	str	r4, [sp, #16]
 80014b2:	9c00      	ldr	r4, [sp, #0]
 80014b4:	42a7      	cmp	r7, r4
 80014b6:	d200      	bcs.n	80014ba <cmox_ModSubBN+0x4a>
 80014b8:	9700      	str	r7, [sp, #0]
 80014ba:	2401      	movs	r4, #1
 80014bc:	9505      	str	r5, [sp, #20]
 80014be:	9003      	str	r0, [sp, #12]
 80014c0:	9601      	str	r6, [sp, #4]
 80014c2:	e011      	b.n	80014e8 <cmox_ModSubBN+0x78>
 80014c4:	00a0      	lsls	r0, r4, #2
 80014c6:	0016      	movs	r6, r2
 80014c8:	001f      	movs	r7, r3
 80014ca:	9a05      	ldr	r2, [sp, #20]
 80014cc:	5812      	ldr	r2, [r2, r0]
 80014ce:	2300      	movs	r3, #0
 80014d0:	1992      	adds	r2, r2, r6
 80014d2:	417b      	adcs	r3, r7
 80014d4:	9d03      	ldr	r5, [sp, #12]
 80014d6:	582e      	ldr	r6, [r5, r0]
 80014d8:	2700      	movs	r7, #0
 80014da:	1b92      	subs	r2, r2, r6
 80014dc:	41bb      	sbcs	r3, r7
 80014de:	9d01      	ldr	r5, [sp, #4]
 80014e0:	502a      	str	r2, [r5, r0]
 80014e2:	001a      	movs	r2, r3
 80014e4:	17db      	asrs	r3, r3, #31
 80014e6:	1c64      	adds	r4, r4, #1
 80014e8:	42a1      	cmp	r1, r4
 80014ea:	d2eb      	bcs.n	80014c4 <cmox_ModSubBN+0x54>
 80014ec:	9800      	ldr	r0, [sp, #0]
 80014ee:	42a0      	cmp	r0, r4
 80014f0:	d314      	bcc.n	800151c <cmox_ModSubBN+0xac>
 80014f2:	00a5      	lsls	r5, r4, #2
 80014f4:	9802      	ldr	r0, [sp, #8]
 80014f6:	5946      	ldr	r6, [r0, r5]
 80014f8:	9904      	ldr	r1, [sp, #16]
 80014fa:	0030      	movs	r0, r6
 80014fc:	4388      	bics	r0, r1
 80014fe:	2100      	movs	r1, #0
 8001500:	1880      	adds	r0, r0, r2
 8001502:	4159      	adcs	r1, r3
 8001504:	9b04      	ldr	r3, [sp, #16]
 8001506:	0032      	movs	r2, r6
 8001508:	401a      	ands	r2, r3
 800150a:	2300      	movs	r3, #0
 800150c:	1a80      	subs	r0, r0, r2
 800150e:	4199      	sbcs	r1, r3
 8001510:	9a01      	ldr	r2, [sp, #4]
 8001512:	5150      	str	r0, [r2, r5]
 8001514:	000a      	movs	r2, r1
 8001516:	17cb      	asrs	r3, r1, #31
 8001518:	1c64      	adds	r4, r4, #1
 800151a:	e7e7      	b.n	80014ec <cmox_ModSubBN+0x7c>
 800151c:	9f01      	ldr	r7, [sp, #4]
 800151e:	9e08      	ldr	r6, [sp, #32]
 8001520:	a806      	add	r0, sp, #24
 8001522:	c803      	ldmia	r0, {r0, r1}
 8001524:	9204      	str	r2, [sp, #16]
 8001526:	2201      	movs	r2, #1
 8001528:	e017      	b.n	800155a <cmox_ModSubBN+0xea>
 800152a:	0094      	lsls	r4, r2, #2
 800152c:	193b      	adds	r3, r7, r4
 800152e:	9002      	str	r0, [sp, #8]
 8001530:	9103      	str	r1, [sp, #12]
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	2100      	movs	r1, #0
 8001536:	9000      	str	r0, [sp, #0]
 8001538:	9101      	str	r1, [sp, #4]
 800153a:	9904      	ldr	r1, [sp, #16]
 800153c:	5930      	ldr	r0, [r6, r4]
 800153e:	4008      	ands	r0, r1
 8001540:	2100      	movs	r1, #0
 8001542:	9c00      	ldr	r4, [sp, #0]
 8001544:	2500      	movs	r5, #0
 8001546:	1900      	adds	r0, r0, r4
 8001548:	4169      	adcs	r1, r5
 800154a:	9c02      	ldr	r4, [sp, #8]
 800154c:	9d03      	ldr	r5, [sp, #12]
 800154e:	1900      	adds	r0, r0, r4
 8001550:	4169      	adcs	r1, r5
 8001552:	6018      	str	r0, [r3, #0]
 8001554:	0008      	movs	r0, r1
 8001556:	2100      	movs	r1, #0
 8001558:	1c52      	adds	r2, r2, #1
 800155a:	6833      	ldr	r3, [r6, #0]
 800155c:	4293      	cmp	r3, r2
 800155e:	d2e4      	bcs.n	800152a <cmox_ModSubBN+0xba>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	4293      	cmp	r3, r2
 8001564:	d30a      	bcc.n	800157c <cmox_ModSubBN+0x10c>
 8001566:	0093      	lsls	r3, r2, #2
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	681c      	ldr	r4, [r3, #0]
 800156c:	2500      	movs	r5, #0
 800156e:	1824      	adds	r4, r4, r0
 8001570:	414d      	adcs	r5, r1
 8001572:	601c      	str	r4, [r3, #0]
 8001574:	0028      	movs	r0, r5
 8001576:	2100      	movs	r1, #0
 8001578:	1c52      	adds	r2, r2, #1
 800157a:	e7f1      	b.n	8001560 <cmox_ModSubBN+0xf0>
 800157c:	2000      	movs	r0, #0
 800157e:	b009      	add	sp, #36	; 0x24
 8001580:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001582 <cmox_AddBN_Int>:
 8001582:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001584:	0005      	movs	r5, r0
 8001586:	0013      	movs	r3, r2
 8001588:	686e      	ldr	r6, [r5, #4]
 800158a:	2700      	movs	r7, #0
 800158c:	0008      	movs	r0, r1
 800158e:	17c1      	asrs	r1, r0, #31
 8001590:	1980      	adds	r0, r0, r6
 8001592:	4179      	adcs	r1, r7
 8001594:	6058      	str	r0, [r3, #4]
 8001596:	0008      	movs	r0, r1
 8001598:	17c9      	asrs	r1, r1, #31
 800159a:	2402      	movs	r4, #2
 800159c:	002a      	movs	r2, r5
 800159e:	e008      	b.n	80015b2 <cmox_AddBN_Int+0x30>
 80015a0:	00a5      	lsls	r5, r4, #2
 80015a2:	5956      	ldr	r6, [r2, r5]
 80015a4:	2700      	movs	r7, #0
 80015a6:	1836      	adds	r6, r6, r0
 80015a8:	414f      	adcs	r7, r1
 80015aa:	515e      	str	r6, [r3, r5]
 80015ac:	0038      	movs	r0, r7
 80015ae:	17f9      	asrs	r1, r7, #31
 80015b0:	1c64      	adds	r4, r4, #1
 80015b2:	6815      	ldr	r5, [r2, #0]
 80015b4:	42a5      	cmp	r5, r4
 80015b6:	d2f3      	bcs.n	80015a0 <cmox_AddBN_Int+0x1e>
 80015b8:	4241      	negs	r1, r0
 80015ba:	4381      	bics	r1, r0
 80015bc:	0fc8      	lsrs	r0, r1, #31
 80015be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015c0 <cmox_FieldBN_Div2>:
 80015c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	0007      	movs	r7, r0
 80015c6:	000b      	movs	r3, r1
 80015c8:	687c      	ldr	r4, [r7, #4]
 80015ca:	07e0      	lsls	r0, r4, #31
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	4241      	negs	r1, r0
 80015d0:	9102      	str	r1, [sp, #8]
 80015d2:	6838      	ldr	r0, [r7, #0]
 80015d4:	6819      	ldr	r1, [r3, #0]
 80015d6:	4288      	cmp	r0, r1
 80015d8:	d102      	bne.n	80015e0 <cmox_FieldBN_Div2+0x20>
 80015da:	6811      	ldr	r1, [r2, #0]
 80015dc:	4281      	cmp	r1, r0
 80015de:	d201      	bcs.n	80015e4 <cmox_FieldBN_Div2+0x24>
 80015e0:	2001      	movs	r0, #1
 80015e2:	e046      	b.n	8001672 <cmox_FieldBN_Div2+0xb2>
 80015e4:	2500      	movs	r5, #0
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	9802      	ldr	r0, [sp, #8]
 80015ea:	4008      	ands	r0, r1
 80015ec:	2100      	movs	r1, #0
 80015ee:	1900      	adds	r0, r0, r4
 80015f0:	4169      	adcs	r1, r5
 80015f2:	6050      	str	r0, [r2, #4]
 80015f4:	0008      	movs	r0, r1
 80015f6:	2100      	movs	r1, #0
 80015f8:	466c      	mov	r4, sp
 80015fa:	c403      	stmia	r4!, {r0, r1}
 80015fc:	9303      	str	r3, [sp, #12]
 80015fe:	4668      	mov	r0, sp
 8001600:	c803      	ldmia	r0, {r0, r1}
 8001602:	2302      	movs	r3, #2
 8001604:	e01d      	b.n	8001642 <cmox_FieldBN_Div2+0x82>
 8001606:	009e      	lsls	r6, r3, #2
 8001608:	9000      	str	r0, [sp, #0]
 800160a:	9101      	str	r1, [sp, #4]
 800160c:	59bc      	ldr	r4, [r7, r6]
 800160e:	2500      	movs	r5, #0
 8001610:	9803      	ldr	r0, [sp, #12]
 8001612:	5981      	ldr	r1, [r0, r6]
 8001614:	9802      	ldr	r0, [sp, #8]
 8001616:	4008      	ands	r0, r1
 8001618:	2100      	movs	r1, #0
 800161a:	1900      	adds	r0, r0, r4
 800161c:	4169      	adcs	r1, r5
 800161e:	9c00      	ldr	r4, [sp, #0]
 8001620:	9d01      	ldr	r5, [sp, #4]
 8001622:	1900      	adds	r0, r0, r4
 8001624:	4169      	adcs	r1, r5
 8001626:	1994      	adds	r4, r2, r6
 8001628:	6020      	str	r0, [r4, #0]
 800162a:	0008      	movs	r0, r1
 800162c:	2100      	movs	r1, #0
 800162e:	009d      	lsls	r5, r3, #2
 8001630:	1955      	adds	r5, r2, r5
 8001632:	1f2d      	subs	r5, r5, #4
 8001634:	682e      	ldr	r6, [r5, #0]
 8001636:	0876      	lsrs	r6, r6, #1
 8001638:	6824      	ldr	r4, [r4, #0]
 800163a:	07e4      	lsls	r4, r4, #31
 800163c:	4334      	orrs	r4, r6
 800163e:	602c      	str	r4, [r5, #0]
 8001640:	1c5b      	adds	r3, r3, #1
 8001642:	683c      	ldr	r4, [r7, #0]
 8001644:	429c      	cmp	r4, r3
 8001646:	d2de      	bcs.n	8001606 <cmox_FieldBN_Div2+0x46>
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	18d3      	adds	r3, r2, r3
 800164e:	1f1b      	subs	r3, r3, #4
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	07c0      	lsls	r0, r0, #31
 8001658:	4318      	orrs	r0, r3
 800165a:	9900      	ldr	r1, [sp, #0]
 800165c:	6008      	str	r0, [r1, #0]
 800165e:	9801      	ldr	r0, [sp, #4]
 8001660:	e002      	b.n	8001668 <cmox_FieldBN_Div2+0xa8>
 8001662:	2100      	movs	r1, #0
 8001664:	0083      	lsls	r3, r0, #2
 8001666:	50d1      	str	r1, [r2, r3]
 8001668:	1c40      	adds	r0, r0, #1
 800166a:	6811      	ldr	r1, [r2, #0]
 800166c:	4281      	cmp	r1, r0
 800166e:	d2f8      	bcs.n	8001662 <cmox_FieldBN_Div2+0xa2>
 8001670:	2000      	movs	r0, #0
 8001672:	b005      	add	sp, #20
 8001674:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001676 <cmox_FieldBN_Mul2>:
 8001676:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	0006      	movs	r6, r0
 800167c:	000b      	movs	r3, r1
 800167e:	6830      	ldr	r0, [r6, #0]
 8001680:	6819      	ldr	r1, [r3, #0]
 8001682:	4288      	cmp	r0, r1
 8001684:	d103      	bne.n	800168e <cmox_FieldBN_Mul2+0x18>
 8001686:	0017      	movs	r7, r2
 8001688:	6839      	ldr	r1, [r7, #0]
 800168a:	4281      	cmp	r1, r0
 800168c:	d201      	bcs.n	8001692 <cmox_FieldBN_Mul2+0x1c>
 800168e:	2001      	movs	r0, #1
 8001690:	e056      	b.n	8001740 <cmox_FieldBN_Mul2+0xca>
 8001692:	6870      	ldr	r0, [r6, #4]
 8001694:	0044      	lsls	r4, r0, #1
 8001696:	2500      	movs	r5, #0
 8001698:	6858      	ldr	r0, [r3, #4]
 800169a:	2100      	movs	r1, #0
 800169c:	1a24      	subs	r4, r4, r0
 800169e:	418d      	sbcs	r5, r1
 80016a0:	0020      	movs	r0, r4
 80016a2:	002c      	movs	r4, r5
 80016a4:	17ed      	asrs	r5, r5, #31
 80016a6:	2102      	movs	r1, #2
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	e01b      	b.n	80016e4 <cmox_FieldBN_Mul2+0x6e>
 80016ac:	008a      	lsls	r2, r1, #2
 80016ae:	9201      	str	r2, [sp, #4]
 80016b0:	18b2      	adds	r2, r6, r2
 80016b2:	6813      	ldr	r3, [r2, #0]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	1f12      	subs	r2, r2, #4
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	0fd2      	lsrs	r2, r2, #31
 80016bc:	431a      	orrs	r2, r3
 80016be:	2300      	movs	r3, #0
 80016c0:	1912      	adds	r2, r2, r4
 80016c2:	416b      	adcs	r3, r5
 80016c4:	0014      	movs	r4, r2
 80016c6:	001d      	movs	r5, r3
 80016c8:	9a00      	ldr	r2, [sp, #0]
 80016ca:	9b01      	ldr	r3, [sp, #4]
 80016cc:	58d2      	ldr	r2, [r2, r3]
 80016ce:	2300      	movs	r3, #0
 80016d0:	1aa4      	subs	r4, r4, r2
 80016d2:	419d      	sbcs	r5, r3
 80016d4:	9a01      	ldr	r2, [sp, #4]
 80016d6:	18ba      	adds	r2, r7, r2
 80016d8:	1f12      	subs	r2, r2, #4
 80016da:	6010      	str	r0, [r2, #0]
 80016dc:	0020      	movs	r0, r4
 80016de:	002c      	movs	r4, r5
 80016e0:	17ed      	asrs	r5, r5, #31
 80016e2:	1c49      	adds	r1, r1, #1
 80016e4:	6832      	ldr	r2, [r6, #0]
 80016e6:	428a      	cmp	r2, r1
 80016e8:	d2e0      	bcs.n	80016ac <cmox_FieldBN_Mul2+0x36>
 80016ea:	9604      	str	r6, [sp, #16]
 80016ec:	003e      	movs	r6, r7
 80016ee:	0091      	lsls	r1, r2, #2
 80016f0:	9a04      	ldr	r2, [sp, #16]
 80016f2:	5852      	ldr	r2, [r2, r1]
 80016f4:	0fd2      	lsrs	r2, r2, #31
 80016f6:	1912      	adds	r2, r2, r4
 80016f8:	5070      	str	r0, [r6, r1]
 80016fa:	2000      	movs	r0, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	2301      	movs	r3, #1
 8001700:	9f00      	ldr	r7, [sp, #0]
 8001702:	e018      	b.n	8001736 <cmox_FieldBN_Mul2+0xc0>
 8001704:	009c      	lsls	r4, r3, #2
 8001706:	1935      	adds	r5, r6, r4
 8001708:	9505      	str	r5, [sp, #20]
 800170a:	9002      	str	r0, [sp, #8]
 800170c:	9103      	str	r1, [sp, #12]
 800170e:	9805      	ldr	r0, [sp, #20]
 8001710:	6800      	ldr	r0, [r0, #0]
 8001712:	2100      	movs	r1, #0
 8001714:	9000      	str	r0, [sp, #0]
 8001716:	9101      	str	r1, [sp, #4]
 8001718:	5938      	ldr	r0, [r7, r4]
 800171a:	4010      	ands	r0, r2
 800171c:	9c00      	ldr	r4, [sp, #0]
 800171e:	2500      	movs	r5, #0
 8001720:	1900      	adds	r0, r0, r4
 8001722:	4169      	adcs	r1, r5
 8001724:	9c02      	ldr	r4, [sp, #8]
 8001726:	9d03      	ldr	r5, [sp, #12]
 8001728:	1900      	adds	r0, r0, r4
 800172a:	4169      	adcs	r1, r5
 800172c:	9c05      	ldr	r4, [sp, #20]
 800172e:	6020      	str	r0, [r4, #0]
 8001730:	0008      	movs	r0, r1
 8001732:	17c9      	asrs	r1, r1, #31
 8001734:	1c5b      	adds	r3, r3, #1
 8001736:	9c04      	ldr	r4, [sp, #16]
 8001738:	6824      	ldr	r4, [r4, #0]
 800173a:	429c      	cmp	r4, r3
 800173c:	d2e2      	bcs.n	8001704 <cmox_FieldBN_Mul2+0x8e>
 800173e:	2000      	movs	r0, #0
 8001740:	b006      	add	sp, #24
 8001742:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001744 <cmox_FieldBN_CondNegate>:
 8001744:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001746:	0003      	movs	r3, r0
 8001748:	000d      	movs	r5, r1
 800174a:	2000      	movs	r0, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2d00      	cmp	r5, #0
 8001750:	d005      	beq.n	800175e <cmox_FieldBN_CondNegate+0x1a>
 8001752:	2a00      	cmp	r2, #0
 8001754:	d003      	beq.n	800175e <cmox_FieldBN_CondNegate+0x1a>
 8001756:	682c      	ldr	r4, [r5, #0]
 8001758:	6816      	ldr	r6, [r2, #0]
 800175a:	42b4      	cmp	r4, r6
 800175c:	d201      	bcs.n	8001762 <cmox_FieldBN_CondNegate+0x1e>
 800175e:	2001      	movs	r0, #1
 8001760:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001762:	2401      	movs	r4, #1
 8001764:	9302      	str	r3, [sp, #8]
 8001766:	9501      	str	r5, [sp, #4]
 8001768:	0015      	movs	r5, r2
 800176a:	e014      	b.n	8001796 <cmox_FieldBN_CondNegate+0x52>
 800176c:	00a3      	lsls	r3, r4, #2
 800176e:	9a01      	ldr	r2, [sp, #4]
 8001770:	18d2      	adds	r2, r2, r3
 8001772:	9200      	str	r2, [sp, #0]
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	58ee      	ldr	r6, [r5, r3]
 8001778:	2700      	movs	r7, #0
 800177a:	1836      	adds	r6, r6, r0
 800177c:	414f      	adcs	r7, r1
 800177e:	2300      	movs	r3, #0
 8001780:	1ab6      	subs	r6, r6, r2
 8001782:	419f      	sbcs	r7, r3
 8001784:	0031      	movs	r1, r6
 8001786:	9802      	ldr	r0, [sp, #8]
 8001788:	f000 f89f 	bl	80018ca <cmox_mathUtils_mux>
 800178c:	9900      	ldr	r1, [sp, #0]
 800178e:	6008      	str	r0, [r1, #0]
 8001790:	0038      	movs	r0, r7
 8001792:	17f9      	asrs	r1, r7, #31
 8001794:	1c64      	adds	r4, r4, #1
 8001796:	682a      	ldr	r2, [r5, #0]
 8001798:	42a2      	cmp	r2, r4
 800179a:	d2e7      	bcs.n	800176c <cmox_FieldBN_CondNegate+0x28>
 800179c:	2000      	movs	r0, #0
 800179e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080017a0 <cmox_ModularBN_InitWithR2>:
 80017a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a2:	0005      	movs	r5, r0
 80017a4:	000e      	movs	r6, r1
 80017a6:	0014      	movs	r4, r2
 80017a8:	0018      	movs	r0, r3
 80017aa:	6829      	ldr	r1, [r5, #0]
 80017ac:	004a      	lsls	r2, r1, #1
 80017ae:	0021      	movs	r1, r4
 80017b0:	3108      	adds	r1, #8
 80017b2:	f001 fcb7 	bl	8003124 <cmox_bn_alloc>
 80017b6:	0007      	movs	r7, r0
 80017b8:	d109      	bne.n	80017ce <cmox_ModularBN_InitWithR2+0x2e>
 80017ba:	6066      	str	r6, [r4, #4]
 80017bc:	6025      	str	r5, [r4, #0]
 80017be:	0021      	movs	r1, r4
 80017c0:	310c      	adds	r1, #12
 80017c2:	6868      	ldr	r0, [r5, #4]
 80017c4:	f7ff fd72 	bl	80012ac <basic_type_modinv>
 80017c8:	68e0      	ldr	r0, [r4, #12]
 80017ca:	4241      	negs	r1, r0
 80017cc:	60e1      	str	r1, [r4, #12]
 80017ce:	0038      	movs	r0, r7
 80017d0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080017d2 <cmox_ModularBN_Enter>:
 80017d2:	b580      	push	{r7, lr}
 80017d4:	000b      	movs	r3, r1
 80017d6:	9200      	str	r2, [sp, #0]
 80017d8:	0002      	movs	r2, r0
 80017da:	6859      	ldr	r1, [r3, #4]
 80017dc:	f000 f820 	bl	8001820 <cmox_ModularBN_Mul>
 80017e0:	bd02      	pop	{r1, pc}

080017e2 <cmox_ModularBN_Exit>:
 80017e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017e4:	0007      	movs	r7, r0
 80017e6:	000e      	movs	r6, r1
 80017e8:	001c      	movs	r4, r3
 80017ea:	2000      	movs	r0, #0
 80017ec:	9001      	str	r0, [sp, #4]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	a901      	add	r1, sp, #4
 80017f2:	9802      	ldr	r0, [sp, #8]
 80017f4:	f001 fc96 	bl	8003124 <cmox_bn_alloc>
 80017f8:	0005      	movs	r5, r0
 80017fa:	d10f      	bne.n	800181c <cmox_ModularBN_Exit+0x3a>
 80017fc:	2101      	movs	r1, #1
 80017fe:	9801      	ldr	r0, [sp, #4]
 8001800:	f001 fca8 	bl	8003154 <cmox_bn_init>
 8001804:	9400      	str	r4, [sp, #0]
 8001806:	0033      	movs	r3, r6
 8001808:	003a      	movs	r2, r7
 800180a:	9901      	ldr	r1, [sp, #4]
 800180c:	0038      	movs	r0, r7
 800180e:	f000 f807 	bl	8001820 <cmox_ModularBN_Mul>
 8001812:	0005      	movs	r5, r0
 8001814:	a901      	add	r1, sp, #4
 8001816:	9802      	ldr	r0, [sp, #8]
 8001818:	f001 fc90 	bl	800313c <cmox_bn_free>
 800181c:	0028      	movs	r0, r5
 800181e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001820 <cmox_ModularBN_Mul>:
 8001820:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001822:	0016      	movs	r6, r2
 8001824:	001c      	movs	r4, r3
 8001826:	6822      	ldr	r2, [r4, #0]
 8001828:	6813      	ldr	r3, [r2, #0]
 800182a:	9302      	str	r3, [sp, #8]
 800182c:	6833      	ldr	r3, [r6, #0]
 800182e:	9d02      	ldr	r5, [sp, #8]
 8001830:	42ab      	cmp	r3, r5
 8001832:	d201      	bcs.n	8001838 <cmox_ModularBN_Mul+0x18>
 8001834:	2003      	movs	r0, #3
 8001836:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001838:	9d08      	ldr	r5, [sp, #32]
 800183a:	68e3      	ldr	r3, [r4, #12]
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	1d12      	adds	r2, r2, #4
 8001840:	9200      	str	r2, [sp, #0]
 8001842:	68a2      	ldr	r2, [r4, #8]
 8001844:	1d13      	adds	r3, r2, #4
 8001846:	9a02      	ldr	r2, [sp, #8]
 8001848:	1d09      	adds	r1, r1, #4
 800184a:	1d00      	adds	r0, r0, #4
 800184c:	682f      	ldr	r7, [r5, #0]
 800184e:	47b8      	blx	r7
 8001850:	68e0      	ldr	r0, [r4, #12]
 8001852:	9000      	str	r0, [sp, #0]
 8001854:	1d33      	adds	r3, r6, #4
 8001856:	6820      	ldr	r0, [r4, #0]
 8001858:	1d02      	adds	r2, r0, #4
 800185a:	9902      	ldr	r1, [sp, #8]
 800185c:	68a0      	ldr	r0, [r4, #8]
 800185e:	1d00      	adds	r0, r0, #4
 8001860:	686c      	ldr	r4, [r5, #4]
 8001862:	47a0      	blx	r4
 8001864:	2000      	movs	r0, #0
 8001866:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001868 <cmox_ModularBN_Sqr>:
 8001868:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800186a:	000d      	movs	r5, r1
 800186c:	0014      	movs	r4, r2
 800186e:	6821      	ldr	r1, [r4, #0]
 8001870:	680e      	ldr	r6, [r1, #0]
 8001872:	682a      	ldr	r2, [r5, #0]
 8001874:	42b2      	cmp	r2, r6
 8001876:	d201      	bcs.n	800187c <cmox_ModularBN_Sqr+0x14>
 8001878:	2003      	movs	r0, #3
 800187a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	68e2      	ldr	r2, [r4, #12]
 8001880:	9200      	str	r2, [sp, #0]
 8001882:	1d0b      	adds	r3, r1, #4
 8001884:	68a1      	ldr	r1, [r4, #8]
 8001886:	1d0a      	adds	r2, r1, #4
 8001888:	0031      	movs	r1, r6
 800188a:	1d00      	adds	r0, r0, #4
 800188c:	9f01      	ldr	r7, [sp, #4]
 800188e:	68bf      	ldr	r7, [r7, #8]
 8001890:	47b8      	blx	r7
 8001892:	68e0      	ldr	r0, [r4, #12]
 8001894:	9000      	str	r0, [sp, #0]
 8001896:	1d2b      	adds	r3, r5, #4
 8001898:	6820      	ldr	r0, [r4, #0]
 800189a:	1d02      	adds	r2, r0, #4
 800189c:	0031      	movs	r1, r6
 800189e:	68a0      	ldr	r0, [r4, #8]
 80018a0:	1d00      	adds	r0, r0, #4
 80018a2:	9c01      	ldr	r4, [sp, #4]
 80018a4:	68e4      	ldr	r4, [r4, #12]
 80018a6:	47a0      	blx	r4
 80018a8:	2000      	movs	r0, #0
 80018aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080018ac <cmox_ModularBN_DeinitWithR2>:
 80018ac:	0002      	movs	r2, r0
 80018ae:	0008      	movs	r0, r1
 80018b0:	2100      	movs	r1, #0
 80018b2:	6011      	str	r1, [r2, #0]
 80018b4:	60d1      	str	r1, [r2, #12]
 80018b6:	6891      	ldr	r1, [r2, #8]
 80018b8:	2900      	cmp	r1, #0
 80018ba:	d100      	bne.n	80018be <cmox_ModularBN_DeinitWithR2+0x12>
 80018bc:	4770      	bx	lr
 80018be:	b580      	push	{r7, lr}
 80018c0:	0011      	movs	r1, r2
 80018c2:	3108      	adds	r1, #8
 80018c4:	f001 fc3a 	bl	800313c <cmox_bn_free>
 80018c8:	bd01      	pop	{r0, pc}

080018ca <cmox_mathUtils_mux>:
 80018ca:	0003      	movs	r3, r0
 80018cc:	0010      	movs	r0, r2
 80018ce:	425a      	negs	r2, r3
 80018d0:	4041      	eors	r1, r0
 80018d2:	4011      	ands	r1, r2
 80018d4:	4048      	eors	r0, r1
 80018d6:	4770      	bx	lr

080018d8 <cmox_mathUtils_not>:
 80018d8:	0001      	movs	r1, r0
 80018da:	2001      	movs	r0, #1
 80018dc:	4048      	eors	r0, r1
 80018de:	4770      	bx	lr

080018e0 <cmox_mathUtils_neq>:
 80018e0:	4041      	eors	r1, r0
 80018e2:	4248      	negs	r0, r1
 80018e4:	4308      	orrs	r0, r1
 80018e6:	0fc0      	lsrs	r0, r0, #31
 80018e8:	4770      	bx	lr

080018ea <cmox_mathUtils_gt>:
 80018ea:	1a0a      	subs	r2, r1, r0
 80018ec:	4041      	eors	r1, r0
 80018ee:	0013      	movs	r3, r2
 80018f0:	4043      	eors	r3, r0
 80018f2:	400b      	ands	r3, r1
 80018f4:	4053      	eors	r3, r2
 80018f6:	0fd8      	lsrs	r0, r3, #31
 80018f8:	4770      	bx	lr

080018fa <cmox_mathUtils_bitLength>:
 80018fa:	b530      	push	{r4, r5, lr}
 80018fc:	0001      	movs	r1, r0
 80018fe:	2020      	movs	r0, #32
 8001900:	2201      	movs	r2, #1
 8001902:	2301      	movs	r3, #1
 8001904:	241f      	movs	r4, #31
 8001906:	001d      	movs	r5, r3
 8001908:	000b      	movs	r3, r1
 800190a:	40e3      	lsrs	r3, r4
 800190c:	4013      	ands	r3, r2
 800190e:	4053      	eors	r3, r2
 8001910:	402b      	ands	r3, r5
 8001912:	1ac0      	subs	r0, r0, r3
 8001914:	1e64      	subs	r4, r4, #1
 8001916:	2500      	movs	r5, #0
 8001918:	43ed      	mvns	r5, r5
 800191a:	42ac      	cmp	r4, r5
 800191c:	d1f3      	bne.n	8001906 <cmox_mathUtils_bitLength+0xc>
 800191e:	bd30      	pop	{r4, r5, pc}

08001920 <cmox_mathUtils_abs>:
 8001920:	4241      	negs	r1, r0
 8001922:	17ca      	asrs	r2, r1, #31
 8001924:	4002      	ands	r2, r0
 8001926:	17c0      	asrs	r0, r0, #31
 8001928:	4008      	ands	r0, r1
 800192a:	4310      	orrs	r0, r2
 800192c:	4770      	bx	lr

0800192e <cmox_membuf_init>:
 800192e:	b580      	push	{r7, lr}
 8001930:	2300      	movs	r3, #0
 8001932:	f000 f801 	bl	8001938 <cmox_membuf_set>
 8001936:	bd01      	pop	{r0, pc}

08001938 <cmox_membuf_set>:
 8001938:	2900      	cmp	r1, #0
 800193a:	d006      	beq.n	800194a <cmox_membuf_set+0x12>
 800193c:	2a00      	cmp	r2, #0
 800193e:	d004      	beq.n	800194a <cmox_membuf_set+0x12>
 8001940:	6001      	str	r1, [r0, #0]
 8001942:	6042      	str	r2, [r0, #4]
 8001944:	6083      	str	r3, [r0, #8]
 8001946:	2100      	movs	r1, #0
 8001948:	60c1      	str	r1, [r0, #12]
 800194a:	4770      	bx	lr

0800194c <cmox_membuf_alloc>:
 800194c:	b570      	push	{r4, r5, r6, lr}
 800194e:	0003      	movs	r3, r0
 8001950:	2900      	cmp	r1, #0
 8001952:	d003      	beq.n	800195c <cmox_membuf_alloc+0x10>
 8001954:	2000      	movs	r0, #0
 8001956:	2a00      	cmp	r2, #0
 8001958:	d102      	bne.n	8001960 <cmox_membuf_alloc+0x14>
 800195a:	6008      	str	r0, [r1, #0]
 800195c:	2001      	movs	r0, #1
 800195e:	bd70      	pop	{r4, r5, r6, pc}
 8001960:	689c      	ldr	r4, [r3, #8]
 8001962:	1cd2      	adds	r2, r2, #3
 8001964:	2503      	movs	r5, #3
 8001966:	43aa      	bics	r2, r5
 8001968:	18a2      	adds	r2, r4, r2
 800196a:	685e      	ldr	r6, [r3, #4]
 800196c:	4296      	cmp	r6, r2
 800196e:	d202      	bcs.n	8001976 <cmox_membuf_alloc+0x2a>
 8001970:	6008      	str	r0, [r1, #0]
 8001972:	2002      	movs	r0, #2
 8001974:	bd70      	pop	{r4, r5, r6, pc}
 8001976:	681e      	ldr	r6, [r3, #0]
 8001978:	1934      	adds	r4, r6, r4
 800197a:	600c      	str	r4, [r1, #0]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	4611      	mov	r1, r2
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	4291      	cmp	r1, r2
 8001984:	d200      	bcs.n	8001988 <cmox_membuf_alloc+0x3c>
 8001986:	0011      	movs	r1, r2
 8001988:	60d9      	str	r1, [r3, #12]
 800198a:	bd70      	pop	{r4, r5, r6, pc}

0800198c <cmox_membuf_free>:
 800198c:	b530      	push	{r4, r5, lr}
 800198e:	0003      	movs	r3, r0
 8001990:	2400      	movs	r4, #0
 8001992:	2000      	movs	r0, #0
 8001994:	2900      	cmp	r1, #0
 8001996:	d007      	beq.n	80019a8 <cmox_membuf_free+0x1c>
 8001998:	680d      	ldr	r5, [r1, #0]
 800199a:	2d00      	cmp	r5, #0
 800199c:	d004      	beq.n	80019a8 <cmox_membuf_free+0x1c>
 800199e:	2a00      	cmp	r2, #0
 80019a0:	d002      	beq.n	80019a8 <cmox_membuf_free+0x1c>
 80019a2:	689d      	ldr	r5, [r3, #8]
 80019a4:	4295      	cmp	r5, r2
 80019a6:	d201      	bcs.n	80019ac <cmox_membuf_free+0x20>
 80019a8:	2001      	movs	r0, #1
 80019aa:	bd30      	pop	{r4, r5, pc}
 80019ac:	600c      	str	r4, [r1, #0]
 80019ae:	1cd2      	adds	r2, r2, #3
 80019b0:	2103      	movs	r1, #3
 80019b2:	438a      	bics	r2, r1
 80019b4:	1aa9      	subs	r1, r5, r2
 80019b6:	6099      	str	r1, [r3, #8]
 80019b8:	bd30      	pop	{r4, r5, pc}

080019ba <cmox_membuf_cleanup>:
 80019ba:	b510      	push	{r4, lr}
 80019bc:	0004      	movs	r4, r0
 80019be:	6861      	ldr	r1, [r4, #4]
 80019c0:	6820      	ldr	r0, [r4, #0]
 80019c2:	f006 fcb9 	bl	8008338 <__aeabi_memclr>
 80019c6:	2000      	movs	r0, #0
 80019c8:	2100      	movs	r1, #0
 80019ca:	2200      	movs	r2, #0
 80019cc:	2300      	movs	r3, #0
 80019ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d0:	bd10      	pop	{r4, pc}
 80019d2:	0000      	movs	r0, r0
 80019d4:	0101b004 	.word	0x0101b004
 80019d8:	45011700 	.word	0x45011700

080019dc <.text_19>:
	...

080019e4 <cmox_ModExpBN_SW>:
 80019e4:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 80019e6:	b08b      	sub	sp, #44	; 0x2c
 80019e8:	0015      	movs	r5, r2
 80019ea:	2600      	movs	r6, #0
 80019ec:	4669      	mov	r1, sp
 80019ee:	720e      	strb	r6, [r1, #8]
 80019f0:	2001      	movs	r0, #1
 80019f2:	7288      	strb	r0, [r1, #10]
 80019f4:	724e      	strb	r6, [r1, #9]
 80019f6:	9004      	str	r0, [sp, #16]
 80019f8:	9608      	str	r6, [sp, #32]
 80019fa:	9601      	str	r6, [sp, #4]
 80019fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80019fe:	6800      	ldr	r0, [r0, #0]
 8001a00:	2801      	cmp	r0, #1
 8001a02:	d901      	bls.n	8001a08 <cmox_ModExpBN_SW+0x24>
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	9304      	str	r3, [sp, #16]
 8001a08:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	9904      	ldr	r1, [sp, #16]
 8001a0e:	1e49      	subs	r1, r1, #1
 8001a10:	4088      	lsls	r0, r1
 8001a12:	0080      	lsls	r0, r0, #2
 8001a14:	9009      	str	r0, [sp, #36]	; 0x24
 8001a16:	4602      	mov	r2, r0
 8001a18:	a901      	add	r1, sp, #4
 8001a1a:	0020      	movs	r0, r4
 8001a1c:	f7ff ff96 	bl	800194c <cmox_membuf_alloc>
 8001a20:	9006      	str	r0, [sp, #24]
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d000      	beq.n	8001a28 <cmox_ModExpBN_SW+0x44>
 8001a26:	e0fc      	b.n	8001c22 <cmox_ModExpBN_SW+0x23e>
 8001a28:	9003      	str	r0, [sp, #12]
 8001a2a:	9413      	str	r4, [sp, #76]	; 0x4c
 8001a2c:	9c04      	ldr	r4, [sp, #16]
 8001a2e:	e00e      	b.n	8001a4e <cmox_ModExpBN_SW+0x6a>
 8001a30:	6828      	ldr	r0, [r5, #0]
 8001a32:	6802      	ldr	r2, [r0, #0]
 8001a34:	9801      	ldr	r0, [sp, #4]
 8001a36:	9903      	ldr	r1, [sp, #12]
 8001a38:	0089      	lsls	r1, r1, #2
 8001a3a:	1841      	adds	r1, r0, r1
 8001a3c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001a3e:	f001 fb71 	bl	8003124 <cmox_bn_alloc>
 8001a42:	9006      	str	r0, [sp, #24]
 8001a44:	2800      	cmp	r0, #0
 8001a46:	d171      	bne.n	8001b2c <cmox_ModExpBN_SW+0x148>
 8001a48:	9803      	ldr	r0, [sp, #12]
 8001a4a:	1c40      	adds	r0, r0, #1
 8001a4c:	9003      	str	r0, [sp, #12]
 8001a4e:	2001      	movs	r0, #1
 8001a50:	1e61      	subs	r1, r4, #1
 8001a52:	4088      	lsls	r0, r1
 8001a54:	9007      	str	r0, [sp, #28]
 8001a56:	9803      	ldr	r0, [sp, #12]
 8001a58:	9907      	ldr	r1, [sp, #28]
 8001a5a:	4288      	cmp	r0, r1
 8001a5c:	d3e8      	bcc.n	8001a30 <cmox_ModExpBN_SW+0x4c>
 8001a5e:	2100      	movs	r1, #0
 8001a60:	9801      	ldr	r0, [sp, #4]
 8001a62:	6800      	ldr	r0, [r0, #0]
 8001a64:	f001 fb76 	bl	8003154 <cmox_bn_init>
 8001a68:	2100      	movs	r1, #0
 8001a6a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001a6c:	f001 fb72 	bl	8003154 <cmox_bn_init>
 8001a70:	9801      	ldr	r0, [sp, #4]
 8001a72:	6802      	ldr	r2, [r0, #0]
 8001a74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001a76:	2001      	movs	r0, #1
 8001a78:	f001 fb7f 	bl	800317a <cmox_bn_cCopy>
 8001a7c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8001a7e:	9505      	str	r5, [sp, #20]
 8001a80:	0025      	movs	r5, r4
 8001a82:	2400      	movs	r4, #0
 8001a84:	e007      	b.n	8001a96 <cmox_ModExpBN_SW+0xb2>
 8001a86:	9801      	ldr	r0, [sp, #4]
 8001a88:	6800      	ldr	r0, [r0, #0]
 8001a8a:	003b      	movs	r3, r7
 8001a8c:	9a05      	ldr	r2, [sp, #20]
 8001a8e:	0001      	movs	r1, r0
 8001a90:	f7ff feea 	bl	8001868 <cmox_ModularBN_Sqr>
 8001a94:	1c64      	adds	r4, r4, #1
 8001a96:	1e68      	subs	r0, r5, #1
 8001a98:	4284      	cmp	r4, r0
 8001a9a:	d3f4      	bcc.n	8001a86 <cmox_ModExpBN_SW+0xa2>
 8001a9c:	9805      	ldr	r0, [sp, #20]
 8001a9e:	9504      	str	r5, [sp, #16]
 8001aa0:	2401      	movs	r4, #1
 8001aa2:	1e69      	subs	r1, r5, #1
 8001aa4:	466a      	mov	r2, sp
 8001aa6:	72d1      	strb	r1, [r2, #11]
 8001aa8:	0005      	movs	r5, r0
 8001aaa:	e00b      	b.n	8001ac4 <cmox_ModExpBN_SW+0xe0>
 8001aac:	9801      	ldr	r0, [sp, #4]
 8001aae:	00a1      	lsls	r1, r4, #2
 8001ab0:	1840      	adds	r0, r0, r1
 8001ab2:	9700      	str	r7, [sp, #0]
 8001ab4:	002b      	movs	r3, r5
 8001ab6:	6802      	ldr	r2, [r0, #0]
 8001ab8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001aba:	1f00      	subs	r0, r0, #4
 8001abc:	6800      	ldr	r0, [r0, #0]
 8001abe:	f7ff feaf 	bl	8001820 <cmox_ModularBN_Mul>
 8001ac2:	1c64      	adds	r4, r4, #1
 8001ac4:	9807      	ldr	r0, [sp, #28]
 8001ac6:	4284      	cmp	r4, r0
 8001ac8:	d3f0      	bcc.n	8001aac <cmox_ModExpBN_SW+0xc8>
 8001aca:	002c      	movs	r4, r5
 8001acc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001ace:	6800      	ldr	r0, [r0, #0]
 8001ad0:	9007      	str	r0, [sp, #28]
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001ad6:	f001 fb3d 	bl	8003154 <cmox_bn_init>
 8001ada:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001adc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f001 fb4b 	bl	800317a <cmox_bn_cCopy>
 8001ae4:	e015      	b.n	8001b12 <cmox_ModExpBN_SW+0x12e>
 8001ae6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001ae8:	9907      	ldr	r1, [sp, #28]
 8001aea:	0089      	lsls	r1, r1, #2
 8001aec:	5840      	ldr	r0, [r0, r1]
 8001aee:	9008      	str	r0, [sp, #32]
 8001af0:	9807      	ldr	r0, [sp, #28]
 8001af2:	1e40      	subs	r0, r0, #1
 8001af4:	9007      	str	r0, [sp, #28]
 8001af6:	2020      	movs	r0, #32
 8001af8:	4669      	mov	r1, sp
 8001afa:	7288      	strb	r0, [r1, #10]
 8001afc:	9808      	ldr	r0, [sp, #32]
 8001afe:	0fc0      	lsrs	r0, r0, #31
 8001b00:	9908      	ldr	r1, [sp, #32]
 8001b02:	0049      	lsls	r1, r1, #1
 8001b04:	9108      	str	r1, [sp, #32]
 8001b06:	0031      	movs	r1, r6
 8001b08:	d13f      	bne.n	8001b8a <cmox_ModExpBN_SW+0x1a6>
 8001b0a:	2800      	cmp	r0, #0
 8001b0c:	d001      	beq.n	8001b12 <cmox_ModExpBN_SW+0x12e>
 8001b0e:	d047      	beq.n	8001ba0 <cmox_ModExpBN_SW+0x1bc>
 8001b10:	2601      	movs	r6, #1
 8001b12:	4668      	mov	r0, sp
 8001b14:	7a80      	ldrb	r0, [r0, #10]
 8001b16:	1e40      	subs	r0, r0, #1
 8001b18:	4669      	mov	r1, sp
 8001b1a:	7288      	strb	r0, [r1, #10]
 8001b1c:	4668      	mov	r0, sp
 8001b1e:	7a80      	ldrb	r0, [r0, #10]
 8001b20:	2800      	cmp	r0, #0
 8001b22:	d1eb      	bne.n	8001afc <cmox_ModExpBN_SW+0x118>
 8001b24:	9807      	ldr	r0, [sp, #28]
 8001b26:	2800      	cmp	r0, #0
 8001b28:	d1dd      	bne.n	8001ae6 <cmox_ModExpBN_SW+0x102>
 8001b2a:	2e02      	cmp	r6, #2
 8001b2c:	d11e      	bne.n	8001b6c <cmox_ModExpBN_SW+0x188>
 8001b2e:	4668      	mov	r0, sp
 8001b30:	7a00      	ldrb	r0, [r0, #8]
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d01a      	beq.n	8001b6c <cmox_ModExpBN_SW+0x188>
 8001b36:	4668      	mov	r0, sp
 8001b38:	7a05      	ldrb	r5, [r0, #8]
 8001b3a:	9405      	str	r4, [sp, #20]
 8001b3c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8001b3e:	7a44      	ldrb	r4, [r0, #9]
 8001b40:	003b      	movs	r3, r7
 8001b42:	9a05      	ldr	r2, [sp, #20]
 8001b44:	0031      	movs	r1, r6
 8001b46:	0030      	movs	r0, r6
 8001b48:	f7ff fe8e 	bl	8001868 <cmox_ModularBN_Sqr>
 8001b4c:	0064      	lsls	r4, r4, #1
 8001b4e:	2001      	movs	r0, #1
 8001b50:	9904      	ldr	r1, [sp, #16]
 8001b52:	4088      	lsls	r0, r1
 8001b54:	b2e1      	uxtb	r1, r4
 8001b56:	4201      	tst	r1, r0
 8001b58:	d006      	beq.n	8001b68 <cmox_ModExpBN_SW+0x184>
 8001b5a:	9700      	str	r7, [sp, #0]
 8001b5c:	9b05      	ldr	r3, [sp, #20]
 8001b5e:	0032      	movs	r2, r6
 8001b60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001b62:	0030      	movs	r0, r6
 8001b64:	f7ff fe5c 	bl	8001820 <cmox_ModularBN_Mul>
 8001b68:	1e6d      	subs	r5, r5, #1
 8001b6a:	d1e9      	bne.n	8001b40 <cmox_ModExpBN_SW+0x15c>
 8001b6c:	9803      	ldr	r0, [sp, #12]
 8001b6e:	2800      	cmp	r0, #0
 8001b70:	d052      	beq.n	8001c18 <cmox_ModExpBN_SW+0x234>
 8001b72:	9801      	ldr	r0, [sp, #4]
 8001b74:	9903      	ldr	r1, [sp, #12]
 8001b76:	0089      	lsls	r1, r1, #2
 8001b78:	1841      	adds	r1, r0, r1
 8001b7a:	1f09      	subs	r1, r1, #4
 8001b7c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001b7e:	f001 fadd 	bl	800313c <cmox_bn_free>
 8001b82:	9803      	ldr	r0, [sp, #12]
 8001b84:	1e40      	subs	r0, r0, #1
 8001b86:	9003      	str	r0, [sp, #12]
 8001b88:	e7f0      	b.n	8001b6c <cmox_ModExpBN_SW+0x188>
 8001b8a:	2e01      	cmp	r6, #1
 8001b8c:	d108      	bne.n	8001ba0 <cmox_ModExpBN_SW+0x1bc>
 8001b8e:	2800      	cmp	r0, #0
 8001b90:	d106      	bne.n	8001ba0 <cmox_ModExpBN_SW+0x1bc>
 8001b92:	003b      	movs	r3, r7
 8001b94:	0022      	movs	r2, r4
 8001b96:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001b98:	4608      	mov	r0, r1
 8001b9a:	f7ff fe65 	bl	8001868 <cmox_ModularBN_Sqr>
 8001b9e:	e7b8      	b.n	8001b12 <cmox_ModExpBN_SW+0x12e>
 8001ba0:	4669      	mov	r1, sp
 8001ba2:	7a09      	ldrb	r1, [r1, #8]
 8001ba4:	1c49      	adds	r1, r1, #1
 8001ba6:	466a      	mov	r2, sp
 8001ba8:	7211      	strb	r1, [r2, #8]
 8001baa:	4669      	mov	r1, sp
 8001bac:	7a49      	ldrb	r1, [r1, #9]
 8001bae:	9a04      	ldr	r2, [sp, #16]
 8001bb0:	466b      	mov	r3, sp
 8001bb2:	7a1b      	ldrb	r3, [r3, #8]
 8001bb4:	1ad2      	subs	r2, r2, r3
 8001bb6:	4090      	lsls	r0, r2
 8001bb8:	4308      	orrs	r0, r1
 8001bba:	4669      	mov	r1, sp
 8001bbc:	7248      	strb	r0, [r1, #9]
 8001bbe:	2602      	movs	r6, #2
 8001bc0:	4668      	mov	r0, sp
 8001bc2:	7a00      	ldrb	r0, [r0, #8]
 8001bc4:	9904      	ldr	r1, [sp, #16]
 8001bc6:	4288      	cmp	r0, r1
 8001bc8:	d1a3      	bne.n	8001b12 <cmox_ModExpBN_SW+0x12e>
 8001bca:	9405      	str	r4, [sp, #20]
 8001bcc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8001bce:	9e04      	ldr	r6, [sp, #16]
 8001bd0:	2400      	movs	r4, #0
 8001bd2:	e006      	b.n	8001be2 <cmox_ModExpBN_SW+0x1fe>
 8001bd4:	003b      	movs	r3, r7
 8001bd6:	9a05      	ldr	r2, [sp, #20]
 8001bd8:	0029      	movs	r1, r5
 8001bda:	0028      	movs	r0, r5
 8001bdc:	f7ff fe44 	bl	8001868 <cmox_ModularBN_Sqr>
 8001be0:	1c64      	adds	r4, r4, #1
 8001be2:	42b4      	cmp	r4, r6
 8001be4:	d3f6      	bcc.n	8001bd4 <cmox_ModExpBN_SW+0x1f0>
 8001be6:	9c05      	ldr	r4, [sp, #20]
 8001be8:	9512      	str	r5, [sp, #72]	; 0x48
 8001bea:	9604      	str	r6, [sp, #16]
 8001bec:	2601      	movs	r6, #1
 8001bee:	9700      	str	r7, [sp, #0]
 8001bf0:	0023      	movs	r3, r4
 8001bf2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001bf4:	9d01      	ldr	r5, [sp, #4]
 8001bf6:	4668      	mov	r0, sp
 8001bf8:	7a41      	ldrb	r1, [r0, #9]
 8001bfa:	468c      	mov	ip, r1
 8001bfc:	7ac1      	ldrb	r1, [r0, #11]
 8001bfe:	2001      	movs	r0, #1
 8001c00:	4088      	lsls	r0, r1
 8001c02:	4661      	mov	r1, ip
 8001c04:	4381      	bics	r1, r0
 8001c06:	0088      	lsls	r0, r1, #2
 8001c08:	5829      	ldr	r1, [r5, r0]
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f7ff fe08 	bl	8001820 <cmox_ModularBN_Mul>
 8001c10:	2000      	movs	r0, #0
 8001c12:	466a      	mov	r2, sp
 8001c14:	8110      	strh	r0, [r2, #8]
 8001c16:	e77c      	b.n	8001b12 <cmox_ModExpBN_SW+0x12e>
 8001c18:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001c1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c1c:	a901      	add	r1, sp, #4
 8001c1e:	f7ff feb5 	bl	800198c <cmox_membuf_free>
 8001c22:	9806      	ldr	r0, [sp, #24]
 8001c24:	b00d      	add	sp, #52	; 0x34
 8001c26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c28 <cmox_ScalarMul_FW>:
 8001c28:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001c2a:	b08e      	sub	sp, #56	; 0x38
 8001c2c:	0005      	movs	r5, r0
 8001c2e:	2001      	movs	r0, #1
 8001c30:	900a      	str	r0, [sp, #40]	; 0x28
 8001c32:	69a8      	ldr	r0, [r5, #24]
 8001c34:	6980      	ldr	r0, [r0, #24]
 8001c36:	6840      	ldr	r0, [r0, #4]
 8001c38:	9000      	str	r0, [sp, #0]
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	9005      	str	r0, [sp, #20]
 8001c3e:	2100      	movs	r1, #0
 8001c40:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001c42:	f001 fb28 	bl	8003296 <cmox_bn_cmpUint>
 8001c46:	2800      	cmp	r0, #0
 8001c48:	d10a      	bne.n	8001c60 <cmox_ScalarMul_FW+0x38>
 8001c4a:	69a8      	ldr	r0, [r5, #24]
 8001c4c:	6800      	ldr	r0, [r0, #0]
 8001c4e:	69c1      	ldr	r1, [r0, #28]
 8001c50:	2901      	cmp	r1, #1
 8001c52:	d008      	beq.n	8001c66 <cmox_ScalarMul_FW+0x3e>
 8001c54:	6881      	ldr	r1, [r0, #8]
 8001c56:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001c58:	f001 facf 	bl	80031fa <cmox_bn_cmp>
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	d402      	bmi.n	8001c66 <cmox_ScalarMul_FW+0x3e>
 8001c60:	2001      	movs	r0, #1
 8001c62:	9004      	str	r0, [sp, #16]
 8001c64:	e1d8      	b.n	8002018 <cmox_ScalarMul_FW+0x3f0>
 8001c66:	69a8      	ldr	r0, [r5, #24]
 8001c68:	6840      	ldr	r0, [r0, #4]
 8001c6a:	6980      	ldr	r0, [r0, #24]
 8001c6c:	0082      	lsls	r2, r0, #2
 8001c6e:	0029      	movs	r1, r5
 8001c70:	3114      	adds	r1, #20
 8001c72:	69e8      	ldr	r0, [r5, #28]
 8001c74:	f7ff fe6a 	bl	800194c <cmox_membuf_alloc>
 8001c78:	9004      	str	r0, [sp, #16]
 8001c7a:	2800      	cmp	r0, #0
 8001c7c:	d1f2      	bne.n	8001c64 <cmox_ScalarMul_FW+0x3c>
 8001c7e:	2400      	movs	r4, #0
 8001c80:	e00c      	b.n	8001c9c <cmox_ScalarMul_FW+0x74>
 8001c82:	6809      	ldr	r1, [r1, #0]
 8001c84:	6809      	ldr	r1, [r1, #0]
 8001c86:	680a      	ldr	r2, [r1, #0]
 8001c88:	6969      	ldr	r1, [r5, #20]
 8001c8a:	00a3      	lsls	r3, r4, #2
 8001c8c:	18c9      	adds	r1, r1, r3
 8001c8e:	f001 fa49 	bl	8003124 <cmox_bn_alloc>
 8001c92:	9004      	str	r0, [sp, #16]
 8001c94:	2800      	cmp	r0, #0
 8001c96:	d000      	beq.n	8001c9a <cmox_ScalarMul_FW+0x72>
 8001c98:	e1b3      	b.n	8002002 <cmox_ScalarMul_FW+0x3da>
 8001c9a:	1c64      	adds	r4, r4, #1
 8001c9c:	69e8      	ldr	r0, [r5, #28]
 8001c9e:	69a9      	ldr	r1, [r5, #24]
 8001ca0:	684a      	ldr	r2, [r1, #4]
 8001ca2:	6992      	ldr	r2, [r2, #24]
 8001ca4:	4294      	cmp	r4, r2
 8001ca6:	d3ec      	bcc.n	8001c82 <cmox_ScalarMul_FW+0x5a>
 8001ca8:	940d      	str	r4, [sp, #52]	; 0x34
 8001caa:	2101      	movs	r1, #1
 8001cac:	9a00      	ldr	r2, [sp, #0]
 8001cae:	1e52      	subs	r2, r2, #1
 8001cb0:	4091      	lsls	r1, r2
 8001cb2:	0089      	lsls	r1, r1, #2
 8001cb4:	9109      	str	r1, [sp, #36]	; 0x24
 8001cb6:	460a      	mov	r2, r1
 8001cb8:	a901      	add	r1, sp, #4
 8001cba:	f7ff fe47 	bl	800194c <cmox_membuf_alloc>
 8001cbe:	9004      	str	r0, [sp, #16]
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	d000      	beq.n	8001cc6 <cmox_ScalarMul_FW+0x9e>
 8001cc4:	e194      	b.n	8001ff0 <cmox_ScalarMul_FW+0x3c8>
 8001cc6:	9900      	ldr	r1, [sp, #0]
 8001cc8:	1e49      	subs	r1, r1, #1
 8001cca:	466a      	mov	r2, sp
 8001ccc:	7211      	strb	r1, [r2, #8]
 8001cce:	002c      	movs	r4, r5
 8001cd0:	2500      	movs	r5, #0
 8001cd2:	e00f      	b.n	8001cf4 <cmox_ScalarMul_FW+0xcc>
 8001cd4:	00ae      	lsls	r6, r5, #2
 8001cd6:	9801      	ldr	r0, [sp, #4]
 8001cd8:	1981      	adds	r1, r0, r6
 8001cda:	0020      	movs	r0, r4
 8001cdc:	f7fe fa85 	bl	80001ea <cmox_ECC_AllocPoint>
 8001ce0:	9004      	str	r0, [sp, #16]
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d000      	beq.n	8001ce8 <cmox_ScalarMul_FW+0xc0>
 8001ce6:	e17b      	b.n	8001fe0 <cmox_ScalarMul_FW+0x3b8>
 8001ce8:	9801      	ldr	r0, [sp, #4]
 8001cea:	5981      	ldr	r1, [r0, r6]
 8001cec:	0020      	movs	r0, r4
 8001cee:	f7fe fb5e 	bl	80003ae <cmox_ECC_SetPointAtInfinity>
 8001cf2:	1c6d      	adds	r5, r5, #1
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	4669      	mov	r1, sp
 8001cf8:	7a09      	ldrb	r1, [r1, #8]
 8001cfa:	4088      	lsls	r0, r1
 8001cfc:	4285      	cmp	r5, r0
 8001cfe:	d3e9      	bcc.n	8001cd4 <cmox_ScalarMul_FW+0xac>
 8001d00:	9403      	str	r4, [sp, #12]
 8001d02:	950c      	str	r5, [sp, #48]	; 0x30
 8001d04:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001d06:	9803      	ldr	r0, [sp, #12]
 8001d08:	f7fe fb51 	bl	80003ae <cmox_ECC_SetPointAtInfinity>
 8001d0c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001d0e:	7900      	ldrb	r0, [r0, #4]
 8001d10:	07c1      	lsls	r1, r0, #31
 8001d12:	0fc9      	lsrs	r1, r1, #31
 8001d14:	9108      	str	r1, [sp, #32]
 8001d16:	9803      	ldr	r0, [sp, #12]
 8001d18:	6980      	ldr	r0, [r0, #24]
 8001d1a:	6800      	ldr	r0, [r0, #0]
 8001d1c:	6882      	ldr	r2, [r0, #8]
 8001d1e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001d20:	2001      	movs	r0, #1
 8001d22:	9b08      	ldr	r3, [sp, #32]
 8001d24:	1ac0      	subs	r0, r0, r3
 8001d26:	f7ff fd0d 	bl	8001744 <cmox_FieldBN_CondNegate>
 8001d2a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001d2c:	6800      	ldr	r0, [r0, #0]
 8001d2e:	0141      	lsls	r1, r0, #5
 8001d30:	9a00      	ldr	r2, [sp, #0]
 8001d32:	1a8c      	subs	r4, r1, r2
 8001d34:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001d36:	0080      	lsls	r0, r0, #2
 8001d38:	5808      	ldr	r0, [r1, r0]
 8001d3a:	f7ff fdde 	bl	80018fa <cmox_mathUtils_bitLength>
 8001d3e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001d40:	6809      	ldr	r1, [r1, #0]
 8001d42:	1e49      	subs	r1, r1, #1
 8001d44:	0149      	lsls	r1, r1, #5
 8001d46:	1840      	adds	r0, r0, r1
 8001d48:	2500      	movs	r5, #0
 8001d4a:	9900      	ldr	r1, [sp, #0]
 8001d4c:	1e49      	subs	r1, r1, #1
 8001d4e:	466a      	mov	r2, sp
 8001d50:	7211      	strb	r1, [r2, #8]
 8001d52:	2101      	movs	r1, #1
 8001d54:	7a12      	ldrb	r2, [r2, #8]
 8001d56:	4091      	lsls	r1, r2
 8001d58:	1e49      	subs	r1, r1, #1
 8001d5a:	9107      	str	r1, [sp, #28]
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	9a00      	ldr	r2, [sp, #0]
 8001d60:	4091      	lsls	r1, r2
 8001d62:	9104      	str	r1, [sp, #16]
 8001d64:	9e00      	ldr	r6, [sp, #0]
 8001d66:	9400      	str	r4, [sp, #0]
 8001d68:	9006      	str	r0, [sp, #24]
 8001d6a:	e02a      	b.n	8001dc2 <cmox_ScalarMul_FW+0x19a>
 8001d6c:	002a      	movs	r2, r5
 8001d6e:	1c71      	adds	r1, r6, #1
 8001d70:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001d72:	f001 fabe 	bl	80032f2 <cmox_bn_getBits>
 8001d76:	0004      	movs	r4, r0
 8001d78:	9804      	ldr	r0, [sp, #16]
 8001d7a:	1a20      	subs	r0, r4, r0
 8001d7c:	f7ff fdd0 	bl	8001920 <cmox_mathUtils_abs>
 8001d80:	0007      	movs	r7, r0
 8001d82:	19a9      	adds	r1, r5, r6
 8001d84:	9800      	ldr	r0, [sp, #0]
 8001d86:	f7ff fdb0 	bl	80018ea <cmox_mathUtils_gt>
 8001d8a:	087f      	lsrs	r7, r7, #1
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	9904      	ldr	r1, [sp, #16]
 8001d90:	f7ff fd9b 	bl	80018ca <cmox_mathUtils_mux>
 8001d94:	4338      	orrs	r0, r7
 8001d96:	0007      	movs	r7, r0
 8001d98:	0029      	movs	r1, r5
 8001d9a:	9806      	ldr	r0, [sp, #24]
 8001d9c:	f7ff fda5 	bl	80018ea <cmox_mathUtils_gt>
 8001da0:	9a07      	ldr	r2, [sp, #28]
 8001da2:	40f4      	lsrs	r4, r6
 8001da4:	07e1      	lsls	r1, r4, #31
 8001da6:	0fc9      	lsrs	r1, r1, #31
 8001da8:	466b      	mov	r3, sp
 8001daa:	7a1b      	ldrb	r3, [r3, #8]
 8001dac:	4099      	lsls	r1, r3
 8001dae:	4339      	orrs	r1, r7
 8001db0:	f7ff fd8b 	bl	80018ca <cmox_mathUtils_mux>
 8001db4:	0003      	movs	r3, r0
 8001db6:	002a      	movs	r2, r5
 8001db8:	1c71      	adds	r1, r6, #1
 8001dba:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001dbc:	f001 fabd 	bl	800333a <cmox_bn_setBits>
 8001dc0:	19ad      	adds	r5, r5, r6
 8001dc2:	9800      	ldr	r0, [sp, #0]
 8001dc4:	4285      	cmp	r5, r0
 8001dc6:	d3d1      	bcc.n	8001d6c <cmox_ScalarMul_FW+0x144>
 8001dc8:	1c74      	adds	r4, r6, #1
 8001dca:	002a      	movs	r2, r5
 8001dcc:	0021      	movs	r1, r4
 8001dce:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001dd0:	f001 fa8f 	bl	80032f2 <cmox_bn_getBits>
 8001dd4:	0843      	lsrs	r3, r0, #1
 8001dd6:	002a      	movs	r2, r5
 8001dd8:	0021      	movs	r1, r4
 8001dda:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001ddc:	f001 faad 	bl	800333a <cmox_bn_setBits>
 8001de0:	2100      	movs	r1, #0
 8001de2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001de4:	7c00      	ldrb	r0, [r0, #16]
 8001de6:	2204      	movs	r2, #4
 8001de8:	4010      	ands	r0, r2
 8001dea:	f7ff fd79 	bl	80018e0 <cmox_mathUtils_neq>
 8001dee:	2800      	cmp	r0, #0
 8001df0:	d104      	bne.n	8001dfc <cmox_ScalarMul_FW+0x1d4>
 8001df2:	900a      	str	r0, [sp, #40]	; 0x28
 8001df4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001df6:	9803      	ldr	r0, [sp, #12]
 8001df8:	f7fe fba1 	bl	800053e <cmox_ECC_PointToModularDomain>
 8001dfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001dfe:	9803      	ldr	r0, [sp, #12]
 8001e00:	f7fe fbfb 	bl	80005fa <cmox_ECC_PointValidation>
 8001e04:	9004      	str	r0, [sp, #16]
 8001e06:	2800      	cmp	r0, #0
 8001e08:	d000      	beq.n	8001e0c <cmox_ScalarMul_FW+0x1e4>
 8001e0a:	e0de      	b.n	8001fca <cmox_ScalarMul_FW+0x3a2>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	9801      	ldr	r0, [sp, #4]
 8001e10:	6802      	ldr	r2, [r0, #0]
 8001e12:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001e14:	9803      	ldr	r0, [sp, #12]
 8001e16:	6984      	ldr	r4, [r0, #24]
 8001e18:	6864      	ldr	r4, [r4, #4]
 8001e1a:	6824      	ldr	r4, [r4, #0]
 8001e1c:	47a0      	blx	r4
 8001e1e:	2000      	movs	r0, #0
 8001e20:	9000      	str	r0, [sp, #0]
 8001e22:	9801      	ldr	r0, [sp, #4]
 8001e24:	6843      	ldr	r3, [r0, #4]
 8001e26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001e28:	6801      	ldr	r1, [r0, #0]
 8001e2a:	9803      	ldr	r0, [sp, #12]
 8001e2c:	6984      	ldr	r4, [r0, #24]
 8001e2e:	6864      	ldr	r4, [r4, #4]
 8001e30:	6864      	ldr	r4, [r4, #4]
 8001e32:	47a0      	blx	r4
 8001e34:	2402      	movs	r4, #2
 8001e36:	9f03      	ldr	r7, [sp, #12]
 8001e38:	e00b      	b.n	8001e52 <cmox_ScalarMul_FW+0x22a>
 8001e3a:	9801      	ldr	r0, [sp, #4]
 8001e3c:	00a1      	lsls	r1, r4, #2
 8001e3e:	1840      	adds	r0, r0, r1
 8001e40:	6803      	ldr	r3, [r0, #0]
 8001e42:	1f00      	subs	r0, r0, #4
 8001e44:	6801      	ldr	r1, [r0, #0]
 8001e46:	0038      	movs	r0, r7
 8001e48:	69bd      	ldr	r5, [r7, #24]
 8001e4a:	686d      	ldr	r5, [r5, #4]
 8001e4c:	68ad      	ldr	r5, [r5, #8]
 8001e4e:	47a8      	blx	r5
 8001e50:	1c64      	adds	r4, r4, #1
 8001e52:	9801      	ldr	r0, [sp, #4]
 8001e54:	6802      	ldr	r2, [r0, #0]
 8001e56:	2001      	movs	r0, #1
 8001e58:	4669      	mov	r1, sp
 8001e5a:	7a09      	ldrb	r1, [r1, #8]
 8001e5c:	4088      	lsls	r0, r1
 8001e5e:	4284      	cmp	r4, r0
 8001e60:	d3eb      	bcc.n	8001e3a <cmox_ScalarMul_FW+0x212>
 8001e62:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001e64:	2001      	movs	r0, #1
 8001e66:	f7fe fa48 	bl	80002fa <cmox_ECC_CondCopyPoint>
 8001e6a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001e6c:	6800      	ldr	r0, [r0, #0]
 8001e6e:	0144      	lsls	r4, r0, #5
 8001e70:	1ba2      	subs	r2, r4, r6
 8001e72:	1e71      	subs	r1, r6, #1
 8001e74:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001e76:	f001 fa3c 	bl	80032f2 <cmox_bn_getBits>
 8001e7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001e7c:	9901      	ldr	r1, [sp, #4]
 8001e7e:	0080      	lsls	r0, r0, #2
 8001e80:	5809      	ldr	r1, [r1, r0]
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7fe fa39 	bl	80002fa <cmox_ECC_CondCopyPoint>
 8001e88:	0070      	lsls	r0, r6, #1
 8001e8a:	1a20      	subs	r0, r4, r0
 8001e8c:	e02b      	b.n	8001ee6 <cmox_ScalarMul_FW+0x2be>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	002a      	movs	r2, r5
 8001e92:	0029      	movs	r1, r5
 8001e94:	9803      	ldr	r0, [sp, #12]
 8001e96:	6987      	ldr	r7, [r0, #24]
 8001e98:	687f      	ldr	r7, [r7, #4]
 8001e9a:	683f      	ldr	r7, [r7, #0]
 8001e9c:	47b8      	blx	r7
 8001e9e:	1e64      	subs	r4, r4, #1
 8001ea0:	d1f5      	bne.n	8001e8e <cmox_ScalarMul_FW+0x266>
 8001ea2:	9f03      	ldr	r7, [sp, #12]
 8001ea4:	9510      	str	r5, [sp, #64]	; 0x40
 8001ea6:	2401      	movs	r4, #1
 8001ea8:	9805      	ldr	r0, [sp, #20]
 8001eaa:	9906      	ldr	r1, [sp, #24]
 8001eac:	40c8      	lsrs	r0, r1
 8001eae:	4020      	ands	r0, r4
 8001eb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001eb2:	4041      	eors	r1, r0
 8001eb4:	404c      	eors	r4, r1
 8001eb6:	9806      	ldr	r0, [sp, #24]
 8001eb8:	0085      	lsls	r5, r0, #2
 8001eba:	9801      	ldr	r0, [sp, #4]
 8001ebc:	5942      	ldr	r2, [r0, r5]
 8001ebe:	0039      	movs	r1, r7
 8001ec0:	0020      	movs	r0, r4
 8001ec2:	f7fe fa4e 	bl	8000362 <cmox_ECC_CondSymmetricPoint>
 8001ec6:	9805      	ldr	r0, [sp, #20]
 8001ec8:	9906      	ldr	r1, [sp, #24]
 8001eca:	408c      	lsls	r4, r1
 8001ecc:	4044      	eors	r4, r0
 8001ece:	9405      	str	r4, [sp, #20]
 8001ed0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001ed2:	9801      	ldr	r0, [sp, #4]
 8001ed4:	5942      	ldr	r2, [r0, r5]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	0038      	movs	r0, r7
 8001eda:	69bc      	ldr	r4, [r7, #24]
 8001edc:	6864      	ldr	r4, [r4, #4]
 8001ede:	68a4      	ldr	r4, [r4, #8]
 8001ee0:	47a0      	blx	r4
 8001ee2:	9800      	ldr	r0, [sp, #0]
 8001ee4:	1b80      	subs	r0, r0, r6
 8001ee6:	9000      	str	r0, [sp, #0]
 8001ee8:	9800      	ldr	r0, [sp, #0]
 8001eea:	42b0      	cmp	r0, r6
 8001eec:	d310      	bcc.n	8001f10 <cmox_ScalarMul_FW+0x2e8>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	0031      	movs	r1, r6
 8001ef2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001ef4:	f001 f9fd 	bl	80032f2 <cmox_bn_getBits>
 8001ef8:	4669      	mov	r1, sp
 8001efa:	7a09      	ldrb	r1, [r1, #8]
 8001efc:	0002      	movs	r2, r0
 8001efe:	40ca      	lsrs	r2, r1
 8001f00:	920b      	str	r2, [sp, #44]	; 0x2c
 8001f02:	9907      	ldr	r1, [sp, #28]
 8001f04:	4001      	ands	r1, r0
 8001f06:	9106      	str	r1, [sp, #24]
 8001f08:	0034      	movs	r4, r6
 8001f0a:	9703      	str	r7, [sp, #12]
 8001f0c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001f0e:	e7c7      	b.n	8001ea0 <cmox_ScalarMul_FW+0x278>
 8001f10:	2200      	movs	r2, #0
 8001f12:	0031      	movs	r1, r6
 8001f14:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001f16:	f001 f9ec 	bl	80032f2 <cmox_bn_getBits>
 8001f1a:	0001      	movs	r1, r0
 8001f1c:	4668      	mov	r0, sp
 8001f1e:	7a00      	ldrb	r0, [r0, #8]
 8001f20:	000b      	movs	r3, r1
 8001f22:	40c3      	lsrs	r3, r0
 8001f24:	2001      	movs	r0, #1
 8001f26:	9c07      	ldr	r4, [sp, #28]
 8001f28:	400c      	ands	r4, r1
 8001f2a:	00a1      	lsls	r1, r4, #2
 8001f2c:	9100      	str	r1, [sp, #0]
 8001f2e:	9901      	ldr	r1, [sp, #4]
 8001f30:	9a00      	ldr	r2, [sp, #0]
 8001f32:	588a      	ldr	r2, [r1, r2]
 8001f34:	0039      	movs	r1, r7
 8001f36:	9d05      	ldr	r5, [sp, #20]
 8001f38:	40e5      	lsrs	r5, r4
 8001f3a:	4005      	ands	r5, r0
 8001f3c:	406b      	eors	r3, r5
 8001f3e:	4058      	eors	r0, r3
 8001f40:	f7fe fa0f 	bl	8000362 <cmox_ECC_CondSymmetricPoint>
 8001f44:	0034      	movs	r4, r6
 8001f46:	003e      	movs	r6, r7
 8001f48:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001f4a:	e006      	b.n	8001f5a <cmox_ScalarMul_FW+0x332>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	002a      	movs	r2, r5
 8001f50:	0029      	movs	r1, r5
 8001f52:	0030      	movs	r0, r6
 8001f54:	683f      	ldr	r7, [r7, #0]
 8001f56:	47b8      	blx	r7
 8001f58:	1e64      	subs	r4, r4, #1
 8001f5a:	69b0      	ldr	r0, [r6, #24]
 8001f5c:	6847      	ldr	r7, [r0, #4]
 8001f5e:	2c00      	cmp	r4, #0
 8001f60:	d1f4      	bne.n	8001f4c <cmox_ScalarMul_FW+0x324>
 8001f62:	9603      	str	r6, [sp, #12]
 8001f64:	9801      	ldr	r0, [sp, #4]
 8001f66:	6803      	ldr	r3, [r0, #0]
 8001f68:	9900      	ldr	r1, [sp, #0]
 8001f6a:	5842      	ldr	r2, [r0, r1]
 8001f6c:	0029      	movs	r1, r5
 8001f6e:	4630      	mov	r0, r6
 8001f70:	68bc      	ldr	r4, [r7, #8]
 8001f72:	47a0      	blx	r4
 8001f74:	2100      	movs	r1, #0
 8001f76:	9801      	ldr	r0, [sp, #4]
 8001f78:	6800      	ldr	r0, [r0, #0]
 8001f7a:	6880      	ldr	r0, [r0, #8]
 8001f7c:	f001 f98b 	bl	8003296 <cmox_bn_cmpUint>
 8001f80:	0003      	movs	r3, r0
 8001f82:	9801      	ldr	r0, [sp, #4]
 8001f84:	6802      	ldr	r2, [r0, #0]
 8001f86:	0029      	movs	r1, r5
 8001f88:	9803      	ldr	r0, [sp, #12]
 8001f8a:	6984      	ldr	r4, [r0, #24]
 8001f8c:	6864      	ldr	r4, [r4, #4]
 8001f8e:	6824      	ldr	r4, [r4, #0]
 8001f90:	47a0      	blx	r4
 8001f92:	002a      	movs	r2, r5
 8001f94:	9801      	ldr	r0, [sp, #4]
 8001f96:	6801      	ldr	r1, [r0, #0]
 8001f98:	2001      	movs	r0, #1
 8001f9a:	f7fe f9ae 	bl	80002fa <cmox_ECC_CondCopyPoint>
 8001f9e:	002a      	movs	r2, r5
 8001fa0:	9903      	ldr	r1, [sp, #12]
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	9b08      	ldr	r3, [sp, #32]
 8001fa6:	1ac0      	subs	r0, r0, r3
 8001fa8:	f7fe f9db 	bl	8000362 <cmox_ECC_CondSymmetricPoint>
 8001fac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001fae:	2800      	cmp	r0, #0
 8001fb0:	d10b      	bne.n	8001fca <cmox_ScalarMul_FW+0x3a2>
 8001fb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001fb4:	9803      	ldr	r0, [sp, #12]
 8001fb6:	f7fe faed 	bl	8000594 <cmox_ECC_PointFromModularDomain>
 8001fba:	9004      	str	r0, [sp, #16]
 8001fbc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001fbe:	42a8      	cmp	r0, r5
 8001fc0:	d003      	beq.n	8001fca <cmox_ScalarMul_FW+0x3a2>
 8001fc2:	0029      	movs	r1, r5
 8001fc4:	9803      	ldr	r0, [sp, #12]
 8001fc6:	f7fe fae5 	bl	8000594 <cmox_ECC_PointFromModularDomain>
 8001fca:	9c03      	ldr	r4, [sp, #12]
 8001fcc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001fce:	e007      	b.n	8001fe0 <cmox_ScalarMul_FW+0x3b8>
 8001fd0:	9801      	ldr	r0, [sp, #4]
 8001fd2:	00a9      	lsls	r1, r5, #2
 8001fd4:	1841      	adds	r1, r0, r1
 8001fd6:	1f09      	subs	r1, r1, #4
 8001fd8:	0020      	movs	r0, r4
 8001fda:	f7fe f95e 	bl	800029a <cmox_ECC_FreePoint>
 8001fde:	1e6d      	subs	r5, r5, #1
 8001fe0:	2d00      	cmp	r5, #0
 8001fe2:	d1f5      	bne.n	8001fd0 <cmox_ScalarMul_FW+0x3a8>
 8001fe4:	0025      	movs	r5, r4
 8001fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001fe8:	a901      	add	r1, sp, #4
 8001fea:	69e8      	ldr	r0, [r5, #28]
 8001fec:	f7ff fcce 	bl	800198c <cmox_membuf_free>
 8001ff0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8001ff2:	e006      	b.n	8002002 <cmox_ScalarMul_FW+0x3da>
 8001ff4:	6969      	ldr	r1, [r5, #20]
 8001ff6:	00a2      	lsls	r2, r4, #2
 8001ff8:	1889      	adds	r1, r1, r2
 8001ffa:	1f09      	subs	r1, r1, #4
 8001ffc:	f001 f89e 	bl	800313c <cmox_bn_free>
 8002000:	1e64      	subs	r4, r4, #1
 8002002:	69e8      	ldr	r0, [r5, #28]
 8002004:	2c00      	cmp	r4, #0
 8002006:	d1f5      	bne.n	8001ff4 <cmox_ScalarMul_FW+0x3cc>
 8002008:	69a9      	ldr	r1, [r5, #24]
 800200a:	6849      	ldr	r1, [r1, #4]
 800200c:	6989      	ldr	r1, [r1, #24]
 800200e:	008a      	lsls	r2, r1, #2
 8002010:	0029      	movs	r1, r5
 8002012:	3114      	adds	r1, #20
 8002014:	f7ff fcba 	bl	800198c <cmox_membuf_free>
 8002018:	9804      	ldr	r0, [sp, #16]
 800201a:	b011      	add	sp, #68	; 0x44
 800201c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800201e <cmox_ScalarMul_SC>:
 800201e:	b5f4      	push	{r2, r4, r5, r6, r7, lr}
 8002020:	b090      	sub	sp, #64	; 0x40
 8002022:	0006      	movs	r6, r0
 8002024:	000c      	movs	r4, r1
 8002026:	69b0      	ldr	r0, [r6, #24]
 8002028:	6800      	ldr	r0, [r0, #0]
 800202a:	6880      	ldr	r0, [r0, #8]
 800202c:	f001 f949 	bl	80032c2 <cmox_bn_countBits>
 8002030:	0005      	movs	r5, r0
 8002032:	69b7      	ldr	r7, [r6, #24]
 8002034:	68b8      	ldr	r0, [r7, #8]
 8002036:	6800      	ldr	r0, [r0, #0]
 8002038:	9006      	str	r0, [sp, #24]
 800203a:	0028      	movs	r0, r5
 800203c:	9906      	ldr	r1, [sp, #24]
 800203e:	f002 fb47 	bl	80046d0 <__udivsi3>
 8002042:	9009      	str	r0, [sp, #36]	; 0x24
 8002044:	9906      	ldr	r1, [sp, #24]
 8002046:	4348      	muls	r0, r1
 8002048:	1a28      	subs	r0, r5, r0
 800204a:	9001      	str	r0, [sp, #4]
 800204c:	9806      	ldr	r0, [sp, #24]
 800204e:	1e40      	subs	r0, r0, #1
 8002050:	4669      	mov	r1, sp
 8002052:	7508      	strb	r0, [r1, #20]
 8002054:	2001      	movs	r0, #1
 8002056:	7d09      	ldrb	r1, [r1, #20]
 8002058:	4088      	lsls	r0, r1
 800205a:	1e40      	subs	r0, r0, #1
 800205c:	900e      	str	r0, [sp, #56]	; 0x38
 800205e:	2000      	movs	r0, #0
 8002060:	9000      	str	r0, [sp, #0]
 8002062:	6838      	ldr	r0, [r7, #0]
 8002064:	6800      	ldr	r0, [r0, #0]
 8002066:	6800      	ldr	r0, [r0, #0]
 8002068:	9008      	str	r0, [sp, #32]
 800206a:	2000      	movs	r0, #0
 800206c:	9002      	str	r0, [sp, #8]
 800206e:	2002      	movs	r0, #2
 8002070:	900b      	str	r0, [sp, #44]	; 0x2c
 8002072:	68b8      	ldr	r0, [r7, #8]
 8002074:	900a      	str	r0, [sp, #40]	; 0x28
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	69c0      	ldr	r0, [r0, #28]
 800207a:	2802      	cmp	r0, #2
 800207c:	d101      	bne.n	8002082 <cmox_ScalarMul_SC+0x64>
 800207e:	2003      	movs	r0, #3
 8002080:	900b      	str	r0, [sp, #44]	; 0x2c
 8002082:	0027      	movs	r7, r4
 8002084:	2100      	movs	r1, #0
 8002086:	0038      	movs	r0, r7
 8002088:	f001 f905 	bl	8003296 <cmox_bn_cmpUint>
 800208c:	2800      	cmp	r0, #0
 800208e:	d10a      	bne.n	80020a6 <cmox_ScalarMul_SC+0x88>
 8002090:	69b0      	ldr	r0, [r6, #24]
 8002092:	6800      	ldr	r0, [r0, #0]
 8002094:	69c1      	ldr	r1, [r0, #28]
 8002096:	2901      	cmp	r1, #1
 8002098:	d007      	beq.n	80020aa <cmox_ScalarMul_SC+0x8c>
 800209a:	6881      	ldr	r1, [r0, #8]
 800209c:	0038      	movs	r0, r7
 800209e:	f001 f8ac 	bl	80031fa <cmox_bn_cmp>
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d401      	bmi.n	80020aa <cmox_ScalarMul_SC+0x8c>
 80020a6:	2501      	movs	r5, #1
 80020a8:	e193      	b.n	80023d2 <cmox_ScalarMul_SC+0x3b4>
 80020aa:	69b0      	ldr	r0, [r6, #24]
 80020ac:	6840      	ldr	r0, [r0, #4]
 80020ae:	6980      	ldr	r0, [r0, #24]
 80020b0:	0082      	lsls	r2, r0, #2
 80020b2:	0031      	movs	r1, r6
 80020b4:	3114      	adds	r1, #20
 80020b6:	69f0      	ldr	r0, [r6, #28]
 80020b8:	f7ff fc48 	bl	800194c <cmox_membuf_alloc>
 80020bc:	0005      	movs	r5, r0
 80020be:	d1f3      	bne.n	80020a8 <cmox_ScalarMul_SC+0x8a>
 80020c0:	2400      	movs	r4, #0
 80020c2:	e00c      	b.n	80020de <cmox_ScalarMul_SC+0xc0>
 80020c4:	6800      	ldr	r0, [r0, #0]
 80020c6:	6800      	ldr	r0, [r0, #0]
 80020c8:	6802      	ldr	r2, [r0, #0]
 80020ca:	6970      	ldr	r0, [r6, #20]
 80020cc:	00a1      	lsls	r1, r4, #2
 80020ce:	1841      	adds	r1, r0, r1
 80020d0:	69f0      	ldr	r0, [r6, #28]
 80020d2:	f001 f827 	bl	8003124 <cmox_bn_alloc>
 80020d6:	0005      	movs	r5, r0
 80020d8:	d000      	beq.n	80020dc <cmox_ScalarMul_SC+0xbe>
 80020da:	e16f      	b.n	80023bc <cmox_ScalarMul_SC+0x39e>
 80020dc:	1c64      	adds	r4, r4, #1
 80020de:	69b0      	ldr	r0, [r6, #24]
 80020e0:	6841      	ldr	r1, [r0, #4]
 80020e2:	6989      	ldr	r1, [r1, #24]
 80020e4:	428c      	cmp	r4, r1
 80020e6:	dbed      	blt.n	80020c4 <cmox_ScalarMul_SC+0xa6>
 80020e8:	9604      	str	r6, [sp, #16]
 80020ea:	940f      	str	r4, [sp, #60]	; 0x3c
 80020ec:	a902      	add	r1, sp, #8
 80020ee:	9804      	ldr	r0, [sp, #16]
 80020f0:	f7fe f87b 	bl	80001ea <cmox_ECC_AllocPoint>
 80020f4:	0005      	movs	r5, r0
 80020f6:	d000      	beq.n	80020fa <cmox_ScalarMul_SC+0xdc>
 80020f8:	e156      	b.n	80023a8 <cmox_ScalarMul_SC+0x38a>
 80020fa:	9902      	ldr	r1, [sp, #8]
 80020fc:	9804      	ldr	r0, [sp, #16]
 80020fe:	f7fe f956 	bl	80003ae <cmox_ECC_SetPointAtInfinity>
 8002102:	7938      	ldrb	r0, [r7, #4]
 8002104:	07c1      	lsls	r1, r0, #31
 8002106:	0fc9      	lsrs	r1, r1, #31
 8002108:	910d      	str	r1, [sp, #52]	; 0x34
 800210a:	9804      	ldr	r0, [sp, #16]
 800210c:	6980      	ldr	r0, [r0, #24]
 800210e:	6800      	ldr	r0, [r0, #0]
 8002110:	6882      	ldr	r2, [r0, #8]
 8002112:	0039      	movs	r1, r7
 8002114:	2001      	movs	r0, #1
 8002116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002118:	1ac0      	subs	r0, r0, r3
 800211a:	f7ff fb13 	bl	8001744 <cmox_FieldBN_CondNegate>
 800211e:	2400      	movs	r4, #0
 8002120:	9707      	str	r7, [sp, #28]
 8002122:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002124:	9e01      	ldr	r6, [sp, #4]
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	e00e      	b.n	8002148 <cmox_ScalarMul_SC+0x12a>
 800212a:	1c65      	adds	r5, r4, #1
 800212c:	9000      	str	r0, [sp, #0]
 800212e:	0028      	movs	r0, r5
 8002130:	4378      	muls	r0, r7
 8002132:	1982      	adds	r2, r0, r6
 8002134:	2101      	movs	r1, #1
 8002136:	9807      	ldr	r0, [sp, #28]
 8002138:	f001 f8db 	bl	80032f2 <cmox_bn_getBits>
 800213c:	0001      	movs	r1, r0
 800213e:	40a1      	lsls	r1, r4
 8002140:	9800      	ldr	r0, [sp, #0]
 8002142:	4301      	orrs	r1, r0
 8002144:	0008      	movs	r0, r1
 8002146:	002c      	movs	r4, r5
 8002148:	9906      	ldr	r1, [sp, #24]
 800214a:	1e49      	subs	r1, r1, #1
 800214c:	428c      	cmp	r4, r1
 800214e:	d3ec      	bcc.n	800212a <cmox_ScalarMul_SC+0x10c>
 8002150:	9709      	str	r7, [sp, #36]	; 0x24
 8002152:	0004      	movs	r4, r0
 8002154:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002156:	9804      	ldr	r0, [sp, #16]
 8002158:	f7fe f929 	bl	80003ae <cmox_ECC_SetPointAtInfinity>
 800215c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800215e:	9001      	str	r0, [sp, #4]
 8002160:	2006      	movs	r0, #6
 8002162:	9000      	str	r0, [sp, #0]
 8002164:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002166:	1d03      	adds	r3, r0, #4
 8002168:	1d00      	adds	r0, r0, #4
 800216a:	9908      	ldr	r1, [sp, #32]
 800216c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800216e:	1c64      	adds	r4, r4, #1
 8002170:	4362      	muls	r2, r4
 8002172:	1c52      	adds	r2, r2, #1
 8002174:	4351      	muls	r1, r2
 8002176:	0089      	lsls	r1, r1, #2
 8002178:	1842      	adds	r2, r0, r1
 800217a:	9908      	ldr	r1, [sp, #32]
 800217c:	2001      	movs	r0, #1
 800217e:	f7fe f958 	bl	8000432 <cmox_ECC_CondImportPoint>
 8002182:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002184:	1ead      	subs	r5, r5, #2
 8002186:	e04b      	b.n	8002220 <cmox_ScalarMul_SC+0x202>
 8002188:	9100      	str	r1, [sp, #0]
 800218a:	1970      	adds	r0, r6, r5
 800218c:	0021      	movs	r1, r4
 800218e:	4379      	muls	r1, r7
 8002190:	1842      	adds	r2, r0, r1
 8002192:	1c52      	adds	r2, r2, #1
 8002194:	2101      	movs	r1, #1
 8002196:	9807      	ldr	r0, [sp, #28]
 8002198:	f001 f8ab 	bl	80032f2 <cmox_bn_getBits>
 800219c:	40a0      	lsls	r0, r4
 800219e:	9900      	ldr	r1, [sp, #0]
 80021a0:	4308      	orrs	r0, r1
 80021a2:	0001      	movs	r1, r0
 80021a4:	1c64      	adds	r4, r4, #1
 80021a6:	9806      	ldr	r0, [sp, #24]
 80021a8:	4284      	cmp	r4, r0
 80021aa:	d3ed      	bcc.n	8002188 <cmox_ScalarMul_SC+0x16a>
 80021ac:	9709      	str	r7, [sp, #36]	; 0x24
 80021ae:	000c      	movs	r4, r1
 80021b0:	4668      	mov	r0, sp
 80021b2:	7d00      	ldrb	r0, [r0, #20]
 80021b4:	40c1      	lsrs	r1, r0
 80021b6:	07c8      	lsls	r0, r1, #31
 80021b8:	0fc0      	lsrs	r0, r0, #31
 80021ba:	900c      	str	r0, [sp, #48]	; 0x30
 80021bc:	2301      	movs	r3, #1
 80021be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80021c0:	4611      	mov	r1, r2
 80021c2:	9804      	ldr	r0, [sp, #16]
 80021c4:	6987      	ldr	r7, [r0, #24]
 80021c6:	687f      	ldr	r7, [r7, #4]
 80021c8:	683f      	ldr	r7, [r7, #0]
 80021ca:	47b8      	blx	r7
 80021cc:	9802      	ldr	r0, [sp, #8]
 80021ce:	9001      	str	r0, [sp, #4]
 80021d0:	2006      	movs	r0, #6
 80021d2:	9000      	str	r0, [sp, #0]
 80021d4:	2300      	movs	r3, #0
 80021d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80021d8:	1d01      	adds	r1, r0, #4
 80021da:	9a08      	ldr	r2, [sp, #32]
 80021dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80021de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80021e0:	1e7f      	subs	r7, r7, #1
 80021e2:	4067      	eors	r7, r4
 80021e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80021e6:	403c      	ands	r4, r7
 80021e8:	1c64      	adds	r4, r4, #1
 80021ea:	4360      	muls	r0, r4
 80021ec:	1c40      	adds	r0, r0, #1
 80021ee:	4342      	muls	r2, r0
 80021f0:	0090      	lsls	r0, r2, #2
 80021f2:	180a      	adds	r2, r1, r0
 80021f4:	9908      	ldr	r1, [sp, #32]
 80021f6:	2001      	movs	r0, #1
 80021f8:	f7fe f91b 	bl	8000432 <cmox_ECC_CondImportPoint>
 80021fc:	9a02      	ldr	r2, [sp, #8]
 80021fe:	9904      	ldr	r1, [sp, #16]
 8002200:	2001      	movs	r0, #1
 8002202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002204:	1ac0      	subs	r0, r0, r3
 8002206:	f7fe f8ac 	bl	8000362 <cmox_ECC_CondSymmetricPoint>
 800220a:	2000      	movs	r0, #0
 800220c:	9000      	str	r0, [sp, #0]
 800220e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002210:	9a02      	ldr	r2, [sp, #8]
 8002212:	4619      	mov	r1, r3
 8002214:	9804      	ldr	r0, [sp, #16]
 8002216:	6984      	ldr	r4, [r0, #24]
 8002218:	6864      	ldr	r4, [r4, #4]
 800221a:	6864      	ldr	r4, [r4, #4]
 800221c:	47a0      	blx	r4
 800221e:	1e6d      	subs	r5, r5, #1
 8002220:	1e70      	subs	r0, r6, #1
 8002222:	4180      	sbcs	r0, r0
 8002224:	0fc0      	lsrs	r0, r0, #31
 8002226:	4285      	cmp	r5, r0
 8002228:	db03      	blt.n	8002232 <cmox_ScalarMul_SC+0x214>
 800222a:	2100      	movs	r1, #0
 800222c:	2400      	movs	r4, #0
 800222e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002230:	e7b9      	b.n	80021a6 <cmox_ScalarMul_SC+0x188>
 8002232:	2e00      	cmp	r6, #0
 8002234:	d137      	bne.n	80022a6 <cmox_ScalarMul_SC+0x288>
 8002236:	2100      	movs	r1, #0
 8002238:	2400      	movs	r4, #0
 800223a:	9d07      	ldr	r5, [sp, #28]
 800223c:	9f06      	ldr	r7, [sp, #24]
 800223e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002240:	e00c      	b.n	800225c <cmox_ScalarMul_SC+0x23e>
 8002242:	9100      	str	r1, [sp, #0]
 8002244:	0022      	movs	r2, r4
 8002246:	4372      	muls	r2, r6
 8002248:	1c52      	adds	r2, r2, #1
 800224a:	2101      	movs	r1, #1
 800224c:	0028      	movs	r0, r5
 800224e:	f001 f850 	bl	80032f2 <cmox_bn_getBits>
 8002252:	40a0      	lsls	r0, r4
 8002254:	9900      	ldr	r1, [sp, #0]
 8002256:	4308      	orrs	r0, r1
 8002258:	0001      	movs	r1, r0
 800225a:	1c64      	adds	r4, r4, #1
 800225c:	42bc      	cmp	r4, r7
 800225e:	d3f0      	bcc.n	8002242 <cmox_ScalarMul_SC+0x224>
 8002260:	000c      	movs	r4, r1
 8002262:	4668      	mov	r0, sp
 8002264:	7d00      	ldrb	r0, [r0, #20]
 8002266:	40c1      	lsrs	r1, r0
 8002268:	07ce      	lsls	r6, r1, #31
 800226a:	0ff6      	lsrs	r6, r6, #31
 800226c:	2301      	movs	r3, #1
 800226e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002270:	4611      	mov	r1, r2
 8002272:	9804      	ldr	r0, [sp, #16]
 8002274:	6987      	ldr	r7, [r0, #24]
 8002276:	687f      	ldr	r7, [r7, #4]
 8002278:	683f      	ldr	r7, [r7, #0]
 800227a:	47b8      	blx	r7
 800227c:	9802      	ldr	r0, [sp, #8]
 800227e:	9001      	str	r0, [sp, #4]
 8002280:	2006      	movs	r0, #6
 8002282:	9000      	str	r0, [sp, #0]
 8002284:	2300      	movs	r3, #0
 8002286:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002288:	1d01      	adds	r1, r0, #4
 800228a:	9a08      	ldr	r2, [sp, #32]
 800228c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800228e:	1e77      	subs	r7, r6, #1
 8002290:	4067      	eors	r7, r4
 8002292:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8002294:	403c      	ands	r4, r7
 8002296:	1c64      	adds	r4, r4, #1
 8002298:	4360      	muls	r0, r4
 800229a:	1c40      	adds	r0, r0, #1
 800229c:	4342      	muls	r2, r0
 800229e:	0090      	lsls	r0, r2, #2
 80022a0:	180a      	adds	r2, r1, r0
 80022a2:	9908      	ldr	r1, [sp, #32]
 80022a4:	e04a      	b.n	800233c <cmox_ScalarMul_SC+0x31e>
 80022a6:	1e74      	subs	r4, r6, #1
 80022a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80022aa:	1d00      	adds	r0, r0, #4
 80022ac:	9908      	ldr	r1, [sp, #32]
 80022ae:	0089      	lsls	r1, r1, #2
 80022b0:	1840      	adds	r0, r0, r1
 80022b2:	9005      	str	r0, [sp, #20]
 80022b4:	9d04      	ldr	r5, [sp, #16]
 80022b6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80022b8:	e025      	b.n	8002306 <cmox_ScalarMul_SC+0x2e8>
 80022ba:	2301      	movs	r3, #1
 80022bc:	0032      	movs	r2, r6
 80022be:	0031      	movs	r1, r6
 80022c0:	0028      	movs	r0, r5
 80022c2:	47b8      	blx	r7
 80022c4:	1c62      	adds	r2, r4, #1
 80022c6:	2101      	movs	r1, #1
 80022c8:	9807      	ldr	r0, [sp, #28]
 80022ca:	f001 f812 	bl	80032f2 <cmox_bn_getBits>
 80022ce:	0007      	movs	r7, r0
 80022d0:	9802      	ldr	r0, [sp, #8]
 80022d2:	9001      	str	r0, [sp, #4]
 80022d4:	2006      	movs	r0, #6
 80022d6:	9000      	str	r0, [sp, #0]
 80022d8:	2300      	movs	r3, #0
 80022da:	9a05      	ldr	r2, [sp, #20]
 80022dc:	9908      	ldr	r1, [sp, #32]
 80022de:	2001      	movs	r0, #1
 80022e0:	f7fe f8a7 	bl	8000432 <cmox_ECC_CondImportPoint>
 80022e4:	9a02      	ldr	r2, [sp, #8]
 80022e6:	0029      	movs	r1, r5
 80022e8:	2001      	movs	r0, #1
 80022ea:	1bc0      	subs	r0, r0, r7
 80022ec:	f7fe f839 	bl	8000362 <cmox_ECC_CondSymmetricPoint>
 80022f0:	2000      	movs	r0, #0
 80022f2:	9000      	str	r0, [sp, #0]
 80022f4:	0033      	movs	r3, r6
 80022f6:	9a02      	ldr	r2, [sp, #8]
 80022f8:	0031      	movs	r1, r6
 80022fa:	0028      	movs	r0, r5
 80022fc:	69af      	ldr	r7, [r5, #24]
 80022fe:	687f      	ldr	r7, [r7, #4]
 8002300:	687f      	ldr	r7, [r7, #4]
 8002302:	47b8      	blx	r7
 8002304:	1e64      	subs	r4, r4, #1
 8002306:	69a8      	ldr	r0, [r5, #24]
 8002308:	6840      	ldr	r0, [r0, #4]
 800230a:	6807      	ldr	r7, [r0, #0]
 800230c:	2c00      	cmp	r4, #0
 800230e:	dcd4      	bgt.n	80022ba <cmox_ScalarMul_SC+0x29c>
 8002310:	9504      	str	r5, [sp, #16]
 8002312:	9d07      	ldr	r5, [sp, #28]
 8002314:	9610      	str	r6, [sp, #64]	; 0x40
 8002316:	9c08      	ldr	r4, [sp, #32]
 8002318:	2301      	movs	r3, #1
 800231a:	4632      	mov	r2, r6
 800231c:	4611      	mov	r1, r2
 800231e:	9804      	ldr	r0, [sp, #16]
 8002320:	47b8      	blx	r7
 8002322:	2201      	movs	r2, #1
 8002324:	2101      	movs	r1, #1
 8002326:	0028      	movs	r0, r5
 8002328:	f000 ffe3 	bl	80032f2 <cmox_bn_getBits>
 800232c:	0006      	movs	r6, r0
 800232e:	9802      	ldr	r0, [sp, #8]
 8002330:	9001      	str	r0, [sp, #4]
 8002332:	2006      	movs	r0, #6
 8002334:	9000      	str	r0, [sp, #0]
 8002336:	2300      	movs	r3, #0
 8002338:	9a05      	ldr	r2, [sp, #20]
 800233a:	0021      	movs	r1, r4
 800233c:	2001      	movs	r0, #1
 800233e:	f7fe f878 	bl	8000432 <cmox_ECC_CondImportPoint>
 8002342:	9a02      	ldr	r2, [sp, #8]
 8002344:	9904      	ldr	r1, [sp, #16]
 8002346:	2001      	movs	r0, #1
 8002348:	1b80      	subs	r0, r0, r6
 800234a:	f7fe f80a 	bl	8000362 <cmox_ECC_CondSymmetricPoint>
 800234e:	a803      	add	r0, sp, #12
 8002350:	9000      	str	r0, [sp, #0]
 8002352:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002354:	9a02      	ldr	r2, [sp, #8]
 8002356:	4619      	mov	r1, r3
 8002358:	9804      	ldr	r0, [sp, #16]
 800235a:	6984      	ldr	r4, [r0, #24]
 800235c:	6864      	ldr	r4, [r4, #4]
 800235e:	6864      	ldr	r4, [r4, #4]
 8002360:	47a0      	blx	r4
 8002362:	9803      	ldr	r0, [sp, #12]
 8002364:	07c3      	lsls	r3, r0, #31
 8002366:	0fdb      	lsrs	r3, r3, #31
 8002368:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800236a:	4611      	mov	r1, r2
 800236c:	9804      	ldr	r0, [sp, #16]
 800236e:	6984      	ldr	r4, [r0, #24]
 8002370:	6864      	ldr	r4, [r4, #4]
 8002372:	6824      	ldr	r4, [r4, #0]
 8002374:	47a0      	blx	r4
 8002376:	2001      	movs	r0, #1
 8002378:	990d      	ldr	r1, [sp, #52]	; 0x34
 800237a:	1a44      	subs	r4, r0, r1
 800237c:	9804      	ldr	r0, [sp, #16]
 800237e:	6980      	ldr	r0, [r0, #24]
 8002380:	6800      	ldr	r0, [r0, #0]
 8002382:	6882      	ldr	r2, [r0, #8]
 8002384:	0029      	movs	r1, r5
 8002386:	0020      	movs	r0, r4
 8002388:	f7ff f9dc 	bl	8001744 <cmox_FieldBN_CondNegate>
 800238c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800238e:	9904      	ldr	r1, [sp, #16]
 8002390:	0020      	movs	r0, r4
 8002392:	f7fd ffe6 	bl	8000362 <cmox_ECC_CondSymmetricPoint>
 8002396:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002398:	9804      	ldr	r0, [sp, #16]
 800239a:	f7fe f8fb 	bl	8000594 <cmox_ECC_PointFromModularDomain>
 800239e:	0005      	movs	r5, r0
 80023a0:	a902      	add	r1, sp, #8
 80023a2:	9804      	ldr	r0, [sp, #16]
 80023a4:	f7fd ff79 	bl	800029a <cmox_ECC_FreePoint>
 80023a8:	9e04      	ldr	r6, [sp, #16]
 80023aa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80023ac:	e006      	b.n	80023bc <cmox_ScalarMul_SC+0x39e>
 80023ae:	6971      	ldr	r1, [r6, #20]
 80023b0:	00a2      	lsls	r2, r4, #2
 80023b2:	1889      	adds	r1, r1, r2
 80023b4:	1f09      	subs	r1, r1, #4
 80023b6:	f000 fec1 	bl	800313c <cmox_bn_free>
 80023ba:	1e64      	subs	r4, r4, #1
 80023bc:	69f0      	ldr	r0, [r6, #28]
 80023be:	2c00      	cmp	r4, #0
 80023c0:	dcf5      	bgt.n	80023ae <cmox_ScalarMul_SC+0x390>
 80023c2:	69b1      	ldr	r1, [r6, #24]
 80023c4:	6849      	ldr	r1, [r1, #4]
 80023c6:	6989      	ldr	r1, [r1, #24]
 80023c8:	008a      	lsls	r2, r1, #2
 80023ca:	0031      	movs	r1, r6
 80023cc:	3114      	adds	r1, #20
 80023ce:	f7ff fadd 	bl	800198c <cmox_membuf_free>
 80023d2:	0028      	movs	r0, r5
 80023d4:	b011      	add	sp, #68	; 0x44
 80023d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023d8 <cmox_ScalarMul_wMOF>:
 80023d8:	b5f6      	push	{r1, r2, r4, r5, r6, r7, lr}
 80023da:	b09b      	sub	sp, #108	; 0x6c
 80023dc:	0006      	movs	r6, r0
 80023de:	000c      	movs	r4, r1
 80023e0:	001d      	movs	r5, r3
 80023e2:	2000      	movs	r0, #0
 80023e4:	43c0      	mvns	r0, r0
 80023e6:	900c      	str	r0, [sp, #48]	; 0x30
 80023e8:	9001      	str	r0, [sp, #4]
 80023ea:	9008      	str	r0, [sp, #32]
 80023ec:	9003      	str	r0, [sp, #12]
 80023ee:	2001      	movs	r0, #1
 80023f0:	9018      	str	r0, [sp, #96]	; 0x60
 80023f2:	2000      	movs	r0, #0
 80023f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80023f6:	900a      	str	r0, [sp, #40]	; 0x28
 80023f8:	69b0      	ldr	r0, [r6, #24]
 80023fa:	6801      	ldr	r1, [r0, #0]
 80023fc:	6809      	ldr	r1, [r1, #0]
 80023fe:	6809      	ldr	r1, [r1, #0]
 8002400:	910d      	str	r1, [sp, #52]	; 0x34
 8002402:	68c1      	ldr	r1, [r0, #12]
 8002404:	680a      	ldr	r2, [r1, #0]
 8002406:	9206      	str	r2, [sp, #24]
 8002408:	2202      	movs	r2, #2
 800240a:	9212      	str	r2, [sp, #72]	; 0x48
 800240c:	910f      	str	r1, [sp, #60]	; 0x3c
 800240e:	9906      	ldr	r1, [sp, #24]
 8002410:	1e49      	subs	r1, r1, #1
 8002412:	0849      	lsrs	r1, r1, #1
 8002414:	0089      	lsls	r1, r1, #2
 8002416:	4a17      	ldr	r2, [pc, #92]	; (8002474 <cmox_ScalarMul_wMOF+0x9c>)
 8002418:	1852      	adds	r2, r2, r1
 800241a:	1f12      	subs	r2, r2, #4
 800241c:	9211      	str	r2, [sp, #68]	; 0x44
 800241e:	4a16      	ldr	r2, [pc, #88]	; (8002478 <cmox_ScalarMul_wMOF+0xa0>)
 8002420:	1851      	adds	r1, r2, r1
 8002422:	1f09      	subs	r1, r1, #4
 8002424:	9110      	str	r1, [sp, #64]	; 0x40
 8002426:	6840      	ldr	r0, [r0, #4]
 8002428:	69c0      	ldr	r0, [r0, #28]
 800242a:	2802      	cmp	r0, #2
 800242c:	d101      	bne.n	8002432 <cmox_ScalarMul_wMOF+0x5a>
 800242e:	2003      	movs	r0, #3
 8002430:	9012      	str	r0, [sp, #72]	; 0x48
 8002432:	9922      	ldr	r1, [sp, #136]	; 0x88
 8002434:	0030      	movs	r0, r6
 8002436:	f7fd ffba 	bl	80003ae <cmox_ECC_SetPointAtInfinity>
 800243a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800243c:	0030      	movs	r0, r6
 800243e:	f7fe f87e 	bl	800053e <cmox_ECC_PointToModularDomain>
 8002442:	69b0      	ldr	r0, [r6, #24]
 8002444:	6800      	ldr	r0, [r0, #0]
 8002446:	9407      	str	r4, [sp, #28]
 8002448:	950e      	str	r5, [sp, #56]	; 0x38
 800244a:	69c1      	ldr	r1, [r0, #28]
 800244c:	2901      	cmp	r1, #1
 800244e:	d015      	beq.n	800247c <cmox_ScalarMul_wMOF+0xa4>
 8002450:	6881      	ldr	r1, [r0, #8]
 8002452:	9807      	ldr	r0, [sp, #28]
 8002454:	f000 fed1 	bl	80031fa <cmox_bn_cmp>
 8002458:	2800      	cmp	r0, #0
 800245a:	d507      	bpl.n	800246c <cmox_ScalarMul_wMOF+0x94>
 800245c:	69b0      	ldr	r0, [r6, #24]
 800245e:	6800      	ldr	r0, [r0, #0]
 8002460:	6881      	ldr	r1, [r0, #8]
 8002462:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002464:	f000 fec9 	bl	80031fa <cmox_bn_cmp>
 8002468:	2800      	cmp	r0, #0
 800246a:	d407      	bmi.n	800247c <cmox_ScalarMul_wMOF+0xa4>
 800246c:	2001      	movs	r0, #1
 800246e:	9009      	str	r0, [sp, #36]	; 0x24
 8002470:	e2d8      	b.n	8002a24 <cmox_ScalarMul_wMOF+0x64c>
 8002472:	bf00      	nop
 8002474:	08002a2c 	.word	0x08002a2c
 8002478:	08002a38 	.word	0x08002a38
 800247c:	69b0      	ldr	r0, [r6, #24]
 800247e:	6840      	ldr	r0, [r0, #4]
 8002480:	6980      	ldr	r0, [r0, #24]
 8002482:	0082      	lsls	r2, r0, #2
 8002484:	0031      	movs	r1, r6
 8002486:	3114      	adds	r1, #20
 8002488:	69f0      	ldr	r0, [r6, #28]
 800248a:	f7ff fa5f 	bl	800194c <cmox_membuf_alloc>
 800248e:	9009      	str	r0, [sp, #36]	; 0x24
 8002490:	2800      	cmp	r0, #0
 8002492:	d1ed      	bne.n	8002470 <cmox_ScalarMul_wMOF+0x98>
 8002494:	2400      	movs	r4, #0
 8002496:	0035      	movs	r5, r6
 8002498:	e00c      	b.n	80024b4 <cmox_ScalarMul_wMOF+0xdc>
 800249a:	6809      	ldr	r1, [r1, #0]
 800249c:	6809      	ldr	r1, [r1, #0]
 800249e:	680a      	ldr	r2, [r1, #0]
 80024a0:	6969      	ldr	r1, [r5, #20]
 80024a2:	00a3      	lsls	r3, r4, #2
 80024a4:	18c9      	adds	r1, r1, r3
 80024a6:	f000 fe3d 	bl	8003124 <cmox_bn_alloc>
 80024aa:	9009      	str	r0, [sp, #36]	; 0x24
 80024ac:	2800      	cmp	r0, #0
 80024ae:	d000      	beq.n	80024b2 <cmox_ScalarMul_wMOF+0xda>
 80024b0:	e2ad      	b.n	8002a0e <cmox_ScalarMul_wMOF+0x636>
 80024b2:	1c64      	adds	r4, r4, #1
 80024b4:	69e8      	ldr	r0, [r5, #28]
 80024b6:	69a9      	ldr	r1, [r5, #24]
 80024b8:	684a      	ldr	r2, [r1, #4]
 80024ba:	6992      	ldr	r2, [r2, #24]
 80024bc:	4294      	cmp	r4, r2
 80024be:	d3ec      	bcc.n	800249a <cmox_ScalarMul_wMOF+0xc2>
 80024c0:	941a      	str	r4, [sp, #104]	; 0x68
 80024c2:	2101      	movs	r1, #1
 80024c4:	9a06      	ldr	r2, [sp, #24]
 80024c6:	1e92      	subs	r2, r2, #2
 80024c8:	4091      	lsls	r1, r2
 80024ca:	0089      	lsls	r1, r1, #2
 80024cc:	9117      	str	r1, [sp, #92]	; 0x5c
 80024ce:	460a      	mov	r2, r1
 80024d0:	a904      	add	r1, sp, #16
 80024d2:	f7ff fa3b 	bl	800194c <cmox_membuf_alloc>
 80024d6:	9009      	str	r0, [sp, #36]	; 0x24
 80024d8:	2800      	cmp	r0, #0
 80024da:	d000      	beq.n	80024de <cmox_ScalarMul_wMOF+0x106>
 80024dc:	e28e      	b.n	80029fc <cmox_ScalarMul_wMOF+0x624>
 80024de:	002c      	movs	r4, r5
 80024e0:	2500      	movs	r5, #0
 80024e2:	9e06      	ldr	r6, [sp, #24]
 80024e4:	e00f      	b.n	8002506 <cmox_ScalarMul_wMOF+0x12e>
 80024e6:	00af      	lsls	r7, r5, #2
 80024e8:	9804      	ldr	r0, [sp, #16]
 80024ea:	19c1      	adds	r1, r0, r7
 80024ec:	0020      	movs	r0, r4
 80024ee:	f7fd fe7c 	bl	80001ea <cmox_ECC_AllocPoint>
 80024f2:	9009      	str	r0, [sp, #36]	; 0x24
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d000      	beq.n	80024fa <cmox_ScalarMul_wMOF+0x122>
 80024f8:	e278      	b.n	80029ec <cmox_ScalarMul_wMOF+0x614>
 80024fa:	9804      	ldr	r0, [sp, #16]
 80024fc:	59c1      	ldr	r1, [r0, r7]
 80024fe:	0020      	movs	r0, r4
 8002500:	f7fd ff55 	bl	80003ae <cmox_ECC_SetPointAtInfinity>
 8002504:	1c6d      	adds	r5, r5, #1
 8002506:	2001      	movs	r0, #1
 8002508:	1eb1      	subs	r1, r6, #2
 800250a:	4088      	lsls	r0, r1
 800250c:	9002      	str	r0, [sp, #8]
 800250e:	4285      	cmp	r5, r0
 8002510:	d3e9      	bcc.n	80024e6 <cmox_ScalarMul_wMOF+0x10e>
 8002512:	9405      	str	r4, [sp, #20]
 8002514:	9519      	str	r5, [sp, #100]	; 0x64
 8002516:	2100      	movs	r1, #0
 8002518:	981c      	ldr	r0, [sp, #112]	; 0x70
 800251a:	7c00      	ldrb	r0, [r0, #16]
 800251c:	2204      	movs	r2, #4
 800251e:	4010      	ands	r0, r2
 8002520:	f7ff f9de 	bl	80018e0 <cmox_mathUtils_neq>
 8002524:	2800      	cmp	r0, #0
 8002526:	d104      	bne.n	8002532 <cmox_ScalarMul_wMOF+0x15a>
 8002528:	9018      	str	r0, [sp, #96]	; 0x60
 800252a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800252c:	9805      	ldr	r0, [sp, #20]
 800252e:	f7fe f806 	bl	800053e <cmox_ECC_PointToModularDomain>
 8002532:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002534:	9805      	ldr	r0, [sp, #20]
 8002536:	f7fe f860 	bl	80005fa <cmox_ECC_PointValidation>
 800253a:	9009      	str	r0, [sp, #36]	; 0x24
 800253c:	2800      	cmp	r0, #0
 800253e:	d000      	beq.n	8002542 <cmox_ScalarMul_wMOF+0x16a>
 8002540:	e249      	b.n	80029d6 <cmox_ScalarMul_wMOF+0x5fe>
 8002542:	2301      	movs	r3, #1
 8002544:	9804      	ldr	r0, [sp, #16]
 8002546:	6802      	ldr	r2, [r0, #0]
 8002548:	991c      	ldr	r1, [sp, #112]	; 0x70
 800254a:	9805      	ldr	r0, [sp, #20]
 800254c:	6984      	ldr	r4, [r0, #24]
 800254e:	6864      	ldr	r4, [r4, #4]
 8002550:	68e4      	ldr	r4, [r4, #12]
 8002552:	47a0      	blx	r4
 8002554:	2000      	movs	r0, #0
 8002556:	9000      	str	r0, [sp, #0]
 8002558:	9804      	ldr	r0, [sp, #16]
 800255a:	6843      	ldr	r3, [r0, #4]
 800255c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800255e:	6801      	ldr	r1, [r0, #0]
 8002560:	9805      	ldr	r0, [sp, #20]
 8002562:	6984      	ldr	r4, [r0, #24]
 8002564:	6864      	ldr	r4, [r4, #4]
 8002566:	6924      	ldr	r4, [r4, #16]
 8002568:	47a0      	blx	r4
 800256a:	2402      	movs	r4, #2
 800256c:	9d05      	ldr	r5, [sp, #20]
 800256e:	e00d      	b.n	800258c <cmox_ScalarMul_wMOF+0x1b4>
 8002570:	9804      	ldr	r0, [sp, #16]
 8002572:	00a1      	lsls	r1, r4, #2
 8002574:	1840      	adds	r0, r0, r1
 8002576:	6803      	ldr	r3, [r0, #0]
 8002578:	9904      	ldr	r1, [sp, #16]
 800257a:	680a      	ldr	r2, [r1, #0]
 800257c:	1f00      	subs	r0, r0, #4
 800257e:	6801      	ldr	r1, [r0, #0]
 8002580:	0028      	movs	r0, r5
 8002582:	69af      	ldr	r7, [r5, #24]
 8002584:	687f      	ldr	r7, [r7, #4]
 8002586:	697f      	ldr	r7, [r7, #20]
 8002588:	47b8      	blx	r7
 800258a:	1c64      	adds	r4, r4, #1
 800258c:	9802      	ldr	r0, [sp, #8]
 800258e:	4284      	cmp	r4, r0
 8002590:	d3ee      	bcc.n	8002570 <cmox_ScalarMul_wMOF+0x198>
 8002592:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002594:	f000 fe95 	bl	80032c2 <cmox_bn_countBits>
 8002598:	0004      	movs	r4, r0
 800259a:	9807      	ldr	r0, [sp, #28]
 800259c:	f000 fe91 	bl	80032c2 <cmox_bn_countBits>
 80025a0:	4284      	cmp	r4, r0
 80025a2:	d207      	bcs.n	80025b4 <cmox_ScalarMul_wMOF+0x1dc>
 80025a4:	9807      	ldr	r0, [sp, #28]
 80025a6:	f000 fe8c 	bl	80032c2 <cmox_bn_countBits>
 80025aa:	9505      	str	r5, [sp, #20]
 80025ac:	9d08      	ldr	r5, [sp, #32]
 80025ae:	9c03      	ldr	r4, [sp, #12]
 80025b0:	9606      	str	r6, [sp, #24]
 80025b2:	e07a      	b.n	80026aa <cmox_ScalarMul_wMOF+0x2d2>
 80025b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80025b6:	e7f6      	b.n	80025a6 <cmox_ScalarMul_wMOF+0x1ce>
 80025b8:	9a03      	ldr	r2, [sp, #12]
 80025ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80025bc:	1ad2      	subs	r2, r2, r3
 80025be:	9001      	str	r0, [sp, #4]
 80025c0:	2006      	movs	r0, #6
 80025c2:	9000      	str	r0, [sp, #0]
 80025c4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80025c6:	1d03      	adds	r3, r0, #4
 80025c8:	9303      	str	r3, [sp, #12]
 80025ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80025cc:	1d00      	adds	r0, r0, #4
 80025ce:	9002      	str	r0, [sp, #8]
 80025d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80025d2:	4684      	mov	ip, r0
 80025d4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80025d6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80025d8:	1e53      	subs	r3, r2, #1
 80025da:	08db      	lsrs	r3, r3, #3
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	58c0      	ldr	r0, [r0, r3]
 80025e0:	1e52      	subs	r2, r2, #1
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	4011      	ands	r1, r2
 80025e6:	40c8      	lsrs	r0, r1
 80025e8:	4007      	ands	r7, r0
 80025ea:	437e      	muls	r6, r7
 80025ec:	1c76      	adds	r6, r6, #1
 80025ee:	4660      	mov	r0, ip
 80025f0:	4370      	muls	r0, r6
 80025f2:	0081      	lsls	r1, r0, #2
 80025f4:	9802      	ldr	r0, [sp, #8]
 80025f6:	1842      	adds	r2, r0, r1
 80025f8:	9b03      	ldr	r3, [sp, #12]
 80025fa:	4661      	mov	r1, ip
 80025fc:	2001      	movs	r0, #1
 80025fe:	f7fd ff18 	bl	8000432 <cmox_ECC_CondImportPoint>
 8002602:	9804      	ldr	r0, [sp, #16]
 8002604:	6802      	ldr	r2, [r0, #0]
 8002606:	9905      	ldr	r1, [sp, #20]
 8002608:	2001      	movs	r0, #1
 800260a:	f7fd feaa 	bl	8000362 <cmox_ECC_CondSymmetricPoint>
 800260e:	e03c      	b.n	800268a <cmox_ScalarMul_wMOF+0x2b2>
 8002610:	9803      	ldr	r0, [sp, #12]
 8002612:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002614:	1a40      	subs	r0, r0, r1
 8002616:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002618:	1e42      	subs	r2, r0, #1
 800261a:	08d2      	lsrs	r2, r2, #3
 800261c:	0092      	lsls	r2, r2, #2
 800261e:	588c      	ldr	r4, [r1, r2]
 8002620:	1e40      	subs	r0, r0, #1
 8002622:	0080      	lsls	r0, r0, #2
 8002624:	211c      	movs	r1, #28
 8002626:	4001      	ands	r1, r0
 8002628:	40cc      	lsrs	r4, r1
 800262a:	403c      	ands	r4, r7
 800262c:	4668      	mov	r0, sp
 800262e:	7880      	ldrb	r0, [r0, #2]
 8002630:	1b00      	subs	r0, r0, r4
 8002632:	b240      	sxtb	r0, r0
 8002634:	9001      	str	r0, [sp, #4]
 8002636:	9801      	ldr	r0, [sp, #4]
 8002638:	2800      	cmp	r0, #0
 800263a:	d134      	bne.n	80026a6 <cmox_ScalarMul_wMOF+0x2ce>
 800263c:	9804      	ldr	r0, [sp, #16]
 800263e:	6800      	ldr	r0, [r0, #0]
 8002640:	211c      	movs	r1, #28
 8002642:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002644:	9b02      	ldr	r3, [sp, #8]
 8002646:	429a      	cmp	r2, r3
 8002648:	dab6      	bge.n	80025b8 <cmox_ScalarMul_wMOF+0x1e0>
 800264a:	9001      	str	r0, [sp, #4]
 800264c:	2006      	movs	r0, #6
 800264e:	9000      	str	r0, [sp, #0]
 8002650:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002652:	1d03      	adds	r3, r0, #4
 8002654:	9302      	str	r3, [sp, #8]
 8002656:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002658:	1d00      	adds	r0, r0, #4
 800265a:	4684      	mov	ip, r0
 800265c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800265e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002660:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8002662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002664:	08db      	lsrs	r3, r3, #3
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	58f3      	ldr	r3, [r6, r3]
 800266a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800266c:	00b6      	lsls	r6, r6, #2
 800266e:	4031      	ands	r1, r6
 8002670:	40cb      	lsrs	r3, r1
 8002672:	401f      	ands	r7, r3
 8002674:	437a      	muls	r2, r7
 8002676:	1c52      	adds	r2, r2, #1
 8002678:	4350      	muls	r0, r2
 800267a:	0081      	lsls	r1, r0, #2
 800267c:	4660      	mov	r0, ip
 800267e:	1842      	adds	r2, r0, r1
 8002680:	9b02      	ldr	r3, [sp, #8]
 8002682:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002684:	2001      	movs	r0, #1
 8002686:	f7fd fed4 	bl	8000432 <cmox_ECC_CondImportPoint>
 800268a:	2000      	movs	r0, #0
 800268c:	9000      	str	r0, [sp, #0]
 800268e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002690:	9804      	ldr	r0, [sp, #16]
 8002692:	6802      	ldr	r2, [r0, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	9805      	ldr	r0, [sp, #20]
 8002698:	6986      	ldr	r6, [r0, #24]
 800269a:	6876      	ldr	r6, [r6, #4]
 800269c:	6936      	ldr	r6, [r6, #16]
 800269e:	47b0      	blx	r6
 80026a0:	2000      	movs	r0, #0
 80026a2:	43c0      	mvns	r0, r0
 80026a4:	9001      	str	r0, [sp, #4]
 80026a6:	9808      	ldr	r0, [sp, #32]
 80026a8:	1e40      	subs	r0, r0, #1
 80026aa:	9008      	str	r0, [sp, #32]
 80026ac:	9808      	ldr	r0, [sp, #32]
 80026ae:	2800      	cmp	r0, #0
 80026b0:	dc0a      	bgt.n	80026c8 <cmox_ScalarMul_wMOF+0x2f0>
 80026b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80026b4:	2800      	cmp	r0, #0
 80026b6:	dc07      	bgt.n	80026c8 <cmox_ScalarMul_wMOF+0x2f0>
 80026b8:	2d00      	cmp	r5, #0
 80026ba:	dc05      	bgt.n	80026c8 <cmox_ScalarMul_wMOF+0x2f0>
 80026bc:	9801      	ldr	r0, [sp, #4]
 80026be:	2800      	cmp	r0, #0
 80026c0:	dc02      	bgt.n	80026c8 <cmox_ScalarMul_wMOF+0x2f0>
 80026c2:	2c00      	cmp	r4, #0
 80026c4:	dc00      	bgt.n	80026c8 <cmox_ScalarMul_wMOF+0x2f0>
 80026c6:	e131      	b.n	800292c <cmox_ScalarMul_wMOF+0x554>
 80026c8:	9808      	ldr	r0, [sp, #32]
 80026ca:	2800      	cmp	r0, #0
 80026cc:	d407      	bmi.n	80026de <cmox_ScalarMul_wMOF+0x306>
 80026ce:	2301      	movs	r3, #1
 80026d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80026d2:	4611      	mov	r1, r2
 80026d4:	9805      	ldr	r0, [sp, #20]
 80026d6:	6986      	ldr	r6, [r0, #24]
 80026d8:	6876      	ldr	r6, [r6, #4]
 80026da:	68f6      	ldr	r6, [r6, #12]
 80026dc:	47b0      	blx	r6
 80026de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80026e0:	2800      	cmp	r0, #0
 80026e2:	dd03      	ble.n	80026ec <cmox_ScalarMul_wMOF+0x314>
 80026e4:	1e40      	subs	r0, r0, #1
 80026e6:	b240      	sxtb	r0, r0
 80026e8:	900c      	str	r0, [sp, #48]	; 0x30
 80026ea:	e003      	b.n	80026f4 <cmox_ScalarMul_wMOF+0x31c>
 80026ec:	2d00      	cmp	r5, #0
 80026ee:	dd01      	ble.n	80026f4 <cmox_ScalarMul_wMOF+0x31c>
 80026f0:	1e6d      	subs	r5, r5, #1
 80026f2:	b26d      	sxtb	r5, r5
 80026f4:	9801      	ldr	r0, [sp, #4]
 80026f6:	2800      	cmp	r0, #0
 80026f8:	dd03      	ble.n	8002702 <cmox_ScalarMul_wMOF+0x32a>
 80026fa:	1e40      	subs	r0, r0, #1
 80026fc:	b240      	sxtb	r0, r0
 80026fe:	9001      	str	r0, [sp, #4]
 8002700:	e003      	b.n	800270a <cmox_ScalarMul_wMOF+0x332>
 8002702:	2c00      	cmp	r4, #0
 8002704:	dd01      	ble.n	800270a <cmox_ScalarMul_wMOF+0x332>
 8002706:	1e64      	subs	r4, r4, #1
 8002708:	b264      	sxtb	r4, r4
 800270a:	2601      	movs	r6, #1
 800270c:	9806      	ldr	r0, [sp, #24]
 800270e:	1c40      	adds	r0, r0, #1
 8002710:	2101      	movs	r1, #1
 8002712:	4081      	lsls	r1, r0
 8002714:	1e48      	subs	r0, r1, #1
 8002716:	4669      	mov	r1, sp
 8002718:	70c8      	strb	r0, [r1, #3]
 800271a:	9806      	ldr	r0, [sp, #24]
 800271c:	1e40      	subs	r0, r0, #1
 800271e:	2101      	movs	r1, #1
 8002720:	4081      	lsls	r1, r0
 8002722:	9102      	str	r1, [sp, #8]
 8002724:	9806      	ldr	r0, [sp, #24]
 8002726:	1e40      	subs	r0, r0, #1
 8002728:	4669      	mov	r1, sp
 800272a:	7088      	strb	r0, [r1, #2]
 800272c:	9806      	ldr	r0, [sp, #24]
 800272e:	2101      	movs	r1, #1
 8002730:	4081      	lsls	r1, r0
 8002732:	9103      	str	r1, [sp, #12]
 8002734:	9806      	ldr	r0, [sp, #24]
 8002736:	9908      	ldr	r1, [sp, #32]
 8002738:	1a40      	subs	r0, r0, r1
 800273a:	4669      	mov	r1, sp
 800273c:	7048      	strb	r0, [r1, #1]
 800273e:	9808      	ldr	r0, [sp, #32]
 8002740:	9906      	ldr	r1, [sp, #24]
 8002742:	1a40      	subs	r0, r0, r1
 8002744:	9016      	str	r0, [sp, #88]	; 0x58
 8002746:	9806      	ldr	r0, [sp, #24]
 8002748:	1c40      	adds	r0, r0, #1
 800274a:	9015      	str	r0, [sp, #84]	; 0x54
 800274c:	9808      	ldr	r0, [sp, #32]
 800274e:	9906      	ldr	r1, [sp, #24]
 8002750:	1a40      	subs	r0, r0, r1
 8002752:	9014      	str	r0, [sp, #80]	; 0x50
 8002754:	9908      	ldr	r1, [sp, #32]
 8002756:	1a70      	subs	r0, r6, r1
 8002758:	4669      	mov	r1, sp
 800275a:	7008      	strb	r0, [r1, #0]
 800275c:	9808      	ldr	r0, [sp, #32]
 800275e:	1e40      	subs	r0, r0, #1
 8002760:	9013      	str	r0, [sp, #76]	; 0x4c
 8002762:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002764:	2800      	cmp	r0, #0
 8002766:	dd01      	ble.n	800276c <cmox_ScalarMul_wMOF+0x394>
 8002768:	2d00      	cmp	r5, #0
 800276a:	dc54      	bgt.n	8002816 <cmox_ScalarMul_wMOF+0x43e>
 800276c:	9808      	ldr	r0, [sp, #32]
 800276e:	2800      	cmp	r0, #0
 8002770:	dd06      	ble.n	8002780 <cmox_ScalarMul_wMOF+0x3a8>
 8002772:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002774:	2102      	movs	r1, #2
 8002776:	9807      	ldr	r0, [sp, #28]
 8002778:	f000 fdbb 	bl	80032f2 <cmox_bn_getBits>
 800277c:	b2c0      	uxtb	r0, r0
 800277e:	e005      	b.n	800278c <cmox_ScalarMul_wMOF+0x3b4>
 8002780:	9807      	ldr	r0, [sp, #28]
 8002782:	6840      	ldr	r0, [r0, #4]
 8002784:	7809      	ldrb	r1, [r1, #0]
 8002786:	4088      	lsls	r0, r1
 8002788:	0780      	lsls	r0, r0, #30
 800278a:	0f80      	lsrs	r0, r0, #30
 800278c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800278e:	2900      	cmp	r1, #0
 8002790:	d53f      	bpl.n	8002812 <cmox_ScalarMul_wMOF+0x43a>
 8002792:	2d00      	cmp	r5, #0
 8002794:	dc3f      	bgt.n	8002816 <cmox_ScalarMul_wMOF+0x43e>
 8002796:	2101      	movs	r1, #1
 8002798:	4001      	ands	r1, r0
 800279a:	1040      	asrs	r0, r0, #1
 800279c:	4048      	eors	r0, r1
 800279e:	d100      	bne.n	80027a2 <cmox_ScalarMul_wMOF+0x3ca>
 80027a0:	e081      	b.n	80028a6 <cmox_ScalarMul_wMOF+0x4ce>
 80027a2:	9816      	ldr	r0, [sp, #88]	; 0x58
 80027a4:	2800      	cmp	r0, #0
 80027a6:	d405      	bmi.n	80027b4 <cmox_ScalarMul_wMOF+0x3dc>
 80027a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80027aa:	9915      	ldr	r1, [sp, #84]	; 0x54
 80027ac:	9807      	ldr	r0, [sp, #28]
 80027ae:	f000 fda0 	bl	80032f2 <cmox_bn_getBits>
 80027b2:	e007      	b.n	80027c4 <cmox_ScalarMul_wMOF+0x3ec>
 80027b4:	9807      	ldr	r0, [sp, #28]
 80027b6:	6841      	ldr	r1, [r0, #4]
 80027b8:	4668      	mov	r0, sp
 80027ba:	7840      	ldrb	r0, [r0, #1]
 80027bc:	4081      	lsls	r1, r0
 80027be:	4668      	mov	r0, sp
 80027c0:	78c0      	ldrb	r0, [r0, #3]
 80027c2:	4008      	ands	r0, r1
 80027c4:	9902      	ldr	r1, [sp, #8]
 80027c6:	1a40      	subs	r0, r0, r1
 80027c8:	b2c0      	uxtb	r0, r0
 80027ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80027cc:	9902      	ldr	r1, [sp, #8]
 80027ce:	4288      	cmp	r0, r1
 80027d0:	da0b      	bge.n	80027ea <cmox_ScalarMul_wMOF+0x412>
 80027d2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80027d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80027d6:	08c9      	lsrs	r1, r1, #3
 80027d8:	0089      	lsls	r1, r1, #2
 80027da:	5840      	ldr	r0, [r0, r1]
 80027dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80027de:	0089      	lsls	r1, r1, #2
 80027e0:	221c      	movs	r2, #28
 80027e2:	400a      	ands	r2, r1
 80027e4:	40d0      	lsrs	r0, r2
 80027e6:	0705      	lsls	r5, r0, #28
 80027e8:	e00d      	b.n	8002806 <cmox_ScalarMul_wMOF+0x42e>
 80027ea:	9803      	ldr	r0, [sp, #12]
 80027ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80027ee:	1a40      	subs	r0, r0, r1
 80027f0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80027f2:	1e42      	subs	r2, r0, #1
 80027f4:	08d2      	lsrs	r2, r2, #3
 80027f6:	0092      	lsls	r2, r2, #2
 80027f8:	5889      	ldr	r1, [r1, r2]
 80027fa:	1e40      	subs	r0, r0, #1
 80027fc:	0080      	lsls	r0, r0, #2
 80027fe:	221c      	movs	r2, #28
 8002800:	4002      	ands	r2, r0
 8002802:	40d1      	lsrs	r1, r2
 8002804:	070d      	lsls	r5, r1, #28
 8002806:	0f2d      	lsrs	r5, r5, #28
 8002808:	4668      	mov	r0, sp
 800280a:	7880      	ldrb	r0, [r0, #2]
 800280c:	1b40      	subs	r0, r0, r5
 800280e:	b240      	sxtb	r0, r0
 8002810:	900c      	str	r0, [sp, #48]	; 0x30
 8002812:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002814:	2800      	cmp	r0, #0
 8002816:	d146      	bne.n	80028a6 <cmox_ScalarMul_wMOF+0x4ce>
 8002818:	200f      	movs	r0, #15
 800281a:	211c      	movs	r1, #28
 800281c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800281e:	9b02      	ldr	r3, [sp, #8]
 8002820:	429a      	cmp	r2, r3
 8002822:	da17      	bge.n	8002854 <cmox_ScalarMul_wMOF+0x47c>
 8002824:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	58d2      	ldr	r2, [r2, r3]
 800282e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4019      	ands	r1, r3
 8002834:	40ca      	lsrs	r2, r1
 8002836:	4010      	ands	r0, r2
 8002838:	9905      	ldr	r1, [sp, #20]
 800283a:	6989      	ldr	r1, [r1, #24]
 800283c:	6849      	ldr	r1, [r1, #4]
 800283e:	694f      	ldr	r7, [r1, #20]
 8002840:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002842:	d101      	bne.n	8002848 <cmox_ScalarMul_wMOF+0x470>
 8002844:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002846:	e002      	b.n	800284e <cmox_ScalarMul_wMOF+0x476>
 8002848:	9904      	ldr	r1, [sp, #16]
 800284a:	0080      	lsls	r0, r0, #2
 800284c:	580a      	ldr	r2, [r1, r0]
 800284e:	4619      	mov	r1, r3
 8002850:	9805      	ldr	r0, [sp, #20]
 8002852:	e024      	b.n	800289e <cmox_ScalarMul_wMOF+0x4c6>
 8002854:	9a03      	ldr	r2, [sp, #12]
 8002856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002858:	1ad2      	subs	r2, r2, r3
 800285a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800285c:	1e57      	subs	r7, r2, #1
 800285e:	08ff      	lsrs	r7, r7, #3
 8002860:	00bf      	lsls	r7, r7, #2
 8002862:	59db      	ldr	r3, [r3, r7]
 8002864:	1e52      	subs	r2, r2, #1
 8002866:	0092      	lsls	r2, r2, #2
 8002868:	4011      	ands	r1, r2
 800286a:	40cb      	lsrs	r3, r1
 800286c:	4018      	ands	r0, r3
 800286e:	9904      	ldr	r1, [sp, #16]
 8002870:	680a      	ldr	r2, [r1, #0]
 8002872:	d101      	bne.n	8002878 <cmox_ScalarMul_wMOF+0x4a0>
 8002874:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002876:	e001      	b.n	800287c <cmox_ScalarMul_wMOF+0x4a4>
 8002878:	0080      	lsls	r0, r0, #2
 800287a:	5809      	ldr	r1, [r1, r0]
 800287c:	2001      	movs	r0, #1
 800287e:	f7fd fd3c 	bl	80002fa <cmox_ECC_CondCopyPoint>
 8002882:	9804      	ldr	r0, [sp, #16]
 8002884:	6802      	ldr	r2, [r0, #0]
 8002886:	9905      	ldr	r1, [sp, #20]
 8002888:	2001      	movs	r0, #1
 800288a:	f7fd fd6a 	bl	8000362 <cmox_ECC_CondSymmetricPoint>
 800288e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002890:	9804      	ldr	r0, [sp, #16]
 8002892:	6802      	ldr	r2, [r0, #0]
 8002894:	4619      	mov	r1, r3
 8002896:	9805      	ldr	r0, [sp, #20]
 8002898:	6987      	ldr	r7, [r0, #24]
 800289a:	687f      	ldr	r7, [r7, #4]
 800289c:	697f      	ldr	r7, [r7, #20]
 800289e:	47b8      	blx	r7
 80028a0:	2000      	movs	r0, #0
 80028a2:	43c0      	mvns	r0, r0
 80028a4:	900c      	str	r0, [sp, #48]	; 0x30
 80028a6:	9801      	ldr	r0, [sp, #4]
 80028a8:	2800      	cmp	r0, #0
 80028aa:	dd01      	ble.n	80028b0 <cmox_ScalarMul_wMOF+0x4d8>
 80028ac:	2c00      	cmp	r4, #0
 80028ae:	dc16      	bgt.n	80028de <cmox_ScalarMul_wMOF+0x506>
 80028b0:	9808      	ldr	r0, [sp, #32]
 80028b2:	2800      	cmp	r0, #0
 80028b4:	dd06      	ble.n	80028c4 <cmox_ScalarMul_wMOF+0x4ec>
 80028b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80028b8:	2102      	movs	r1, #2
 80028ba:	980e      	ldr	r0, [sp, #56]	; 0x38
 80028bc:	f000 fd19 	bl	80032f2 <cmox_bn_getBits>
 80028c0:	b2c0      	uxtb	r0, r0
 80028c2:	e006      	b.n	80028d2 <cmox_ScalarMul_wMOF+0x4fa>
 80028c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80028c6:	6840      	ldr	r0, [r0, #4]
 80028c8:	4669      	mov	r1, sp
 80028ca:	7809      	ldrb	r1, [r1, #0]
 80028cc:	4088      	lsls	r0, r1
 80028ce:	0780      	lsls	r0, r0, #30
 80028d0:	0f80      	lsrs	r0, r0, #30
 80028d2:	270f      	movs	r7, #15
 80028d4:	9901      	ldr	r1, [sp, #4]
 80028d6:	2900      	cmp	r1, #0
 80028d8:	d400      	bmi.n	80028dc <cmox_ScalarMul_wMOF+0x504>
 80028da:	e6ac      	b.n	8002636 <cmox_ScalarMul_wMOF+0x25e>
 80028dc:	2c00      	cmp	r4, #0
 80028de:	dd00      	ble.n	80028e2 <cmox_ScalarMul_wMOF+0x50a>
 80028e0:	e6e1      	b.n	80026a6 <cmox_ScalarMul_wMOF+0x2ce>
 80028e2:	4006      	ands	r6, r0
 80028e4:	1040      	asrs	r0, r0, #1
 80028e6:	4070      	eors	r0, r6
 80028e8:	d100      	bne.n	80028ec <cmox_ScalarMul_wMOF+0x514>
 80028ea:	e6dc      	b.n	80026a6 <cmox_ScalarMul_wMOF+0x2ce>
 80028ec:	9816      	ldr	r0, [sp, #88]	; 0x58
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d405      	bmi.n	80028fe <cmox_ScalarMul_wMOF+0x526>
 80028f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80028f4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80028f6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80028f8:	f000 fcfb 	bl	80032f2 <cmox_bn_getBits>
 80028fc:	e007      	b.n	800290e <cmox_ScalarMul_wMOF+0x536>
 80028fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002900:	6841      	ldr	r1, [r0, #4]
 8002902:	4668      	mov	r0, sp
 8002904:	7840      	ldrb	r0, [r0, #1]
 8002906:	4081      	lsls	r1, r0
 8002908:	4668      	mov	r0, sp
 800290a:	78c0      	ldrb	r0, [r0, #3]
 800290c:	4008      	ands	r0, r1
 800290e:	9902      	ldr	r1, [sp, #8]
 8002910:	1a40      	subs	r0, r0, r1
 8002912:	b2c0      	uxtb	r0, r0
 8002914:	900a      	str	r0, [sp, #40]	; 0x28
 8002916:	9902      	ldr	r1, [sp, #8]
 8002918:	4288      	cmp	r0, r1
 800291a:	db00      	blt.n	800291e <cmox_ScalarMul_wMOF+0x546>
 800291c:	e678      	b.n	8002610 <cmox_ScalarMul_wMOF+0x238>
 800291e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002920:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002922:	08c9      	lsrs	r1, r1, #3
 8002924:	0089      	lsls	r1, r1, #2
 8002926:	5844      	ldr	r4, [r0, r1]
 8002928:	980a      	ldr	r0, [sp, #40]	; 0x28
 800292a:	e67a      	b.n	8002622 <cmox_ScalarMul_wMOF+0x24a>
 800292c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800292e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8002930:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8002932:	9808      	ldr	r0, [sp, #32]
 8002934:	2800      	cmp	r0, #0
 8002936:	d142      	bne.n	80029be <cmox_ScalarMul_wMOF+0x5e6>
 8002938:	2301      	movs	r3, #1
 800293a:	002a      	movs	r2, r5
 800293c:	0029      	movs	r1, r5
 800293e:	9805      	ldr	r0, [sp, #20]
 8002940:	6987      	ldr	r7, [r0, #24]
 8002942:	687f      	ldr	r7, [r7, #4]
 8002944:	68ff      	ldr	r7, [r7, #12]
 8002946:	47b8      	blx	r7
 8002948:	9807      	ldr	r0, [sp, #28]
 800294a:	7900      	ldrb	r0, [r0, #4]
 800294c:	07c0      	lsls	r0, r0, #31
 800294e:	d514      	bpl.n	800297a <cmox_ScalarMul_wMOF+0x5a2>
 8002950:	9804      	ldr	r0, [sp, #16]
 8002952:	6802      	ldr	r2, [r0, #0]
 8002954:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002956:	2001      	movs	r0, #1
 8002958:	f7fd fccf 	bl	80002fa <cmox_ECC_CondCopyPoint>
 800295c:	9804      	ldr	r0, [sp, #16]
 800295e:	6802      	ldr	r2, [r0, #0]
 8002960:	9905      	ldr	r1, [sp, #20]
 8002962:	2001      	movs	r0, #1
 8002964:	f7fd fcfd 	bl	8000362 <cmox_ECC_CondSymmetricPoint>
 8002968:	002b      	movs	r3, r5
 800296a:	9804      	ldr	r0, [sp, #16]
 800296c:	6802      	ldr	r2, [r0, #0]
 800296e:	0029      	movs	r1, r5
 8002970:	9805      	ldr	r0, [sp, #20]
 8002972:	6987      	ldr	r7, [r0, #24]
 8002974:	687f      	ldr	r7, [r7, #4]
 8002976:	697f      	ldr	r7, [r7, #20]
 8002978:	47b8      	blx	r7
 800297a:	7930      	ldrb	r0, [r6, #4]
 800297c:	07c0      	lsls	r0, r0, #31
 800297e:	d51e      	bpl.n	80029be <cmox_ScalarMul_wMOF+0x5e6>
 8002980:	9804      	ldr	r0, [sp, #16]
 8002982:	6800      	ldr	r0, [r0, #0]
 8002984:	9001      	str	r0, [sp, #4]
 8002986:	2006      	movs	r0, #6
 8002988:	9000      	str	r0, [sp, #0]
 800298a:	1d23      	adds	r3, r4, #4
 800298c:	1d20      	adds	r0, r4, #4
 800298e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002990:	0089      	lsls	r1, r1, #2
 8002992:	1842      	adds	r2, r0, r1
 8002994:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002996:	2001      	movs	r0, #1
 8002998:	f7fd fd4b 	bl	8000432 <cmox_ECC_CondImportPoint>
 800299c:	9804      	ldr	r0, [sp, #16]
 800299e:	6802      	ldr	r2, [r0, #0]
 80029a0:	9905      	ldr	r1, [sp, #20]
 80029a2:	2001      	movs	r0, #1
 80029a4:	f7fd fcdd 	bl	8000362 <cmox_ECC_CondSymmetricPoint>
 80029a8:	2000      	movs	r0, #0
 80029aa:	9000      	str	r0, [sp, #0]
 80029ac:	002b      	movs	r3, r5
 80029ae:	9804      	ldr	r0, [sp, #16]
 80029b0:	6802      	ldr	r2, [r0, #0]
 80029b2:	0029      	movs	r1, r5
 80029b4:	9805      	ldr	r0, [sp, #20]
 80029b6:	6984      	ldr	r4, [r0, #24]
 80029b8:	6864      	ldr	r4, [r4, #4]
 80029ba:	6924      	ldr	r4, [r4, #16]
 80029bc:	47a0      	blx	r4
 80029be:	9818      	ldr	r0, [sp, #96]	; 0x60
 80029c0:	2800      	cmp	r0, #0
 80029c2:	d108      	bne.n	80029d6 <cmox_ScalarMul_wMOF+0x5fe>
 80029c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80029c6:	9805      	ldr	r0, [sp, #20]
 80029c8:	f7fd fde4 	bl	8000594 <cmox_ECC_PointFromModularDomain>
 80029cc:	9009      	str	r0, [sp, #36]	; 0x24
 80029ce:	0029      	movs	r1, r5
 80029d0:	9805      	ldr	r0, [sp, #20]
 80029d2:	f7fd fddf 	bl	8000594 <cmox_ECC_PointFromModularDomain>
 80029d6:	9c05      	ldr	r4, [sp, #20]
 80029d8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80029da:	e007      	b.n	80029ec <cmox_ScalarMul_wMOF+0x614>
 80029dc:	9804      	ldr	r0, [sp, #16]
 80029de:	00a9      	lsls	r1, r5, #2
 80029e0:	1841      	adds	r1, r0, r1
 80029e2:	1f09      	subs	r1, r1, #4
 80029e4:	0020      	movs	r0, r4
 80029e6:	f7fd fc58 	bl	800029a <cmox_ECC_FreePoint>
 80029ea:	1e6d      	subs	r5, r5, #1
 80029ec:	2d00      	cmp	r5, #0
 80029ee:	d1f5      	bne.n	80029dc <cmox_ScalarMul_wMOF+0x604>
 80029f0:	0025      	movs	r5, r4
 80029f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80029f4:	a904      	add	r1, sp, #16
 80029f6:	69e8      	ldr	r0, [r5, #28]
 80029f8:	f7fe ffc8 	bl	800198c <cmox_membuf_free>
 80029fc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80029fe:	e006      	b.n	8002a0e <cmox_ScalarMul_wMOF+0x636>
 8002a00:	6969      	ldr	r1, [r5, #20]
 8002a02:	00a2      	lsls	r2, r4, #2
 8002a04:	1889      	adds	r1, r1, r2
 8002a06:	1f09      	subs	r1, r1, #4
 8002a08:	f000 fb98 	bl	800313c <cmox_bn_free>
 8002a0c:	1e64      	subs	r4, r4, #1
 8002a0e:	69e8      	ldr	r0, [r5, #28]
 8002a10:	2c00      	cmp	r4, #0
 8002a12:	d1f5      	bne.n	8002a00 <cmox_ScalarMul_wMOF+0x628>
 8002a14:	69a9      	ldr	r1, [r5, #24]
 8002a16:	6849      	ldr	r1, [r1, #4]
 8002a18:	6989      	ldr	r1, [r1, #24]
 8002a1a:	008a      	lsls	r2, r1, #2
 8002a1c:	0029      	movs	r1, r5
 8002a1e:	3114      	adds	r1, #20
 8002a20:	f7fe ffb4 	bl	800198c <cmox_membuf_free>
 8002a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a26:	b01d      	add	sp, #116	; 0x74
 8002a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a2c <cmox_ScalarMul_wMOF::T_Pi>:
 8002a2c:	0110 0000 2440 1552 3661 0773               ....@$R.a6s.

08002a38 <cmox_ScalarMul_wMOF::T_DblAfter>:
 8002a38:	2001 0000 1003 2001 1002 4001               . ..... ...@

08002a44 <cmox_ScalarMul_wNAFRecoding>:
 8002a44:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	000d      	movs	r5, r1
 8002a4a:	0014      	movs	r4, r2
 8002a4c:	001e      	movs	r6, r3
 8002a4e:	2000      	movs	r0, #0
 8002a50:	9000      	str	r0, [sp, #0]
 8002a52:	9003      	str	r0, [sp, #12]
 8002a54:	682a      	ldr	r2, [r5, #0]
 8002a56:	4669      	mov	r1, sp
 8002a58:	9804      	ldr	r0, [sp, #16]
 8002a5a:	f000 fb63 	bl	8003124 <cmox_bn_alloc>
 8002a5e:	9002      	str	r0, [sp, #8]
 8002a60:	2800      	cmp	r0, #0
 8002a62:	d141      	bne.n	8002ae8 <cmox_ScalarMul_wNAFRecoding+0xa4>
 8002a64:	2100      	movs	r1, #0
 8002a66:	9800      	ldr	r0, [sp, #0]
 8002a68:	f000 fb74 	bl	8003154 <cmox_bn_init>
 8002a6c:	9a00      	ldr	r2, [sp, #0]
 8002a6e:	0029      	movs	r1, r5
 8002a70:	2001      	movs	r0, #1
 8002a72:	f000 fb82 	bl	800317a <cmox_bn_cCopy>
 8002a76:	2501      	movs	r5, #1
 8002a78:	1e60      	subs	r0, r4, #1
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	4081      	lsls	r1, r0
 8002a7e:	4668      	mov	r0, sp
 8002a80:	7101      	strb	r1, [r0, #4]
 8002a82:	0027      	movs	r7, r4
 8002a84:	9c03      	ldr	r4, [sp, #12]
 8002a86:	e021      	b.n	8002acc <cmox_ScalarMul_wNAFRecoding+0x88>
 8002a88:	2000      	movs	r0, #0
 8002a8a:	7008      	strb	r0, [r1, #0]
 8002a8c:	e018      	b.n	8002ac0 <cmox_ScalarMul_wNAFRecoding+0x7c>
 8002a8e:	1931      	adds	r1, r6, r4
 8002a90:	9800      	ldr	r0, [sp, #0]
 8002a92:	6842      	ldr	r2, [r0, #4]
 8002a94:	422a      	tst	r2, r5
 8002a96:	d0f7      	beq.n	8002a88 <cmox_ScalarMul_wNAFRecoding+0x44>
 8002a98:	2001      	movs	r0, #1
 8002a9a:	40b8      	lsls	r0, r7
 8002a9c:	1e40      	subs	r0, r0, #1
 8002a9e:	4010      	ands	r0, r2
 8002aa0:	466b      	mov	r3, sp
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	569a      	ldrsb	r2, [r3, r2]
 8002aa6:	b243      	sxtb	r3, r0
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	db02      	blt.n	8002ab2 <cmox_ScalarMul_wNAFRecoding+0x6e>
 8002aac:	466a      	mov	r2, sp
 8002aae:	7912      	ldrb	r2, [r2, #4]
 8002ab0:	1a80      	subs	r0, r0, r2
 8002ab2:	7008      	strb	r0, [r1, #0]
 8002ab4:	9a00      	ldr	r2, [sp, #0]
 8002ab6:	b240      	sxtb	r0, r0
 8002ab8:	4241      	negs	r1, r0
 8002aba:	4610      	mov	r0, r2
 8002abc:	f7fe fd61 	bl	8001582 <cmox_AddBN_Int>
 8002ac0:	9a00      	ldr	r2, [sp, #0]
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	f7fe fc0b 	bl	80012e0 <cmox_RightShiftBN>
 8002aca:	1c64      	adds	r4, r4, #1
 8002acc:	2100      	movs	r1, #0
 8002ace:	9800      	ldr	r0, [sp, #0]
 8002ad0:	f000 fbe1 	bl	8003296 <cmox_bn_cmpUint>
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	d0da      	beq.n	8002a8e <cmox_ScalarMul_wNAFRecoding+0x4a>
 8002ad8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002ada:	2800      	cmp	r0, #0
 8002adc:	d000      	beq.n	8002ae0 <cmox_ScalarMul_wNAFRecoding+0x9c>
 8002ade:	6004      	str	r4, [r0, #0]
 8002ae0:	4669      	mov	r1, sp
 8002ae2:	9804      	ldr	r0, [sp, #16]
 8002ae4:	f000 fb2a 	bl	800313c <cmox_bn_free>
 8002ae8:	9802      	ldr	r0, [sp, #8]
 8002aea:	b005      	add	sp, #20
 8002aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002af0 <cmox_sha256_cleanup>:
 8002af0:	b500      	push	{lr}
 8002af2:	b081      	sub	sp, #4
 8002af4:	6801      	ldr	r1, [r0, #0]
 8002af6:	4a07      	ldr	r2, [pc, #28]	; (8002b14 <cmox_sha256_cleanup+0x24>)
 8002af8:	4291      	cmp	r1, r2
 8002afa:	d101      	bne.n	8002b00 <cmox_sha256_cleanup+0x10>
 8002afc:	2800      	cmp	r0, #0
 8002afe:	d101      	bne.n	8002b04 <cmox_sha256_cleanup+0x14>
 8002b00:	4805      	ldr	r0, [pc, #20]	; (8002b18 <cmox_sha256_cleanup+0x28>)
 8002b02:	e004      	b.n	8002b0e <cmox_sha256_cleanup+0x1e>
 8002b04:	217c      	movs	r1, #124	; 0x7c
 8002b06:	f005 fc17 	bl	8008338 <__aeabi_memclr>
 8002b0a:	2080      	movs	r0, #128	; 0x80
 8002b0c:	0280      	lsls	r0, r0, #10
 8002b0e:	b001      	add	sp, #4
 8002b10:	bd00      	pop	{pc}
 8002b12:	bf00      	nop
 8002b14:	08002bf8 	.word	0x08002bf8
 8002b18:	00020003 	.word	0x00020003

08002b1c <cmox_sha256_init>:
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	0004      	movs	r4, r0
 8002b22:	4668      	mov	r0, sp
 8002b24:	4909      	ldr	r1, [pc, #36]	; (8002b4c <cmox_sha256_init+0x30>)
 8002b26:	2220      	movs	r2, #32
 8002b28:	f005 fc0b 	bl	8008342 <__aeabi_memcpy>
 8002b2c:	6820      	ldr	r0, [r4, #0]
 8002b2e:	4908      	ldr	r1, [pc, #32]	; (8002b50 <cmox_sha256_init+0x34>)
 8002b30:	4288      	cmp	r0, r1
 8002b32:	d101      	bne.n	8002b38 <cmox_sha256_init+0x1c>
 8002b34:	2c00      	cmp	r4, #0
 8002b36:	d101      	bne.n	8002b3c <cmox_sha256_init+0x20>
 8002b38:	4806      	ldr	r0, [pc, #24]	; (8002b54 <cmox_sha256_init+0x38>)
 8002b3a:	e005      	b.n	8002b48 <cmox_sha256_init+0x2c>
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	4669      	mov	r1, sp
 8002b40:	0020      	movs	r0, r4
 8002b42:	3008      	adds	r0, #8
 8002b44:	f001 fc8d 	bl	8004462 <cmox_md_init>
 8002b48:	b008      	add	sp, #32
 8002b4a:	bd10      	pop	{r4, pc}
 8002b4c:	08002bd8 	.word	0x08002bd8
 8002b50:	08002bf8 	.word	0x08002bf8
 8002b54:	00020003 	.word	0x00020003

08002b58 <cmox_sha256_setTagLen>:
 8002b58:	b500      	push	{lr}
 8002b5a:	b081      	sub	sp, #4
 8002b5c:	2921      	cmp	r1, #33	; 0x21
 8002b5e:	d205      	bcs.n	8002b6c <cmox_sha256_setTagLen+0x14>
 8002b60:	6802      	ldr	r2, [r0, #0]
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <cmox_sha256_setTagLen+0x24>)
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d101      	bne.n	8002b6c <cmox_sha256_setTagLen+0x14>
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d101      	bne.n	8002b70 <cmox_sha256_setTagLen+0x18>
 8002b6c:	4804      	ldr	r0, [pc, #16]	; (8002b80 <cmox_sha256_setTagLen+0x28>)
 8002b6e:	e002      	b.n	8002b76 <cmox_sha256_setTagLen+0x1e>
 8002b70:	3008      	adds	r0, #8
 8002b72:	f001 fc84 	bl	800447e <cmox_md_setTagSize>
 8002b76:	b001      	add	sp, #4
 8002b78:	bd00      	pop	{pc}
 8002b7a:	bf00      	nop
 8002b7c:	08002bf8 	.word	0x08002bf8
 8002b80:	00020003 	.word	0x00020003

08002b84 <cmox_sha256_append>:
 8002b84:	b510      	push	{r4, lr}
 8002b86:	0013      	movs	r3, r2
 8002b88:	6802      	ldr	r2, [r0, #0]
 8002b8a:	4c06      	ldr	r4, [pc, #24]	; (8002ba4 <cmox_sha256_append+0x20>)
 8002b8c:	42a2      	cmp	r2, r4
 8002b8e:	d101      	bne.n	8002b94 <cmox_sha256_append+0x10>
 8002b90:	2800      	cmp	r0, #0
 8002b92:	d101      	bne.n	8002b98 <cmox_sha256_append+0x14>
 8002b94:	4804      	ldr	r0, [pc, #16]	; (8002ba8 <cmox_sha256_append+0x24>)
 8002b96:	bd10      	pop	{r4, pc}
 8002b98:	0002      	movs	r2, r0
 8002b9a:	3224      	adds	r2, #36	; 0x24
 8002b9c:	3008      	adds	r0, #8
 8002b9e:	f001 fc73 	bl	8004488 <cmox_md_append>
 8002ba2:	bd10      	pop	{r4, pc}
 8002ba4:	08002bf8 	.word	0x08002bf8
 8002ba8:	00020003 	.word	0x00020003

08002bac <cmox_sha256_generateTag>:
 8002bac:	b510      	push	{r4, lr}
 8002bae:	0013      	movs	r3, r2
 8002bb0:	6802      	ldr	r2, [r0, #0]
 8002bb2:	4c07      	ldr	r4, [pc, #28]	; (8002bd0 <cmox_sha256_generateTag+0x24>)
 8002bb4:	42a2      	cmp	r2, r4
 8002bb6:	d101      	bne.n	8002bbc <cmox_sha256_generateTag+0x10>
 8002bb8:	2800      	cmp	r0, #0
 8002bba:	d101      	bne.n	8002bc0 <cmox_sha256_generateTag+0x14>
 8002bbc:	4805      	ldr	r0, [pc, #20]	; (8002bd4 <cmox_sha256_generateTag+0x28>)
 8002bbe:	bd10      	pop	{r4, pc}
 8002bc0:	000a      	movs	r2, r1
 8002bc2:	0001      	movs	r1, r0
 8002bc4:	3124      	adds	r1, #36	; 0x24
 8002bc6:	3008      	adds	r0, #8
 8002bc8:	f001 fcaa 	bl	8004520 <cmox_md_generateTag>
 8002bcc:	bd10      	pop	{r4, pc}
 8002bce:	bf00      	nop
 8002bd0:	08002bf8 	.word	0x08002bf8
 8002bd4:	00020003 	.word	0x00020003
 8002bd8:	6a09e667 	.word	0x6a09e667
 8002bdc:	bb67ae85 	.word	0xbb67ae85
 8002be0:	3c6ef372 	.word	0x3c6ef372
 8002be4:	a54ff53a 	.word	0xa54ff53a
 8002be8:	510e527f 	.word	0x510e527f
 8002bec:	9b05688c 	.word	0x9b05688c
 8002bf0:	1f83d9ab 	.word	0x1f83d9ab
 8002bf4:	5be0cd19 	.word	0x5be0cd19

08002bf8 <CMOX_SHA256_VTABLE>:
 8002bf8:	08002af1 08002b1d 08002b59 08002b85     .*...+..Y+...+..
 8002c08:	08002bad                                .+..

08002c0c <cmox_sha256_compute>:
 8002c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0e:	b0a3      	sub	sp, #140	; 0x8c
 8002c10:	0007      	movs	r7, r0
 8002c12:	000e      	movs	r6, r1
 8002c14:	0015      	movs	r5, r2
 8002c16:	001c      	movs	r4, r3
 8002c18:	4809      	ldr	r0, [pc, #36]	; (8002c40 <cmox_sha256_compute+0x34>)
 8002c1a:	9002      	str	r0, [sp, #8]
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <cmox_sha256_compute+0x38>)
 8002c1e:	2208      	movs	r2, #8
 8002c20:	2140      	movs	r1, #64	; 0x40
 8002c22:	a802      	add	r0, sp, #8
 8002c24:	3008      	adds	r0, #8
 8002c26:	f001 fc18 	bl	800445a <cmox_md_construct>
 8002c2a:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8002c2c:	9001      	str	r0, [sp, #4]
 8002c2e:	9400      	str	r4, [sp, #0]
 8002c30:	002b      	movs	r3, r5
 8002c32:	0032      	movs	r2, r6
 8002c34:	0039      	movs	r1, r7
 8002c36:	a802      	add	r0, sp, #8
 8002c38:	f7fe faf2 	bl	8001220 <cmox_hash_common_compute>
 8002c3c:	b023      	add	sp, #140	; 0x8c
 8002c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c40:	08002bf8 	.word	0x08002bf8
 8002c44:	08009d80 	.word	0x08009d80

08002c48 <cmox_sha256_transform>:
 8002c48:	b4f1      	push	{r0, r4, r5, r6, r7}
 8002c4a:	b0c7      	sub	sp, #284	; 0x11c
 8002c4c:	a807      	add	r0, sp, #28
 8002c4e:	2210      	movs	r2, #16
 8002c50:	680b      	ldr	r3, [r1, #0]
 8002c52:	ba1b      	rev	r3, r3
 8002c54:	6003      	str	r3, [r0, #0]
 8002c56:	1d00      	adds	r0, r0, #4
 8002c58:	1d09      	adds	r1, r1, #4
 8002c5a:	1e52      	subs	r2, r2, #1
 8002c5c:	d1f8      	bne.n	8002c50 <cmox_sha256_transform+0x8>
 8002c5e:	a807      	add	r0, sp, #28
 8002c60:	3040      	adds	r0, #64	; 0x40
 8002c62:	2118      	movs	r1, #24
 8002c64:	0002      	movs	r2, r0
 8002c66:	3a08      	subs	r2, #8
 8002c68:	6814      	ldr	r4, [r2, #0]
 8002c6a:	2311      	movs	r3, #17
 8002c6c:	0022      	movs	r2, r4
 8002c6e:	41da      	rors	r2, r3
 8002c70:	2513      	movs	r5, #19
 8002c72:	0023      	movs	r3, r4
 8002c74:	41eb      	rors	r3, r5
 8002c76:	4053      	eors	r3, r2
 8002c78:	0002      	movs	r2, r0
 8002c7a:	3a3c      	subs	r2, #60	; 0x3c
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	2607      	movs	r6, #7
 8002c80:	0015      	movs	r5, r2
 8002c82:	41f5      	rors	r5, r6
 8002c84:	2712      	movs	r7, #18
 8002c86:	0016      	movs	r6, r2
 8002c88:	41fe      	rors	r6, r7
 8002c8a:	0aa4      	lsrs	r4, r4, #10
 8002c8c:	405c      	eors	r4, r3
 8002c8e:	0003      	movs	r3, r0
 8002c90:	3b1c      	subs	r3, #28
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	18e3      	adds	r3, r4, r3
 8002c96:	406e      	eors	r6, r5
 8002c98:	08d4      	lsrs	r4, r2, #3
 8002c9a:	4074      	eors	r4, r6
 8002c9c:	191b      	adds	r3, r3, r4
 8002c9e:	0004      	movs	r4, r0
 8002ca0:	3c40      	subs	r4, #64	; 0x40
 8002ca2:	6824      	ldr	r4, [r4, #0]
 8002ca4:	191b      	adds	r3, r3, r4
 8002ca6:	6003      	str	r3, [r0, #0]
 8002ca8:	1f03      	subs	r3, r0, #4
 8002caa:	681e      	ldr	r6, [r3, #0]
 8002cac:	2411      	movs	r4, #17
 8002cae:	0033      	movs	r3, r6
 8002cb0:	41e3      	rors	r3, r4
 8002cb2:	2413      	movs	r4, #19
 8002cb4:	0035      	movs	r5, r6
 8002cb6:	41e5      	rors	r5, r4
 8002cb8:	405d      	eors	r5, r3
 8002cba:	9500      	str	r5, [sp, #0]
 8002cbc:	0003      	movs	r3, r0
 8002cbe:	3b38      	subs	r3, #56	; 0x38
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2507      	movs	r5, #7
 8002cc4:	001c      	movs	r4, r3
 8002cc6:	41ec      	rors	r4, r5
 8002cc8:	001d      	movs	r5, r3
 8002cca:	41fd      	rors	r5, r7
 8002ccc:	9f00      	ldr	r7, [sp, #0]
 8002cce:	0ab6      	lsrs	r6, r6, #10
 8002cd0:	407e      	eors	r6, r7
 8002cd2:	0007      	movs	r7, r0
 8002cd4:	3f18      	subs	r7, #24
 8002cd6:	683f      	ldr	r7, [r7, #0]
 8002cd8:	19f6      	adds	r6, r6, r7
 8002cda:	4065      	eors	r5, r4
 8002cdc:	08db      	lsrs	r3, r3, #3
 8002cde:	406b      	eors	r3, r5
 8002ce0:	18f3      	adds	r3, r6, r3
 8002ce2:	189a      	adds	r2, r3, r2
 8002ce4:	6042      	str	r2, [r0, #4]
 8002ce6:	3008      	adds	r0, #8
 8002ce8:	1e49      	subs	r1, r1, #1
 8002cea:	d1bb      	bne.n	8002c64 <cmox_sha256_transform+0x1c>
 8002cec:	9847      	ldr	r0, [sp, #284]	; 0x11c
 8002cee:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8002cf0:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8002cf2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002cf4:	6f05      	ldr	r5, [r0, #112]	; 0x70
 8002cf6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002cf8:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8002cfa:	9000      	str	r0, [sp, #0]
 8002cfc:	9847      	ldr	r0, [sp, #284]	; 0x11c
 8002cfe:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8002d00:	9002      	str	r0, [sp, #8]
 8002d02:	9847      	ldr	r0, [sp, #284]	; 0x11c
 8002d04:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8002d06:	9001      	str	r0, [sp, #4]
 8002d08:	4e5f      	ldr	r6, [pc, #380]	; (8002e88 <cmox_sha256_transform+0x240>)
 8002d0a:	af07      	add	r7, sp, #28
 8002d0c:	2020      	movs	r0, #32
 8002d0e:	9003      	str	r0, [sp, #12]
 8002d10:	9800      	ldr	r0, [sp, #0]
 8002d12:	9605      	str	r6, [sp, #20]
 8002d14:	9704      	str	r7, [sp, #16]
 8002d16:	2706      	movs	r7, #6
 8002d18:	000e      	movs	r6, r1
 8002d1a:	41fe      	rors	r6, r7
 8002d1c:	46b4      	mov	ip, r6
 8002d1e:	260b      	movs	r6, #11
 8002d20:	000f      	movs	r7, r1
 8002d22:	41f7      	rors	r7, r6
 8002d24:	4666      	mov	r6, ip
 8002d26:	4077      	eors	r7, r6
 8002d28:	9e01      	ldr	r6, [sp, #4]
 8002d2a:	9600      	str	r6, [sp, #0]
 8002d2c:	46bc      	mov	ip, r7
 8002d2e:	2719      	movs	r7, #25
 8002d30:	000e      	movs	r6, r1
 8002d32:	41fe      	rors	r6, r7
 8002d34:	4667      	mov	r7, ip
 8002d36:	407e      	eors	r6, r7
 8002d38:	9f00      	ldr	r7, [sp, #0]
 8002d3a:	19be      	adds	r6, r7, r6
 8002d3c:	0007      	movs	r7, r0
 8002d3e:	406f      	eors	r7, r5
 8002d40:	400f      	ands	r7, r1
 8002d42:	4047      	eors	r7, r0
 8002d44:	19f6      	adds	r6, r6, r7
 8002d46:	9f05      	ldr	r7, [sp, #20]
 8002d48:	683f      	ldr	r7, [r7, #0]
 8002d4a:	19f6      	adds	r6, r6, r7
 8002d4c:	9f04      	ldr	r7, [sp, #16]
 8002d4e:	683f      	ldr	r7, [r7, #0]
 8002d50:	19f6      	adds	r6, r6, r7
 8002d52:	9600      	str	r6, [sp, #0]
 8002d54:	2602      	movs	r6, #2
 8002d56:	0027      	movs	r7, r4
 8002d58:	41f7      	rors	r7, r6
 8002d5a:	46bc      	mov	ip, r7
 8002d5c:	270d      	movs	r7, #13
 8002d5e:	0026      	movs	r6, r4
 8002d60:	41fe      	rors	r6, r7
 8002d62:	4667      	mov	r7, ip
 8002d64:	407e      	eors	r6, r7
 8002d66:	9601      	str	r6, [sp, #4]
 8002d68:	9e01      	ldr	r6, [sp, #4]
 8002d6a:	46b4      	mov	ip, r6
 8002d6c:	2616      	movs	r6, #22
 8002d6e:	0027      	movs	r7, r4
 8002d70:	41f7      	rors	r7, r6
 8002d72:	4666      	mov	r6, ip
 8002d74:	4077      	eors	r7, r6
 8002d76:	46bc      	mov	ip, r7
 8002d78:	0017      	movs	r7, r2
 8002d7a:	4027      	ands	r7, r4
 8002d7c:	0016      	movs	r6, r2
 8002d7e:	4326      	orrs	r6, r4
 8002d80:	401e      	ands	r6, r3
 8002d82:	433e      	orrs	r6, r7
 8002d84:	4667      	mov	r7, ip
 8002d86:	19bf      	adds	r7, r7, r6
 8002d88:	9001      	str	r0, [sp, #4]
 8002d8a:	002e      	movs	r6, r5
 8002d8c:	0008      	movs	r0, r1
 8002d8e:	9902      	ldr	r1, [sp, #8]
 8002d90:	9d00      	ldr	r5, [sp, #0]
 8002d92:	194d      	adds	r5, r1, r5
 8002d94:	9302      	str	r3, [sp, #8]
 8002d96:	9206      	str	r2, [sp, #24]
 8002d98:	0023      	movs	r3, r4
 8002d9a:	9900      	ldr	r1, [sp, #0]
 8002d9c:	19ca      	adds	r2, r1, r7
 8002d9e:	2406      	movs	r4, #6
 8002da0:	0029      	movs	r1, r5
 8002da2:	41e1      	rors	r1, r4
 8002da4:	240b      	movs	r4, #11
 8002da6:	002f      	movs	r7, r5
 8002da8:	41e7      	rors	r7, r4
 8002daa:	404f      	eors	r7, r1
 8002dac:	9c01      	ldr	r4, [sp, #4]
 8002dae:	46bc      	mov	ip, r7
 8002db0:	2719      	movs	r7, #25
 8002db2:	0029      	movs	r1, r5
 8002db4:	41f9      	rors	r1, r7
 8002db6:	4667      	mov	r7, ip
 8002db8:	4079      	eors	r1, r7
 8002dba:	1861      	adds	r1, r4, r1
 8002dbc:	0034      	movs	r4, r6
 8002dbe:	4044      	eors	r4, r0
 8002dc0:	402c      	ands	r4, r5
 8002dc2:	4074      	eors	r4, r6
 8002dc4:	1909      	adds	r1, r1, r4
 8002dc6:	9c05      	ldr	r4, [sp, #20]
 8002dc8:	6864      	ldr	r4, [r4, #4]
 8002dca:	1909      	adds	r1, r1, r4
 8002dcc:	9c04      	ldr	r4, [sp, #16]
 8002dce:	6864      	ldr	r4, [r4, #4]
 8002dd0:	190c      	adds	r4, r1, r4
 8002dd2:	2102      	movs	r1, #2
 8002dd4:	0017      	movs	r7, r2
 8002dd6:	41cf      	rors	r7, r1
 8002dd8:	46bc      	mov	ip, r7
 8002dda:	270d      	movs	r7, #13
 8002ddc:	0011      	movs	r1, r2
 8002dde:	41f9      	rors	r1, r7
 8002de0:	4667      	mov	r7, ip
 8002de2:	4079      	eors	r1, r7
 8002de4:	468c      	mov	ip, r1
 8002de6:	2116      	movs	r1, #22
 8002de8:	0017      	movs	r7, r2
 8002dea:	41cf      	rors	r7, r1
 8002dec:	4661      	mov	r1, ip
 8002dee:	404f      	eors	r7, r1
 8002df0:	9700      	str	r7, [sp, #0]
 8002df2:	001f      	movs	r7, r3
 8002df4:	4017      	ands	r7, r2
 8002df6:	46bc      	mov	ip, r7
 8002df8:	9f06      	ldr	r7, [sp, #24]
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	4311      	orrs	r1, r2
 8002dfe:	4039      	ands	r1, r7
 8002e00:	4667      	mov	r7, ip
 8002e02:	4339      	orrs	r1, r7
 8002e04:	9f00      	ldr	r7, [sp, #0]
 8002e06:	187f      	adds	r7, r7, r1
 8002e08:	9601      	str	r6, [sp, #4]
 8002e0a:	9902      	ldr	r1, [sp, #8]
 8002e0c:	1909      	adds	r1, r1, r4
 8002e0e:	9e06      	ldr	r6, [sp, #24]
 8002e10:	9602      	str	r6, [sp, #8]
 8002e12:	19e4      	adds	r4, r4, r7
 8002e14:	9e04      	ldr	r6, [sp, #16]
 8002e16:	3608      	adds	r6, #8
 8002e18:	9604      	str	r6, [sp, #16]
 8002e1a:	9e05      	ldr	r6, [sp, #20]
 8002e1c:	3608      	adds	r6, #8
 8002e1e:	9605      	str	r6, [sp, #20]
 8002e20:	9e03      	ldr	r6, [sp, #12]
 8002e22:	1e76      	subs	r6, r6, #1
 8002e24:	9603      	str	r6, [sp, #12]
 8002e26:	d000      	beq.n	8002e2a <cmox_sha256_transform+0x1e2>
 8002e28:	e775      	b.n	8002d16 <cmox_sha256_transform+0xce>
 8002e2a:	9200      	str	r2, [sp, #0]
 8002e2c:	9a02      	ldr	r2, [sp, #8]
 8002e2e:	9e01      	ldr	r6, [sp, #4]
 8002e30:	9f47      	ldr	r7, [sp, #284]	; 0x11c
 8002e32:	6dff      	ldr	r7, [r7, #92]	; 0x5c
 8002e34:	193c      	adds	r4, r7, r4
 8002e36:	9f47      	ldr	r7, [sp, #284]	; 0x11c
 8002e38:	65fc      	str	r4, [r7, #92]	; 0x5c
 8002e3a:	9c47      	ldr	r4, [sp, #284]	; 0x11c
 8002e3c:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8002e3e:	9f00      	ldr	r7, [sp, #0]
 8002e40:	19e4      	adds	r4, r4, r7
 8002e42:	9f47      	ldr	r7, [sp, #284]	; 0x11c
 8002e44:	663c      	str	r4, [r7, #96]	; 0x60
 8002e46:	9c47      	ldr	r4, [sp, #284]	; 0x11c
 8002e48:	6e64      	ldr	r4, [r4, #100]	; 0x64
 8002e4a:	18e3      	adds	r3, r4, r3
 8002e4c:	9c47      	ldr	r4, [sp, #284]	; 0x11c
 8002e4e:	6663      	str	r3, [r4, #100]	; 0x64
 8002e50:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e54:	189a      	adds	r2, r3, r2
 8002e56:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002e58:	669a      	str	r2, [r3, #104]	; 0x68
 8002e5a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8002e5c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002e5e:	1851      	adds	r1, r2, r1
 8002e60:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8002e62:	66d1      	str	r1, [r2, #108]	; 0x6c
 8002e64:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8002e66:	6f09      	ldr	r1, [r1, #112]	; 0x70
 8002e68:	1949      	adds	r1, r1, r5
 8002e6a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8002e6c:	6711      	str	r1, [r2, #112]	; 0x70
 8002e6e:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8002e70:	6f49      	ldr	r1, [r1, #116]	; 0x74
 8002e72:	1808      	adds	r0, r1, r0
 8002e74:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8002e76:	6748      	str	r0, [r1, #116]	; 0x74
 8002e78:	9847      	ldr	r0, [sp, #284]	; 0x11c
 8002e7a:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8002e7c:	1980      	adds	r0, r0, r6
 8002e7e:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8002e80:	6788      	str	r0, [r1, #120]	; 0x78
 8002e82:	b048      	add	sp, #288	; 0x120
 8002e84:	bcf0      	pop	{r4, r5, r6, r7}
 8002e86:	4770      	bx	lr
 8002e88:	08009c80 	.word	0x08009c80

08002e8c <firstloop_bb_cmp>:
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	0007      	movs	r7, r0
 8002e90:	000c      	movs	r4, r1
 8002e92:	0013      	movs	r3, r2
 8002e94:	2500      	movs	r5, #0
 8002e96:	2001      	movs	r0, #1
 8002e98:	9000      	str	r0, [sp, #0]
 8002e9a:	0039      	movs	r1, r7
 8002e9c:	0022      	movs	r2, r4
 8002e9e:	2400      	movs	r4, #0
 8002ea0:	e00e      	b.n	8002ec0 <firstloop_bb_cmp+0x34>
 8002ea2:	9f00      	ldr	r7, [sp, #0]
 8002ea4:	46bc      	mov	ip, r7
 8002ea6:	5d4f      	ldrb	r7, [r1, r5]
 8002ea8:	5d56      	ldrb	r6, [r2, r5]
 8002eaa:	407e      	eors	r6, r7
 8002eac:	43f7      	mvns	r7, r6
 8002eae:	1c7f      	adds	r7, r7, #1
 8002eb0:	0ffe      	lsrs	r6, r7, #31
 8002eb2:	4046      	eors	r6, r0
 8002eb4:	4667      	mov	r7, ip
 8002eb6:	403e      	ands	r6, r7
 8002eb8:	9600      	str	r6, [sp, #0]
 8002eba:	9e00      	ldr	r6, [sp, #0]
 8002ebc:	19a4      	adds	r4, r4, r6
 8002ebe:	1c6d      	adds	r5, r5, #1
 8002ec0:	429d      	cmp	r5, r3
 8002ec2:	d3ee      	bcc.n	8002ea2 <firstloop_bb_cmp+0x16>
 8002ec4:	0020      	movs	r0, r4
 8002ec6:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08002ec8 <secondloop_bb_cmp>:
 8002ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eca:	2401      	movs	r4, #1
 8002ecc:	9400      	str	r4, [sp, #0]
 8002ece:	0003      	movs	r3, r0
 8002ed0:	000d      	movs	r5, r1
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	2a00      	cmp	r2, #0
 8002ed6:	e010      	b.n	8002efa <secondloop_bb_cmp+0x32>
 8002ed8:	9800      	ldr	r0, [sp, #0]
 8002eda:	189e      	adds	r6, r3, r2
 8002edc:	1e76      	subs	r6, r6, #1
 8002ede:	7836      	ldrb	r6, [r6, #0]
 8002ee0:	18af      	adds	r7, r5, r2
 8002ee2:	1e7f      	subs	r7, r7, #1
 8002ee4:	783f      	ldrb	r7, [r7, #0]
 8002ee6:	4077      	eors	r7, r6
 8002ee8:	43fe      	mvns	r6, r7
 8002eea:	1c76      	adds	r6, r6, #1
 8002eec:	0ff6      	lsrs	r6, r6, #31
 8002eee:	4066      	eors	r6, r4
 8002ef0:	4006      	ands	r6, r0
 8002ef2:	9600      	str	r6, [sp, #0]
 8002ef4:	9800      	ldr	r0, [sp, #0]
 8002ef6:	1809      	adds	r1, r1, r0
 8002ef8:	1e52      	subs	r2, r2, #1
 8002efa:	d1ed      	bne.n	8002ed8 <secondloop_bb_cmp+0x10>
 8002efc:	0008      	movs	r0, r1
 8002efe:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08002f00 <firstloop_bw_be_r_cmp>:
 8002f00:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 8002f02:	2301      	movs	r3, #1
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	0893      	lsrs	r3, r2, #2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	1ad4      	subs	r4, r2, r3
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	1f09      	subs	r1, r1, #4
 8002f10:	9102      	str	r1, [sp, #8]
 8002f12:	9003      	str	r0, [sp, #12]
 8002f14:	0010      	movs	r0, r2
 8002f16:	2100      	movs	r1, #0
 8002f18:	0022      	movs	r2, r4
 8002f1a:	e017      	b.n	8002f4c <firstloop_bw_be_r_cmp+0x4c>
 8002f1c:	9d01      	ldr	r5, [sp, #4]
 8002f1e:	9500      	str	r5, [sp, #0]
 8002f20:	7837      	ldrb	r7, [r6, #0]
 8002f22:	9e02      	ldr	r6, [sp, #8]
 8002f24:	1cc5      	adds	r5, r0, #3
 8002f26:	08ad      	lsrs	r5, r5, #2
 8002f28:	00ad      	lsls	r5, r5, #2
 8002f2a:	5976      	ldr	r6, [r6, r5]
 8002f2c:	1ad5      	subs	r5, r2, r3
 8002f2e:	1e6d      	subs	r5, r5, #1
 8002f30:	00ed      	lsls	r5, r5, #3
 8002f32:	40ee      	lsrs	r6, r5
 8002f34:	407e      	eors	r6, r7
 8002f36:	b2f6      	uxtb	r6, r6
 8002f38:	43f5      	mvns	r5, r6
 8002f3a:	1c6d      	adds	r5, r5, #1
 8002f3c:	0fed      	lsrs	r5, r5, #31
 8002f3e:	406c      	eors	r4, r5
 8002f40:	9d00      	ldr	r5, [sp, #0]
 8002f42:	402c      	ands	r4, r5
 8002f44:	9401      	str	r4, [sp, #4]
 8002f46:	9c01      	ldr	r4, [sp, #4]
 8002f48:	1909      	adds	r1, r1, r4
 8002f4a:	1c5b      	adds	r3, r3, #1
 8002f4c:	9c03      	ldr	r4, [sp, #12]
 8002f4e:	18e6      	adds	r6, r4, r3
 8002f50:	2401      	movs	r4, #1
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d3e2      	bcc.n	8002f1c <firstloop_bw_be_r_cmp+0x1c>
 8002f56:	000a      	movs	r2, r1
 8002f58:	2300      	movs	r3, #0
 8002f5a:	0881      	lsrs	r1, r0, #2
 8002f5c:	e01c      	b.n	8002f98 <firstloop_bw_be_r_cmp+0x98>
 8002f5e:	0098      	lsls	r0, r3, #2
 8002f60:	1835      	adds	r5, r6, r0
 8002f62:	7828      	ldrb	r0, [r5, #0]
 8002f64:	0607      	lsls	r7, r0, #24
 8002f66:	7868      	ldrb	r0, [r5, #1]
 8002f68:	0400      	lsls	r0, r0, #16
 8002f6a:	4338      	orrs	r0, r7
 8002f6c:	78af      	ldrb	r7, [r5, #2]
 8002f6e:	023f      	lsls	r7, r7, #8
 8002f70:	4307      	orrs	r7, r0
 8002f72:	78e8      	ldrb	r0, [r5, #3]
 8002f74:	4338      	orrs	r0, r7
 8002f76:	9d02      	ldr	r5, [sp, #8]
 8002f78:	1acf      	subs	r7, r1, r3
 8002f7a:	00bf      	lsls	r7, r7, #2
 8002f7c:	59ed      	ldr	r5, [r5, r7]
 8002f7e:	4045      	eors	r5, r0
 8002f80:	9801      	ldr	r0, [sp, #4]
 8002f82:	43ef      	mvns	r7, r5
 8002f84:	1c7f      	adds	r7, r7, #1
 8002f86:	432f      	orrs	r7, r5
 8002f88:	0ffd      	lsrs	r5, r7, #31
 8002f8a:	4065      	eors	r5, r4
 8002f8c:	4005      	ands	r5, r0
 8002f8e:	9501      	str	r5, [sp, #4]
 8002f90:	9801      	ldr	r0, [sp, #4]
 8002f92:	0080      	lsls	r0, r0, #2
 8002f94:	1812      	adds	r2, r2, r0
 8002f96:	1c5b      	adds	r3, r3, #1
 8002f98:	428b      	cmp	r3, r1
 8002f9a:	d3e0      	bcc.n	8002f5e <firstloop_bw_be_r_cmp+0x5e>
 8002f9c:	0010      	movs	r0, r2
 8002f9e:	b004      	add	sp, #16
 8002fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fa2 <secondloop_bw_be_r_cmp>:
 8002fa2:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	2401      	movs	r4, #1
 8002fa8:	9401      	str	r4, [sp, #4]
 8002faa:	0894      	lsrs	r4, r2, #2
 8002fac:	00a4      	lsls	r4, r4, #2
 8002fae:	1b14      	subs	r4, r2, r4
 8002fb0:	9402      	str	r4, [sp, #8]
 8002fb2:	0015      	movs	r5, r2
 8002fb4:	0004      	movs	r4, r0
 8002fb6:	e01d      	b.n	8002ff4 <secondloop_bw_be_r_cmp+0x52>
 8002fb8:	1966      	adds	r6, r4, r5
 8002fba:	1f36      	subs	r6, r6, #4
 8002fbc:	7830      	ldrb	r0, [r6, #0]
 8002fbe:	0607      	lsls	r7, r0, #24
 8002fc0:	7870      	ldrb	r0, [r6, #1]
 8002fc2:	0400      	lsls	r0, r0, #16
 8002fc4:	4338      	orrs	r0, r7
 8002fc6:	78b7      	ldrb	r7, [r6, #2]
 8002fc8:	023f      	lsls	r7, r7, #8
 8002fca:	4307      	orrs	r7, r0
 8002fcc:	78f0      	ldrb	r0, [r6, #3]
 8002fce:	4338      	orrs	r0, r7
 8002fd0:	1b56      	subs	r6, r2, r5
 8002fd2:	08b6      	lsrs	r6, r6, #2
 8002fd4:	00b6      	lsls	r6, r6, #2
 8002fd6:	598e      	ldr	r6, [r1, r6]
 8002fd8:	4046      	eors	r6, r0
 8002fda:	9801      	ldr	r0, [sp, #4]
 8002fdc:	43f7      	mvns	r7, r6
 8002fde:	1c7f      	adds	r7, r7, #1
 8002fe0:	4337      	orrs	r7, r6
 8002fe2:	0fff      	lsrs	r7, r7, #31
 8002fe4:	2601      	movs	r6, #1
 8002fe6:	407e      	eors	r6, r7
 8002fe8:	4006      	ands	r6, r0
 8002fea:	9601      	str	r6, [sp, #4]
 8002fec:	9801      	ldr	r0, [sp, #4]
 8002fee:	0080      	lsls	r0, r0, #2
 8002ff0:	181b      	adds	r3, r3, r0
 8002ff2:	1f2d      	subs	r5, r5, #4
 8002ff4:	2d03      	cmp	r5, #3
 8002ff6:	d8df      	bhi.n	8002fb8 <secondloop_bw_be_r_cmp+0x16>
 8002ff8:	0020      	movs	r0, r4
 8002ffa:	9c02      	ldr	r4, [sp, #8]
 8002ffc:	2c00      	cmp	r4, #0
 8002ffe:	e01c      	b.n	800303a <secondloop_bw_be_r_cmp+0x98>
 8003000:	9e02      	ldr	r6, [sp, #8]
 8003002:	9d01      	ldr	r5, [sp, #4]
 8003004:	9500      	str	r5, [sp, #0]
 8003006:	1e45      	subs	r5, r0, #1
 8003008:	5d2f      	ldrb	r7, [r5, r4]
 800300a:	1cd5      	adds	r5, r2, #3
 800300c:	08ad      	lsrs	r5, r5, #2
 800300e:	00ad      	lsls	r5, r5, #2
 8003010:	194d      	adds	r5, r1, r5
 8003012:	1f2d      	subs	r5, r5, #4
 8003014:	682d      	ldr	r5, [r5, #0]
 8003016:	46ac      	mov	ip, r5
 8003018:	1b35      	subs	r5, r6, r4
 800301a:	00ed      	lsls	r5, r5, #3
 800301c:	4666      	mov	r6, ip
 800301e:	40ee      	lsrs	r6, r5
 8003020:	407e      	eors	r6, r7
 8003022:	b2f6      	uxtb	r6, r6
 8003024:	43f5      	mvns	r5, r6
 8003026:	1c6d      	adds	r5, r5, #1
 8003028:	0fed      	lsrs	r5, r5, #31
 800302a:	2601      	movs	r6, #1
 800302c:	406e      	eors	r6, r5
 800302e:	9d00      	ldr	r5, [sp, #0]
 8003030:	402e      	ands	r6, r5
 8003032:	9601      	str	r6, [sp, #4]
 8003034:	9d01      	ldr	r5, [sp, #4]
 8003036:	195b      	adds	r3, r3, r5
 8003038:	1e64      	subs	r4, r4, #1
 800303a:	d1e1      	bne.n	8003000 <secondloop_bw_be_r_cmp+0x5e>
 800303c:	0018      	movs	r0, r3
 800303e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08003040 <bufType_bb>:
 8003040:	2e8d 0800 2ec9 0800 0001 0000               ............

0800304c <cmox_utils_robustCmp>:
 800304c:	b5fd      	push	{r0, r2, r3, r4, r5, r6, r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	000c      	movs	r4, r1
 8003052:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003054:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8003056:	2000      	movs	r0, #0
 8003058:	43c0      	mvns	r0, r0
 800305a:	9000      	str	r0, [sp, #0]
 800305c:	0022      	movs	r2, r4
 800305e:	9903      	ldr	r1, [sp, #12]
 8003060:	9802      	ldr	r0, [sp, #8]
 8003062:	6833      	ldr	r3, [r6, #0]
 8003064:	4798      	blx	r3
 8003066:	0005      	movs	r5, r0
 8003068:	980d      	ldr	r0, [sp, #52]	; 0x34
 800306a:	2800      	cmp	r0, #0
 800306c:	d029      	beq.n	80030c2 <cmox_utils_robustCmp+0x76>
 800306e:	0022      	movs	r2, r4
 8003070:	9903      	ldr	r1, [sp, #12]
 8003072:	9802      	ldr	r0, [sp, #8]
 8003074:	6873      	ldr	r3, [r6, #4]
 8003076:	4798      	blx	r3
 8003078:	9900      	ldr	r1, [sp, #0]
 800307a:	43ea      	mvns	r2, r5
 800307c:	1c52      	adds	r2, r2, #1
 800307e:	432a      	orrs	r2, r5
 8003080:	0fd3      	lsrs	r3, r2, #31
 8003082:	43da      	mvns	r2, r3
 8003084:	1c52      	adds	r2, r2, #1
 8003086:	400a      	ands	r2, r1
 8003088:	9200      	str	r2, [sp, #0]
 800308a:	9900      	ldr	r1, [sp, #0]
 800308c:	43c2      	mvns	r2, r0
 800308e:	1c52      	adds	r2, r2, #1
 8003090:	4302      	orrs	r2, r0
 8003092:	0fd3      	lsrs	r3, r2, #31
 8003094:	43da      	mvns	r2, r3
 8003096:	1c52      	adds	r2, r2, #1
 8003098:	400a      	ands	r2, r1
 800309a:	9200      	str	r2, [sp, #0]
 800309c:	4a1f      	ldr	r2, [pc, #124]	; (800311c <cmox_utils_robustCmp+0xd0>)
 800309e:	0011      	movs	r1, r2
 80030a0:	4061      	eors	r1, r4
 80030a2:	4041      	eors	r1, r0
 80030a4:	0038      	movs	r0, r7
 80030a6:	4048      	eors	r0, r1
 80030a8:	4050      	eors	r0, r2
 80030aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030ac:	6018      	str	r0, [r3, #0]
 80030ae:	9800      	ldr	r0, [sp, #0]
 80030b0:	404a      	eors	r2, r1
 80030b2:	43d3      	mvns	r3, r2
 80030b4:	1c5b      	adds	r3, r3, #1
 80030b6:	430b      	orrs	r3, r1
 80030b8:	0fd9      	lsrs	r1, r3, #31
 80030ba:	43ca      	mvns	r2, r1
 80030bc:	1c52      	adds	r2, r2, #1
 80030be:	4390      	bics	r0, r2
 80030c0:	9000      	str	r0, [sp, #0]
 80030c2:	9804      	ldr	r0, [sp, #16]
 80030c4:	68b1      	ldr	r1, [r6, #8]
 80030c6:	2901      	cmp	r1, #1
 80030c8:	d103      	bne.n	80030d2 <cmox_utils_robustCmp+0x86>
 80030ca:	4060      	eors	r0, r4
 80030cc:	9900      	ldr	r1, [sp, #0]
 80030ce:	43c2      	mvns	r2, r0
 80030d0:	e005      	b.n	80030de <cmox_utils_robustCmp+0x92>
 80030d2:	9900      	ldr	r1, [sp, #0]
 80030d4:	1ce2      	adds	r2, r4, #3
 80030d6:	0892      	lsrs	r2, r2, #2
 80030d8:	0003      	movs	r3, r0
 80030da:	4053      	eors	r3, r2
 80030dc:	43da      	mvns	r2, r3
 80030de:	1c52      	adds	r2, r2, #1
 80030e0:	4302      	orrs	r2, r0
 80030e2:	0fd0      	lsrs	r0, r2, #31
 80030e4:	43c2      	mvns	r2, r0
 80030e6:	1c52      	adds	r2, r2, #1
 80030e8:	4391      	bics	r1, r2
 80030ea:	9100      	str	r1, [sp, #0]
 80030ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80030ee:	480c      	ldr	r0, [pc, #48]	; (8003120 <cmox_utils_robustCmp+0xd4>)
 80030f0:	4044      	eors	r4, r0
 80030f2:	406c      	eors	r4, r5
 80030f4:	0003      	movs	r3, r0
 80030f6:	4063      	eors	r3, r4
 80030f8:	9a00      	ldr	r2, [sp, #0]
 80030fa:	43dd      	mvns	r5, r3
 80030fc:	1c6d      	adds	r5, r5, #1
 80030fe:	431d      	orrs	r5, r3
 8003100:	0feb      	lsrs	r3, r5, #31
 8003102:	43dd      	mvns	r5, r3
 8003104:	1c6d      	adds	r5, r5, #1
 8003106:	43aa      	bics	r2, r5
 8003108:	9200      	str	r2, [sp, #0]
 800310a:	9a00      	ldr	r2, [sp, #0]
 800310c:	4391      	bics	r1, r2
 800310e:	9a00      	ldr	r2, [sp, #0]
 8003110:	4067      	eors	r7, r4
 8003112:	4078      	eors	r0, r7
 8003114:	4010      	ands	r0, r2
 8003116:	4308      	orrs	r0, r1
 8003118:	b005      	add	sp, #20
 800311a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800311c:	55555555 	.word	0x55555555
 8003120:	aaaaaaaa 	.word	0xaaaaaaaa

08003124 <cmox_bn_alloc>:
 8003124:	b538      	push	{r3, r4, r5, lr}
 8003126:	000d      	movs	r5, r1
 8003128:	0014      	movs	r4, r2
 800312a:	00a2      	lsls	r2, r4, #2
 800312c:	1d12      	adds	r2, r2, #4
 800312e:	f7fe fc0d 	bl	800194c <cmox_membuf_alloc>
 8003132:	2800      	cmp	r0, #0
 8003134:	d101      	bne.n	800313a <cmox_bn_alloc+0x16>
 8003136:	6829      	ldr	r1, [r5, #0]
 8003138:	600c      	str	r4, [r1, #0]
 800313a:	bd32      	pop	{r1, r4, r5, pc}

0800313c <cmox_bn_free>:
 800313c:	b510      	push	{r4, lr}
 800313e:	000c      	movs	r4, r1
 8003140:	6821      	ldr	r1, [r4, #0]
 8003142:	6809      	ldr	r1, [r1, #0]
 8003144:	008a      	lsls	r2, r1, #2
 8003146:	1d12      	adds	r2, r2, #4
 8003148:	0021      	movs	r1, r4
 800314a:	f7fe fc1f 	bl	800198c <cmox_membuf_free>
 800314e:	2100      	movs	r1, #0
 8003150:	6021      	str	r1, [r4, #0]
 8003152:	bd10      	pop	{r4, pc}

08003154 <cmox_bn_init>:
 8003154:	b510      	push	{r4, lr}
 8003156:	000a      	movs	r2, r1
 8003158:	2300      	movs	r3, #0
 800315a:	2100      	movs	r1, #0
 800315c:	2800      	cmp	r0, #0
 800315e:	d101      	bne.n	8003164 <cmox_bn_init+0x10>
 8003160:	2101      	movs	r1, #1
 8003162:	e008      	b.n	8003176 <cmox_bn_init+0x22>
 8003164:	6042      	str	r2, [r0, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	e002      	b.n	8003170 <cmox_bn_init+0x1c>
 800316a:	0094      	lsls	r4, r2, #2
 800316c:	5103      	str	r3, [r0, r4]
 800316e:	1c52      	adds	r2, r2, #1
 8003170:	6804      	ldr	r4, [r0, #0]
 8003172:	4294      	cmp	r4, r2
 8003174:	d2f9      	bcs.n	800316a <cmox_bn_init+0x16>
 8003176:	0008      	movs	r0, r1
 8003178:	bd10      	pop	{r4, pc}

0800317a <cmox_bn_cCopy>:
 800317a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800317c:	0007      	movs	r7, r0
 800317e:	2500      	movs	r5, #0
 8003180:	6810      	ldr	r0, [r2, #0]
 8003182:	e005      	b.n	8003190 <cmox_bn_cCopy+0x16>
 8003184:	0083      	lsls	r3, r0, #2
 8003186:	58cb      	ldr	r3, [r1, r3]
 8003188:	427c      	negs	r4, r7
 800318a:	401c      	ands	r4, r3
 800318c:	432c      	orrs	r4, r5
 800318e:	0025      	movs	r5, r4
 8003190:	1c40      	adds	r0, r0, #1
 8003192:	680b      	ldr	r3, [r1, #0]
 8003194:	4283      	cmp	r3, r0
 8003196:	d2f5      	bcs.n	8003184 <cmox_bn_cCopy+0xa>
 8003198:	6810      	ldr	r0, [r2, #0]
 800319a:	4298      	cmp	r0, r3
 800319c:	d201      	bcs.n	80031a2 <cmox_bn_cCopy+0x28>
 800319e:	9000      	str	r0, [sp, #0]
 80031a0:	e000      	b.n	80031a4 <cmox_bn_cCopy+0x2a>
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	9c00      	ldr	r4, [sp, #0]
 80031a6:	9102      	str	r1, [sp, #8]
 80031a8:	0016      	movs	r6, r2
 80031aa:	2c00      	cmp	r4, #0
 80031ac:	e00b      	b.n	80031c6 <cmox_bn_cCopy+0x4c>
 80031ae:	00a0      	lsls	r0, r4, #2
 80031b0:	1831      	adds	r1, r6, r0
 80031b2:	9101      	str	r1, [sp, #4]
 80031b4:	680a      	ldr	r2, [r1, #0]
 80031b6:	9902      	ldr	r1, [sp, #8]
 80031b8:	5809      	ldr	r1, [r1, r0]
 80031ba:	0038      	movs	r0, r7
 80031bc:	f7fe fb85 	bl	80018ca <cmox_mathUtils_mux>
 80031c0:	9901      	ldr	r1, [sp, #4]
 80031c2:	6008      	str	r0, [r1, #0]
 80031c4:	1e64      	subs	r4, r4, #1
 80031c6:	d1f2      	bne.n	80031ae <cmox_bn_cCopy+0x34>
 80031c8:	9800      	ldr	r0, [sp, #0]
 80031ca:	e005      	b.n	80031d8 <cmox_bn_cCopy+0x5e>
 80031cc:	0081      	lsls	r1, r0, #2
 80031ce:	1871      	adds	r1, r6, r1
 80031d0:	680a      	ldr	r2, [r1, #0]
 80031d2:	1e7b      	subs	r3, r7, #1
 80031d4:	4013      	ands	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
 80031d8:	1c40      	adds	r0, r0, #1
 80031da:	6831      	ldr	r1, [r6, #0]
 80031dc:	4281      	cmp	r1, r0
 80031de:	d2f5      	bcs.n	80031cc <cmox_bn_cCopy+0x52>
 80031e0:	2d00      	cmp	r5, #0
 80031e2:	d001      	beq.n	80031e8 <cmox_bn_cCopy+0x6e>
 80031e4:	2003      	movs	r0, #3
 80031e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031e8:	2000      	movs	r0, #0
 80031ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080031ec <cmox_bn_mux>:
 80031ec:	0003      	movs	r3, r0
 80031ee:	0010      	movs	r0, r2
 80031f0:	425a      	negs	r2, r3
 80031f2:	4041      	eors	r1, r0
 80031f4:	4011      	ands	r1, r2
 80031f6:	4048      	eors	r0, r1
 80031f8:	4770      	bx	lr

080031fa <cmox_bn_cmp>:
 80031fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fc:	b086      	sub	sp, #24
 80031fe:	2200      	movs	r2, #0
 8003200:	9200      	str	r2, [sp, #0]
 8003202:	9205      	str	r2, [sp, #20]
 8003204:	2401      	movs	r4, #1
 8003206:	9404      	str	r4, [sp, #16]
 8003208:	680a      	ldr	r2, [r1, #0]
 800320a:	6803      	ldr	r3, [r0, #0]
 800320c:	4293      	cmp	r3, r2
 800320e:	d315      	bcc.n	800323c <cmox_bn_cmp+0x42>
 8003210:	9003      	str	r0, [sp, #12]
 8003212:	001d      	movs	r5, r3
 8003214:	9202      	str	r2, [sp, #8]
 8003216:	9401      	str	r4, [sp, #4]
 8003218:	9a02      	ldr	r2, [sp, #8]
 800321a:	42aa      	cmp	r2, r5
 800321c:	d215      	bcs.n	800324a <cmox_bn_cmp+0x50>
 800321e:	9a00      	ldr	r2, [sp, #0]
 8003220:	4694      	mov	ip, r2
 8003222:	9a03      	ldr	r2, [sp, #12]
 8003224:	00ab      	lsls	r3, r5, #2
 8003226:	58d2      	ldr	r2, [r2, r3]
 8003228:	2300      	movs	r3, #0
 800322a:	2700      	movs	r7, #0
 800322c:	1a9e      	subs	r6, r3, r2
 800322e:	419f      	sbcs	r7, r3
 8003230:	4027      	ands	r7, r4
 8003232:	4662      	mov	r2, ip
 8003234:	4317      	orrs	r7, r2
 8003236:	9700      	str	r7, [sp, #0]
 8003238:	1e6d      	subs	r5, r5, #1
 800323a:	e7ed      	b.n	8003218 <cmox_bn_cmp+0x1e>
 800323c:	9103      	str	r1, [sp, #12]
 800323e:	0015      	movs	r5, r2
 8003240:	9302      	str	r3, [sp, #8]
 8003242:	2200      	movs	r2, #0
 8003244:	43d2      	mvns	r2, r2
 8003246:	9201      	str	r2, [sp, #4]
 8003248:	e7e9      	b.n	800321e <cmox_bn_cmp+0x24>
 800324a:	9002      	str	r0, [sp, #8]
 800324c:	000f      	movs	r7, r1
 800324e:	9905      	ldr	r1, [sp, #20]
 8003250:	9c04      	ldr	r4, [sp, #16]
 8003252:	2d00      	cmp	r5, #0
 8003254:	e015      	b.n	8003282 <cmox_bn_cmp+0x88>
 8003256:	00aa      	lsls	r2, r5, #2
 8003258:	9802      	ldr	r0, [sp, #8]
 800325a:	5880      	ldr	r0, [r0, r2]
 800325c:	58be      	ldr	r6, [r7, r2]
 800325e:	468c      	mov	ip, r1
 8003260:	2300      	movs	r3, #0
 8003262:	2100      	movs	r1, #0
 8003264:	1a32      	subs	r2, r6, r0
 8003266:	418b      	sbcs	r3, r1
 8003268:	4023      	ands	r3, r4
 800326a:	4661      	mov	r1, ip
 800326c:	430b      	orrs	r3, r1
 800326e:	0019      	movs	r1, r3
 8003270:	0002      	movs	r2, r0
 8003272:	4072      	eors	r2, r6
 8003274:	2300      	movs	r3, #0
 8003276:	2000      	movs	r0, #0
 8003278:	1e52      	subs	r2, r2, #1
 800327a:	4183      	sbcs	r3, r0
 800327c:	4023      	ands	r3, r4
 800327e:	001c      	movs	r4, r3
 8003280:	1e6d      	subs	r5, r5, #1
 8003282:	d1e8      	bne.n	8003256 <cmox_bn_cmp+0x5c>
 8003284:	0048      	lsls	r0, r1, #1
 8003286:	1902      	adds	r2, r0, r4
 8003288:	1e52      	subs	r2, r2, #1
 800328a:	9901      	ldr	r1, [sp, #4]
 800328c:	9800      	ldr	r0, [sp, #0]
 800328e:	f7fe fb1c 	bl	80018ca <cmox_mathUtils_mux>
 8003292:	b007      	add	sp, #28
 8003294:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003296 <cmox_bn_cmpUint>:
 8003296:	b510      	push	{r4, lr}
 8003298:	0002      	movs	r2, r0
 800329a:	0008      	movs	r0, r1
 800329c:	2300      	movs	r3, #0
 800329e:	6811      	ldr	r1, [r2, #0]
 80032a0:	e004      	b.n	80032ac <cmox_bn_cmpUint+0x16>
 80032a2:	001c      	movs	r4, r3
 80032a4:	008b      	lsls	r3, r1, #2
 80032a6:	58d3      	ldr	r3, [r2, r3]
 80032a8:	4323      	orrs	r3, r4
 80032aa:	1e49      	subs	r1, r1, #1
 80032ac:	2902      	cmp	r1, #2
 80032ae:	d2f8      	bcs.n	80032a2 <cmox_bn_cmpUint+0xc>
 80032b0:	2100      	movs	r1, #0
 80032b2:	6852      	ldr	r2, [r2, #4]
 80032b4:	4050      	eors	r0, r2
 80032b6:	4318      	orrs	r0, r3
 80032b8:	f7fe fb12 	bl	80018e0 <cmox_mathUtils_neq>
 80032bc:	f7fe fb0c 	bl	80018d8 <cmox_mathUtils_not>
 80032c0:	bd10      	pop	{r4, pc}

080032c2 <cmox_bn_countBits>:
 80032c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c4:	0007      	movs	r7, r0
 80032c6:	2000      	movs	r0, #0
 80032c8:	683c      	ldr	r4, [r7, #0]
 80032ca:	0025      	movs	r5, r4
 80032cc:	e00b      	b.n	80032e6 <cmox_bn_countBits+0x24>
 80032ce:	4241      	negs	r1, r0
 80032d0:	4301      	orrs	r1, r0
 80032d2:	43ca      	mvns	r2, r1
 80032d4:	0fd6      	lsrs	r6, r2, #31
 80032d6:	0002      	movs	r2, r0
 80032d8:	00a8      	lsls	r0, r5, #2
 80032da:	5839      	ldr	r1, [r7, r0]
 80032dc:	0030      	movs	r0, r6
 80032de:	f7fe faf4 	bl	80018ca <cmox_mathUtils_mux>
 80032e2:	1ba4      	subs	r4, r4, r6
 80032e4:	1e6d      	subs	r5, r5, #1
 80032e6:	d1f2      	bne.n	80032ce <cmox_bn_countBits+0xc>
 80032e8:	0164      	lsls	r4, r4, #5
 80032ea:	f7fe fb06 	bl	80018fa <cmox_mathUtils_bitLength>
 80032ee:	1820      	adds	r0, r4, r0
 80032f0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080032f2 <cmox_bn_getBits>:
 80032f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f4:	0005      	movs	r5, r0
 80032f6:	000e      	movs	r6, r1
 80032f8:	0954      	lsrs	r4, r2, #5
 80032fa:	271f      	movs	r7, #31
 80032fc:	403a      	ands	r2, r7
 80032fe:	9200      	str	r2, [sp, #0]
 8003300:	1c61      	adds	r1, r4, #1
 8003302:	6828      	ldr	r0, [r5, #0]
 8003304:	f7fe faf1 	bl	80018ea <cmox_mathUtils_gt>
 8003308:	2200      	movs	r2, #0
 800330a:	1ca1      	adds	r1, r4, #2
 800330c:	4243      	negs	r3, r0
 800330e:	400b      	ands	r3, r1
 8003310:	0099      	lsls	r1, r3, #2
 8003312:	5869      	ldr	r1, [r5, r1]
 8003314:	f7fe fad9 	bl	80018ca <cmox_mathUtils_mux>
 8003318:	0001      	movs	r1, r0
 800331a:	00a0      	lsls	r0, r4, #2
 800331c:	1828      	adds	r0, r5, r0
 800331e:	6840      	ldr	r0, [r0, #4]
 8003320:	9a00      	ldr	r2, [sp, #0]
 8003322:	40d0      	lsrs	r0, r2
 8003324:	2220      	movs	r2, #32
 8003326:	9b00      	ldr	r3, [sp, #0]
 8003328:	1ad2      	subs	r2, r2, r3
 800332a:	4091      	lsls	r1, r2
 800332c:	4301      	orrs	r1, r0
 800332e:	2001      	movs	r0, #1
 8003330:	4037      	ands	r7, r6
 8003332:	40b8      	lsls	r0, r7
 8003334:	1e40      	subs	r0, r0, #1
 8003336:	4008      	ands	r0, r1
 8003338:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800333a <cmox_bn_setBits>:
 800333a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800333c:	0006      	movs	r6, r0
 800333e:	201f      	movs	r0, #31
 8003340:	2501      	movs	r5, #1
 8003342:	271f      	movs	r7, #31
 8003344:	400f      	ands	r7, r1
 8003346:	40bd      	lsls	r5, r7
 8003348:	1e6d      	subs	r5, r5, #1
 800334a:	402b      	ands	r3, r5
 800334c:	001f      	movs	r7, r3
 800334e:	0954      	lsrs	r4, r2, #5
 8003350:	1c64      	adds	r4, r4, #1
 8003352:	4002      	ands	r2, r0
 8003354:	9200      	str	r2, [sp, #0]
 8003356:	4008      	ands	r0, r1
 8003358:	1880      	adds	r0, r0, r2
 800335a:	3820      	subs	r0, #32
 800335c:	9002      	str	r0, [sp, #8]
 800335e:	0021      	movs	r1, r4
 8003360:	6830      	ldr	r0, [r6, #0]
 8003362:	f7fe fac2 	bl	80018ea <cmox_mathUtils_gt>
 8003366:	9902      	ldr	r1, [sp, #8]
 8003368:	460a      	mov	r2, r1
 800336a:	4253      	negs	r3, r2
 800336c:	438b      	bics	r3, r1
 800336e:	0fd9      	lsrs	r1, r3, #31
 8003370:	4001      	ands	r1, r0
 8003372:	9101      	str	r1, [sp, #4]
 8003374:	00a0      	lsls	r0, r4, #2
 8003376:	1830      	adds	r0, r6, r0
 8003378:	6801      	ldr	r1, [r0, #0]
 800337a:	9a00      	ldr	r2, [sp, #0]
 800337c:	4095      	lsls	r5, r2
 800337e:	43a9      	bics	r1, r5
 8003380:	6001      	str	r1, [r0, #0]
 8003382:	9a00      	ldr	r2, [sp, #0]
 8003384:	003b      	movs	r3, r7
 8003386:	4093      	lsls	r3, r2
 8003388:	430b      	orrs	r3, r1
 800338a:	6003      	str	r3, [r0, #0]
 800338c:	2100      	movs	r1, #0
 800338e:	43c9      	mvns	r1, r1
 8003390:	000a      	movs	r2, r1
 8003392:	9802      	ldr	r0, [sp, #8]
 8003394:	4081      	lsls	r1, r0
 8003396:	9801      	ldr	r0, [sp, #4]
 8003398:	f7fe fa97 	bl	80018ca <cmox_mathUtils_mux>
 800339c:	1c64      	adds	r4, r4, #1
 800339e:	9901      	ldr	r1, [sp, #4]
 80033a0:	424a      	negs	r2, r1
 80033a2:	4022      	ands	r2, r4
 80033a4:	0091      	lsls	r1, r2, #2
 80033a6:	1874      	adds	r4, r6, r1
 80033a8:	6821      	ldr	r1, [r4, #0]
 80033aa:	4008      	ands	r0, r1
 80033ac:	6020      	str	r0, [r4, #0]
 80033ae:	2200      	movs	r2, #0
 80033b0:	2020      	movs	r0, #32
 80033b2:	9900      	ldr	r1, [sp, #0]
 80033b4:	1a40      	subs	r0, r0, r1
 80033b6:	40c7      	lsrs	r7, r0
 80033b8:	0039      	movs	r1, r7
 80033ba:	9801      	ldr	r0, [sp, #4]
 80033bc:	f7fe fa85 	bl	80018ca <cmox_mathUtils_mux>
 80033c0:	6821      	ldr	r1, [r4, #0]
 80033c2:	4308      	orrs	r0, r1
 80033c4:	6020      	str	r0, [r4, #0]
 80033c6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080033c8 <cmox_bn_fromU8BE>:
 80033c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ca:	0005      	movs	r5, r0
 80033cc:	0010      	movs	r0, r2
 80033ce:	d003      	beq.n	80033d8 <cmox_bn_fromU8BE+0x10>
 80033d0:	2d00      	cmp	r5, #0
 80033d2:	d103      	bne.n	80033dc <cmox_bn_fromU8BE+0x14>
 80033d4:	2900      	cmp	r1, #0
 80033d6:	d001      	beq.n	80033dc <cmox_bn_fromU8BE+0x14>
 80033d8:	2001      	movs	r0, #1
 80033da:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80033dc:	6802      	ldr	r2, [r0, #0]
 80033de:	1ccb      	adds	r3, r1, #3
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d201      	bcs.n	80033ea <cmox_bn_fromU8BE+0x22>
 80033e6:	2003      	movs	r0, #3
 80033e8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80033ea:	2900      	cmp	r1, #0
 80033ec:	d032      	beq.n	8003454 <cmox_bn_fromU8BE+0x8c>
 80033ee:	088c      	lsrs	r4, r1, #2
 80033f0:	1c64      	adds	r4, r4, #1
 80033f2:	2301      	movs	r3, #1
 80033f4:	2201      	movs	r2, #1
 80033f6:	9500      	str	r5, [sp, #0]
 80033f8:	e010      	b.n	800341c <cmox_bn_fromU8BE+0x54>
 80033fa:	9d00      	ldr	r5, [sp, #0]
 80033fc:	0096      	lsls	r6, r2, #2
 80033fe:	1b8e      	subs	r6, r1, r6
 8003400:	19ad      	adds	r5, r5, r6
 8003402:	782e      	ldrb	r6, [r5, #0]
 8003404:	0637      	lsls	r7, r6, #24
 8003406:	786e      	ldrb	r6, [r5, #1]
 8003408:	0436      	lsls	r6, r6, #16
 800340a:	433e      	orrs	r6, r7
 800340c:	78af      	ldrb	r7, [r5, #2]
 800340e:	023f      	lsls	r7, r7, #8
 8003410:	4337      	orrs	r7, r6
 8003412:	78ed      	ldrb	r5, [r5, #3]
 8003414:	433d      	orrs	r5, r7
 8003416:	0096      	lsls	r6, r2, #2
 8003418:	5185      	str	r5, [r0, r6]
 800341a:	1c52      	adds	r2, r2, #1
 800341c:	42a2      	cmp	r2, r4
 800341e:	d3ec      	bcc.n	80033fa <cmox_bn_fromU8BE+0x32>
 8003420:	6805      	ldr	r5, [r0, #0]
 8003422:	4295      	cmp	r5, r2
 8003424:	d304      	bcc.n	8003430 <cmox_bn_fromU8BE+0x68>
 8003426:	2500      	movs	r5, #0
 8003428:	0096      	lsls	r6, r2, #2
 800342a:	5185      	str	r5, [r0, r6]
 800342c:	1c52      	adds	r2, r2, #1
 800342e:	e7f7      	b.n	8003420 <cmox_bn_fromU8BE+0x58>
 8003430:	0789      	lsls	r1, r1, #30
 8003432:	0f89      	lsrs	r1, r1, #30
 8003434:	d010      	beq.n	8003458 <cmox_bn_fromU8BE+0x90>
 8003436:	00a2      	lsls	r2, r4, #2
 8003438:	1880      	adds	r0, r0, r2
 800343a:	9a00      	ldr	r2, [sp, #0]
 800343c:	7812      	ldrb	r2, [r2, #0]
 800343e:	6002      	str	r2, [r0, #0]
 8003440:	9a00      	ldr	r2, [sp, #0]
 8003442:	428b      	cmp	r3, r1
 8003444:	d208      	bcs.n	8003458 <cmox_bn_fromU8BE+0x90>
 8003446:	6804      	ldr	r4, [r0, #0]
 8003448:	0224      	lsls	r4, r4, #8
 800344a:	5cd5      	ldrb	r5, [r2, r3]
 800344c:	4325      	orrs	r5, r4
 800344e:	6005      	str	r5, [r0, #0]
 8003450:	1c5b      	adds	r3, r3, #1
 8003452:	e7f6      	b.n	8003442 <cmox_bn_fromU8BE+0x7a>
 8003454:	f7ff fe7e 	bl	8003154 <cmox_bn_init>
 8003458:	2000      	movs	r0, #0
 800345a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800345c <cmox_asm_montyred>:
 800345c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345e:	4644      	mov	r4, r8
 8003460:	464d      	mov	r5, r9
 8003462:	4656      	mov	r6, sl
 8003464:	465f      	mov	r7, fp
 8003466:	b4f0      	push	{r4, r5, r6, r7}
 8003468:	4686      	mov	lr, r0
 800346a:	4698      	mov	r8, r3
 800346c:	4691      	mov	r9, r2
 800346e:	008d      	lsls	r5, r1, #2
 8003470:	46aa      	mov	sl, r5
 8003472:	2000      	movs	r0, #0
 8003474:	2100      	movs	r1, #0
 8003476:	2200      	movs	r2, #0
 8003478:	4683      	mov	fp, r0
 800347a:	4694      	mov	ip, r2
 800347c:	45dc      	cmp	ip, fp
 800347e:	da1e      	bge.n	80034be <cmox_asm_montyred+0x62>
 8003480:	4667      	mov	r7, ip
 8003482:	4643      	mov	r3, r8
 8003484:	59db      	ldr	r3, [r3, r7]
 8003486:	464c      	mov	r4, r9
 8003488:	445c      	add	r4, fp
 800348a:	1be4      	subs	r4, r4, r7
 800348c:	6824      	ldr	r4, [r4, #0]
 800348e:	b29e      	uxth	r6, r3
 8003490:	b2a7      	uxth	r7, r4
 8003492:	0c25      	lsrs	r5, r4, #16
 8003494:	0c1c      	lsrs	r4, r3, #16
 8003496:	4633      	mov	r3, r6
 8003498:	437b      	muls	r3, r7
 800349a:	436e      	muls	r6, r5
 800349c:	4365      	muls	r5, r4
 800349e:	437c      	muls	r4, r7
 80034a0:	0437      	lsls	r7, r6, #16
 80034a2:	0c36      	lsrs	r6, r6, #16
 80034a4:	19db      	adds	r3, r3, r7
 80034a6:	4175      	adcs	r5, r6
 80034a8:	0427      	lsls	r7, r4, #16
 80034aa:	0c26      	lsrs	r6, r4, #16
 80034ac:	19db      	adds	r3, r3, r7
 80034ae:	4175      	adcs	r5, r6
 80034b0:	18c0      	adds	r0, r0, r3
 80034b2:	4169      	adcs	r1, r5
 80034b4:	417a      	adcs	r2, r7
 80034b6:	2504      	movs	r5, #4
 80034b8:	44ac      	add	ip, r5
 80034ba:	45dc      	cmp	ip, fp
 80034bc:	dbe0      	blt.n	8003480 <cmox_asm_montyred+0x24>
 80034be:	4675      	mov	r5, lr
 80034c0:	445d      	add	r5, fp
 80034c2:	682d      	ldr	r5, [r5, #0]
 80034c4:	2600      	movs	r6, #0
 80034c6:	1940      	adds	r0, r0, r5
 80034c8:	4171      	adcs	r1, r6
 80034ca:	4172      	adcs	r2, r6
 80034cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034ce:	4343      	muls	r3, r0
 80034d0:	4647      	mov	r7, r8
 80034d2:	445f      	add	r7, fp
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	464f      	mov	r7, r9
 80034d8:	683c      	ldr	r4, [r7, #0]
 80034da:	b29e      	uxth	r6, r3
 80034dc:	b2a7      	uxth	r7, r4
 80034de:	0c25      	lsrs	r5, r4, #16
 80034e0:	0c1c      	lsrs	r4, r3, #16
 80034e2:	4633      	mov	r3, r6
 80034e4:	437b      	muls	r3, r7
 80034e6:	436e      	muls	r6, r5
 80034e8:	4365      	muls	r5, r4
 80034ea:	437c      	muls	r4, r7
 80034ec:	0437      	lsls	r7, r6, #16
 80034ee:	0c36      	lsrs	r6, r6, #16
 80034f0:	19db      	adds	r3, r3, r7
 80034f2:	4175      	adcs	r5, r6
 80034f4:	0427      	lsls	r7, r4, #16
 80034f6:	0c26      	lsrs	r6, r4, #16
 80034f8:	19db      	adds	r3, r3, r7
 80034fa:	4175      	adcs	r5, r6
 80034fc:	18c0      	adds	r0, r0, r3
 80034fe:	4169      	adcs	r1, r5
 8003500:	417a      	adcs	r2, r7
 8003502:	4608      	mov	r0, r1
 8003504:	b291      	uxth	r1, r2
 8003506:	2200      	movs	r2, #0
 8003508:	2504      	movs	r5, #4
 800350a:	44ab      	add	fp, r5
 800350c:	4655      	mov	r5, sl
 800350e:	45ab      	cmp	fp, r5
 8003510:	dbb3      	blt.n	800347a <cmox_asm_montyred+0x1e>
 8003512:	4693      	mov	fp, r2
 8003514:	1f2d      	subs	r5, r5, #4
 8003516:	2304      	movs	r3, #4
 8003518:	469c      	mov	ip, r3
 800351a:	44dc      	add	ip, fp
 800351c:	1d2d      	adds	r5, r5, #4
 800351e:	4667      	mov	r7, ip
 8003520:	4643      	mov	r3, r8
 8003522:	59db      	ldr	r3, [r3, r7]
 8003524:	464c      	mov	r4, r9
 8003526:	445c      	add	r4, fp
 8003528:	1be4      	subs	r4, r4, r7
 800352a:	5964      	ldr	r4, [r4, r5]
 800352c:	b29e      	uxth	r6, r3
 800352e:	b2a7      	uxth	r7, r4
 8003530:	0c25      	lsrs	r5, r4, #16
 8003532:	0c1c      	lsrs	r4, r3, #16
 8003534:	4633      	mov	r3, r6
 8003536:	437b      	muls	r3, r7
 8003538:	436e      	muls	r6, r5
 800353a:	4365      	muls	r5, r4
 800353c:	437c      	muls	r4, r7
 800353e:	0437      	lsls	r7, r6, #16
 8003540:	0c36      	lsrs	r6, r6, #16
 8003542:	19db      	adds	r3, r3, r7
 8003544:	4175      	adcs	r5, r6
 8003546:	0427      	lsls	r7, r4, #16
 8003548:	0c26      	lsrs	r6, r4, #16
 800354a:	19db      	adds	r3, r3, r7
 800354c:	4175      	adcs	r5, r6
 800354e:	18c0      	adds	r0, r0, r3
 8003550:	4169      	adcs	r1, r5
 8003552:	417a      	adcs	r2, r7
 8003554:	2504      	movs	r5, #4
 8003556:	44ac      	add	ip, r5
 8003558:	4655      	mov	r5, sl
 800355a:	45ac      	cmp	ip, r5
 800355c:	dbdf      	blt.n	800351e <cmox_asm_montyred+0xc2>
 800355e:	4677      	mov	r7, lr
 8003560:	445f      	add	r7, fp
 8003562:	597f      	ldr	r7, [r7, r5]
 8003564:	2600      	movs	r6, #0
 8003566:	19c0      	adds	r0, r0, r7
 8003568:	4171      	adcs	r1, r6
 800356a:	4172      	adcs	r2, r6
 800356c:	4647      	mov	r7, r8
 800356e:	445f      	add	r7, fp
 8003570:	6038      	str	r0, [r7, #0]
 8003572:	4608      	mov	r0, r1
 8003574:	b291      	uxth	r1, r2
 8003576:	2200      	movs	r2, #0
 8003578:	2704      	movs	r7, #4
 800357a:	44bb      	add	fp, r7
 800357c:	1f2d      	subs	r5, r5, #4
 800357e:	45ab      	cmp	fp, r5
 8003580:	dbc9      	blt.n	8003516 <cmox_asm_montyred+0xba>
 8003582:	4677      	mov	r7, lr
 8003584:	442f      	add	r7, r5
 8003586:	442f      	add	r7, r5
 8003588:	687f      	ldr	r7, [r7, #4]
 800358a:	19c0      	adds	r0, r0, r7
 800358c:	4151      	adcs	r1, r2
 800358e:	4152      	adcs	r2, r2
 8003590:	4445      	add	r5, r8
 8003592:	6028      	str	r0, [r5, #0]
 8003594:	2000      	movs	r0, #0
 8003596:	4643      	mov	r3, r8
 8003598:	464c      	mov	r4, r9
 800359a:	2500      	movs	r5, #0
 800359c:	581e      	ldr	r6, [r3, r0]
 800359e:	5827      	ldr	r7, [r4, r0]
 80035a0:	426d      	negs	r5, r5
 80035a2:	1b76      	subs	r6, r6, r5
 80035a4:	4615      	mov	r5, r2
 80035a6:	41ad      	sbcs	r5, r5
 80035a8:	1bf6      	subs	r6, r6, r7
 80035aa:	4195      	sbcs	r5, r2
 80035ac:	1d00      	adds	r0, r0, #4
 80035ae:	4550      	cmp	r0, sl
 80035b0:	dbf4      	blt.n	800359c <cmox_asm_montyred+0x140>
 80035b2:	4429      	add	r1, r5
 80035b4:	43c9      	mvns	r1, r1
 80035b6:	2000      	movs	r0, #0
 80035b8:	2500      	movs	r5, #0
 80035ba:	581e      	ldr	r6, [r3, r0]
 80035bc:	5827      	ldr	r7, [r4, r0]
 80035be:	426d      	negs	r5, r5
 80035c0:	1b76      	subs	r6, r6, r5
 80035c2:	4615      	mov	r5, r2
 80035c4:	41ad      	sbcs	r5, r5
 80035c6:	400f      	ands	r7, r1
 80035c8:	1bf6      	subs	r6, r6, r7
 80035ca:	4195      	sbcs	r5, r2
 80035cc:	501e      	str	r6, [r3, r0]
 80035ce:	1d00      	adds	r0, r0, #4
 80035d0:	4550      	cmp	r0, sl
 80035d2:	dbf2      	blt.n	80035ba <cmox_asm_montyred+0x15e>
 80035d4:	bcf0      	pop	{r4, r5, r6, r7}
 80035d6:	46bb      	mov	fp, r7
 80035d8:	46b2      	mov	sl, r6
 80035da:	46a9      	mov	r9, r5
 80035dc:	46a0      	mov	r8, r4
 80035de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035e0 <cmox_asm_mul_fast256>:
 80035e0:	460a      	mov	r2, r1
 80035e2:	4601      	mov	r1, r0
 80035e4:	4618      	mov	r0, r3
 80035e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e8:	4643      	mov	r3, r8
 80035ea:	464c      	mov	r4, r9
 80035ec:	4655      	mov	r5, sl
 80035ee:	465e      	mov	r6, fp
 80035f0:	b47f      	push	{r0, r1, r2, r3, r4, r5, r6}
 80035f2:	4684      	mov	ip, r0
 80035f4:	4692      	mov	sl, r2
 80035f6:	468b      	mov	fp, r1
 80035f8:	4610      	mov	r0, r2
 80035fa:	c830      	ldmia	r0!, {r4, r5}
 80035fc:	3008      	adds	r0, #8
 80035fe:	c9cc      	ldmia	r1!, {r2, r3, r6, r7}
 8003600:	b403      	push	{r0, r1}
 8003602:	462e      	mov	r6, r5
 8003604:	4611      	mov	r1, r2
 8003606:	1b2d      	subs	r5, r5, r4
 8003608:	4180      	sbcs	r0, r0
 800360a:	4045      	eors	r5, r0
 800360c:	1a2d      	subs	r5, r5, r0
 800360e:	1ac9      	subs	r1, r1, r3
 8003610:	41bf      	sbcs	r7, r7
 8003612:	4079      	eors	r1, r7
 8003614:	1bc9      	subs	r1, r1, r7
 8003616:	4047      	eors	r7, r0
 8003618:	4689      	mov	r9, r1
 800361a:	46a8      	mov	r8, r5
 800361c:	0c21      	lsrs	r1, r4, #16
 800361e:	b2a4      	uxth	r4, r4
 8003620:	4620      	mov	r0, r4
 8003622:	b295      	uxth	r5, r2
 8003624:	0c12      	lsrs	r2, r2, #16
 8003626:	4368      	muls	r0, r5
 8003628:	434d      	muls	r5, r1
 800362a:	4354      	muls	r4, r2
 800362c:	4351      	muls	r1, r2
 800362e:	0422      	lsls	r2, r4, #16
 8003630:	0c24      	lsrs	r4, r4, #16
 8003632:	1880      	adds	r0, r0, r2
 8003634:	4161      	adcs	r1, r4
 8003636:	042a      	lsls	r2, r5, #16
 8003638:	0c2c      	lsrs	r4, r5, #16
 800363a:	1880      	adds	r0, r0, r2
 800363c:	4161      	adcs	r1, r4
 800363e:	0c34      	lsrs	r4, r6, #16
 8003640:	b2b6      	uxth	r6, r6
 8003642:	b29d      	uxth	r5, r3
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	4632      	mov	r2, r6
 8003648:	436a      	muls	r2, r5
 800364a:	4365      	muls	r5, r4
 800364c:	435e      	muls	r6, r3
 800364e:	4363      	muls	r3, r4
 8003650:	042c      	lsls	r4, r5, #16
 8003652:	0c2d      	lsrs	r5, r5, #16
 8003654:	1912      	adds	r2, r2, r4
 8003656:	416b      	adcs	r3, r5
 8003658:	0434      	lsls	r4, r6, #16
 800365a:	0c35      	lsrs	r5, r6, #16
 800365c:	1912      	adds	r2, r2, r4
 800365e:	416b      	adcs	r3, r5
 8003660:	4076      	eors	r6, r6
 8003662:	1852      	adds	r2, r2, r1
 8003664:	4173      	adcs	r3, r6
 8003666:	4649      	mov	r1, r9
 8003668:	4645      	mov	r5, r8
 800366a:	4680      	mov	r8, r0
 800366c:	0c08      	lsrs	r0, r1, #16
 800366e:	b289      	uxth	r1, r1
 8003670:	460c      	mov	r4, r1
 8003672:	0c2e      	lsrs	r6, r5, #16
 8003674:	b2ad      	uxth	r5, r5
 8003676:	4369      	muls	r1, r5
 8003678:	4374      	muls	r4, r6
 800367a:	4345      	muls	r5, r0
 800367c:	4370      	muls	r0, r6
 800367e:	0426      	lsls	r6, r4, #16
 8003680:	0c24      	lsrs	r4, r4, #16
 8003682:	1989      	adds	r1, r1, r6
 8003684:	4160      	adcs	r0, r4
 8003686:	042e      	lsls	r6, r5, #16
 8003688:	0c2d      	lsrs	r5, r5, #16
 800368a:	1989      	adds	r1, r1, r6
 800368c:	4168      	adcs	r0, r5
 800368e:	4079      	eors	r1, r7
 8003690:	4078      	eors	r0, r7
 8003692:	4064      	eors	r4, r4
 8003694:	107f      	asrs	r7, r7, #1
 8003696:	4151      	adcs	r1, r2
 8003698:	4142      	adcs	r2, r0
 800369a:	4167      	adcs	r7, r4
 800369c:	4640      	mov	r0, r8
 800369e:	1809      	adds	r1, r1, r0
 80036a0:	415a      	adcs	r2, r3
 80036a2:	417b      	adcs	r3, r7
 80036a4:	4664      	mov	r4, ip
 80036a6:	c403      	stmia	r4!, {r0, r1}
 80036a8:	b410      	push	{r4}
 80036aa:	b403      	push	{r0, r1}
 80036ac:	4651      	mov	r1, sl
 80036ae:	4692      	mov	sl, r2
 80036b0:	c933      	ldmia	r1, {r0, r1, r4, r5}
 80036b2:	4622      	mov	r2, r4
 80036b4:	462f      	mov	r7, r5
 80036b6:	1a12      	subs	r2, r2, r0
 80036b8:	418f      	sbcs	r7, r1
 80036ba:	41b6      	sbcs	r6, r6
 80036bc:	4072      	eors	r2, r6
 80036be:	4077      	eors	r7, r6
 80036c0:	1b92      	subs	r2, r2, r6
 80036c2:	41b7      	sbcs	r7, r6
 80036c4:	b484      	push	{r2, r7}
 80036c6:	465a      	mov	r2, fp
 80036c8:	469b      	mov	fp, r3
 80036ca:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80036cc:	1a80      	subs	r0, r0, r2
 80036ce:	4199      	sbcs	r1, r3
 80036d0:	41bf      	sbcs	r7, r7
 80036d2:	4078      	eors	r0, r7
 80036d4:	4079      	eors	r1, r7
 80036d6:	1bc0      	subs	r0, r0, r7
 80036d8:	41b9      	sbcs	r1, r7
 80036da:	4077      	eors	r7, r6
 80036dc:	46bc      	mov	ip, r7
 80036de:	b403      	push	{r0, r1}
 80036e0:	462e      	mov	r6, r5
 80036e2:	4611      	mov	r1, r2
 80036e4:	1b2d      	subs	r5, r5, r4
 80036e6:	4180      	sbcs	r0, r0
 80036e8:	4045      	eors	r5, r0
 80036ea:	1a2d      	subs	r5, r5, r0
 80036ec:	1ac9      	subs	r1, r1, r3
 80036ee:	41bf      	sbcs	r7, r7
 80036f0:	4079      	eors	r1, r7
 80036f2:	1bc9      	subs	r1, r1, r7
 80036f4:	4047      	eors	r7, r0
 80036f6:	4689      	mov	r9, r1
 80036f8:	46a8      	mov	r8, r5
 80036fa:	0c21      	lsrs	r1, r4, #16
 80036fc:	b2a4      	uxth	r4, r4
 80036fe:	4620      	mov	r0, r4
 8003700:	b295      	uxth	r5, r2
 8003702:	0c12      	lsrs	r2, r2, #16
 8003704:	4368      	muls	r0, r5
 8003706:	434d      	muls	r5, r1
 8003708:	4354      	muls	r4, r2
 800370a:	4351      	muls	r1, r2
 800370c:	0422      	lsls	r2, r4, #16
 800370e:	0c24      	lsrs	r4, r4, #16
 8003710:	1880      	adds	r0, r0, r2
 8003712:	4161      	adcs	r1, r4
 8003714:	042a      	lsls	r2, r5, #16
 8003716:	0c2c      	lsrs	r4, r5, #16
 8003718:	1880      	adds	r0, r0, r2
 800371a:	4161      	adcs	r1, r4
 800371c:	0c34      	lsrs	r4, r6, #16
 800371e:	b2b6      	uxth	r6, r6
 8003720:	b29d      	uxth	r5, r3
 8003722:	0c1b      	lsrs	r3, r3, #16
 8003724:	4632      	mov	r2, r6
 8003726:	436a      	muls	r2, r5
 8003728:	4365      	muls	r5, r4
 800372a:	435e      	muls	r6, r3
 800372c:	4363      	muls	r3, r4
 800372e:	042c      	lsls	r4, r5, #16
 8003730:	0c2d      	lsrs	r5, r5, #16
 8003732:	1912      	adds	r2, r2, r4
 8003734:	416b      	adcs	r3, r5
 8003736:	0434      	lsls	r4, r6, #16
 8003738:	0c35      	lsrs	r5, r6, #16
 800373a:	1912      	adds	r2, r2, r4
 800373c:	416b      	adcs	r3, r5
 800373e:	4076      	eors	r6, r6
 8003740:	1852      	adds	r2, r2, r1
 8003742:	4173      	adcs	r3, r6
 8003744:	4649      	mov	r1, r9
 8003746:	4645      	mov	r5, r8
 8003748:	4680      	mov	r8, r0
 800374a:	0c08      	lsrs	r0, r1, #16
 800374c:	b289      	uxth	r1, r1
 800374e:	460c      	mov	r4, r1
 8003750:	0c2e      	lsrs	r6, r5, #16
 8003752:	b2ad      	uxth	r5, r5
 8003754:	4369      	muls	r1, r5
 8003756:	4374      	muls	r4, r6
 8003758:	4345      	muls	r5, r0
 800375a:	4370      	muls	r0, r6
 800375c:	0426      	lsls	r6, r4, #16
 800375e:	0c24      	lsrs	r4, r4, #16
 8003760:	1989      	adds	r1, r1, r6
 8003762:	4160      	adcs	r0, r4
 8003764:	042e      	lsls	r6, r5, #16
 8003766:	0c2d      	lsrs	r5, r5, #16
 8003768:	1989      	adds	r1, r1, r6
 800376a:	4168      	adcs	r0, r5
 800376c:	4079      	eors	r1, r7
 800376e:	4078      	eors	r0, r7
 8003770:	4064      	eors	r4, r4
 8003772:	107f      	asrs	r7, r7, #1
 8003774:	4151      	adcs	r1, r2
 8003776:	4142      	adcs	r2, r0
 8003778:	4167      	adcs	r7, r4
 800377a:	4640      	mov	r0, r8
 800377c:	1809      	adds	r1, r1, r0
 800377e:	415a      	adcs	r2, r3
 8003780:	417b      	adcs	r3, r7
 8003782:	4654      	mov	r4, sl
 8003784:	465d      	mov	r5, fp
 8003786:	4076      	eors	r6, r6
 8003788:	1900      	adds	r0, r0, r4
 800378a:	4169      	adcs	r1, r5
 800378c:	4172      	adcs	r2, r6
 800378e:	4173      	adcs	r3, r6
 8003790:	4692      	mov	sl, r2
 8003792:	469b      	mov	fp, r3
 8003794:	bc3c      	pop	{r2, r3, r4, r5}
 8003796:	b403      	push	{r0, r1}
 8003798:	462e      	mov	r6, r5
 800379a:	4611      	mov	r1, r2
 800379c:	1b2d      	subs	r5, r5, r4
 800379e:	4180      	sbcs	r0, r0
 80037a0:	4045      	eors	r5, r0
 80037a2:	1a2d      	subs	r5, r5, r0
 80037a4:	1ac9      	subs	r1, r1, r3
 80037a6:	41bf      	sbcs	r7, r7
 80037a8:	4079      	eors	r1, r7
 80037aa:	1bc9      	subs	r1, r1, r7
 80037ac:	4047      	eors	r7, r0
 80037ae:	4689      	mov	r9, r1
 80037b0:	46a8      	mov	r8, r5
 80037b2:	0c21      	lsrs	r1, r4, #16
 80037b4:	b2a4      	uxth	r4, r4
 80037b6:	4620      	mov	r0, r4
 80037b8:	b295      	uxth	r5, r2
 80037ba:	0c12      	lsrs	r2, r2, #16
 80037bc:	4368      	muls	r0, r5
 80037be:	434d      	muls	r5, r1
 80037c0:	4354      	muls	r4, r2
 80037c2:	4351      	muls	r1, r2
 80037c4:	0422      	lsls	r2, r4, #16
 80037c6:	0c24      	lsrs	r4, r4, #16
 80037c8:	1880      	adds	r0, r0, r2
 80037ca:	4161      	adcs	r1, r4
 80037cc:	042a      	lsls	r2, r5, #16
 80037ce:	0c2c      	lsrs	r4, r5, #16
 80037d0:	1880      	adds	r0, r0, r2
 80037d2:	4161      	adcs	r1, r4
 80037d4:	0c34      	lsrs	r4, r6, #16
 80037d6:	b2b6      	uxth	r6, r6
 80037d8:	b29d      	uxth	r5, r3
 80037da:	0c1b      	lsrs	r3, r3, #16
 80037dc:	4632      	mov	r2, r6
 80037de:	436a      	muls	r2, r5
 80037e0:	4365      	muls	r5, r4
 80037e2:	435e      	muls	r6, r3
 80037e4:	4363      	muls	r3, r4
 80037e6:	042c      	lsls	r4, r5, #16
 80037e8:	0c2d      	lsrs	r5, r5, #16
 80037ea:	1912      	adds	r2, r2, r4
 80037ec:	416b      	adcs	r3, r5
 80037ee:	0434      	lsls	r4, r6, #16
 80037f0:	0c35      	lsrs	r5, r6, #16
 80037f2:	1912      	adds	r2, r2, r4
 80037f4:	416b      	adcs	r3, r5
 80037f6:	4076      	eors	r6, r6
 80037f8:	1852      	adds	r2, r2, r1
 80037fa:	4173      	adcs	r3, r6
 80037fc:	4649      	mov	r1, r9
 80037fe:	4645      	mov	r5, r8
 8003800:	4680      	mov	r8, r0
 8003802:	0c08      	lsrs	r0, r1, #16
 8003804:	b289      	uxth	r1, r1
 8003806:	460c      	mov	r4, r1
 8003808:	0c2e      	lsrs	r6, r5, #16
 800380a:	b2ad      	uxth	r5, r5
 800380c:	4369      	muls	r1, r5
 800380e:	4374      	muls	r4, r6
 8003810:	4345      	muls	r5, r0
 8003812:	4370      	muls	r0, r6
 8003814:	0426      	lsls	r6, r4, #16
 8003816:	0c24      	lsrs	r4, r4, #16
 8003818:	1989      	adds	r1, r1, r6
 800381a:	4160      	adcs	r0, r4
 800381c:	042e      	lsls	r6, r5, #16
 800381e:	0c2d      	lsrs	r5, r5, #16
 8003820:	1989      	adds	r1, r1, r6
 8003822:	4168      	adcs	r0, r5
 8003824:	4079      	eors	r1, r7
 8003826:	4078      	eors	r0, r7
 8003828:	4064      	eors	r4, r4
 800382a:	107f      	asrs	r7, r7, #1
 800382c:	4151      	adcs	r1, r2
 800382e:	4142      	adcs	r2, r0
 8003830:	4167      	adcs	r7, r4
 8003832:	4640      	mov	r0, r8
 8003834:	1809      	adds	r1, r1, r0
 8003836:	415a      	adcs	r2, r3
 8003838:	417b      	adcs	r3, r7
 800383a:	bc30      	pop	{r4, r5}
 800383c:	4666      	mov	r6, ip
 800383e:	4667      	mov	r7, ip
 8003840:	4070      	eors	r0, r6
 8003842:	4071      	eors	r1, r6
 8003844:	4072      	eors	r2, r6
 8003846:	4073      	eors	r3, r6
 8003848:	1076      	asrs	r6, r6, #1
 800384a:	4160      	adcs	r0, r4
 800384c:	4169      	adcs	r1, r5
 800384e:	4154      	adcs	r4, r2
 8003850:	415d      	adcs	r5, r3
 8003852:	4052      	eors	r2, r2
 8003854:	4156      	adcs	r6, r2
 8003856:	4157      	adcs	r7, r2
 8003858:	bc0c      	pop	{r2, r3}
 800385a:	4690      	mov	r8, r2
 800385c:	4699      	mov	r9, r3
 800385e:	1812      	adds	r2, r2, r0
 8003860:	414b      	adcs	r3, r1
 8003862:	4650      	mov	r0, sl
 8003864:	4659      	mov	r1, fp
 8003866:	4144      	adcs	r4, r0
 8003868:	414d      	adcs	r5, r1
 800386a:	4146      	adcs	r6, r0
 800386c:	414f      	adcs	r7, r1
 800386e:	bc01      	pop	{r0}
 8003870:	c00c      	stmia	r0!, {r2, r3}
 8003872:	bc06      	pop	{r1, r2}
 8003874:	b401      	push	{r0}
 8003876:	b4f0      	push	{r4, r5, r6, r7}
 8003878:	468a      	mov	sl, r1
 800387a:	4693      	mov	fp, r2
 800387c:	c930      	ldmia	r1!, {r4, r5}
 800387e:	ca0c      	ldmia	r2, {r2, r3}
 8003880:	462e      	mov	r6, r5
 8003882:	4611      	mov	r1, r2
 8003884:	1b2d      	subs	r5, r5, r4
 8003886:	4180      	sbcs	r0, r0
 8003888:	4045      	eors	r5, r0
 800388a:	1a2d      	subs	r5, r5, r0
 800388c:	1ac9      	subs	r1, r1, r3
 800388e:	41bf      	sbcs	r7, r7
 8003890:	4079      	eors	r1, r7
 8003892:	1bc9      	subs	r1, r1, r7
 8003894:	4047      	eors	r7, r0
 8003896:	4689      	mov	r9, r1
 8003898:	46a8      	mov	r8, r5
 800389a:	0c21      	lsrs	r1, r4, #16
 800389c:	b2a4      	uxth	r4, r4
 800389e:	4620      	mov	r0, r4
 80038a0:	b295      	uxth	r5, r2
 80038a2:	0c12      	lsrs	r2, r2, #16
 80038a4:	4368      	muls	r0, r5
 80038a6:	434d      	muls	r5, r1
 80038a8:	4354      	muls	r4, r2
 80038aa:	4351      	muls	r1, r2
 80038ac:	0422      	lsls	r2, r4, #16
 80038ae:	0c24      	lsrs	r4, r4, #16
 80038b0:	1880      	adds	r0, r0, r2
 80038b2:	4161      	adcs	r1, r4
 80038b4:	042a      	lsls	r2, r5, #16
 80038b6:	0c2c      	lsrs	r4, r5, #16
 80038b8:	1880      	adds	r0, r0, r2
 80038ba:	4161      	adcs	r1, r4
 80038bc:	0c34      	lsrs	r4, r6, #16
 80038be:	b2b6      	uxth	r6, r6
 80038c0:	b29d      	uxth	r5, r3
 80038c2:	0c1b      	lsrs	r3, r3, #16
 80038c4:	4632      	mov	r2, r6
 80038c6:	436a      	muls	r2, r5
 80038c8:	4365      	muls	r5, r4
 80038ca:	435e      	muls	r6, r3
 80038cc:	4363      	muls	r3, r4
 80038ce:	042c      	lsls	r4, r5, #16
 80038d0:	0c2d      	lsrs	r5, r5, #16
 80038d2:	1912      	adds	r2, r2, r4
 80038d4:	416b      	adcs	r3, r5
 80038d6:	0434      	lsls	r4, r6, #16
 80038d8:	0c35      	lsrs	r5, r6, #16
 80038da:	1912      	adds	r2, r2, r4
 80038dc:	416b      	adcs	r3, r5
 80038de:	4076      	eors	r6, r6
 80038e0:	1852      	adds	r2, r2, r1
 80038e2:	4173      	adcs	r3, r6
 80038e4:	4649      	mov	r1, r9
 80038e6:	4645      	mov	r5, r8
 80038e8:	4680      	mov	r8, r0
 80038ea:	0c08      	lsrs	r0, r1, #16
 80038ec:	b289      	uxth	r1, r1
 80038ee:	460c      	mov	r4, r1
 80038f0:	0c2e      	lsrs	r6, r5, #16
 80038f2:	b2ad      	uxth	r5, r5
 80038f4:	4369      	muls	r1, r5
 80038f6:	4374      	muls	r4, r6
 80038f8:	4345      	muls	r5, r0
 80038fa:	4370      	muls	r0, r6
 80038fc:	0426      	lsls	r6, r4, #16
 80038fe:	0c24      	lsrs	r4, r4, #16
 8003900:	1989      	adds	r1, r1, r6
 8003902:	4160      	adcs	r0, r4
 8003904:	042e      	lsls	r6, r5, #16
 8003906:	0c2d      	lsrs	r5, r5, #16
 8003908:	1989      	adds	r1, r1, r6
 800390a:	4168      	adcs	r0, r5
 800390c:	4079      	eors	r1, r7
 800390e:	4078      	eors	r0, r7
 8003910:	4064      	eors	r4, r4
 8003912:	107f      	asrs	r7, r7, #1
 8003914:	4151      	adcs	r1, r2
 8003916:	4142      	adcs	r2, r0
 8003918:	4167      	adcs	r7, r4
 800391a:	4640      	mov	r0, r8
 800391c:	1809      	adds	r1, r1, r0
 800391e:	415a      	adcs	r2, r3
 8003920:	417b      	adcs	r3, r7
 8003922:	b403      	push	{r0, r1}
 8003924:	4651      	mov	r1, sl
 8003926:	4692      	mov	sl, r2
 8003928:	c933      	ldmia	r1, {r0, r1, r4, r5}
 800392a:	4622      	mov	r2, r4
 800392c:	462f      	mov	r7, r5
 800392e:	1a12      	subs	r2, r2, r0
 8003930:	418f      	sbcs	r7, r1
 8003932:	41b6      	sbcs	r6, r6
 8003934:	4072      	eors	r2, r6
 8003936:	4077      	eors	r7, r6
 8003938:	1b92      	subs	r2, r2, r6
 800393a:	41b7      	sbcs	r7, r6
 800393c:	b484      	push	{r2, r7}
 800393e:	465a      	mov	r2, fp
 8003940:	469b      	mov	fp, r3
 8003942:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8003944:	1a80      	subs	r0, r0, r2
 8003946:	4199      	sbcs	r1, r3
 8003948:	41bf      	sbcs	r7, r7
 800394a:	4078      	eors	r0, r7
 800394c:	4079      	eors	r1, r7
 800394e:	1bc0      	subs	r0, r0, r7
 8003950:	41b9      	sbcs	r1, r7
 8003952:	4077      	eors	r7, r6
 8003954:	46bc      	mov	ip, r7
 8003956:	b403      	push	{r0, r1}
 8003958:	462e      	mov	r6, r5
 800395a:	4611      	mov	r1, r2
 800395c:	1b2d      	subs	r5, r5, r4
 800395e:	4180      	sbcs	r0, r0
 8003960:	4045      	eors	r5, r0
 8003962:	1a2d      	subs	r5, r5, r0
 8003964:	1ac9      	subs	r1, r1, r3
 8003966:	41bf      	sbcs	r7, r7
 8003968:	4079      	eors	r1, r7
 800396a:	1bc9      	subs	r1, r1, r7
 800396c:	4047      	eors	r7, r0
 800396e:	4689      	mov	r9, r1
 8003970:	46a8      	mov	r8, r5
 8003972:	0c21      	lsrs	r1, r4, #16
 8003974:	b2a4      	uxth	r4, r4
 8003976:	4620      	mov	r0, r4
 8003978:	b295      	uxth	r5, r2
 800397a:	0c12      	lsrs	r2, r2, #16
 800397c:	4368      	muls	r0, r5
 800397e:	434d      	muls	r5, r1
 8003980:	4354      	muls	r4, r2
 8003982:	4351      	muls	r1, r2
 8003984:	0422      	lsls	r2, r4, #16
 8003986:	0c24      	lsrs	r4, r4, #16
 8003988:	1880      	adds	r0, r0, r2
 800398a:	4161      	adcs	r1, r4
 800398c:	042a      	lsls	r2, r5, #16
 800398e:	0c2c      	lsrs	r4, r5, #16
 8003990:	1880      	adds	r0, r0, r2
 8003992:	4161      	adcs	r1, r4
 8003994:	0c34      	lsrs	r4, r6, #16
 8003996:	b2b6      	uxth	r6, r6
 8003998:	b29d      	uxth	r5, r3
 800399a:	0c1b      	lsrs	r3, r3, #16
 800399c:	4632      	mov	r2, r6
 800399e:	436a      	muls	r2, r5
 80039a0:	4365      	muls	r5, r4
 80039a2:	435e      	muls	r6, r3
 80039a4:	4363      	muls	r3, r4
 80039a6:	042c      	lsls	r4, r5, #16
 80039a8:	0c2d      	lsrs	r5, r5, #16
 80039aa:	1912      	adds	r2, r2, r4
 80039ac:	416b      	adcs	r3, r5
 80039ae:	0434      	lsls	r4, r6, #16
 80039b0:	0c35      	lsrs	r5, r6, #16
 80039b2:	1912      	adds	r2, r2, r4
 80039b4:	416b      	adcs	r3, r5
 80039b6:	4076      	eors	r6, r6
 80039b8:	1852      	adds	r2, r2, r1
 80039ba:	4173      	adcs	r3, r6
 80039bc:	4649      	mov	r1, r9
 80039be:	4645      	mov	r5, r8
 80039c0:	4680      	mov	r8, r0
 80039c2:	0c08      	lsrs	r0, r1, #16
 80039c4:	b289      	uxth	r1, r1
 80039c6:	460c      	mov	r4, r1
 80039c8:	0c2e      	lsrs	r6, r5, #16
 80039ca:	b2ad      	uxth	r5, r5
 80039cc:	4369      	muls	r1, r5
 80039ce:	4374      	muls	r4, r6
 80039d0:	4345      	muls	r5, r0
 80039d2:	4370      	muls	r0, r6
 80039d4:	0426      	lsls	r6, r4, #16
 80039d6:	0c24      	lsrs	r4, r4, #16
 80039d8:	1989      	adds	r1, r1, r6
 80039da:	4160      	adcs	r0, r4
 80039dc:	042e      	lsls	r6, r5, #16
 80039de:	0c2d      	lsrs	r5, r5, #16
 80039e0:	1989      	adds	r1, r1, r6
 80039e2:	4168      	adcs	r0, r5
 80039e4:	4079      	eors	r1, r7
 80039e6:	4078      	eors	r0, r7
 80039e8:	4064      	eors	r4, r4
 80039ea:	107f      	asrs	r7, r7, #1
 80039ec:	4151      	adcs	r1, r2
 80039ee:	4142      	adcs	r2, r0
 80039f0:	4167      	adcs	r7, r4
 80039f2:	4640      	mov	r0, r8
 80039f4:	1809      	adds	r1, r1, r0
 80039f6:	415a      	adcs	r2, r3
 80039f8:	417b      	adcs	r3, r7
 80039fa:	4654      	mov	r4, sl
 80039fc:	465d      	mov	r5, fp
 80039fe:	4076      	eors	r6, r6
 8003a00:	1900      	adds	r0, r0, r4
 8003a02:	4169      	adcs	r1, r5
 8003a04:	4172      	adcs	r2, r6
 8003a06:	4173      	adcs	r3, r6
 8003a08:	4692      	mov	sl, r2
 8003a0a:	469b      	mov	fp, r3
 8003a0c:	bc3c      	pop	{r2, r3, r4, r5}
 8003a0e:	b403      	push	{r0, r1}
 8003a10:	462e      	mov	r6, r5
 8003a12:	4611      	mov	r1, r2
 8003a14:	1b2d      	subs	r5, r5, r4
 8003a16:	4180      	sbcs	r0, r0
 8003a18:	4045      	eors	r5, r0
 8003a1a:	1a2d      	subs	r5, r5, r0
 8003a1c:	1ac9      	subs	r1, r1, r3
 8003a1e:	41bf      	sbcs	r7, r7
 8003a20:	4079      	eors	r1, r7
 8003a22:	1bc9      	subs	r1, r1, r7
 8003a24:	4047      	eors	r7, r0
 8003a26:	4689      	mov	r9, r1
 8003a28:	46a8      	mov	r8, r5
 8003a2a:	0c21      	lsrs	r1, r4, #16
 8003a2c:	b2a4      	uxth	r4, r4
 8003a2e:	4620      	mov	r0, r4
 8003a30:	b295      	uxth	r5, r2
 8003a32:	0c12      	lsrs	r2, r2, #16
 8003a34:	4368      	muls	r0, r5
 8003a36:	434d      	muls	r5, r1
 8003a38:	4354      	muls	r4, r2
 8003a3a:	4351      	muls	r1, r2
 8003a3c:	0422      	lsls	r2, r4, #16
 8003a3e:	0c24      	lsrs	r4, r4, #16
 8003a40:	1880      	adds	r0, r0, r2
 8003a42:	4161      	adcs	r1, r4
 8003a44:	042a      	lsls	r2, r5, #16
 8003a46:	0c2c      	lsrs	r4, r5, #16
 8003a48:	1880      	adds	r0, r0, r2
 8003a4a:	4161      	adcs	r1, r4
 8003a4c:	0c34      	lsrs	r4, r6, #16
 8003a4e:	b2b6      	uxth	r6, r6
 8003a50:	b29d      	uxth	r5, r3
 8003a52:	0c1b      	lsrs	r3, r3, #16
 8003a54:	4632      	mov	r2, r6
 8003a56:	436a      	muls	r2, r5
 8003a58:	4365      	muls	r5, r4
 8003a5a:	435e      	muls	r6, r3
 8003a5c:	4363      	muls	r3, r4
 8003a5e:	042c      	lsls	r4, r5, #16
 8003a60:	0c2d      	lsrs	r5, r5, #16
 8003a62:	1912      	adds	r2, r2, r4
 8003a64:	416b      	adcs	r3, r5
 8003a66:	0434      	lsls	r4, r6, #16
 8003a68:	0c35      	lsrs	r5, r6, #16
 8003a6a:	1912      	adds	r2, r2, r4
 8003a6c:	416b      	adcs	r3, r5
 8003a6e:	4076      	eors	r6, r6
 8003a70:	1852      	adds	r2, r2, r1
 8003a72:	4173      	adcs	r3, r6
 8003a74:	4649      	mov	r1, r9
 8003a76:	4645      	mov	r5, r8
 8003a78:	4680      	mov	r8, r0
 8003a7a:	0c08      	lsrs	r0, r1, #16
 8003a7c:	b289      	uxth	r1, r1
 8003a7e:	460c      	mov	r4, r1
 8003a80:	0c2e      	lsrs	r6, r5, #16
 8003a82:	b2ad      	uxth	r5, r5
 8003a84:	4369      	muls	r1, r5
 8003a86:	4374      	muls	r4, r6
 8003a88:	4345      	muls	r5, r0
 8003a8a:	4370      	muls	r0, r6
 8003a8c:	0426      	lsls	r6, r4, #16
 8003a8e:	0c24      	lsrs	r4, r4, #16
 8003a90:	1989      	adds	r1, r1, r6
 8003a92:	4160      	adcs	r0, r4
 8003a94:	042e      	lsls	r6, r5, #16
 8003a96:	0c2d      	lsrs	r5, r5, #16
 8003a98:	1989      	adds	r1, r1, r6
 8003a9a:	4168      	adcs	r0, r5
 8003a9c:	4079      	eors	r1, r7
 8003a9e:	4078      	eors	r0, r7
 8003aa0:	4064      	eors	r4, r4
 8003aa2:	107f      	asrs	r7, r7, #1
 8003aa4:	4151      	adcs	r1, r2
 8003aa6:	4142      	adcs	r2, r0
 8003aa8:	4167      	adcs	r7, r4
 8003aaa:	4640      	mov	r0, r8
 8003aac:	1809      	adds	r1, r1, r0
 8003aae:	415a      	adcs	r2, r3
 8003ab0:	417b      	adcs	r3, r7
 8003ab2:	bc30      	pop	{r4, r5}
 8003ab4:	4666      	mov	r6, ip
 8003ab6:	4667      	mov	r7, ip
 8003ab8:	4070      	eors	r0, r6
 8003aba:	4071      	eors	r1, r6
 8003abc:	4072      	eors	r2, r6
 8003abe:	4073      	eors	r3, r6
 8003ac0:	1076      	asrs	r6, r6, #1
 8003ac2:	4160      	adcs	r0, r4
 8003ac4:	4169      	adcs	r1, r5
 8003ac6:	4154      	adcs	r4, r2
 8003ac8:	415d      	adcs	r5, r3
 8003aca:	4052      	eors	r2, r2
 8003acc:	4156      	adcs	r6, r2
 8003ace:	4157      	adcs	r7, r2
 8003ad0:	bc0c      	pop	{r2, r3}
 8003ad2:	4690      	mov	r8, r2
 8003ad4:	4699      	mov	r9, r3
 8003ad6:	1812      	adds	r2, r2, r0
 8003ad8:	414b      	adcs	r3, r1
 8003ada:	4650      	mov	r0, sl
 8003adc:	4659      	mov	r1, fp
 8003ade:	4144      	adcs	r4, r0
 8003ae0:	414d      	adcs	r5, r1
 8003ae2:	4146      	adcs	r6, r0
 8003ae4:	414f      	adcs	r7, r1
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	4649      	mov	r1, r9
 8003aea:	46b0      	mov	r8, r6
 8003aec:	46b9      	mov	r9, r7
 8003aee:	bcc0      	pop	{r6, r7}
 8003af0:	1980      	adds	r0, r0, r6
 8003af2:	4179      	adcs	r1, r7
 8003af4:	bcc0      	pop	{r6, r7}
 8003af6:	4172      	adcs	r2, r6
 8003af8:	417b      	adcs	r3, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003afe:	46ba      	mov	sl, r7
 8003b00:	4040      	eors	r0, r0
 8003b02:	4646      	mov	r6, r8
 8003b04:	464f      	mov	r7, r9
 8003b06:	4144      	adcs	r4, r0
 8003b08:	4145      	adcs	r5, r0
 8003b0a:	4146      	adcs	r6, r0
 8003b0c:	4147      	adcs	r7, r0
 8003b0e:	bc07      	pop	{r0, r1, r2}
 8003b10:	4694      	mov	ip, r2
 8003b12:	b4f1      	push	{r0, r4, r5, r6, r7}
 8003b14:	c9ff      	ldmia	r1, {r0, r1, r2, r3, r4, r5, r6, r7}
 8003b16:	1b00      	subs	r0, r0, r4
 8003b18:	41a9      	sbcs	r1, r5
 8003b1a:	41b2      	sbcs	r2, r6
 8003b1c:	41bb      	sbcs	r3, r7
 8003b1e:	4064      	eors	r4, r4
 8003b20:	41a4      	sbcs	r4, r4
 8003b22:	4060      	eors	r0, r4
 8003b24:	4061      	eors	r1, r4
 8003b26:	4062      	eors	r2, r4
 8003b28:	4063      	eors	r3, r4
 8003b2a:	1b00      	subs	r0, r0, r4
 8003b2c:	41a1      	sbcs	r1, r4
 8003b2e:	41a2      	sbcs	r2, r4
 8003b30:	41a3      	sbcs	r3, r4
 8003b32:	4666      	mov	r6, ip
 8003b34:	46a4      	mov	ip, r4
 8003b36:	4655      	mov	r5, sl
 8003b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b3a:	46ab      	mov	fp, r5
 8003b3c:	4680      	mov	r8, r0
 8003b3e:	4689      	mov	r9, r1
 8003b40:	ceff      	ldmia	r6, {r0, r1, r2, r3, r4, r5, r6, r7}
 8003b42:	1a24      	subs	r4, r4, r0
 8003b44:	418d      	sbcs	r5, r1
 8003b46:	4196      	sbcs	r6, r2
 8003b48:	419f      	sbcs	r7, r3
 8003b4a:	4040      	eors	r0, r0
 8003b4c:	4180      	sbcs	r0, r0
 8003b4e:	4044      	eors	r4, r0
 8003b50:	4045      	eors	r5, r0
 8003b52:	4046      	eors	r6, r0
 8003b54:	4047      	eors	r7, r0
 8003b56:	1a24      	subs	r4, r4, r0
 8003b58:	4185      	sbcs	r5, r0
 8003b5a:	4186      	sbcs	r6, r0
 8003b5c:	4187      	sbcs	r7, r0
 8003b5e:	4661      	mov	r1, ip
 8003b60:	4048      	eors	r0, r1
 8003b62:	4659      	mov	r1, fp
 8003b64:	c1f0      	stmia	r1!, {r4, r5, r6, r7}
 8003b66:	b401      	push	{r0}
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	462e      	mov	r6, r5
 8003b6e:	4611      	mov	r1, r2
 8003b70:	1b2d      	subs	r5, r5, r4
 8003b72:	4180      	sbcs	r0, r0
 8003b74:	4045      	eors	r5, r0
 8003b76:	1a2d      	subs	r5, r5, r0
 8003b78:	1ac9      	subs	r1, r1, r3
 8003b7a:	41bf      	sbcs	r7, r7
 8003b7c:	4079      	eors	r1, r7
 8003b7e:	1bc9      	subs	r1, r1, r7
 8003b80:	4047      	eors	r7, r0
 8003b82:	4689      	mov	r9, r1
 8003b84:	46a8      	mov	r8, r5
 8003b86:	0c21      	lsrs	r1, r4, #16
 8003b88:	b2a4      	uxth	r4, r4
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	b295      	uxth	r5, r2
 8003b8e:	0c12      	lsrs	r2, r2, #16
 8003b90:	4368      	muls	r0, r5
 8003b92:	434d      	muls	r5, r1
 8003b94:	4354      	muls	r4, r2
 8003b96:	4351      	muls	r1, r2
 8003b98:	0422      	lsls	r2, r4, #16
 8003b9a:	0c24      	lsrs	r4, r4, #16
 8003b9c:	1880      	adds	r0, r0, r2
 8003b9e:	4161      	adcs	r1, r4
 8003ba0:	042a      	lsls	r2, r5, #16
 8003ba2:	0c2c      	lsrs	r4, r5, #16
 8003ba4:	1880      	adds	r0, r0, r2
 8003ba6:	4161      	adcs	r1, r4
 8003ba8:	0c34      	lsrs	r4, r6, #16
 8003baa:	b2b6      	uxth	r6, r6
 8003bac:	b29d      	uxth	r5, r3
 8003bae:	0c1b      	lsrs	r3, r3, #16
 8003bb0:	4632      	mov	r2, r6
 8003bb2:	436a      	muls	r2, r5
 8003bb4:	4365      	muls	r5, r4
 8003bb6:	435e      	muls	r6, r3
 8003bb8:	4363      	muls	r3, r4
 8003bba:	042c      	lsls	r4, r5, #16
 8003bbc:	0c2d      	lsrs	r5, r5, #16
 8003bbe:	1912      	adds	r2, r2, r4
 8003bc0:	416b      	adcs	r3, r5
 8003bc2:	0434      	lsls	r4, r6, #16
 8003bc4:	0c35      	lsrs	r5, r6, #16
 8003bc6:	1912      	adds	r2, r2, r4
 8003bc8:	416b      	adcs	r3, r5
 8003bca:	4076      	eors	r6, r6
 8003bcc:	1852      	adds	r2, r2, r1
 8003bce:	4173      	adcs	r3, r6
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	4645      	mov	r5, r8
 8003bd4:	4680      	mov	r8, r0
 8003bd6:	0c08      	lsrs	r0, r1, #16
 8003bd8:	b289      	uxth	r1, r1
 8003bda:	460c      	mov	r4, r1
 8003bdc:	0c2e      	lsrs	r6, r5, #16
 8003bde:	b2ad      	uxth	r5, r5
 8003be0:	4369      	muls	r1, r5
 8003be2:	4374      	muls	r4, r6
 8003be4:	4345      	muls	r5, r0
 8003be6:	4370      	muls	r0, r6
 8003be8:	0426      	lsls	r6, r4, #16
 8003bea:	0c24      	lsrs	r4, r4, #16
 8003bec:	1989      	adds	r1, r1, r6
 8003bee:	4160      	adcs	r0, r4
 8003bf0:	042e      	lsls	r6, r5, #16
 8003bf2:	0c2d      	lsrs	r5, r5, #16
 8003bf4:	1989      	adds	r1, r1, r6
 8003bf6:	4168      	adcs	r0, r5
 8003bf8:	4079      	eors	r1, r7
 8003bfa:	4078      	eors	r0, r7
 8003bfc:	4064      	eors	r4, r4
 8003bfe:	107f      	asrs	r7, r7, #1
 8003c00:	4151      	adcs	r1, r2
 8003c02:	4142      	adcs	r2, r0
 8003c04:	4167      	adcs	r7, r4
 8003c06:	4640      	mov	r0, r8
 8003c08:	1809      	adds	r1, r1, r0
 8003c0a:	415a      	adcs	r2, r3
 8003c0c:	417b      	adcs	r3, r7
 8003c0e:	b403      	push	{r0, r1}
 8003c10:	4651      	mov	r1, sl
 8003c12:	4692      	mov	sl, r2
 8003c14:	c933      	ldmia	r1, {r0, r1, r4, r5}
 8003c16:	4622      	mov	r2, r4
 8003c18:	462f      	mov	r7, r5
 8003c1a:	1a12      	subs	r2, r2, r0
 8003c1c:	418f      	sbcs	r7, r1
 8003c1e:	41b6      	sbcs	r6, r6
 8003c20:	4072      	eors	r2, r6
 8003c22:	4077      	eors	r7, r6
 8003c24:	1b92      	subs	r2, r2, r6
 8003c26:	41b7      	sbcs	r7, r6
 8003c28:	b484      	push	{r2, r7}
 8003c2a:	465a      	mov	r2, fp
 8003c2c:	469b      	mov	fp, r3
 8003c2e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8003c30:	1a80      	subs	r0, r0, r2
 8003c32:	4199      	sbcs	r1, r3
 8003c34:	41bf      	sbcs	r7, r7
 8003c36:	4078      	eors	r0, r7
 8003c38:	4079      	eors	r1, r7
 8003c3a:	1bc0      	subs	r0, r0, r7
 8003c3c:	41b9      	sbcs	r1, r7
 8003c3e:	4077      	eors	r7, r6
 8003c40:	46bc      	mov	ip, r7
 8003c42:	b403      	push	{r0, r1}
 8003c44:	462e      	mov	r6, r5
 8003c46:	4611      	mov	r1, r2
 8003c48:	1b2d      	subs	r5, r5, r4
 8003c4a:	4180      	sbcs	r0, r0
 8003c4c:	4045      	eors	r5, r0
 8003c4e:	1a2d      	subs	r5, r5, r0
 8003c50:	1ac9      	subs	r1, r1, r3
 8003c52:	41bf      	sbcs	r7, r7
 8003c54:	4079      	eors	r1, r7
 8003c56:	1bc9      	subs	r1, r1, r7
 8003c58:	4047      	eors	r7, r0
 8003c5a:	4689      	mov	r9, r1
 8003c5c:	46a8      	mov	r8, r5
 8003c5e:	0c21      	lsrs	r1, r4, #16
 8003c60:	b2a4      	uxth	r4, r4
 8003c62:	4620      	mov	r0, r4
 8003c64:	b295      	uxth	r5, r2
 8003c66:	0c12      	lsrs	r2, r2, #16
 8003c68:	4368      	muls	r0, r5
 8003c6a:	434d      	muls	r5, r1
 8003c6c:	4354      	muls	r4, r2
 8003c6e:	4351      	muls	r1, r2
 8003c70:	0422      	lsls	r2, r4, #16
 8003c72:	0c24      	lsrs	r4, r4, #16
 8003c74:	1880      	adds	r0, r0, r2
 8003c76:	4161      	adcs	r1, r4
 8003c78:	042a      	lsls	r2, r5, #16
 8003c7a:	0c2c      	lsrs	r4, r5, #16
 8003c7c:	1880      	adds	r0, r0, r2
 8003c7e:	4161      	adcs	r1, r4
 8003c80:	0c34      	lsrs	r4, r6, #16
 8003c82:	b2b6      	uxth	r6, r6
 8003c84:	b29d      	uxth	r5, r3
 8003c86:	0c1b      	lsrs	r3, r3, #16
 8003c88:	4632      	mov	r2, r6
 8003c8a:	436a      	muls	r2, r5
 8003c8c:	4365      	muls	r5, r4
 8003c8e:	435e      	muls	r6, r3
 8003c90:	4363      	muls	r3, r4
 8003c92:	042c      	lsls	r4, r5, #16
 8003c94:	0c2d      	lsrs	r5, r5, #16
 8003c96:	1912      	adds	r2, r2, r4
 8003c98:	416b      	adcs	r3, r5
 8003c9a:	0434      	lsls	r4, r6, #16
 8003c9c:	0c35      	lsrs	r5, r6, #16
 8003c9e:	1912      	adds	r2, r2, r4
 8003ca0:	416b      	adcs	r3, r5
 8003ca2:	4076      	eors	r6, r6
 8003ca4:	1852      	adds	r2, r2, r1
 8003ca6:	4173      	adcs	r3, r6
 8003ca8:	4649      	mov	r1, r9
 8003caa:	4645      	mov	r5, r8
 8003cac:	4680      	mov	r8, r0
 8003cae:	0c08      	lsrs	r0, r1, #16
 8003cb0:	b289      	uxth	r1, r1
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	0c2e      	lsrs	r6, r5, #16
 8003cb6:	b2ad      	uxth	r5, r5
 8003cb8:	4369      	muls	r1, r5
 8003cba:	4374      	muls	r4, r6
 8003cbc:	4345      	muls	r5, r0
 8003cbe:	4370      	muls	r0, r6
 8003cc0:	0426      	lsls	r6, r4, #16
 8003cc2:	0c24      	lsrs	r4, r4, #16
 8003cc4:	1989      	adds	r1, r1, r6
 8003cc6:	4160      	adcs	r0, r4
 8003cc8:	042e      	lsls	r6, r5, #16
 8003cca:	0c2d      	lsrs	r5, r5, #16
 8003ccc:	1989      	adds	r1, r1, r6
 8003cce:	4168      	adcs	r0, r5
 8003cd0:	4079      	eors	r1, r7
 8003cd2:	4078      	eors	r0, r7
 8003cd4:	4064      	eors	r4, r4
 8003cd6:	107f      	asrs	r7, r7, #1
 8003cd8:	4151      	adcs	r1, r2
 8003cda:	4142      	adcs	r2, r0
 8003cdc:	4167      	adcs	r7, r4
 8003cde:	4640      	mov	r0, r8
 8003ce0:	1809      	adds	r1, r1, r0
 8003ce2:	415a      	adcs	r2, r3
 8003ce4:	417b      	adcs	r3, r7
 8003ce6:	4654      	mov	r4, sl
 8003ce8:	465d      	mov	r5, fp
 8003cea:	4076      	eors	r6, r6
 8003cec:	1900      	adds	r0, r0, r4
 8003cee:	4169      	adcs	r1, r5
 8003cf0:	4172      	adcs	r2, r6
 8003cf2:	4173      	adcs	r3, r6
 8003cf4:	4692      	mov	sl, r2
 8003cf6:	469b      	mov	fp, r3
 8003cf8:	bc3c      	pop	{r2, r3, r4, r5}
 8003cfa:	b403      	push	{r0, r1}
 8003cfc:	462e      	mov	r6, r5
 8003cfe:	4611      	mov	r1, r2
 8003d00:	1b2d      	subs	r5, r5, r4
 8003d02:	4180      	sbcs	r0, r0
 8003d04:	4045      	eors	r5, r0
 8003d06:	1a2d      	subs	r5, r5, r0
 8003d08:	1ac9      	subs	r1, r1, r3
 8003d0a:	41bf      	sbcs	r7, r7
 8003d0c:	4079      	eors	r1, r7
 8003d0e:	1bc9      	subs	r1, r1, r7
 8003d10:	4047      	eors	r7, r0
 8003d12:	4689      	mov	r9, r1
 8003d14:	46a8      	mov	r8, r5
 8003d16:	0c21      	lsrs	r1, r4, #16
 8003d18:	b2a4      	uxth	r4, r4
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	b295      	uxth	r5, r2
 8003d1e:	0c12      	lsrs	r2, r2, #16
 8003d20:	4368      	muls	r0, r5
 8003d22:	434d      	muls	r5, r1
 8003d24:	4354      	muls	r4, r2
 8003d26:	4351      	muls	r1, r2
 8003d28:	0422      	lsls	r2, r4, #16
 8003d2a:	0c24      	lsrs	r4, r4, #16
 8003d2c:	1880      	adds	r0, r0, r2
 8003d2e:	4161      	adcs	r1, r4
 8003d30:	042a      	lsls	r2, r5, #16
 8003d32:	0c2c      	lsrs	r4, r5, #16
 8003d34:	1880      	adds	r0, r0, r2
 8003d36:	4161      	adcs	r1, r4
 8003d38:	0c34      	lsrs	r4, r6, #16
 8003d3a:	b2b6      	uxth	r6, r6
 8003d3c:	b29d      	uxth	r5, r3
 8003d3e:	0c1b      	lsrs	r3, r3, #16
 8003d40:	4632      	mov	r2, r6
 8003d42:	436a      	muls	r2, r5
 8003d44:	4365      	muls	r5, r4
 8003d46:	435e      	muls	r6, r3
 8003d48:	4363      	muls	r3, r4
 8003d4a:	042c      	lsls	r4, r5, #16
 8003d4c:	0c2d      	lsrs	r5, r5, #16
 8003d4e:	1912      	adds	r2, r2, r4
 8003d50:	416b      	adcs	r3, r5
 8003d52:	0434      	lsls	r4, r6, #16
 8003d54:	0c35      	lsrs	r5, r6, #16
 8003d56:	1912      	adds	r2, r2, r4
 8003d58:	416b      	adcs	r3, r5
 8003d5a:	4076      	eors	r6, r6
 8003d5c:	1852      	adds	r2, r2, r1
 8003d5e:	4173      	adcs	r3, r6
 8003d60:	4649      	mov	r1, r9
 8003d62:	4645      	mov	r5, r8
 8003d64:	4680      	mov	r8, r0
 8003d66:	0c08      	lsrs	r0, r1, #16
 8003d68:	b289      	uxth	r1, r1
 8003d6a:	460c      	mov	r4, r1
 8003d6c:	0c2e      	lsrs	r6, r5, #16
 8003d6e:	b2ad      	uxth	r5, r5
 8003d70:	4369      	muls	r1, r5
 8003d72:	4374      	muls	r4, r6
 8003d74:	4345      	muls	r5, r0
 8003d76:	4370      	muls	r0, r6
 8003d78:	0426      	lsls	r6, r4, #16
 8003d7a:	0c24      	lsrs	r4, r4, #16
 8003d7c:	1989      	adds	r1, r1, r6
 8003d7e:	4160      	adcs	r0, r4
 8003d80:	042e      	lsls	r6, r5, #16
 8003d82:	0c2d      	lsrs	r5, r5, #16
 8003d84:	1989      	adds	r1, r1, r6
 8003d86:	4168      	adcs	r0, r5
 8003d88:	4079      	eors	r1, r7
 8003d8a:	4078      	eors	r0, r7
 8003d8c:	4064      	eors	r4, r4
 8003d8e:	107f      	asrs	r7, r7, #1
 8003d90:	4151      	adcs	r1, r2
 8003d92:	4142      	adcs	r2, r0
 8003d94:	4167      	adcs	r7, r4
 8003d96:	4640      	mov	r0, r8
 8003d98:	1809      	adds	r1, r1, r0
 8003d9a:	415a      	adcs	r2, r3
 8003d9c:	417b      	adcs	r3, r7
 8003d9e:	bc30      	pop	{r4, r5}
 8003da0:	4666      	mov	r6, ip
 8003da2:	4667      	mov	r7, ip
 8003da4:	4070      	eors	r0, r6
 8003da6:	4071      	eors	r1, r6
 8003da8:	4072      	eors	r2, r6
 8003daa:	4073      	eors	r3, r6
 8003dac:	1076      	asrs	r6, r6, #1
 8003dae:	4160      	adcs	r0, r4
 8003db0:	4169      	adcs	r1, r5
 8003db2:	4154      	adcs	r4, r2
 8003db4:	415d      	adcs	r5, r3
 8003db6:	4052      	eors	r2, r2
 8003db8:	4156      	adcs	r6, r2
 8003dba:	4157      	adcs	r7, r2
 8003dbc:	bc0c      	pop	{r2, r3}
 8003dbe:	4690      	mov	r8, r2
 8003dc0:	4699      	mov	r9, r3
 8003dc2:	1812      	adds	r2, r2, r0
 8003dc4:	414b      	adcs	r3, r1
 8003dc6:	4650      	mov	r0, sl
 8003dc8:	4659      	mov	r1, fp
 8003dca:	4144      	adcs	r4, r0
 8003dcc:	414d      	adcs	r5, r1
 8003dce:	4146      	adcs	r6, r0
 8003dd0:	414f      	adcs	r7, r1
 8003dd2:	bc03      	pop	{r0, r1}
 8003dd4:	4684      	mov	ip, r0
 8003dd6:	4042      	eors	r2, r0
 8003dd8:	4043      	eors	r3, r0
 8003dda:	4044      	eors	r4, r0
 8003ddc:	4045      	eors	r5, r0
 8003dde:	4046      	eors	r6, r0
 8003de0:	4047      	eors	r7, r0
 8003de2:	b4f0      	push	{r4, r5, r6, r7}
 8003de4:	c9f0      	ldmia	r1!, {r4, r5, r6, r7}
 8003de6:	468b      	mov	fp, r1
 8003de8:	4649      	mov	r1, r9
 8003dea:	4041      	eors	r1, r0
 8003dec:	46a2      	mov	sl, r4
 8003dee:	4644      	mov	r4, r8
 8003df0:	1040      	asrs	r0, r0, #1
 8003df2:	4060      	eors	r0, r4
 8003df4:	4654      	mov	r4, sl
 8003df6:	4160      	adcs	r0, r4
 8003df8:	4169      	adcs	r1, r5
 8003dfa:	4172      	adcs	r2, r6
 8003dfc:	417b      	adcs	r3, r7
 8003dfe:	4064      	eors	r4, r4
 8003e00:	4164      	adcs	r4, r4
 8003e02:	46a2      	mov	sl, r4
 8003e04:	465c      	mov	r4, fp
 8003e06:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
 8003e08:	1900      	adds	r0, r0, r4
 8003e0a:	4169      	adcs	r1, r5
 8003e0c:	4172      	adcs	r2, r6
 8003e0e:	417b      	adcs	r3, r7
 8003e10:	46a1      	mov	r9, r4
 8003e12:	465c      	mov	r4, fp
 8003e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e16:	46a3      	mov	fp, r4
 8003e18:	bc0f      	pop	{r0, r1, r2, r3}
 8003e1a:	464c      	mov	r4, r9
 8003e1c:	4144      	adcs	r4, r0
 8003e1e:	414d      	adcs	r5, r1
 8003e20:	4156      	adcs	r6, r2
 8003e22:	415f      	adcs	r7, r3
 8003e24:	2100      	movs	r1, #0
 8003e26:	4149      	adcs	r1, r1
 8003e28:	4650      	mov	r0, sl
 8003e2a:	468a      	mov	sl, r1
 8003e2c:	1040      	asrs	r0, r0, #1
 8003e2e:	bc0f      	pop	{r0, r1, r2, r3}
 8003e30:	4144      	adcs	r4, r0
 8003e32:	414d      	adcs	r5, r1
 8003e34:	4156      	adcs	r6, r2
 8003e36:	415f      	adcs	r7, r3
 8003e38:	4680      	mov	r8, r0
 8003e3a:	4658      	mov	r0, fp
 8003e3c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003e3e:	4683      	mov	fp, r0
 8003e40:	4640      	mov	r0, r8
 8003e42:	4666      	mov	r6, ip
 8003e44:	4655      	mov	r5, sl
 8003e46:	4064      	eors	r4, r4
 8003e48:	4175      	adcs	r5, r6
 8003e4a:	4166      	adcs	r6, r4
 8003e4c:	1940      	adds	r0, r0, r5
 8003e4e:	4171      	adcs	r1, r6
 8003e50:	4172      	adcs	r2, r6
 8003e52:	4173      	adcs	r3, r6
 8003e54:	465f      	mov	r7, fp
 8003e56:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003e58:	bc78      	pop	{r3, r4, r5, r6}
 8003e5a:	4698      	mov	r8, r3
 8003e5c:	46a1      	mov	r9, r4
 8003e5e:	46aa      	mov	sl, r5
 8003e60:	46b3      	mov	fp, r6
 8003e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e64:	4770      	bx	lr

08003e66 <cmox_asm_sqr_fast256>:
 8003e66:	4601      	mov	r1, r0
 8003e68:	4610      	mov	r0, r2
 8003e6a:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 8003e6c:	4643      	mov	r3, r8
 8003e6e:	464c      	mov	r4, r9
 8003e70:	4655      	mov	r5, sl
 8003e72:	465e      	mov	r6, fp
 8003e74:	4667      	mov	r7, ip
 8003e76:	b4f8      	push	{r3, r4, r5, r6, r7}
 8003e78:	4686      	mov	lr, r0
 8003e7a:	c9f0      	ldmia	r1!, {r4, r5, r6, r7}
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	4629      	mov	r1, r5
 8003e80:	1b80      	subs	r0, r0, r6
 8003e82:	41b9      	sbcs	r1, r7
 8003e84:	4192      	sbcs	r2, r2
 8003e86:	4050      	eors	r0, r2
 8003e88:	4051      	eors	r1, r2
 8003e8a:	1a80      	subs	r0, r0, r2
 8003e8c:	4191      	sbcs	r1, r2
 8003e8e:	4680      	mov	r8, r0
 8003e90:	4689      	mov	r9, r1
 8003e92:	46b2      	mov	sl, r6
 8003e94:	b2a0      	uxth	r0, r4
 8003e96:	0c21      	lsrs	r1, r4, #16
 8003e98:	4602      	mov	r2, r0
 8003e9a:	434a      	muls	r2, r1
 8003e9c:	4340      	muls	r0, r0
 8003e9e:	4349      	muls	r1, r1
 8003ea0:	0bd3      	lsrs	r3, r2, #15
 8003ea2:	0452      	lsls	r2, r2, #17
 8003ea4:	1880      	adds	r0, r0, r2
 8003ea6:	4159      	adcs	r1, r3
 8003ea8:	1b64      	subs	r4, r4, r5
 8003eaa:	41b6      	sbcs	r6, r6
 8003eac:	4074      	eors	r4, r6
 8003eae:	1ba4      	subs	r4, r4, r6
 8003eb0:	b2aa      	uxth	r2, r5
 8003eb2:	0c2b      	lsrs	r3, r5, #16
 8003eb4:	4615      	mov	r5, r2
 8003eb6:	435d      	muls	r5, r3
 8003eb8:	4352      	muls	r2, r2
 8003eba:	435b      	muls	r3, r3
 8003ebc:	0bee      	lsrs	r6, r5, #15
 8003ebe:	046d      	lsls	r5, r5, #17
 8003ec0:	1952      	adds	r2, r2, r5
 8003ec2:	4173      	adcs	r3, r6
 8003ec4:	2600      	movs	r6, #0
 8003ec6:	1852      	adds	r2, r2, r1
 8003ec8:	4173      	adcs	r3, r6
 8003eca:	0c25      	lsrs	r5, r4, #16
 8003ecc:	b2a4      	uxth	r4, r4
 8003ece:	4621      	mov	r1, r4
 8003ed0:	4369      	muls	r1, r5
 8003ed2:	4364      	muls	r4, r4
 8003ed4:	436d      	muls	r5, r5
 8003ed6:	0bce      	lsrs	r6, r1, #15
 8003ed8:	0449      	lsls	r1, r1, #17
 8003eda:	1864      	adds	r4, r4, r1
 8003edc:	4175      	adcs	r5, r6
 8003ede:	4611      	mov	r1, r2
 8003ee0:	1b09      	subs	r1, r1, r4
 8003ee2:	41aa      	sbcs	r2, r5
 8003ee4:	461d      	mov	r5, r3
 8003ee6:	2600      	movs	r6, #0
 8003ee8:	41b3      	sbcs	r3, r6
 8003eea:	1809      	adds	r1, r1, r0
 8003eec:	416a      	adcs	r2, r5
 8003eee:	4173      	adcs	r3, r6
 8003ef0:	4656      	mov	r6, sl
 8003ef2:	4682      	mov	sl, r0
 8003ef4:	468b      	mov	fp, r1
 8003ef6:	4694      	mov	ip, r2
 8003ef8:	4619      	mov	r1, r3
 8003efa:	b2b2      	uxth	r2, r6
 8003efc:	0c33      	lsrs	r3, r6, #16
 8003efe:	4614      	mov	r4, r2
 8003f00:	435c      	muls	r4, r3
 8003f02:	4352      	muls	r2, r2
 8003f04:	435b      	muls	r3, r3
 8003f06:	0be5      	lsrs	r5, r4, #15
 8003f08:	0464      	lsls	r4, r4, #17
 8003f0a:	1912      	adds	r2, r2, r4
 8003f0c:	416b      	adcs	r3, r5
 8003f0e:	1bf6      	subs	r6, r6, r7
 8003f10:	41a4      	sbcs	r4, r4
 8003f12:	4066      	eors	r6, r4
 8003f14:	1b36      	subs	r6, r6, r4
 8003f16:	b2bc      	uxth	r4, r7
 8003f18:	0c3d      	lsrs	r5, r7, #16
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	4368      	muls	r0, r5
 8003f1e:	4364      	muls	r4, r4
 8003f20:	436d      	muls	r5, r5
 8003f22:	0bc7      	lsrs	r7, r0, #15
 8003f24:	0440      	lsls	r0, r0, #17
 8003f26:	1824      	adds	r4, r4, r0
 8003f28:	417d      	adcs	r5, r7
 8003f2a:	2700      	movs	r7, #0
 8003f2c:	18e4      	adds	r4, r4, r3
 8003f2e:	417d      	adcs	r5, r7
 8003f30:	b2b7      	uxth	r7, r6
 8003f32:	0c30      	lsrs	r0, r6, #16
 8003f34:	463e      	mov	r6, r7
 8003f36:	4346      	muls	r6, r0
 8003f38:	437f      	muls	r7, r7
 8003f3a:	4340      	muls	r0, r0
 8003f3c:	0bf3      	lsrs	r3, r6, #15
 8003f3e:	0476      	lsls	r6, r6, #17
 8003f40:	19bf      	adds	r7, r7, r6
 8003f42:	4158      	adcs	r0, r3
 8003f44:	4623      	mov	r3, r4
 8003f46:	1bdb      	subs	r3, r3, r7
 8003f48:	4184      	sbcs	r4, r0
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	2600      	movs	r6, #0
 8003f4e:	41b5      	sbcs	r5, r6
 8003f50:	189b      	adds	r3, r3, r2
 8003f52:	4144      	adcs	r4, r0
 8003f54:	4175      	adcs	r5, r6
 8003f56:	4660      	mov	r0, ip
 8003f58:	1812      	adds	r2, r2, r0
 8003f5a:	414b      	adcs	r3, r1
 8003f5c:	4174      	adcs	r4, r6
 8003f5e:	4175      	adcs	r5, r6
 8003f60:	4694      	mov	ip, r2
 8003f62:	4642      	mov	r2, r8
 8003f64:	4698      	mov	r8, r3
 8003f66:	464b      	mov	r3, r9
 8003f68:	46a1      	mov	r9, r4
 8003f6a:	b296      	uxth	r6, r2
 8003f6c:	0c17      	lsrs	r7, r2, #16
 8003f6e:	4630      	mov	r0, r6
 8003f70:	4378      	muls	r0, r7
 8003f72:	4376      	muls	r6, r6
 8003f74:	437f      	muls	r7, r7
 8003f76:	0bc1      	lsrs	r1, r0, #15
 8003f78:	0440      	lsls	r0, r0, #17
 8003f7a:	1836      	adds	r6, r6, r0
 8003f7c:	414f      	adcs	r7, r1
 8003f7e:	1ad2      	subs	r2, r2, r3
 8003f80:	41a4      	sbcs	r4, r4
 8003f82:	4062      	eors	r2, r4
 8003f84:	1b12      	subs	r2, r2, r4
 8003f86:	b298      	uxth	r0, r3
 8003f88:	0c19      	lsrs	r1, r3, #16
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	434b      	muls	r3, r1
 8003f8e:	4340      	muls	r0, r0
 8003f90:	4349      	muls	r1, r1
 8003f92:	0bdc      	lsrs	r4, r3, #15
 8003f94:	045b      	lsls	r3, r3, #17
 8003f96:	18c0      	adds	r0, r0, r3
 8003f98:	4161      	adcs	r1, r4
 8003f9a:	2400      	movs	r4, #0
 8003f9c:	19c0      	adds	r0, r0, r7
 8003f9e:	4161      	adcs	r1, r4
 8003fa0:	b293      	uxth	r3, r2
 8003fa2:	0c14      	lsrs	r4, r2, #16
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4362      	muls	r2, r4
 8003fa8:	435b      	muls	r3, r3
 8003faa:	4364      	muls	r4, r4
 8003fac:	0bd7      	lsrs	r7, r2, #15
 8003fae:	0452      	lsls	r2, r2, #17
 8003fb0:	189b      	adds	r3, r3, r2
 8003fb2:	417c      	adcs	r4, r7
 8003fb4:	4607      	mov	r7, r0
 8003fb6:	1aff      	subs	r7, r7, r3
 8003fb8:	41a0      	sbcs	r0, r4
 8003fba:	460a      	mov	r2, r1
 8003fbc:	2400      	movs	r4, #0
 8003fbe:	41a1      	sbcs	r1, r4
 8003fc0:	19bf      	adds	r7, r7, r6
 8003fc2:	4150      	adcs	r0, r2
 8003fc4:	4161      	adcs	r1, r4
 8003fc6:	4662      	mov	r2, ip
 8003fc8:	4643      	mov	r3, r8
 8003fca:	464c      	mov	r4, r9
 8003fcc:	1b92      	subs	r2, r2, r6
 8003fce:	41bb      	sbcs	r3, r7
 8003fd0:	4626      	mov	r6, r4
 8003fd2:	462f      	mov	r7, r5
 8003fd4:	4184      	sbcs	r4, r0
 8003fd6:	418d      	sbcs	r5, r1
 8003fd8:	2000      	movs	r0, #0
 8003fda:	4186      	sbcs	r6, r0
 8003fdc:	4187      	sbcs	r7, r0
 8003fde:	4650      	mov	r0, sl
 8003fe0:	1812      	adds	r2, r2, r0
 8003fe2:	4659      	mov	r1, fp
 8003fe4:	414b      	adcs	r3, r1
 8003fe6:	4660      	mov	r0, ip
 8003fe8:	4144      	adcs	r4, r0
 8003fea:	4640      	mov	r0, r8
 8003fec:	4145      	adcs	r5, r0
 8003fee:	2000      	movs	r0, #0
 8003ff0:	4146      	adcs	r6, r0
 8003ff2:	4147      	adcs	r7, r0
 8003ff4:	4650      	mov	r0, sl
 8003ff6:	b4f0      	push	{r4, r5, r6, r7}
 8003ff8:	4674      	mov	r4, lr
 8003ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ffc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003ffe:	3410      	adds	r4, #16
 8004000:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
 8004002:	4620      	mov	r0, r4
 8004004:	4629      	mov	r1, r5
 8004006:	1b80      	subs	r0, r0, r6
 8004008:	41b9      	sbcs	r1, r7
 800400a:	4192      	sbcs	r2, r2
 800400c:	4050      	eors	r0, r2
 800400e:	4051      	eors	r1, r2
 8004010:	1a80      	subs	r0, r0, r2
 8004012:	4191      	sbcs	r1, r2
 8004014:	4680      	mov	r8, r0
 8004016:	4689      	mov	r9, r1
 8004018:	46b2      	mov	sl, r6
 800401a:	b2a0      	uxth	r0, r4
 800401c:	0c21      	lsrs	r1, r4, #16
 800401e:	4602      	mov	r2, r0
 8004020:	434a      	muls	r2, r1
 8004022:	4340      	muls	r0, r0
 8004024:	4349      	muls	r1, r1
 8004026:	0bd3      	lsrs	r3, r2, #15
 8004028:	0452      	lsls	r2, r2, #17
 800402a:	1880      	adds	r0, r0, r2
 800402c:	4159      	adcs	r1, r3
 800402e:	1b64      	subs	r4, r4, r5
 8004030:	41b6      	sbcs	r6, r6
 8004032:	4074      	eors	r4, r6
 8004034:	1ba4      	subs	r4, r4, r6
 8004036:	b2aa      	uxth	r2, r5
 8004038:	0c2b      	lsrs	r3, r5, #16
 800403a:	4615      	mov	r5, r2
 800403c:	435d      	muls	r5, r3
 800403e:	4352      	muls	r2, r2
 8004040:	435b      	muls	r3, r3
 8004042:	0bee      	lsrs	r6, r5, #15
 8004044:	046d      	lsls	r5, r5, #17
 8004046:	1952      	adds	r2, r2, r5
 8004048:	4173      	adcs	r3, r6
 800404a:	2600      	movs	r6, #0
 800404c:	1852      	adds	r2, r2, r1
 800404e:	4173      	adcs	r3, r6
 8004050:	0c25      	lsrs	r5, r4, #16
 8004052:	b2a4      	uxth	r4, r4
 8004054:	4621      	mov	r1, r4
 8004056:	4369      	muls	r1, r5
 8004058:	4364      	muls	r4, r4
 800405a:	436d      	muls	r5, r5
 800405c:	0bce      	lsrs	r6, r1, #15
 800405e:	0449      	lsls	r1, r1, #17
 8004060:	1864      	adds	r4, r4, r1
 8004062:	4175      	adcs	r5, r6
 8004064:	4611      	mov	r1, r2
 8004066:	1b09      	subs	r1, r1, r4
 8004068:	41aa      	sbcs	r2, r5
 800406a:	461d      	mov	r5, r3
 800406c:	2600      	movs	r6, #0
 800406e:	41b3      	sbcs	r3, r6
 8004070:	1809      	adds	r1, r1, r0
 8004072:	416a      	adcs	r2, r5
 8004074:	4173      	adcs	r3, r6
 8004076:	4656      	mov	r6, sl
 8004078:	4682      	mov	sl, r0
 800407a:	468b      	mov	fp, r1
 800407c:	4694      	mov	ip, r2
 800407e:	4619      	mov	r1, r3
 8004080:	b2b2      	uxth	r2, r6
 8004082:	0c33      	lsrs	r3, r6, #16
 8004084:	4614      	mov	r4, r2
 8004086:	435c      	muls	r4, r3
 8004088:	4352      	muls	r2, r2
 800408a:	435b      	muls	r3, r3
 800408c:	0be5      	lsrs	r5, r4, #15
 800408e:	0464      	lsls	r4, r4, #17
 8004090:	1912      	adds	r2, r2, r4
 8004092:	416b      	adcs	r3, r5
 8004094:	1bf6      	subs	r6, r6, r7
 8004096:	41a4      	sbcs	r4, r4
 8004098:	4066      	eors	r6, r4
 800409a:	1b36      	subs	r6, r6, r4
 800409c:	b2bc      	uxth	r4, r7
 800409e:	0c3d      	lsrs	r5, r7, #16
 80040a0:	4620      	mov	r0, r4
 80040a2:	4368      	muls	r0, r5
 80040a4:	4364      	muls	r4, r4
 80040a6:	436d      	muls	r5, r5
 80040a8:	0bc7      	lsrs	r7, r0, #15
 80040aa:	0440      	lsls	r0, r0, #17
 80040ac:	1824      	adds	r4, r4, r0
 80040ae:	417d      	adcs	r5, r7
 80040b0:	2700      	movs	r7, #0
 80040b2:	18e4      	adds	r4, r4, r3
 80040b4:	417d      	adcs	r5, r7
 80040b6:	b2b7      	uxth	r7, r6
 80040b8:	0c30      	lsrs	r0, r6, #16
 80040ba:	463e      	mov	r6, r7
 80040bc:	4346      	muls	r6, r0
 80040be:	437f      	muls	r7, r7
 80040c0:	4340      	muls	r0, r0
 80040c2:	0bf3      	lsrs	r3, r6, #15
 80040c4:	0476      	lsls	r6, r6, #17
 80040c6:	19bf      	adds	r7, r7, r6
 80040c8:	4158      	adcs	r0, r3
 80040ca:	4623      	mov	r3, r4
 80040cc:	1bdb      	subs	r3, r3, r7
 80040ce:	4184      	sbcs	r4, r0
 80040d0:	4628      	mov	r0, r5
 80040d2:	2600      	movs	r6, #0
 80040d4:	41b5      	sbcs	r5, r6
 80040d6:	189b      	adds	r3, r3, r2
 80040d8:	4144      	adcs	r4, r0
 80040da:	4175      	adcs	r5, r6
 80040dc:	4660      	mov	r0, ip
 80040de:	1812      	adds	r2, r2, r0
 80040e0:	414b      	adcs	r3, r1
 80040e2:	4174      	adcs	r4, r6
 80040e4:	4175      	adcs	r5, r6
 80040e6:	4694      	mov	ip, r2
 80040e8:	4642      	mov	r2, r8
 80040ea:	4698      	mov	r8, r3
 80040ec:	464b      	mov	r3, r9
 80040ee:	46a1      	mov	r9, r4
 80040f0:	b296      	uxth	r6, r2
 80040f2:	0c17      	lsrs	r7, r2, #16
 80040f4:	4630      	mov	r0, r6
 80040f6:	4378      	muls	r0, r7
 80040f8:	4376      	muls	r6, r6
 80040fa:	437f      	muls	r7, r7
 80040fc:	0bc1      	lsrs	r1, r0, #15
 80040fe:	0440      	lsls	r0, r0, #17
 8004100:	1836      	adds	r6, r6, r0
 8004102:	414f      	adcs	r7, r1
 8004104:	1ad2      	subs	r2, r2, r3
 8004106:	41a4      	sbcs	r4, r4
 8004108:	4062      	eors	r2, r4
 800410a:	1b12      	subs	r2, r2, r4
 800410c:	b298      	uxth	r0, r3
 800410e:	0c19      	lsrs	r1, r3, #16
 8004110:	4603      	mov	r3, r0
 8004112:	434b      	muls	r3, r1
 8004114:	4340      	muls	r0, r0
 8004116:	4349      	muls	r1, r1
 8004118:	0bdc      	lsrs	r4, r3, #15
 800411a:	045b      	lsls	r3, r3, #17
 800411c:	18c0      	adds	r0, r0, r3
 800411e:	4161      	adcs	r1, r4
 8004120:	2400      	movs	r4, #0
 8004122:	19c0      	adds	r0, r0, r7
 8004124:	4161      	adcs	r1, r4
 8004126:	b293      	uxth	r3, r2
 8004128:	0c14      	lsrs	r4, r2, #16
 800412a:	461a      	mov	r2, r3
 800412c:	4362      	muls	r2, r4
 800412e:	435b      	muls	r3, r3
 8004130:	4364      	muls	r4, r4
 8004132:	0bd7      	lsrs	r7, r2, #15
 8004134:	0452      	lsls	r2, r2, #17
 8004136:	189b      	adds	r3, r3, r2
 8004138:	417c      	adcs	r4, r7
 800413a:	4607      	mov	r7, r0
 800413c:	1aff      	subs	r7, r7, r3
 800413e:	41a0      	sbcs	r0, r4
 8004140:	460a      	mov	r2, r1
 8004142:	2400      	movs	r4, #0
 8004144:	41a1      	sbcs	r1, r4
 8004146:	19bf      	adds	r7, r7, r6
 8004148:	4150      	adcs	r0, r2
 800414a:	4161      	adcs	r1, r4
 800414c:	4662      	mov	r2, ip
 800414e:	4643      	mov	r3, r8
 8004150:	464c      	mov	r4, r9
 8004152:	1b92      	subs	r2, r2, r6
 8004154:	41bb      	sbcs	r3, r7
 8004156:	4626      	mov	r6, r4
 8004158:	462f      	mov	r7, r5
 800415a:	4184      	sbcs	r4, r0
 800415c:	418d      	sbcs	r5, r1
 800415e:	2000      	movs	r0, #0
 8004160:	4186      	sbcs	r6, r0
 8004162:	4187      	sbcs	r7, r0
 8004164:	4650      	mov	r0, sl
 8004166:	1812      	adds	r2, r2, r0
 8004168:	4659      	mov	r1, fp
 800416a:	414b      	adcs	r3, r1
 800416c:	4660      	mov	r0, ip
 800416e:	4144      	adcs	r4, r0
 8004170:	4640      	mov	r0, r8
 8004172:	4145      	adcs	r5, r0
 8004174:	2000      	movs	r0, #0
 8004176:	4146      	adcs	r6, r0
 8004178:	4147      	adcs	r7, r0
 800417a:	4650      	mov	r0, sl
 800417c:	46a0      	mov	r8, r4
 800417e:	46a9      	mov	r9, r5
 8004180:	46b2      	mov	sl, r6
 8004182:	46bb      	mov	fp, r7
 8004184:	bcf0      	pop	{r4, r5, r6, r7}
 8004186:	1900      	adds	r0, r0, r4
 8004188:	4169      	adcs	r1, r5
 800418a:	4172      	adcs	r2, r6
 800418c:	417b      	adcs	r3, r7
 800418e:	4644      	mov	r4, r8
 8004190:	464d      	mov	r5, r9
 8004192:	4656      	mov	r6, sl
 8004194:	465f      	mov	r7, fp
 8004196:	4680      	mov	r8, r0
 8004198:	2000      	movs	r0, #0
 800419a:	4144      	adcs	r4, r0
 800419c:	4145      	adcs	r5, r0
 800419e:	4146      	adcs	r6, r0
 80041a0:	4147      	adcs	r7, r0
 80041a2:	4640      	mov	r0, r8
 80041a4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80041a6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80041a8:	ccff      	ldmia	r4, {r0, r1, r2, r3, r4, r5, r6, r7}
 80041aa:	1a24      	subs	r4, r4, r0
 80041ac:	418d      	sbcs	r5, r1
 80041ae:	4196      	sbcs	r6, r2
 80041b0:	419f      	sbcs	r7, r3
 80041b2:	4180      	sbcs	r0, r0
 80041b4:	4044      	eors	r4, r0
 80041b6:	4045      	eors	r5, r0
 80041b8:	4046      	eors	r6, r0
 80041ba:	4047      	eors	r7, r0
 80041bc:	1a24      	subs	r4, r4, r0
 80041be:	4185      	sbcs	r5, r0
 80041c0:	4186      	sbcs	r6, r0
 80041c2:	4187      	sbcs	r7, r0
 80041c4:	4620      	mov	r0, r4
 80041c6:	4629      	mov	r1, r5
 80041c8:	1b80      	subs	r0, r0, r6
 80041ca:	41b9      	sbcs	r1, r7
 80041cc:	4192      	sbcs	r2, r2
 80041ce:	4050      	eors	r0, r2
 80041d0:	4051      	eors	r1, r2
 80041d2:	1a80      	subs	r0, r0, r2
 80041d4:	4191      	sbcs	r1, r2
 80041d6:	4680      	mov	r8, r0
 80041d8:	4689      	mov	r9, r1
 80041da:	46b2      	mov	sl, r6
 80041dc:	b2a0      	uxth	r0, r4
 80041de:	0c21      	lsrs	r1, r4, #16
 80041e0:	4602      	mov	r2, r0
 80041e2:	434a      	muls	r2, r1
 80041e4:	4340      	muls	r0, r0
 80041e6:	4349      	muls	r1, r1
 80041e8:	0bd3      	lsrs	r3, r2, #15
 80041ea:	0452      	lsls	r2, r2, #17
 80041ec:	1880      	adds	r0, r0, r2
 80041ee:	4159      	adcs	r1, r3
 80041f0:	1b64      	subs	r4, r4, r5
 80041f2:	41b6      	sbcs	r6, r6
 80041f4:	4074      	eors	r4, r6
 80041f6:	1ba4      	subs	r4, r4, r6
 80041f8:	b2aa      	uxth	r2, r5
 80041fa:	0c2b      	lsrs	r3, r5, #16
 80041fc:	4615      	mov	r5, r2
 80041fe:	435d      	muls	r5, r3
 8004200:	4352      	muls	r2, r2
 8004202:	435b      	muls	r3, r3
 8004204:	0bee      	lsrs	r6, r5, #15
 8004206:	046d      	lsls	r5, r5, #17
 8004208:	1952      	adds	r2, r2, r5
 800420a:	4173      	adcs	r3, r6
 800420c:	2600      	movs	r6, #0
 800420e:	1852      	adds	r2, r2, r1
 8004210:	4173      	adcs	r3, r6
 8004212:	0c25      	lsrs	r5, r4, #16
 8004214:	b2a4      	uxth	r4, r4
 8004216:	4621      	mov	r1, r4
 8004218:	4369      	muls	r1, r5
 800421a:	4364      	muls	r4, r4
 800421c:	436d      	muls	r5, r5
 800421e:	0bce      	lsrs	r6, r1, #15
 8004220:	0449      	lsls	r1, r1, #17
 8004222:	1864      	adds	r4, r4, r1
 8004224:	4175      	adcs	r5, r6
 8004226:	4611      	mov	r1, r2
 8004228:	1b09      	subs	r1, r1, r4
 800422a:	41aa      	sbcs	r2, r5
 800422c:	461d      	mov	r5, r3
 800422e:	2600      	movs	r6, #0
 8004230:	41b3      	sbcs	r3, r6
 8004232:	1809      	adds	r1, r1, r0
 8004234:	416a      	adcs	r2, r5
 8004236:	4173      	adcs	r3, r6
 8004238:	4656      	mov	r6, sl
 800423a:	4682      	mov	sl, r0
 800423c:	468b      	mov	fp, r1
 800423e:	4694      	mov	ip, r2
 8004240:	4619      	mov	r1, r3
 8004242:	b2b2      	uxth	r2, r6
 8004244:	0c33      	lsrs	r3, r6, #16
 8004246:	4614      	mov	r4, r2
 8004248:	435c      	muls	r4, r3
 800424a:	4352      	muls	r2, r2
 800424c:	435b      	muls	r3, r3
 800424e:	0be5      	lsrs	r5, r4, #15
 8004250:	0464      	lsls	r4, r4, #17
 8004252:	1912      	adds	r2, r2, r4
 8004254:	416b      	adcs	r3, r5
 8004256:	1bf6      	subs	r6, r6, r7
 8004258:	41a4      	sbcs	r4, r4
 800425a:	4066      	eors	r6, r4
 800425c:	1b36      	subs	r6, r6, r4
 800425e:	b2bc      	uxth	r4, r7
 8004260:	0c3d      	lsrs	r5, r7, #16
 8004262:	4620      	mov	r0, r4
 8004264:	4368      	muls	r0, r5
 8004266:	4364      	muls	r4, r4
 8004268:	436d      	muls	r5, r5
 800426a:	0bc7      	lsrs	r7, r0, #15
 800426c:	0440      	lsls	r0, r0, #17
 800426e:	1824      	adds	r4, r4, r0
 8004270:	417d      	adcs	r5, r7
 8004272:	2700      	movs	r7, #0
 8004274:	18e4      	adds	r4, r4, r3
 8004276:	417d      	adcs	r5, r7
 8004278:	b2b7      	uxth	r7, r6
 800427a:	0c30      	lsrs	r0, r6, #16
 800427c:	463e      	mov	r6, r7
 800427e:	4346      	muls	r6, r0
 8004280:	437f      	muls	r7, r7
 8004282:	4340      	muls	r0, r0
 8004284:	0bf3      	lsrs	r3, r6, #15
 8004286:	0476      	lsls	r6, r6, #17
 8004288:	19bf      	adds	r7, r7, r6
 800428a:	4158      	adcs	r0, r3
 800428c:	4623      	mov	r3, r4
 800428e:	1bdb      	subs	r3, r3, r7
 8004290:	4184      	sbcs	r4, r0
 8004292:	4628      	mov	r0, r5
 8004294:	2600      	movs	r6, #0
 8004296:	41b5      	sbcs	r5, r6
 8004298:	189b      	adds	r3, r3, r2
 800429a:	4144      	adcs	r4, r0
 800429c:	4175      	adcs	r5, r6
 800429e:	4660      	mov	r0, ip
 80042a0:	1812      	adds	r2, r2, r0
 80042a2:	414b      	adcs	r3, r1
 80042a4:	4174      	adcs	r4, r6
 80042a6:	4175      	adcs	r5, r6
 80042a8:	4694      	mov	ip, r2
 80042aa:	4642      	mov	r2, r8
 80042ac:	4698      	mov	r8, r3
 80042ae:	464b      	mov	r3, r9
 80042b0:	46a1      	mov	r9, r4
 80042b2:	b296      	uxth	r6, r2
 80042b4:	0c17      	lsrs	r7, r2, #16
 80042b6:	4630      	mov	r0, r6
 80042b8:	4378      	muls	r0, r7
 80042ba:	4376      	muls	r6, r6
 80042bc:	437f      	muls	r7, r7
 80042be:	0bc1      	lsrs	r1, r0, #15
 80042c0:	0440      	lsls	r0, r0, #17
 80042c2:	1836      	adds	r6, r6, r0
 80042c4:	414f      	adcs	r7, r1
 80042c6:	1ad2      	subs	r2, r2, r3
 80042c8:	41a4      	sbcs	r4, r4
 80042ca:	4062      	eors	r2, r4
 80042cc:	1b12      	subs	r2, r2, r4
 80042ce:	b298      	uxth	r0, r3
 80042d0:	0c19      	lsrs	r1, r3, #16
 80042d2:	4603      	mov	r3, r0
 80042d4:	434b      	muls	r3, r1
 80042d6:	4340      	muls	r0, r0
 80042d8:	4349      	muls	r1, r1
 80042da:	0bdc      	lsrs	r4, r3, #15
 80042dc:	045b      	lsls	r3, r3, #17
 80042de:	18c0      	adds	r0, r0, r3
 80042e0:	4161      	adcs	r1, r4
 80042e2:	2400      	movs	r4, #0
 80042e4:	19c0      	adds	r0, r0, r7
 80042e6:	4161      	adcs	r1, r4
 80042e8:	b293      	uxth	r3, r2
 80042ea:	0c14      	lsrs	r4, r2, #16
 80042ec:	461a      	mov	r2, r3
 80042ee:	4362      	muls	r2, r4
 80042f0:	435b      	muls	r3, r3
 80042f2:	4364      	muls	r4, r4
 80042f4:	0bd7      	lsrs	r7, r2, #15
 80042f6:	0452      	lsls	r2, r2, #17
 80042f8:	189b      	adds	r3, r3, r2
 80042fa:	417c      	adcs	r4, r7
 80042fc:	4607      	mov	r7, r0
 80042fe:	1aff      	subs	r7, r7, r3
 8004300:	41a0      	sbcs	r0, r4
 8004302:	460a      	mov	r2, r1
 8004304:	2400      	movs	r4, #0
 8004306:	41a1      	sbcs	r1, r4
 8004308:	19bf      	adds	r7, r7, r6
 800430a:	4150      	adcs	r0, r2
 800430c:	4161      	adcs	r1, r4
 800430e:	4662      	mov	r2, ip
 8004310:	4643      	mov	r3, r8
 8004312:	464c      	mov	r4, r9
 8004314:	1b92      	subs	r2, r2, r6
 8004316:	41bb      	sbcs	r3, r7
 8004318:	4626      	mov	r6, r4
 800431a:	462f      	mov	r7, r5
 800431c:	4184      	sbcs	r4, r0
 800431e:	418d      	sbcs	r5, r1
 8004320:	2000      	movs	r0, #0
 8004322:	4186      	sbcs	r6, r0
 8004324:	4187      	sbcs	r7, r0
 8004326:	4650      	mov	r0, sl
 8004328:	1812      	adds	r2, r2, r0
 800432a:	4659      	mov	r1, fp
 800432c:	414b      	adcs	r3, r1
 800432e:	4660      	mov	r0, ip
 8004330:	4144      	adcs	r4, r0
 8004332:	4640      	mov	r0, r8
 8004334:	4145      	adcs	r5, r0
 8004336:	2000      	movs	r0, #0
 8004338:	4146      	adcs	r6, r0
 800433a:	4147      	adcs	r7, r0
 800433c:	4650      	mov	r0, sl
 800433e:	43c0      	mvns	r0, r0
 8004340:	43c9      	mvns	r1, r1
 8004342:	43d2      	mvns	r2, r2
 8004344:	43db      	mvns	r3, r3
 8004346:	43e4      	mvns	r4, r4
 8004348:	43ed      	mvns	r5, r5
 800434a:	43f6      	mvns	r6, r6
 800434c:	43ff      	mvns	r7, r7
 800434e:	46a0      	mov	r8, r4
 8004350:	46a9      	mov	r9, r5
 8004352:	46b2      	mov	sl, r6
 8004354:	46bb      	mov	fp, r7
 8004356:	248f      	movs	r4, #143	; 0x8f
 8004358:	1064      	asrs	r4, r4, #1
 800435a:	bcf0      	pop	{r4, r5, r6, r7}
 800435c:	4160      	adcs	r0, r4
 800435e:	4169      	adcs	r1, r5
 8004360:	4172      	adcs	r2, r6
 8004362:	417b      	adcs	r3, r7
 8004364:	46a4      	mov	ip, r4
 8004366:	2410      	movs	r4, #16
 8004368:	4474      	add	r4, lr
 800436a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800436c:	4664      	mov	r4, ip
 800436e:	4640      	mov	r0, r8
 8004370:	4160      	adcs	r0, r4
 8004372:	4680      	mov	r8, r0
 8004374:	4649      	mov	r1, r9
 8004376:	4169      	adcs	r1, r5
 8004378:	4689      	mov	r9, r1
 800437a:	4652      	mov	r2, sl
 800437c:	4172      	adcs	r2, r6
 800437e:	4692      	mov	sl, r2
 8004380:	465b      	mov	r3, fp
 8004382:	417b      	adcs	r3, r7
 8004384:	469b      	mov	fp, r3
 8004386:	2000      	movs	r0, #0
 8004388:	4140      	adcs	r0, r0
 800438a:	4684      	mov	ip, r0
 800438c:	4670      	mov	r0, lr
 800438e:	c8ff      	ldmia	r0, {r0, r1, r2, r3, r4, r5, r6, r7}
 8004390:	1900      	adds	r0, r0, r4
 8004392:	4169      	adcs	r1, r5
 8004394:	4172      	adcs	r2, r6
 8004396:	417b      	adcs	r3, r7
 8004398:	2410      	movs	r4, #16
 800439a:	4474      	add	r4, lr
 800439c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800439e:	46a6      	mov	lr, r4
 80043a0:	4668      	mov	r0, sp
 80043a2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80043a4:	4641      	mov	r1, r8
 80043a6:	414c      	adcs	r4, r1
 80043a8:	4649      	mov	r1, r9
 80043aa:	414d      	adcs	r5, r1
 80043ac:	4651      	mov	r1, sl
 80043ae:	414e      	adcs	r6, r1
 80043b0:	4659      	mov	r1, fp
 80043b2:	414f      	adcs	r7, r1
 80043b4:	4670      	mov	r0, lr
 80043b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80043b8:	bcf0      	pop	{r4, r5, r6, r7}
 80043ba:	4661      	mov	r1, ip
 80043bc:	2200      	movs	r2, #0
 80043be:	43d2      	mvns	r2, r2
 80043c0:	4151      	adcs	r1, r2
 80043c2:	110a      	asrs	r2, r1, #4
 80043c4:	1864      	adds	r4, r4, r1
 80043c6:	4155      	adcs	r5, r2
 80043c8:	4156      	adcs	r6, r2
 80043ca:	4157      	adcs	r7, r2
 80043cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80043ce:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d0:	4698      	mov	r8, r3
 80043d2:	46a1      	mov	r9, r4
 80043d4:	46aa      	mov	sl, r5
 80043d6:	46b3      	mov	fp, r6
 80043d8:	46bc      	mov	ip, r7
 80043da:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080043dc <cmox_md_updateState_small>:
 80043dc:	b580      	push	{r7, lr}
 80043de:	2220      	movs	r2, #32
 80043e0:	305c      	adds	r0, #92	; 0x5c
 80043e2:	f003 ffae 	bl	8008342 <__aeabi_memcpy>
 80043e6:	bd01      	pop	{r0, pc}

080043e8 <cmox_md_copyLastState_small>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	2300      	movs	r3, #0
 80043ec:	2200      	movs	r2, #0
 80043ee:	6885      	ldr	r5, [r0, #8]
 80043f0:	08ac      	lsrs	r4, r5, #2
 80043f2:	07ad      	lsls	r5, r5, #30
 80043f4:	0fad      	lsrs	r5, r5, #30
 80043f6:	9500      	str	r5, [sp, #0]
 80043f8:	e00f      	b.n	800441a <cmox_md_copyLastState_small+0x32>
 80043fa:	0095      	lsls	r5, r2, #2
 80043fc:	194d      	adds	r5, r1, r5
 80043fe:	0096      	lsls	r6, r2, #2
 8004400:	1986      	adds	r6, r0, r6
 8004402:	6df7      	ldr	r7, [r6, #92]	; 0x5c
 8004404:	70ef      	strb	r7, [r5, #3]
 8004406:	6df7      	ldr	r7, [r6, #92]	; 0x5c
 8004408:	0a3f      	lsrs	r7, r7, #8
 800440a:	70af      	strb	r7, [r5, #2]
 800440c:	6df7      	ldr	r7, [r6, #92]	; 0x5c
 800440e:	0c3f      	lsrs	r7, r7, #16
 8004410:	706f      	strb	r7, [r5, #1]
 8004412:	6df6      	ldr	r6, [r6, #92]	; 0x5c
 8004414:	0e36      	lsrs	r6, r6, #24
 8004416:	702e      	strb	r6, [r5, #0]
 8004418:	1c52      	adds	r2, r2, #1
 800441a:	42a2      	cmp	r2, r4
 800441c:	d3ed      	bcc.n	80043fa <cmox_md_copyLastState_small+0x12>
 800441e:	9a00      	ldr	r2, [sp, #0]
 8004420:	e00b      	b.n	800443a <cmox_md_copyLastState_small+0x52>
 8004422:	0005      	movs	r5, r0
 8004424:	355c      	adds	r5, #92	; 0x5c
 8004426:	00a6      	lsls	r6, r4, #2
 8004428:	59ad      	ldr	r5, [r5, r6]
 800442a:	2618      	movs	r6, #24
 800442c:	00df      	lsls	r7, r3, #3
 800442e:	1bf6      	subs	r6, r6, r7
 8004430:	40f5      	lsrs	r5, r6
 8004432:	00a6      	lsls	r6, r4, #2
 8004434:	18f6      	adds	r6, r6, r3
 8004436:	558d      	strb	r5, [r1, r6]
 8004438:	1c5b      	adds	r3, r3, #1
 800443a:	4293      	cmp	r3, r2
 800443c:	d3f1      	bcc.n	8004422 <cmox_md_copyLastState_small+0x3a>
 800443e:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08004440 <cmox_md_padMsgLen_small>:
 8004440:	b530      	push	{r4, r5, lr}
 8004442:	2200      	movs	r2, #0
 8004444:	68c3      	ldr	r3, [r0, #12]
 8004446:	6904      	ldr	r4, [r0, #16]
 8004448:	1b1b      	subs	r3, r3, r4
 800444a:	5c8c      	ldrb	r4, [r1, r2]
 800444c:	189d      	adds	r5, r3, r2
 800444e:	1945      	adds	r5, r0, r5
 8004450:	772c      	strb	r4, [r5, #28]
 8004452:	1c52      	adds	r2, r2, #1
 8004454:	2a08      	cmp	r2, #8
 8004456:	d3f8      	bcc.n	800444a <cmox_md_padMsgLen_small+0xa>
 8004458:	bd30      	pop	{r4, r5, pc}

0800445a <cmox_md_construct>:
 800445a:	6003      	str	r3, [r0, #0]
 800445c:	60c1      	str	r1, [r0, #12]
 800445e:	6102      	str	r2, [r0, #16]
 8004460:	4770      	bx	lr

08004462 <cmox_md_init>:
 8004462:	b570      	push	{r4, r5, r6, lr}
 8004464:	0004      	movs	r4, r0
 8004466:	0016      	movs	r6, r2
 8004468:	2500      	movs	r5, #0
 800446a:	6065      	str	r5, [r4, #4]
 800446c:	6822      	ldr	r2, [r4, #0]
 800446e:	6852      	ldr	r2, [r2, #4]
 8004470:	4790      	blx	r2
 8004472:	6165      	str	r5, [r4, #20]
 8004474:	61a5      	str	r5, [r4, #24]
 8004476:	60a6      	str	r6, [r4, #8]
 8004478:	2080      	movs	r0, #128	; 0x80
 800447a:	0280      	lsls	r0, r0, #10
 800447c:	bd70      	pop	{r4, r5, r6, pc}

0800447e <cmox_md_setTagSize>:
 800447e:	6081      	str	r1, [r0, #8]
 8004480:	2080      	movs	r0, #128	; 0x80
 8004482:	0280      	lsls	r0, r0, #10
 8004484:	4770      	bx	lr
	...

08004488 <cmox_md_append>:
 8004488:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800448a:	0007      	movs	r7, r0
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	9000      	str	r0, [sp, #0]
 8004490:	7938      	ldrb	r0, [r7, #4]
 8004492:	0740      	lsls	r0, r0, #29
 8004494:	d501      	bpl.n	800449a <cmox_md_append+0x12>
 8004496:	4821      	ldr	r0, [pc, #132]	; (800451c <cmox_md_append+0x94>)
 8004498:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800449a:	001d      	movs	r5, r3
 800449c:	697e      	ldr	r6, [r7, #20]
 800449e:	9b00      	ldr	r3, [sp, #0]
 80044a0:	1e5b      	subs	r3, r3, #1
 80044a2:	08f0      	lsrs	r0, r6, #3
 80044a4:	4018      	ands	r0, r3
 80044a6:	00ec      	lsls	r4, r5, #3
 80044a8:	1936      	adds	r6, r6, r4
 80044aa:	617e      	str	r6, [r7, #20]
 80044ac:	42a6      	cmp	r6, r4
 80044ae:	d202      	bcs.n	80044b6 <cmox_md_append+0x2e>
 80044b0:	69bc      	ldr	r4, [r7, #24]
 80044b2:	1c64      	adds	r4, r4, #1
 80044b4:	61bc      	str	r4, [r7, #24]
 80044b6:	69bc      	ldr	r4, [r7, #24]
 80044b8:	0f6e      	lsrs	r6, r5, #29
 80044ba:	19a4      	adds	r4, r4, r6
 80044bc:	61bc      	str	r4, [r7, #24]
 80044be:	000e      	movs	r6, r1
 80044c0:	0014      	movs	r4, r2
 80044c2:	1941      	adds	r1, r0, r5
 80044c4:	428b      	cmp	r3, r1
 80044c6:	d220      	bcs.n	800450a <cmox_md_append+0x82>
 80044c8:	9900      	ldr	r1, [sp, #0]
 80044ca:	1a09      	subs	r1, r1, r0
 80044cc:	9101      	str	r1, [sp, #4]
 80044ce:	460a      	mov	r2, r1
 80044d0:	0031      	movs	r1, r6
 80044d2:	1820      	adds	r0, r4, r0
 80044d4:	f003 ff35 	bl	8008342 <__aeabi_memcpy>
 80044d8:	0021      	movs	r1, r4
 80044da:	e008      	b.n	80044ee <cmox_md_append+0x66>
 80044dc:	9a00      	ldr	r2, [sp, #0]
 80044de:	0020      	movs	r0, r4
 80044e0:	f003 ff2f 	bl	8008342 <__aeabi_memcpy>
 80044e4:	0021      	movs	r1, r4
 80044e6:	e002      	b.n	80044ee <cmox_md_append+0x66>
 80044e8:	1831      	adds	r1, r6, r0
 80044ea:	0788      	lsls	r0, r1, #30
 80044ec:	d1f6      	bne.n	80044dc <cmox_md_append+0x54>
 80044ee:	0038      	movs	r0, r7
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	6812      	ldr	r2, [r2, #0]
 80044f4:	4790      	blx	r2
 80044f6:	9801      	ldr	r0, [sp, #4]
 80044f8:	9900      	ldr	r1, [sp, #0]
 80044fa:	1809      	adds	r1, r1, r0
 80044fc:	9101      	str	r1, [sp, #4]
 80044fe:	1e49      	subs	r1, r1, #1
 8004500:	42a9      	cmp	r1, r5
 8004502:	d3f1      	bcc.n	80044e8 <cmox_md_append+0x60>
 8004504:	0001      	movs	r1, r0
 8004506:	2000      	movs	r0, #0
 8004508:	e000      	b.n	800450c <cmox_md_append+0x84>
 800450a:	2100      	movs	r1, #0
 800450c:	1a6a      	subs	r2, r5, r1
 800450e:	1871      	adds	r1, r6, r1
 8004510:	1820      	adds	r0, r4, r0
 8004512:	f003 ff16 	bl	8008342 <__aeabi_memcpy>
 8004516:	2080      	movs	r0, #128	; 0x80
 8004518:	0280      	lsls	r0, r0, #10
 800451a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800451c:	00020004 	.word	0x00020004

08004520 <cmox_md_generateTag>:
 8004520:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	68c1      	ldr	r1, [r0, #12]
 8004526:	6902      	ldr	r2, [r0, #16]
 8004528:	1a89      	subs	r1, r1, r2
 800452a:	9100      	str	r1, [sp, #0]
 800452c:	6841      	ldr	r1, [r0, #4]
 800452e:	2204      	movs	r2, #4
 8004530:	430a      	orrs	r2, r1
 8004532:	6042      	str	r2, [r0, #4]
 8004534:	2400      	movs	r4, #0
 8004536:	4b56      	ldr	r3, [pc, #344]	; (8004690 <cmox_md_generateTag+0x170>)
 8004538:	9003      	str	r0, [sp, #12]
 800453a:	a804      	add	r0, sp, #16
 800453c:	4955      	ldr	r1, [pc, #340]	; (8004694 <cmox_md_generateTag+0x174>)
 800453e:	c924      	ldmia	r1!, {r2, r5}
 8004540:	c024      	stmia	r0!, {r2, r5}
 8004542:	4855      	ldr	r0, [pc, #340]	; (8004698 <cmox_md_generateTag+0x178>)
 8004544:	7801      	ldrb	r1, [r0, #0]
 8004546:	2900      	cmp	r1, #0
 8004548:	d101      	bne.n	800454e <cmox_md_generateTag+0x2e>
 800454a:	2000      	movs	r0, #0
 800454c:	e000      	b.n	8004550 <cmox_md_generateTag+0x30>
 800454e:	2004      	movs	r0, #4
 8004550:	4602      	mov	r2, r0
 8004552:	5818      	ldr	r0, [r3, r0]
 8004554:	ad04      	add	r5, sp, #16
 8004556:	58aa      	ldr	r2, [r5, r2]
 8004558:	1880      	adds	r0, r0, r2
 800455a:	4a50      	ldr	r2, [pc, #320]	; (800469c <cmox_md_generateTag+0x17c>)
 800455c:	6002      	str	r2, [r0, #0]
 800455e:	6802      	ldr	r2, [r0, #0]
 8004560:	2501      	movs	r5, #1
 8004562:	6085      	str	r5, [r0, #8]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	9d04      	ldr	r5, [sp, #16]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	406b      	eors	r3, r5
 800456c:	405a      	eors	r2, r3
 800456e:	4b4c      	ldr	r3, [pc, #304]	; (80046a0 <cmox_md_generateTag+0x180>)
 8004570:	4053      	eors	r3, r2
 8004572:	9a05      	ldr	r2, [sp, #20]
 8004574:	4042      	eors	r2, r0
 8004576:	4d4b      	ldr	r5, [pc, #300]	; (80046a4 <cmox_md_generateTag+0x184>)
 8004578:	4055      	eors	r5, r2
 800457a:	195b      	adds	r3, r3, r5
 800457c:	4a4a      	ldr	r2, [pc, #296]	; (80046a8 <cmox_md_generateTag+0x188>)
 800457e:	405a      	eors	r2, r3
 8004580:	ab04      	add	r3, sp, #16
 8004582:	4d44      	ldr	r5, [pc, #272]	; (8004694 <cmox_md_generateTag+0x174>)
 8004584:	cdc0      	ldmia	r5!, {r6, r7}
 8004586:	c3c0      	stmia	r3!, {r6, r7}
 8004588:	2900      	cmp	r1, #0
 800458a:	d101      	bne.n	8004590 <cmox_md_generateTag+0x70>
 800458c:	2500      	movs	r5, #0
 800458e:	e001      	b.n	8004594 <cmox_md_generateTag+0x74>
 8004590:	2104      	movs	r1, #4
 8004592:	2504      	movs	r5, #4
 8004594:	4b3e      	ldr	r3, [pc, #248]	; (8004690 <cmox_md_generateTag+0x170>)
 8004596:	5859      	ldr	r1, [r3, r1]
 8004598:	ae04      	add	r6, sp, #16
 800459a:	5975      	ldr	r5, [r6, r5]
 800459c:	194d      	adds	r5, r1, r5
 800459e:	4943      	ldr	r1, [pc, #268]	; (80046ac <cmox_md_generateTag+0x18c>)
 80045a0:	6029      	str	r1, [r5, #0]
 80045a2:	6829      	ldr	r1, [r5, #0]
 80045a4:	2601      	movs	r6, #1
 80045a6:	60ae      	str	r6, [r5, #8]
 80045a8:	9d04      	ldr	r5, [sp, #16]
 80045aa:	685e      	ldr	r6, [r3, #4]
 80045ac:	406e      	eors	r6, r5
 80045ae:	4071      	eors	r1, r6
 80045b0:	4d3b      	ldr	r5, [pc, #236]	; (80046a0 <cmox_md_generateTag+0x180>)
 80045b2:	404d      	eors	r5, r1
 80045b4:	9905      	ldr	r1, [sp, #20]
 80045b6:	4048      	eors	r0, r1
 80045b8:	493a      	ldr	r1, [pc, #232]	; (80046a4 <cmox_md_generateTag+0x184>)
 80045ba:	4041      	eors	r1, r0
 80045bc:	1868      	adds	r0, r5, r1
 80045be:	493c      	ldr	r1, [pc, #240]	; (80046b0 <cmox_md_generateTag+0x190>)
 80045c0:	4041      	eors	r1, r0
 80045c2:	0010      	movs	r0, r2
 80045c4:	d000      	beq.n	80045c8 <cmox_md_generateTag+0xa8>
 80045c6:	2001      	movs	r0, #1
 80045c8:	1e49      	subs	r1, r1, #1
 80045ca:	4189      	sbcs	r1, r1
 80045cc:	0fc9      	lsrs	r1, r1, #31
 80045ce:	2c04      	cmp	r4, #4
 80045d0:	d301      	bcc.n	80045d6 <cmox_md_generateTag+0xb6>
 80045d2:	b2c0      	uxtb	r0, r0
 80045d4:	e000      	b.n	80045d8 <cmox_md_generateTag+0xb8>
 80045d6:	0008      	movs	r0, r1
 80045d8:	9903      	ldr	r1, [sp, #12]
 80045da:	3114      	adds	r1, #20
 80045dc:	0080      	lsls	r0, r0, #2
 80045de:	5808      	ldr	r0, [r1, r0]
 80045e0:	2103      	movs	r1, #3
 80045e2:	07a2      	lsls	r2, r4, #30
 80045e4:	0f92      	lsrs	r2, r2, #30
 80045e6:	1a89      	subs	r1, r1, r2
 80045e8:	00c9      	lsls	r1, r1, #3
 80045ea:	40c8      	lsrs	r0, r1
 80045ec:	a901      	add	r1, sp, #4
 80045ee:	5508      	strb	r0, [r1, r4]
 80045f0:	1c64      	adds	r4, r4, #1
 80045f2:	2c08      	cmp	r4, #8
 80045f4:	d3a1      	bcc.n	800453a <cmox_md_generateTag+0x1a>
 80045f6:	9c03      	ldr	r4, [sp, #12]
 80045f8:	69a7      	ldr	r7, [r4, #24]
 80045fa:	6966      	ldr	r6, [r4, #20]
 80045fc:	08f6      	lsrs	r6, r6, #3
 80045fe:	0778      	lsls	r0, r7, #29
 8004600:	4306      	orrs	r6, r0
 8004602:	68e0      	ldr	r0, [r4, #12]
 8004604:	1e40      	subs	r0, r0, #1
 8004606:	0033      	movs	r3, r6
 8004608:	4003      	ands	r3, r0
 800460a:	2280      	movs	r2, #128	; 0x80
 800460c:	2100      	movs	r1, #0
 800460e:	4030      	ands	r0, r6
 8004610:	9e00      	ldr	r6, [sp, #0]
 8004612:	2700      	movs	r7, #0
 8004614:	42b9      	cmp	r1, r7
 8004616:	d80b      	bhi.n	8004630 <cmox_md_generateTag+0x110>
 8004618:	42b0      	cmp	r0, r6
 800461a:	d209      	bcs.n	8004630 <cmox_md_generateTag+0x110>
 800461c:	9806      	ldr	r0, [sp, #24]
 800461e:	54c2      	strb	r2, [r0, r3]
 8004620:	1c5b      	adds	r3, r3, #1
 8004622:	9800      	ldr	r0, [sp, #0]
 8004624:	4283      	cmp	r3, r0
 8004626:	d21a      	bcs.n	800465e <cmox_md_generateTag+0x13e>
 8004628:	1ac1      	subs	r1, r0, r3
 800462a:	9806      	ldr	r0, [sp, #24]
 800462c:	18c0      	adds	r0, r0, r3
 800462e:	e014      	b.n	800465a <cmox_md_generateTag+0x13a>
 8004630:	9806      	ldr	r0, [sp, #24]
 8004632:	54c2      	strb	r2, [r0, r3]
 8004634:	1c5b      	adds	r3, r3, #1
 8004636:	9806      	ldr	r0, [sp, #24]
 8004638:	e001      	b.n	800463e <cmox_md_generateTag+0x11e>
 800463a:	54c7      	strb	r7, [r0, r3]
 800463c:	1c5b      	adds	r3, r3, #1
 800463e:	68e1      	ldr	r1, [r4, #12]
 8004640:	428b      	cmp	r3, r1
 8004642:	d3fa      	bcc.n	800463a <cmox_md_generateTag+0x11a>
 8004644:	9006      	str	r0, [sp, #24]
 8004646:	4601      	mov	r1, r0
 8004648:	0020      	movs	r0, r4
 800464a:	6822      	ldr	r2, [r4, #0]
 800464c:	6812      	ldr	r2, [r2, #0]
 800464e:	4790      	blx	r2
 8004650:	9800      	ldr	r0, [sp, #0]
 8004652:	2800      	cmp	r0, #0
 8004654:	d003      	beq.n	800465e <cmox_md_generateTag+0x13e>
 8004656:	4601      	mov	r1, r0
 8004658:	9806      	ldr	r0, [sp, #24]
 800465a:	f003 fe6d 	bl	8008338 <__aeabi_memclr>
 800465e:	9d08      	ldr	r5, [sp, #32]
 8004660:	9e07      	ldr	r6, [sp, #28]
 8004662:	a901      	add	r1, sp, #4
 8004664:	0020      	movs	r0, r4
 8004666:	6822      	ldr	r2, [r4, #0]
 8004668:	6892      	ldr	r2, [r2, #8]
 800466a:	4790      	blx	r2
 800466c:	9906      	ldr	r1, [sp, #24]
 800466e:	0020      	movs	r0, r4
 8004670:	6822      	ldr	r2, [r4, #0]
 8004672:	6812      	ldr	r2, [r2, #0]
 8004674:	4790      	blx	r2
 8004676:	0031      	movs	r1, r6
 8004678:	0020      	movs	r0, r4
 800467a:	6822      	ldr	r2, [r4, #0]
 800467c:	68d2      	ldr	r2, [r2, #12]
 800467e:	4790      	blx	r2
 8004680:	2d00      	cmp	r5, #0
 8004682:	d001      	beq.n	8004688 <cmox_md_generateTag+0x168>
 8004684:	68a0      	ldr	r0, [r4, #8]
 8004686:	6028      	str	r0, [r5, #0]
 8004688:	2080      	movs	r0, #128	; 0x80
 800468a:	0280      	lsls	r0, r0, #10
 800468c:	b009      	add	sp, #36	; 0x24
 800468e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004690:	08009c30 	.word	0x08009c30
 8004694:	080046b4 	.word	0x080046b4
 8004698:	200000cc 	.word	0x200000cc
 800469c:	9310c55f 	.word	0x9310c55f
 80046a0:	12008504 	.word	0x12008504
 80046a4:	7a0168fc 	.word	0x7a0168fc
 80046a8:	ff24f5c0 	.word	0xff24f5c0
 80046ac:	d433af24 	.word	0xd433af24
 80046b0:	8b69af26 	.word	0x8b69af26
 80046b4:	0101b004 	.word	0x0101b004
 80046b8:	45011700 	.word	0x45011700

080046bc <__gnu_thumb1_case_shi>:
 80046bc:	b403      	push	{r0, r1}
 80046be:	4671      	mov	r1, lr
 80046c0:	0849      	lsrs	r1, r1, #1
 80046c2:	0040      	lsls	r0, r0, #1
 80046c4:	0049      	lsls	r1, r1, #1
 80046c6:	5e09      	ldrsh	r1, [r1, r0]
 80046c8:	0049      	lsls	r1, r1, #1
 80046ca:	448e      	add	lr, r1
 80046cc:	bc03      	pop	{r0, r1}
 80046ce:	4770      	bx	lr

080046d0 <__udivsi3>:
 80046d0:	2200      	movs	r2, #0
 80046d2:	0843      	lsrs	r3, r0, #1
 80046d4:	428b      	cmp	r3, r1
 80046d6:	d374      	bcc.n	80047c2 <__udivsi3+0xf2>
 80046d8:	0903      	lsrs	r3, r0, #4
 80046da:	428b      	cmp	r3, r1
 80046dc:	d35f      	bcc.n	800479e <__udivsi3+0xce>
 80046de:	0a03      	lsrs	r3, r0, #8
 80046e0:	428b      	cmp	r3, r1
 80046e2:	d344      	bcc.n	800476e <__udivsi3+0x9e>
 80046e4:	0b03      	lsrs	r3, r0, #12
 80046e6:	428b      	cmp	r3, r1
 80046e8:	d328      	bcc.n	800473c <__udivsi3+0x6c>
 80046ea:	0c03      	lsrs	r3, r0, #16
 80046ec:	428b      	cmp	r3, r1
 80046ee:	d30d      	bcc.n	800470c <__udivsi3+0x3c>
 80046f0:	22ff      	movs	r2, #255	; 0xff
 80046f2:	0209      	lsls	r1, r1, #8
 80046f4:	ba12      	rev	r2, r2
 80046f6:	0c03      	lsrs	r3, r0, #16
 80046f8:	428b      	cmp	r3, r1
 80046fa:	d302      	bcc.n	8004702 <__udivsi3+0x32>
 80046fc:	1212      	asrs	r2, r2, #8
 80046fe:	0209      	lsls	r1, r1, #8
 8004700:	d065      	beq.n	80047ce <__udivsi3+0xfe>
 8004702:	0b03      	lsrs	r3, r0, #12
 8004704:	428b      	cmp	r3, r1
 8004706:	d319      	bcc.n	800473c <__udivsi3+0x6c>
 8004708:	e000      	b.n	800470c <__udivsi3+0x3c>
 800470a:	0a09      	lsrs	r1, r1, #8
 800470c:	0bc3      	lsrs	r3, r0, #15
 800470e:	428b      	cmp	r3, r1
 8004710:	d301      	bcc.n	8004716 <__udivsi3+0x46>
 8004712:	03cb      	lsls	r3, r1, #15
 8004714:	1ac0      	subs	r0, r0, r3
 8004716:	4152      	adcs	r2, r2
 8004718:	0b83      	lsrs	r3, r0, #14
 800471a:	428b      	cmp	r3, r1
 800471c:	d301      	bcc.n	8004722 <__udivsi3+0x52>
 800471e:	038b      	lsls	r3, r1, #14
 8004720:	1ac0      	subs	r0, r0, r3
 8004722:	4152      	adcs	r2, r2
 8004724:	0b43      	lsrs	r3, r0, #13
 8004726:	428b      	cmp	r3, r1
 8004728:	d301      	bcc.n	800472e <__udivsi3+0x5e>
 800472a:	034b      	lsls	r3, r1, #13
 800472c:	1ac0      	subs	r0, r0, r3
 800472e:	4152      	adcs	r2, r2
 8004730:	0b03      	lsrs	r3, r0, #12
 8004732:	428b      	cmp	r3, r1
 8004734:	d301      	bcc.n	800473a <__udivsi3+0x6a>
 8004736:	030b      	lsls	r3, r1, #12
 8004738:	1ac0      	subs	r0, r0, r3
 800473a:	4152      	adcs	r2, r2
 800473c:	0ac3      	lsrs	r3, r0, #11
 800473e:	428b      	cmp	r3, r1
 8004740:	d301      	bcc.n	8004746 <__udivsi3+0x76>
 8004742:	02cb      	lsls	r3, r1, #11
 8004744:	1ac0      	subs	r0, r0, r3
 8004746:	4152      	adcs	r2, r2
 8004748:	0a83      	lsrs	r3, r0, #10
 800474a:	428b      	cmp	r3, r1
 800474c:	d301      	bcc.n	8004752 <__udivsi3+0x82>
 800474e:	028b      	lsls	r3, r1, #10
 8004750:	1ac0      	subs	r0, r0, r3
 8004752:	4152      	adcs	r2, r2
 8004754:	0a43      	lsrs	r3, r0, #9
 8004756:	428b      	cmp	r3, r1
 8004758:	d301      	bcc.n	800475e <__udivsi3+0x8e>
 800475a:	024b      	lsls	r3, r1, #9
 800475c:	1ac0      	subs	r0, r0, r3
 800475e:	4152      	adcs	r2, r2
 8004760:	0a03      	lsrs	r3, r0, #8
 8004762:	428b      	cmp	r3, r1
 8004764:	d301      	bcc.n	800476a <__udivsi3+0x9a>
 8004766:	020b      	lsls	r3, r1, #8
 8004768:	1ac0      	subs	r0, r0, r3
 800476a:	4152      	adcs	r2, r2
 800476c:	d2cd      	bcs.n	800470a <__udivsi3+0x3a>
 800476e:	09c3      	lsrs	r3, r0, #7
 8004770:	428b      	cmp	r3, r1
 8004772:	d301      	bcc.n	8004778 <__udivsi3+0xa8>
 8004774:	01cb      	lsls	r3, r1, #7
 8004776:	1ac0      	subs	r0, r0, r3
 8004778:	4152      	adcs	r2, r2
 800477a:	0983      	lsrs	r3, r0, #6
 800477c:	428b      	cmp	r3, r1
 800477e:	d301      	bcc.n	8004784 <__udivsi3+0xb4>
 8004780:	018b      	lsls	r3, r1, #6
 8004782:	1ac0      	subs	r0, r0, r3
 8004784:	4152      	adcs	r2, r2
 8004786:	0943      	lsrs	r3, r0, #5
 8004788:	428b      	cmp	r3, r1
 800478a:	d301      	bcc.n	8004790 <__udivsi3+0xc0>
 800478c:	014b      	lsls	r3, r1, #5
 800478e:	1ac0      	subs	r0, r0, r3
 8004790:	4152      	adcs	r2, r2
 8004792:	0903      	lsrs	r3, r0, #4
 8004794:	428b      	cmp	r3, r1
 8004796:	d301      	bcc.n	800479c <__udivsi3+0xcc>
 8004798:	010b      	lsls	r3, r1, #4
 800479a:	1ac0      	subs	r0, r0, r3
 800479c:	4152      	adcs	r2, r2
 800479e:	08c3      	lsrs	r3, r0, #3
 80047a0:	428b      	cmp	r3, r1
 80047a2:	d301      	bcc.n	80047a8 <__udivsi3+0xd8>
 80047a4:	00cb      	lsls	r3, r1, #3
 80047a6:	1ac0      	subs	r0, r0, r3
 80047a8:	4152      	adcs	r2, r2
 80047aa:	0883      	lsrs	r3, r0, #2
 80047ac:	428b      	cmp	r3, r1
 80047ae:	d301      	bcc.n	80047b4 <__udivsi3+0xe4>
 80047b0:	008b      	lsls	r3, r1, #2
 80047b2:	1ac0      	subs	r0, r0, r3
 80047b4:	4152      	adcs	r2, r2
 80047b6:	0843      	lsrs	r3, r0, #1
 80047b8:	428b      	cmp	r3, r1
 80047ba:	d301      	bcc.n	80047c0 <__udivsi3+0xf0>
 80047bc:	004b      	lsls	r3, r1, #1
 80047be:	1ac0      	subs	r0, r0, r3
 80047c0:	4152      	adcs	r2, r2
 80047c2:	1a41      	subs	r1, r0, r1
 80047c4:	d200      	bcs.n	80047c8 <__udivsi3+0xf8>
 80047c6:	4601      	mov	r1, r0
 80047c8:	4152      	adcs	r2, r2
 80047ca:	4610      	mov	r0, r2
 80047cc:	4770      	bx	lr
 80047ce:	e7ff      	b.n	80047d0 <__udivsi3+0x100>
 80047d0:	b501      	push	{r0, lr}
 80047d2:	2000      	movs	r0, #0
 80047d4:	f000 f8f0 	bl	80049b8 <__aeabi_idiv0>
 80047d8:	bd02      	pop	{r1, pc}
 80047da:	46c0      	nop			; (mov r8, r8)

080047dc <__aeabi_uidivmod>:
 80047dc:	2900      	cmp	r1, #0
 80047de:	d0f7      	beq.n	80047d0 <__udivsi3+0x100>
 80047e0:	e776      	b.n	80046d0 <__udivsi3>
 80047e2:	4770      	bx	lr

080047e4 <__divsi3>:
 80047e4:	4603      	mov	r3, r0
 80047e6:	430b      	orrs	r3, r1
 80047e8:	d47f      	bmi.n	80048ea <__divsi3+0x106>
 80047ea:	2200      	movs	r2, #0
 80047ec:	0843      	lsrs	r3, r0, #1
 80047ee:	428b      	cmp	r3, r1
 80047f0:	d374      	bcc.n	80048dc <__divsi3+0xf8>
 80047f2:	0903      	lsrs	r3, r0, #4
 80047f4:	428b      	cmp	r3, r1
 80047f6:	d35f      	bcc.n	80048b8 <__divsi3+0xd4>
 80047f8:	0a03      	lsrs	r3, r0, #8
 80047fa:	428b      	cmp	r3, r1
 80047fc:	d344      	bcc.n	8004888 <__divsi3+0xa4>
 80047fe:	0b03      	lsrs	r3, r0, #12
 8004800:	428b      	cmp	r3, r1
 8004802:	d328      	bcc.n	8004856 <__divsi3+0x72>
 8004804:	0c03      	lsrs	r3, r0, #16
 8004806:	428b      	cmp	r3, r1
 8004808:	d30d      	bcc.n	8004826 <__divsi3+0x42>
 800480a:	22ff      	movs	r2, #255	; 0xff
 800480c:	0209      	lsls	r1, r1, #8
 800480e:	ba12      	rev	r2, r2
 8004810:	0c03      	lsrs	r3, r0, #16
 8004812:	428b      	cmp	r3, r1
 8004814:	d302      	bcc.n	800481c <__divsi3+0x38>
 8004816:	1212      	asrs	r2, r2, #8
 8004818:	0209      	lsls	r1, r1, #8
 800481a:	d065      	beq.n	80048e8 <__divsi3+0x104>
 800481c:	0b03      	lsrs	r3, r0, #12
 800481e:	428b      	cmp	r3, r1
 8004820:	d319      	bcc.n	8004856 <__divsi3+0x72>
 8004822:	e000      	b.n	8004826 <__divsi3+0x42>
 8004824:	0a09      	lsrs	r1, r1, #8
 8004826:	0bc3      	lsrs	r3, r0, #15
 8004828:	428b      	cmp	r3, r1
 800482a:	d301      	bcc.n	8004830 <__divsi3+0x4c>
 800482c:	03cb      	lsls	r3, r1, #15
 800482e:	1ac0      	subs	r0, r0, r3
 8004830:	4152      	adcs	r2, r2
 8004832:	0b83      	lsrs	r3, r0, #14
 8004834:	428b      	cmp	r3, r1
 8004836:	d301      	bcc.n	800483c <__divsi3+0x58>
 8004838:	038b      	lsls	r3, r1, #14
 800483a:	1ac0      	subs	r0, r0, r3
 800483c:	4152      	adcs	r2, r2
 800483e:	0b43      	lsrs	r3, r0, #13
 8004840:	428b      	cmp	r3, r1
 8004842:	d301      	bcc.n	8004848 <__divsi3+0x64>
 8004844:	034b      	lsls	r3, r1, #13
 8004846:	1ac0      	subs	r0, r0, r3
 8004848:	4152      	adcs	r2, r2
 800484a:	0b03      	lsrs	r3, r0, #12
 800484c:	428b      	cmp	r3, r1
 800484e:	d301      	bcc.n	8004854 <__divsi3+0x70>
 8004850:	030b      	lsls	r3, r1, #12
 8004852:	1ac0      	subs	r0, r0, r3
 8004854:	4152      	adcs	r2, r2
 8004856:	0ac3      	lsrs	r3, r0, #11
 8004858:	428b      	cmp	r3, r1
 800485a:	d301      	bcc.n	8004860 <__divsi3+0x7c>
 800485c:	02cb      	lsls	r3, r1, #11
 800485e:	1ac0      	subs	r0, r0, r3
 8004860:	4152      	adcs	r2, r2
 8004862:	0a83      	lsrs	r3, r0, #10
 8004864:	428b      	cmp	r3, r1
 8004866:	d301      	bcc.n	800486c <__divsi3+0x88>
 8004868:	028b      	lsls	r3, r1, #10
 800486a:	1ac0      	subs	r0, r0, r3
 800486c:	4152      	adcs	r2, r2
 800486e:	0a43      	lsrs	r3, r0, #9
 8004870:	428b      	cmp	r3, r1
 8004872:	d301      	bcc.n	8004878 <__divsi3+0x94>
 8004874:	024b      	lsls	r3, r1, #9
 8004876:	1ac0      	subs	r0, r0, r3
 8004878:	4152      	adcs	r2, r2
 800487a:	0a03      	lsrs	r3, r0, #8
 800487c:	428b      	cmp	r3, r1
 800487e:	d301      	bcc.n	8004884 <__divsi3+0xa0>
 8004880:	020b      	lsls	r3, r1, #8
 8004882:	1ac0      	subs	r0, r0, r3
 8004884:	4152      	adcs	r2, r2
 8004886:	d2cd      	bcs.n	8004824 <__divsi3+0x40>
 8004888:	09c3      	lsrs	r3, r0, #7
 800488a:	428b      	cmp	r3, r1
 800488c:	d301      	bcc.n	8004892 <__divsi3+0xae>
 800488e:	01cb      	lsls	r3, r1, #7
 8004890:	1ac0      	subs	r0, r0, r3
 8004892:	4152      	adcs	r2, r2
 8004894:	0983      	lsrs	r3, r0, #6
 8004896:	428b      	cmp	r3, r1
 8004898:	d301      	bcc.n	800489e <__divsi3+0xba>
 800489a:	018b      	lsls	r3, r1, #6
 800489c:	1ac0      	subs	r0, r0, r3
 800489e:	4152      	adcs	r2, r2
 80048a0:	0943      	lsrs	r3, r0, #5
 80048a2:	428b      	cmp	r3, r1
 80048a4:	d301      	bcc.n	80048aa <__divsi3+0xc6>
 80048a6:	014b      	lsls	r3, r1, #5
 80048a8:	1ac0      	subs	r0, r0, r3
 80048aa:	4152      	adcs	r2, r2
 80048ac:	0903      	lsrs	r3, r0, #4
 80048ae:	428b      	cmp	r3, r1
 80048b0:	d301      	bcc.n	80048b6 <__divsi3+0xd2>
 80048b2:	010b      	lsls	r3, r1, #4
 80048b4:	1ac0      	subs	r0, r0, r3
 80048b6:	4152      	adcs	r2, r2
 80048b8:	08c3      	lsrs	r3, r0, #3
 80048ba:	428b      	cmp	r3, r1
 80048bc:	d301      	bcc.n	80048c2 <__divsi3+0xde>
 80048be:	00cb      	lsls	r3, r1, #3
 80048c0:	1ac0      	subs	r0, r0, r3
 80048c2:	4152      	adcs	r2, r2
 80048c4:	0883      	lsrs	r3, r0, #2
 80048c6:	428b      	cmp	r3, r1
 80048c8:	d301      	bcc.n	80048ce <__divsi3+0xea>
 80048ca:	008b      	lsls	r3, r1, #2
 80048cc:	1ac0      	subs	r0, r0, r3
 80048ce:	4152      	adcs	r2, r2
 80048d0:	0843      	lsrs	r3, r0, #1
 80048d2:	428b      	cmp	r3, r1
 80048d4:	d301      	bcc.n	80048da <__divsi3+0xf6>
 80048d6:	004b      	lsls	r3, r1, #1
 80048d8:	1ac0      	subs	r0, r0, r3
 80048da:	4152      	adcs	r2, r2
 80048dc:	1a41      	subs	r1, r0, r1
 80048de:	d200      	bcs.n	80048e2 <__divsi3+0xfe>
 80048e0:	4601      	mov	r1, r0
 80048e2:	4152      	adcs	r2, r2
 80048e4:	4610      	mov	r0, r2
 80048e6:	4770      	bx	lr
 80048e8:	e05d      	b.n	80049a6 <__divsi3+0x1c2>
 80048ea:	0fca      	lsrs	r2, r1, #31
 80048ec:	d000      	beq.n	80048f0 <__divsi3+0x10c>
 80048ee:	4249      	negs	r1, r1
 80048f0:	1003      	asrs	r3, r0, #32
 80048f2:	d300      	bcc.n	80048f6 <__divsi3+0x112>
 80048f4:	4240      	negs	r0, r0
 80048f6:	4053      	eors	r3, r2
 80048f8:	2200      	movs	r2, #0
 80048fa:	469c      	mov	ip, r3
 80048fc:	0903      	lsrs	r3, r0, #4
 80048fe:	428b      	cmp	r3, r1
 8004900:	d32d      	bcc.n	800495e <__divsi3+0x17a>
 8004902:	0a03      	lsrs	r3, r0, #8
 8004904:	428b      	cmp	r3, r1
 8004906:	d312      	bcc.n	800492e <__divsi3+0x14a>
 8004908:	22fc      	movs	r2, #252	; 0xfc
 800490a:	0189      	lsls	r1, r1, #6
 800490c:	ba12      	rev	r2, r2
 800490e:	0a03      	lsrs	r3, r0, #8
 8004910:	428b      	cmp	r3, r1
 8004912:	d30c      	bcc.n	800492e <__divsi3+0x14a>
 8004914:	0189      	lsls	r1, r1, #6
 8004916:	1192      	asrs	r2, r2, #6
 8004918:	428b      	cmp	r3, r1
 800491a:	d308      	bcc.n	800492e <__divsi3+0x14a>
 800491c:	0189      	lsls	r1, r1, #6
 800491e:	1192      	asrs	r2, r2, #6
 8004920:	428b      	cmp	r3, r1
 8004922:	d304      	bcc.n	800492e <__divsi3+0x14a>
 8004924:	0189      	lsls	r1, r1, #6
 8004926:	d03a      	beq.n	800499e <__divsi3+0x1ba>
 8004928:	1192      	asrs	r2, r2, #6
 800492a:	e000      	b.n	800492e <__divsi3+0x14a>
 800492c:	0989      	lsrs	r1, r1, #6
 800492e:	09c3      	lsrs	r3, r0, #7
 8004930:	428b      	cmp	r3, r1
 8004932:	d301      	bcc.n	8004938 <__divsi3+0x154>
 8004934:	01cb      	lsls	r3, r1, #7
 8004936:	1ac0      	subs	r0, r0, r3
 8004938:	4152      	adcs	r2, r2
 800493a:	0983      	lsrs	r3, r0, #6
 800493c:	428b      	cmp	r3, r1
 800493e:	d301      	bcc.n	8004944 <__divsi3+0x160>
 8004940:	018b      	lsls	r3, r1, #6
 8004942:	1ac0      	subs	r0, r0, r3
 8004944:	4152      	adcs	r2, r2
 8004946:	0943      	lsrs	r3, r0, #5
 8004948:	428b      	cmp	r3, r1
 800494a:	d301      	bcc.n	8004950 <__divsi3+0x16c>
 800494c:	014b      	lsls	r3, r1, #5
 800494e:	1ac0      	subs	r0, r0, r3
 8004950:	4152      	adcs	r2, r2
 8004952:	0903      	lsrs	r3, r0, #4
 8004954:	428b      	cmp	r3, r1
 8004956:	d301      	bcc.n	800495c <__divsi3+0x178>
 8004958:	010b      	lsls	r3, r1, #4
 800495a:	1ac0      	subs	r0, r0, r3
 800495c:	4152      	adcs	r2, r2
 800495e:	08c3      	lsrs	r3, r0, #3
 8004960:	428b      	cmp	r3, r1
 8004962:	d301      	bcc.n	8004968 <__divsi3+0x184>
 8004964:	00cb      	lsls	r3, r1, #3
 8004966:	1ac0      	subs	r0, r0, r3
 8004968:	4152      	adcs	r2, r2
 800496a:	0883      	lsrs	r3, r0, #2
 800496c:	428b      	cmp	r3, r1
 800496e:	d301      	bcc.n	8004974 <__divsi3+0x190>
 8004970:	008b      	lsls	r3, r1, #2
 8004972:	1ac0      	subs	r0, r0, r3
 8004974:	4152      	adcs	r2, r2
 8004976:	d2d9      	bcs.n	800492c <__divsi3+0x148>
 8004978:	0843      	lsrs	r3, r0, #1
 800497a:	428b      	cmp	r3, r1
 800497c:	d301      	bcc.n	8004982 <__divsi3+0x19e>
 800497e:	004b      	lsls	r3, r1, #1
 8004980:	1ac0      	subs	r0, r0, r3
 8004982:	4152      	adcs	r2, r2
 8004984:	1a41      	subs	r1, r0, r1
 8004986:	d200      	bcs.n	800498a <__divsi3+0x1a6>
 8004988:	4601      	mov	r1, r0
 800498a:	4663      	mov	r3, ip
 800498c:	4152      	adcs	r2, r2
 800498e:	105b      	asrs	r3, r3, #1
 8004990:	4610      	mov	r0, r2
 8004992:	d301      	bcc.n	8004998 <__divsi3+0x1b4>
 8004994:	4240      	negs	r0, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d500      	bpl.n	800499c <__divsi3+0x1b8>
 800499a:	4249      	negs	r1, r1
 800499c:	4770      	bx	lr
 800499e:	4663      	mov	r3, ip
 80049a0:	105b      	asrs	r3, r3, #1
 80049a2:	d300      	bcc.n	80049a6 <__divsi3+0x1c2>
 80049a4:	4240      	negs	r0, r0
 80049a6:	b501      	push	{r0, lr}
 80049a8:	2000      	movs	r0, #0
 80049aa:	f000 f805 	bl	80049b8 <__aeabi_idiv0>
 80049ae:	bd02      	pop	{r1, pc}

080049b0 <__aeabi_idivmod>:
 80049b0:	2900      	cmp	r1, #0
 80049b2:	d0f8      	beq.n	80049a6 <__divsi3+0x1c2>
 80049b4:	e716      	b.n	80047e4 <__divsi3>
 80049b6:	4770      	bx	lr

080049b8 <__aeabi_idiv0>:
 80049b8:	4770      	bx	lr
 80049ba:	46c0      	nop			; (mov r8, r8)

080049bc <__aeabi_uldivmod>:
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d111      	bne.n	80049e4 <__aeabi_uldivmod+0x28>
 80049c0:	2a00      	cmp	r2, #0
 80049c2:	d10f      	bne.n	80049e4 <__aeabi_uldivmod+0x28>
 80049c4:	2900      	cmp	r1, #0
 80049c6:	d100      	bne.n	80049ca <__aeabi_uldivmod+0xe>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d002      	beq.n	80049d2 <__aeabi_uldivmod+0x16>
 80049cc:	2100      	movs	r1, #0
 80049ce:	43c9      	mvns	r1, r1
 80049d0:	0008      	movs	r0, r1
 80049d2:	b407      	push	{r0, r1, r2}
 80049d4:	4802      	ldr	r0, [pc, #8]	; (80049e0 <__aeabi_uldivmod+0x24>)
 80049d6:	a102      	add	r1, pc, #8	; (adr r1, 80049e0 <__aeabi_uldivmod+0x24>)
 80049d8:	1840      	adds	r0, r0, r1
 80049da:	9002      	str	r0, [sp, #8]
 80049dc:	bd03      	pop	{r0, r1, pc}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	ffffffd9 	.word	0xffffffd9
 80049e4:	b403      	push	{r0, r1}
 80049e6:	4668      	mov	r0, sp
 80049e8:	b501      	push	{r0, lr}
 80049ea:	9802      	ldr	r0, [sp, #8]
 80049ec:	f000 f806 	bl	80049fc <__udivmoddi4>
 80049f0:	9b01      	ldr	r3, [sp, #4]
 80049f2:	469e      	mov	lr, r3
 80049f4:	b002      	add	sp, #8
 80049f6:	bc0c      	pop	{r2, r3}
 80049f8:	4770      	bx	lr
 80049fa:	46c0      	nop			; (mov r8, r8)

080049fc <__udivmoddi4>:
 80049fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049fe:	4657      	mov	r7, sl
 8004a00:	464e      	mov	r6, r9
 8004a02:	4645      	mov	r5, r8
 8004a04:	46de      	mov	lr, fp
 8004a06:	b5e0      	push	{r5, r6, r7, lr}
 8004a08:	0004      	movs	r4, r0
 8004a0a:	000d      	movs	r5, r1
 8004a0c:	4692      	mov	sl, r2
 8004a0e:	4699      	mov	r9, r3
 8004a10:	b083      	sub	sp, #12
 8004a12:	428b      	cmp	r3, r1
 8004a14:	d830      	bhi.n	8004a78 <__udivmoddi4+0x7c>
 8004a16:	d02d      	beq.n	8004a74 <__udivmoddi4+0x78>
 8004a18:	4649      	mov	r1, r9
 8004a1a:	4650      	mov	r0, sl
 8004a1c:	f000 f8ba 	bl	8004b94 <__clzdi2>
 8004a20:	0029      	movs	r1, r5
 8004a22:	0006      	movs	r6, r0
 8004a24:	0020      	movs	r0, r4
 8004a26:	f000 f8b5 	bl	8004b94 <__clzdi2>
 8004a2a:	1a33      	subs	r3, r6, r0
 8004a2c:	4698      	mov	r8, r3
 8004a2e:	3b20      	subs	r3, #32
 8004a30:	469b      	mov	fp, r3
 8004a32:	d433      	bmi.n	8004a9c <__udivmoddi4+0xa0>
 8004a34:	465a      	mov	r2, fp
 8004a36:	4653      	mov	r3, sl
 8004a38:	4093      	lsls	r3, r2
 8004a3a:	4642      	mov	r2, r8
 8004a3c:	001f      	movs	r7, r3
 8004a3e:	4653      	mov	r3, sl
 8004a40:	4093      	lsls	r3, r2
 8004a42:	001e      	movs	r6, r3
 8004a44:	42af      	cmp	r7, r5
 8004a46:	d83a      	bhi.n	8004abe <__udivmoddi4+0xc2>
 8004a48:	42af      	cmp	r7, r5
 8004a4a:	d100      	bne.n	8004a4e <__udivmoddi4+0x52>
 8004a4c:	e078      	b.n	8004b40 <__udivmoddi4+0x144>
 8004a4e:	465b      	mov	r3, fp
 8004a50:	1ba4      	subs	r4, r4, r6
 8004a52:	41bd      	sbcs	r5, r7
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	da00      	bge.n	8004a5a <__udivmoddi4+0x5e>
 8004a58:	e075      	b.n	8004b46 <__udivmoddi4+0x14a>
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	9200      	str	r2, [sp, #0]
 8004a60:	9301      	str	r3, [sp, #4]
 8004a62:	2301      	movs	r3, #1
 8004a64:	465a      	mov	r2, fp
 8004a66:	4093      	lsls	r3, r2
 8004a68:	9301      	str	r3, [sp, #4]
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	4642      	mov	r2, r8
 8004a6e:	4093      	lsls	r3, r2
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	e028      	b.n	8004ac6 <__udivmoddi4+0xca>
 8004a74:	4282      	cmp	r2, r0
 8004a76:	d9cf      	bls.n	8004a18 <__udivmoddi4+0x1c>
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	9200      	str	r2, [sp, #0]
 8004a7e:	9301      	str	r3, [sp, #4]
 8004a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <__udivmoddi4+0x8e>
 8004a86:	601c      	str	r4, [r3, #0]
 8004a88:	605d      	str	r5, [r3, #4]
 8004a8a:	9800      	ldr	r0, [sp, #0]
 8004a8c:	9901      	ldr	r1, [sp, #4]
 8004a8e:	b003      	add	sp, #12
 8004a90:	bcf0      	pop	{r4, r5, r6, r7}
 8004a92:	46bb      	mov	fp, r7
 8004a94:	46b2      	mov	sl, r6
 8004a96:	46a9      	mov	r9, r5
 8004a98:	46a0      	mov	r8, r4
 8004a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	2320      	movs	r3, #32
 8004aa0:	1a9b      	subs	r3, r3, r2
 8004aa2:	4652      	mov	r2, sl
 8004aa4:	40da      	lsrs	r2, r3
 8004aa6:	4641      	mov	r1, r8
 8004aa8:	0013      	movs	r3, r2
 8004aaa:	464a      	mov	r2, r9
 8004aac:	408a      	lsls	r2, r1
 8004aae:	0017      	movs	r7, r2
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	431f      	orrs	r7, r3
 8004ab4:	4653      	mov	r3, sl
 8004ab6:	4093      	lsls	r3, r2
 8004ab8:	001e      	movs	r6, r3
 8004aba:	42af      	cmp	r7, r5
 8004abc:	d9c4      	bls.n	8004a48 <__udivmoddi4+0x4c>
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	9200      	str	r2, [sp, #0]
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	4643      	mov	r3, r8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0d9      	beq.n	8004a80 <__udivmoddi4+0x84>
 8004acc:	07fb      	lsls	r3, r7, #31
 8004ace:	0872      	lsrs	r2, r6, #1
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	4646      	mov	r6, r8
 8004ad4:	087b      	lsrs	r3, r7, #1
 8004ad6:	e00e      	b.n	8004af6 <__udivmoddi4+0xfa>
 8004ad8:	42ab      	cmp	r3, r5
 8004ada:	d101      	bne.n	8004ae0 <__udivmoddi4+0xe4>
 8004adc:	42a2      	cmp	r2, r4
 8004ade:	d80c      	bhi.n	8004afa <__udivmoddi4+0xfe>
 8004ae0:	1aa4      	subs	r4, r4, r2
 8004ae2:	419d      	sbcs	r5, r3
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	1924      	adds	r4, r4, r4
 8004ae8:	416d      	adcs	r5, r5
 8004aea:	2100      	movs	r1, #0
 8004aec:	3e01      	subs	r6, #1
 8004aee:	1824      	adds	r4, r4, r0
 8004af0:	414d      	adcs	r5, r1
 8004af2:	2e00      	cmp	r6, #0
 8004af4:	d006      	beq.n	8004b04 <__udivmoddi4+0x108>
 8004af6:	42ab      	cmp	r3, r5
 8004af8:	d9ee      	bls.n	8004ad8 <__udivmoddi4+0xdc>
 8004afa:	3e01      	subs	r6, #1
 8004afc:	1924      	adds	r4, r4, r4
 8004afe:	416d      	adcs	r5, r5
 8004b00:	2e00      	cmp	r6, #0
 8004b02:	d1f8      	bne.n	8004af6 <__udivmoddi4+0xfa>
 8004b04:	9800      	ldr	r0, [sp, #0]
 8004b06:	9901      	ldr	r1, [sp, #4]
 8004b08:	465b      	mov	r3, fp
 8004b0a:	1900      	adds	r0, r0, r4
 8004b0c:	4169      	adcs	r1, r5
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	db24      	blt.n	8004b5c <__udivmoddi4+0x160>
 8004b12:	002b      	movs	r3, r5
 8004b14:	465a      	mov	r2, fp
 8004b16:	4644      	mov	r4, r8
 8004b18:	40d3      	lsrs	r3, r2
 8004b1a:	002a      	movs	r2, r5
 8004b1c:	40e2      	lsrs	r2, r4
 8004b1e:	001c      	movs	r4, r3
 8004b20:	465b      	mov	r3, fp
 8004b22:	0015      	movs	r5, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	db2a      	blt.n	8004b7e <__udivmoddi4+0x182>
 8004b28:	0026      	movs	r6, r4
 8004b2a:	409e      	lsls	r6, r3
 8004b2c:	0033      	movs	r3, r6
 8004b2e:	0026      	movs	r6, r4
 8004b30:	4647      	mov	r7, r8
 8004b32:	40be      	lsls	r6, r7
 8004b34:	0032      	movs	r2, r6
 8004b36:	1a80      	subs	r0, r0, r2
 8004b38:	4199      	sbcs	r1, r3
 8004b3a:	9000      	str	r0, [sp, #0]
 8004b3c:	9101      	str	r1, [sp, #4]
 8004b3e:	e79f      	b.n	8004a80 <__udivmoddi4+0x84>
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	d8bc      	bhi.n	8004abe <__udivmoddi4+0xc2>
 8004b44:	e783      	b.n	8004a4e <__udivmoddi4+0x52>
 8004b46:	4642      	mov	r2, r8
 8004b48:	2320      	movs	r3, #32
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	1a9b      	subs	r3, r3, r2
 8004b4e:	2200      	movs	r2, #0
 8004b50:	9100      	str	r1, [sp, #0]
 8004b52:	9201      	str	r2, [sp, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	40da      	lsrs	r2, r3
 8004b58:	9201      	str	r2, [sp, #4]
 8004b5a:	e786      	b.n	8004a6a <__udivmoddi4+0x6e>
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	2320      	movs	r3, #32
 8004b60:	1a9b      	subs	r3, r3, r2
 8004b62:	002a      	movs	r2, r5
 8004b64:	4646      	mov	r6, r8
 8004b66:	409a      	lsls	r2, r3
 8004b68:	0023      	movs	r3, r4
 8004b6a:	40f3      	lsrs	r3, r6
 8004b6c:	4644      	mov	r4, r8
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	002a      	movs	r2, r5
 8004b72:	40e2      	lsrs	r2, r4
 8004b74:	001c      	movs	r4, r3
 8004b76:	465b      	mov	r3, fp
 8004b78:	0015      	movs	r5, r2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	dad4      	bge.n	8004b28 <__udivmoddi4+0x12c>
 8004b7e:	4642      	mov	r2, r8
 8004b80:	002f      	movs	r7, r5
 8004b82:	2320      	movs	r3, #32
 8004b84:	0026      	movs	r6, r4
 8004b86:	4097      	lsls	r7, r2
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	40de      	lsrs	r6, r3
 8004b8c:	003b      	movs	r3, r7
 8004b8e:	4333      	orrs	r3, r6
 8004b90:	e7cd      	b.n	8004b2e <__udivmoddi4+0x132>
 8004b92:	46c0      	nop			; (mov r8, r8)

08004b94 <__clzdi2>:
 8004b94:	b510      	push	{r4, lr}
 8004b96:	2900      	cmp	r1, #0
 8004b98:	d103      	bne.n	8004ba2 <__clzdi2+0xe>
 8004b9a:	f000 f807 	bl	8004bac <__clzsi2>
 8004b9e:	3020      	adds	r0, #32
 8004ba0:	e002      	b.n	8004ba8 <__clzdi2+0x14>
 8004ba2:	0008      	movs	r0, r1
 8004ba4:	f000 f802 	bl	8004bac <__clzsi2>
 8004ba8:	bd10      	pop	{r4, pc}
 8004baa:	46c0      	nop			; (mov r8, r8)

08004bac <__clzsi2>:
 8004bac:	211c      	movs	r1, #28
 8004bae:	2301      	movs	r3, #1
 8004bb0:	041b      	lsls	r3, r3, #16
 8004bb2:	4298      	cmp	r0, r3
 8004bb4:	d301      	bcc.n	8004bba <__clzsi2+0xe>
 8004bb6:	0c00      	lsrs	r0, r0, #16
 8004bb8:	3910      	subs	r1, #16
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	4298      	cmp	r0, r3
 8004bbe:	d301      	bcc.n	8004bc4 <__clzsi2+0x18>
 8004bc0:	0a00      	lsrs	r0, r0, #8
 8004bc2:	3908      	subs	r1, #8
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	4298      	cmp	r0, r3
 8004bc8:	d301      	bcc.n	8004bce <__clzsi2+0x22>
 8004bca:	0900      	lsrs	r0, r0, #4
 8004bcc:	3904      	subs	r1, #4
 8004bce:	a202      	add	r2, pc, #8	; (adr r2, 8004bd8 <__clzsi2+0x2c>)
 8004bd0:	5c10      	ldrb	r0, [r2, r0]
 8004bd2:	1840      	adds	r0, r0, r1
 8004bd4:	4770      	bx	lr
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	02020304 	.word	0x02020304
 8004bdc:	01010101 	.word	0x01010101
	...

08004be8 <AppHashVerify>:
static bool SingleCallSHA256(const uint8_t* message, const size_t messageLen, uint8_t* digest, size_t* digestLen);
static bool VerifySignatureWithPubKey(const uint8_t* pubKey, size_t pubKeyLen, const uint8_t* hash, size_t hashLen, const uint8_t* signature, size_t signatureLen);

//verify hash
void AppHashVerify(void)
{
 8004be8:	b5b0      	push	{r4, r5, r7, lr}
 8004bea:	b08a      	sub	sp, #40	; 0x28
 8004bec:	af00      	add	r7, sp, #0
  uint8_t digest[HASH_SIZE];
  size_t digestLen;
  bool result = false;
 8004bee:	2327      	movs	r3, #39	; 0x27
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	701a      	strb	r2, [r3, #0]

  printf("Start FW Hash Check...\r\n");
 8004bf6:	4b55      	ldr	r3, [pc, #340]	; (8004d4c <AppHashVerify+0x164>)
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f003 fc83 	bl	8008504 <puts>
  printf("FW start address: 0x%08lx\r\n", FW_START_ADD);
 8004bfe:	2380      	movs	r3, #128	; 0x80
 8004c00:	051a      	lsls	r2, r3, #20
 8004c02:	4b53      	ldr	r3, [pc, #332]	; (8004d50 <AppHashVerify+0x168>)
 8004c04:	0011      	movs	r1, r2
 8004c06:	0018      	movs	r0, r3
 8004c08:	f003 fbf0 	bl	80083ec <iprintf>
  printf("FW size: 0x%08lx\r\n", FW_SIZE_PAGE_ALIGNED);
 8004c0c:	4b51      	ldr	r3, [pc, #324]	; (8004d54 <AppHashVerify+0x16c>)
 8004c0e:	055b      	lsls	r3, r3, #21
 8004c10:	0d5b      	lsrs	r3, r3, #21
 8004c12:	d105      	bne.n	8004c20 <AppHashVerify+0x38>
 8004c14:	4b4f      	ldr	r3, [pc, #316]	; (8004d54 <AppHashVerify+0x16c>)
 8004c16:	22f8      	movs	r2, #248	; 0xf8
 8004c18:	0612      	lsls	r2, r2, #24
 8004c1a:	4694      	mov	ip, r2
 8004c1c:	4463      	add	r3, ip
 8004c1e:	e007      	b.n	8004c30 <AppHashVerify+0x48>
 8004c20:	4b4c      	ldr	r3, [pc, #304]	; (8004d54 <AppHashVerify+0x16c>)
 8004c22:	22f8      	movs	r2, #248	; 0xf8
 8004c24:	0612      	lsls	r2, r2, #24
 8004c26:	4694      	mov	ip, r2
 8004c28:	4463      	add	r3, ip
 8004c2a:	0adb      	lsrs	r3, r3, #11
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	02db      	lsls	r3, r3, #11
 8004c30:	4a49      	ldr	r2, [pc, #292]	; (8004d58 <AppHashVerify+0x170>)
 8004c32:	0019      	movs	r1, r3
 8004c34:	0010      	movs	r0, r2
 8004c36:	f003 fbd9 	bl	80083ec <iprintf>
  printf("FW HASH address: 0x%08lx\r\n", HASH_ADD);
 8004c3a:	4b46      	ldr	r3, [pc, #280]	; (8004d54 <AppHashVerify+0x16c>)
 8004c3c:	055b      	lsls	r3, r3, #21
 8004c3e:	0d5b      	lsrs	r3, r3, #21
 8004c40:	d101      	bne.n	8004c46 <AppHashVerify+0x5e>
 8004c42:	4b44      	ldr	r3, [pc, #272]	; (8004d54 <AppHashVerify+0x16c>)
 8004c44:	e009      	b.n	8004c5a <AppHashVerify+0x72>
 8004c46:	4b43      	ldr	r3, [pc, #268]	; (8004d54 <AppHashVerify+0x16c>)
 8004c48:	22f8      	movs	r2, #248	; 0xf8
 8004c4a:	0612      	lsls	r2, r2, #24
 8004c4c:	4694      	mov	ip, r2
 8004c4e:	4463      	add	r3, ip
 8004c50:	0adb      	lsrs	r3, r3, #11
 8004c52:	4a42      	ldr	r2, [pc, #264]	; (8004d5c <AppHashVerify+0x174>)
 8004c54:	4694      	mov	ip, r2
 8004c56:	4463      	add	r3, ip
 8004c58:	02db      	lsls	r3, r3, #11
 8004c5a:	4a41      	ldr	r2, [pc, #260]	; (8004d60 <AppHashVerify+0x178>)
 8004c5c:	0019      	movs	r1, r3
 8004c5e:	0010      	movs	r0, r2
 8004c60:	f003 fbc4 	bl	80083ec <iprintf>
  printf("FW HASH SIZE: %u\r\n", HASH_SIZE);
 8004c64:	4b3f      	ldr	r3, [pc, #252]	; (8004d64 <AppHashVerify+0x17c>)
 8004c66:	2120      	movs	r1, #32
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f003 fbbf 	bl	80083ec <iprintf>

  result = SingleCallSHA256(
      (uint8_t*)FW_START_ADD,
      (uint32_t)FW_SIZE_PAGE_ALIGNED,
 8004c6e:	4b39      	ldr	r3, [pc, #228]	; (8004d54 <AppHashVerify+0x16c>)
 8004c70:	055b      	lsls	r3, r3, #21
 8004c72:	0d5b      	lsrs	r3, r3, #21
  result = SingleCallSHA256(
 8004c74:	d104      	bne.n	8004c80 <AppHashVerify+0x98>
      (uint32_t)FW_SIZE_PAGE_ALIGNED,
 8004c76:	4b37      	ldr	r3, [pc, #220]	; (8004d54 <AppHashVerify+0x16c>)
  result = SingleCallSHA256(
 8004c78:	22f8      	movs	r2, #248	; 0xf8
 8004c7a:	0612      	lsls	r2, r2, #24
 8004c7c:	1899      	adds	r1, r3, r2
 8004c7e:	e007      	b.n	8004c90 <AppHashVerify+0xa8>
      (uint32_t)FW_SIZE_PAGE_ALIGNED,
 8004c80:	4b34      	ldr	r3, [pc, #208]	; (8004d54 <AppHashVerify+0x16c>)
 8004c82:	22f8      	movs	r2, #248	; 0xf8
 8004c84:	0612      	lsls	r2, r2, #24
 8004c86:	4694      	mov	ip, r2
 8004c88:	4463      	add	r3, ip
 8004c8a:	0adb      	lsrs	r3, r3, #11
 8004c8c:	3301      	adds	r3, #1
  result = SingleCallSHA256(
 8004c8e:	02d9      	lsls	r1, r3, #11
 8004c90:	2527      	movs	r5, #39	; 0x27
 8004c92:	197c      	adds	r4, r7, r5
 8004c94:	003b      	movs	r3, r7
 8004c96:	1d3a      	adds	r2, r7, #4
 8004c98:	2080      	movs	r0, #128	; 0x80
 8004c9a:	0500      	lsls	r0, r0, #20
 8004c9c:	f000 fb4e 	bl	800533c <SingleCallSHA256>
 8004ca0:	0003      	movs	r3, r0
 8004ca2:	7023      	strb	r3, [r4, #0]
      digest,
      &digestLen);

  if(result == true && digestLen == HASH_SIZE)
 8004ca4:	197b      	adds	r3, r7, r5
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d044      	beq.n	8004d36 <AppHashVerify+0x14e>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b20      	cmp	r3, #32
 8004cb0:	d141      	bne.n	8004d36 <AppHashVerify+0x14e>
  {
    printf("FW HASH Result: \r\n");
 8004cb2:	4b2d      	ldr	r3, [pc, #180]	; (8004d68 <AppHashVerify+0x180>)
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f003 fc25 	bl	8008504 <puts>
    printHexArray(digest, sizeof(digest));
 8004cba:	1d3b      	adds	r3, r7, #4
 8004cbc:	2120      	movs	r1, #32
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	f000 fc4a 	bl	8005558 <printHexArray>

    printf("Expected HASH Result: \r\n");
 8004cc4:	4b29      	ldr	r3, [pc, #164]	; (8004d6c <AppHashVerify+0x184>)
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f003 fc1c 	bl	8008504 <puts>
    printHexArray((const uint8_t*)HASH_ADD, HASH_SIZE);
 8004ccc:	4b21      	ldr	r3, [pc, #132]	; (8004d54 <AppHashVerify+0x16c>)
 8004cce:	055b      	lsls	r3, r3, #21
 8004cd0:	0d5b      	lsrs	r3, r3, #21
 8004cd2:	d101      	bne.n	8004cd8 <AppHashVerify+0xf0>
 8004cd4:	4b1f      	ldr	r3, [pc, #124]	; (8004d54 <AppHashVerify+0x16c>)
 8004cd6:	e009      	b.n	8004cec <AppHashVerify+0x104>
 8004cd8:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <AppHashVerify+0x16c>)
 8004cda:	22f8      	movs	r2, #248	; 0xf8
 8004cdc:	0612      	lsls	r2, r2, #24
 8004cde:	4694      	mov	ip, r2
 8004ce0:	4463      	add	r3, ip
 8004ce2:	0adb      	lsrs	r3, r3, #11
 8004ce4:	4a1d      	ldr	r2, [pc, #116]	; (8004d5c <AppHashVerify+0x174>)
 8004ce6:	4694      	mov	ip, r2
 8004ce8:	4463      	add	r3, ip
 8004cea:	02db      	lsls	r3, r3, #11
 8004cec:	2120      	movs	r1, #32
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f000 fc32 	bl	8005558 <printHexArray>

    if (memcmp((const uint8_t*)HASH_ADD, digest, HASH_SIZE) == 0)
 8004cf4:	4b17      	ldr	r3, [pc, #92]	; (8004d54 <AppHashVerify+0x16c>)
 8004cf6:	055b      	lsls	r3, r3, #21
 8004cf8:	0d5b      	lsrs	r3, r3, #21
 8004cfa:	d101      	bne.n	8004d00 <AppHashVerify+0x118>
 8004cfc:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <AppHashVerify+0x16c>)
 8004cfe:	e009      	b.n	8004d14 <AppHashVerify+0x12c>
 8004d00:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <AppHashVerify+0x16c>)
 8004d02:	22f8      	movs	r2, #248	; 0xf8
 8004d04:	0612      	lsls	r2, r2, #24
 8004d06:	4694      	mov	ip, r2
 8004d08:	4463      	add	r3, ip
 8004d0a:	0adb      	lsrs	r3, r3, #11
 8004d0c:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <AppHashVerify+0x174>)
 8004d0e:	4694      	mov	ip, r2
 8004d10:	4463      	add	r3, ip
 8004d12:	02db      	lsls	r3, r3, #11
 8004d14:	1d39      	adds	r1, r7, #4
 8004d16:	2220      	movs	r2, #32
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f003 fb47 	bl	80083ac <memcmp>
 8004d1e:	1e03      	subs	r3, r0, #0
 8004d20:	d104      	bne.n	8004d2c <AppHashVerify+0x144>
    {
      printf("FW Hash check pass.\r\n");
 8004d22:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <AppHashVerify+0x188>)
 8004d24:	0018      	movs	r0, r3
 8004d26:	f003 fbed 	bl	8008504 <puts>
    if (memcmp((const uint8_t*)HASH_ADD, digest, HASH_SIZE) == 0)
 8004d2a:	e00b      	b.n	8004d44 <AppHashVerify+0x15c>
    }
    else
    {
      printf("FW Hash check fail.\r\n");
 8004d2c:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <AppHashVerify+0x18c>)
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f003 fbe8 	bl	8008504 <puts>
      goto ERROR;
 8004d34:	e004      	b.n	8004d40 <AppHashVerify+0x158>
    }
  }
  else
  {
    printf("FW Hash computation fail!\r\n");
 8004d36:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <AppHashVerify+0x190>)
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f003 fbe3 	bl	8008504 <puts>
    goto ERROR;
 8004d3e:	46c0      	nop			; (mov r8, r8)
  }
  return;

ERROR:
  Error_Handler();
 8004d40:	f000 fcad 	bl	800569e <Error_Handler>
}
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b00a      	add	sp, #40	; 0x28
 8004d48:	bdb0      	pop	{r4, r5, r7, pc}
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	080094ac 	.word	0x080094ac
 8004d50:	080094c4 	.word	0x080094c4
 8004d54:	0800a1e4 	.word	0x0800a1e4
 8004d58:	080094e0 	.word	0x080094e0
 8004d5c:	00010001 	.word	0x00010001
 8004d60:	080094f4 	.word	0x080094f4
 8004d64:	08009510 	.word	0x08009510
 8004d68:	08009524 	.word	0x08009524
 8004d6c:	08009538 	.word	0x08009538
 8004d70:	08009550 	.word	0x08009550
 8004d74:	08009568 	.word	0x08009568
 8004d78:	08009580 	.word	0x08009580

08004d7c <AppSignatureVerify>:

void AppSignatureVerify(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af02      	add	r7, sp, #8
  printf("Start FW Signature Check...\r\n");
 8004d82:	4b76      	ldr	r3, [pc, #472]	; (8004f5c <AppSignatureVerify+0x1e0>)
 8004d84:	0018      	movs	r0, r3
 8004d86:	f003 fbbd 	bl	8008504 <puts>
  printf("FW HASH address: 0x%08lx\r\n", HASH_ADD);
 8004d8a:	4b75      	ldr	r3, [pc, #468]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004d8c:	055b      	lsls	r3, r3, #21
 8004d8e:	0d5b      	lsrs	r3, r3, #21
 8004d90:	d101      	bne.n	8004d96 <AppSignatureVerify+0x1a>
 8004d92:	4b73      	ldr	r3, [pc, #460]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004d94:	e009      	b.n	8004daa <AppSignatureVerify+0x2e>
 8004d96:	4b72      	ldr	r3, [pc, #456]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004d98:	22f8      	movs	r2, #248	; 0xf8
 8004d9a:	0612      	lsls	r2, r2, #24
 8004d9c:	4694      	mov	ip, r2
 8004d9e:	4463      	add	r3, ip
 8004da0:	0adb      	lsrs	r3, r3, #11
 8004da2:	4a70      	ldr	r2, [pc, #448]	; (8004f64 <AppSignatureVerify+0x1e8>)
 8004da4:	4694      	mov	ip, r2
 8004da6:	4463      	add	r3, ip
 8004da8:	02db      	lsls	r3, r3, #11
 8004daa:	4a6f      	ldr	r2, [pc, #444]	; (8004f68 <AppSignatureVerify+0x1ec>)
 8004dac:	0019      	movs	r1, r3
 8004dae:	0010      	movs	r0, r2
 8004db0:	f003 fb1c 	bl	80083ec <iprintf>
  printf("FW HASH size: %u\r\n", HASH_SIZE);
 8004db4:	4b6d      	ldr	r3, [pc, #436]	; (8004f6c <AppSignatureVerify+0x1f0>)
 8004db6:	2120      	movs	r1, #32
 8004db8:	0018      	movs	r0, r3
 8004dba:	f003 fb17 	bl	80083ec <iprintf>
  printf("FW Signature address: 0x%08lx\r\n", SIG_ADD);
 8004dbe:	4b68      	ldr	r3, [pc, #416]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004dc0:	055b      	lsls	r3, r3, #21
 8004dc2:	0d5b      	lsrs	r3, r3, #21
 8004dc4:	d102      	bne.n	8004dcc <AppSignatureVerify+0x50>
 8004dc6:	4b66      	ldr	r3, [pc, #408]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004dc8:	3320      	adds	r3, #32
 8004dca:	e00a      	b.n	8004de2 <AppSignatureVerify+0x66>
 8004dcc:	4b64      	ldr	r3, [pc, #400]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004dce:	22f8      	movs	r2, #248	; 0xf8
 8004dd0:	0612      	lsls	r2, r2, #24
 8004dd2:	4694      	mov	ip, r2
 8004dd4:	4463      	add	r3, ip
 8004dd6:	0adb      	lsrs	r3, r3, #11
 8004dd8:	4a62      	ldr	r2, [pc, #392]	; (8004f64 <AppSignatureVerify+0x1e8>)
 8004dda:	4694      	mov	ip, r2
 8004ddc:	4463      	add	r3, ip
 8004dde:	02db      	lsls	r3, r3, #11
 8004de0:	3320      	adds	r3, #32
 8004de2:	4a63      	ldr	r2, [pc, #396]	; (8004f70 <AppSignatureVerify+0x1f4>)
 8004de4:	0019      	movs	r1, r3
 8004de6:	0010      	movs	r0, r2
 8004de8:	f003 fb00 	bl	80083ec <iprintf>
  printf("FW Signature SIZE: %u\r\n", SIG_SIZE);
 8004dec:	4b61      	ldr	r3, [pc, #388]	; (8004f74 <AppSignatureVerify+0x1f8>)
 8004dee:	2140      	movs	r1, #64	; 0x40
 8004df0:	0018      	movs	r0, r3
 8004df2:	f003 fafb 	bl	80083ec <iprintf>

  int i;
  printf("FW HASH Result: \r\n");
 8004df6:	4b60      	ldr	r3, [pc, #384]	; (8004f78 <AppSignatureVerify+0x1fc>)
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f003 fb83 	bl	8008504 <puts>
  printHexArray((const uint8_t*)HASH_ADD, HASH_SIZE);
 8004dfe:	4b58      	ldr	r3, [pc, #352]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004e00:	055b      	lsls	r3, r3, #21
 8004e02:	0d5b      	lsrs	r3, r3, #21
 8004e04:	d101      	bne.n	8004e0a <AppSignatureVerify+0x8e>
 8004e06:	4b56      	ldr	r3, [pc, #344]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004e08:	e009      	b.n	8004e1e <AppSignatureVerify+0xa2>
 8004e0a:	4b55      	ldr	r3, [pc, #340]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004e0c:	22f8      	movs	r2, #248	; 0xf8
 8004e0e:	0612      	lsls	r2, r2, #24
 8004e10:	4694      	mov	ip, r2
 8004e12:	4463      	add	r3, ip
 8004e14:	0adb      	lsrs	r3, r3, #11
 8004e16:	4a53      	ldr	r2, [pc, #332]	; (8004f64 <AppSignatureVerify+0x1e8>)
 8004e18:	4694      	mov	ip, r2
 8004e1a:	4463      	add	r3, ip
 8004e1c:	02db      	lsls	r3, r3, #11
 8004e1e:	2120      	movs	r1, #32
 8004e20:	0018      	movs	r0, r3
 8004e22:	f000 fb99 	bl	8005558 <printHexArray>

  printf("FW SIGNATURE data: \r\n");
 8004e26:	4b55      	ldr	r3, [pc, #340]	; (8004f7c <AppSignatureVerify+0x200>)
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f003 fb6b 	bl	8008504 <puts>
  printHexArray((const uint8_t*)SIG_ADD, SIG_SIZE);
 8004e2e:	4b4c      	ldr	r3, [pc, #304]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004e30:	055b      	lsls	r3, r3, #21
 8004e32:	0d5b      	lsrs	r3, r3, #21
 8004e34:	d102      	bne.n	8004e3c <AppSignatureVerify+0xc0>
 8004e36:	4b4a      	ldr	r3, [pc, #296]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004e38:	3320      	adds	r3, #32
 8004e3a:	e00a      	b.n	8004e52 <AppSignatureVerify+0xd6>
 8004e3c:	4b48      	ldr	r3, [pc, #288]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004e3e:	22f8      	movs	r2, #248	; 0xf8
 8004e40:	0612      	lsls	r2, r2, #24
 8004e42:	4694      	mov	ip, r2
 8004e44:	4463      	add	r3, ip
 8004e46:	0adb      	lsrs	r3, r3, #11
 8004e48:	4a46      	ldr	r2, [pc, #280]	; (8004f64 <AppSignatureVerify+0x1e8>)
 8004e4a:	4694      	mov	ip, r2
 8004e4c:	4463      	add	r3, ip
 8004e4e:	02db      	lsls	r3, r3, #11
 8004e50:	3320      	adds	r3, #32
 8004e52:	2140      	movs	r1, #64	; 0x40
 8004e54:	0018      	movs	r0, r3
 8004e56:	f000 fb7f 	bl	8005558 <printHexArray>

  /* verify ECC public key -- compare with the one stored after signature */
  for ( i = 0; i < SIG_SIZE; i++ )
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	607b      	str	r3, [r7, #4]
 8004e5e:	e024      	b.n	8004eaa <AppSignatureVerify+0x12e>
  {
    uint8_t *pPubkey = (uint8_t*)ECC_PUB_ADD;
 8004e60:	4b3f      	ldr	r3, [pc, #252]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004e62:	055b      	lsls	r3, r3, #21
 8004e64:	0d5b      	lsrs	r3, r3, #21
 8004e66:	d102      	bne.n	8004e6e <AppSignatureVerify+0xf2>
 8004e68:	4b3d      	ldr	r3, [pc, #244]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004e6a:	3360      	adds	r3, #96	; 0x60
 8004e6c:	e00a      	b.n	8004e84 <AppSignatureVerify+0x108>
 8004e6e:	4b3c      	ldr	r3, [pc, #240]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004e70:	22f8      	movs	r2, #248	; 0xf8
 8004e72:	0612      	lsls	r2, r2, #24
 8004e74:	4694      	mov	ip, r2
 8004e76:	4463      	add	r3, ip
 8004e78:	0adb      	lsrs	r3, r3, #11
 8004e7a:	4a3a      	ldr	r2, [pc, #232]	; (8004f64 <AppSignatureVerify+0x1e8>)
 8004e7c:	4694      	mov	ip, r2
 8004e7e:	4463      	add	r3, ip
 8004e80:	02db      	lsls	r3, r3, #11
 8004e82:	3360      	adds	r3, #96	; 0x60
 8004e84:	603b      	str	r3, [r7, #0]
    if ( pPubkey[i] != SIGN_ECC_PUB_KEY[i])
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	18d3      	adds	r3, r2, r3
 8004e8c:	781a      	ldrb	r2, [r3, #0]
 8004e8e:	493c      	ldr	r1, [pc, #240]	; (8004f80 <AppSignatureVerify+0x204>)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	18cb      	adds	r3, r1, r3
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d004      	beq.n	8004ea4 <AppSignatureVerify+0x128>
    {
      printf("Public key inconsistent!\r\n");
 8004e9a:	4b3a      	ldr	r3, [pc, #232]	; (8004f84 <AppSignatureVerify+0x208>)
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f003 fb31 	bl	8008504 <puts>
      goto ERROR;
 8004ea2:	e054      	b.n	8004f4e <AppSignatureVerify+0x1d2>
  for ( i = 0; i < SIG_SIZE; i++ )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b3f      	cmp	r3, #63	; 0x3f
 8004eae:	ddd7      	ble.n	8004e60 <AppSignatureVerify+0xe4>
    }
  }

  printf("\r\n\r\n");
 8004eb0:	4b35      	ldr	r3, [pc, #212]	; (8004f88 <AppSignatureVerify+0x20c>)
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f003 fb26 	bl	8008504 <puts>
  if(!VerifySignatureWithPubKey((const uint8_t*)ECC_PUB_ADD, ECC_PUB_SIZE, (const uint8_t*)HASH_ADD, HASH_SIZE, (const uint8_t*)SIG_ADD, SIG_SIZE))
 8004eb8:	4b29      	ldr	r3, [pc, #164]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004eba:	055b      	lsls	r3, r3, #21
 8004ebc:	0d5b      	lsrs	r3, r3, #21
 8004ebe:	d102      	bne.n	8004ec6 <AppSignatureVerify+0x14a>
 8004ec0:	4b27      	ldr	r3, [pc, #156]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004ec2:	3360      	adds	r3, #96	; 0x60
 8004ec4:	e00a      	b.n	8004edc <AppSignatureVerify+0x160>
 8004ec6:	4b26      	ldr	r3, [pc, #152]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004ec8:	22f8      	movs	r2, #248	; 0xf8
 8004eca:	0612      	lsls	r2, r2, #24
 8004ecc:	4694      	mov	ip, r2
 8004ece:	4463      	add	r3, ip
 8004ed0:	0adb      	lsrs	r3, r3, #11
 8004ed2:	4a24      	ldr	r2, [pc, #144]	; (8004f64 <AppSignatureVerify+0x1e8>)
 8004ed4:	4694      	mov	ip, r2
 8004ed6:	4463      	add	r3, ip
 8004ed8:	02db      	lsls	r3, r3, #11
 8004eda:	3360      	adds	r3, #96	; 0x60
 8004edc:	0018      	movs	r0, r3
 8004ede:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004ee0:	055b      	lsls	r3, r3, #21
 8004ee2:	0d5b      	lsrs	r3, r3, #21
 8004ee4:	d101      	bne.n	8004eea <AppSignatureVerify+0x16e>
 8004ee6:	4a1e      	ldr	r2, [pc, #120]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004ee8:	e00a      	b.n	8004f00 <AppSignatureVerify+0x184>
 8004eea:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004eec:	22f8      	movs	r2, #248	; 0xf8
 8004eee:	0612      	lsls	r2, r2, #24
 8004ef0:	4694      	mov	ip, r2
 8004ef2:	4463      	add	r3, ip
 8004ef4:	0adb      	lsrs	r3, r3, #11
 8004ef6:	4a1b      	ldr	r2, [pc, #108]	; (8004f64 <AppSignatureVerify+0x1e8>)
 8004ef8:	4694      	mov	ip, r2
 8004efa:	4463      	add	r3, ip
 8004efc:	02db      	lsls	r3, r3, #11
 8004efe:	001a      	movs	r2, r3
 8004f00:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004f02:	055b      	lsls	r3, r3, #21
 8004f04:	0d5b      	lsrs	r3, r3, #21
 8004f06:	d102      	bne.n	8004f0e <AppSignatureVerify+0x192>
 8004f08:	4b15      	ldr	r3, [pc, #84]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004f0a:	3320      	adds	r3, #32
 8004f0c:	e00a      	b.n	8004f24 <AppSignatureVerify+0x1a8>
 8004f0e:	4b14      	ldr	r3, [pc, #80]	; (8004f60 <AppSignatureVerify+0x1e4>)
 8004f10:	21f8      	movs	r1, #248	; 0xf8
 8004f12:	0609      	lsls	r1, r1, #24
 8004f14:	468c      	mov	ip, r1
 8004f16:	4463      	add	r3, ip
 8004f18:	0adb      	lsrs	r3, r3, #11
 8004f1a:	4912      	ldr	r1, [pc, #72]	; (8004f64 <AppSignatureVerify+0x1e8>)
 8004f1c:	468c      	mov	ip, r1
 8004f1e:	4463      	add	r3, ip
 8004f20:	02db      	lsls	r3, r3, #11
 8004f22:	3320      	adds	r3, #32
 8004f24:	0019      	movs	r1, r3
 8004f26:	2340      	movs	r3, #64	; 0x40
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	9100      	str	r1, [sp, #0]
 8004f2c:	2320      	movs	r3, #32
 8004f2e:	2140      	movs	r1, #64	; 0x40
 8004f30:	f000 fa2c 	bl	800538c <VerifySignatureWithPubKey>
 8004f34:	0003      	movs	r3, r0
 8004f36:	001a      	movs	r2, r3
 8004f38:	2301      	movs	r3, #1
 8004f3a:	4053      	eors	r3, r2
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d004      	beq.n	8004f4c <AppSignatureVerify+0x1d0>
  {
    printf("Signature verification failed!\r\n");
 8004f42:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <AppSignatureVerify+0x210>)
 8004f44:	0018      	movs	r0, r3
 8004f46:	f003 fadd 	bl	8008504 <puts>
    goto ERROR;
 8004f4a:	e000      	b.n	8004f4e <AppSignatureVerify+0x1d2>
  }

ERROR:
 8004f4c:	46c0      	nop			; (mov r8, r8)
    Error_Handler();
 8004f4e:	f000 fba6 	bl	800569e <Error_Handler>

}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	46bd      	mov	sp, r7
 8004f56:	b002      	add	sp, #8
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	0800959c 	.word	0x0800959c
 8004f60:	0800a1e4 	.word	0x0800a1e4
 8004f64:	00010001 	.word	0x00010001
 8004f68:	080094f4 	.word	0x080094f4
 8004f6c:	080095bc 	.word	0x080095bc
 8004f70:	080095d0 	.word	0x080095d0
 8004f74:	080095f0 	.word	0x080095f0
 8004f78:	08009524 	.word	0x08009524
 8004f7c:	08009608 	.word	0x08009608
 8004f80:	20000000 	.word	0x20000000
 8004f84:	08009620 	.word	0x08009620
 8004f88:	0800963c 	.word	0x0800963c
 8004f8c:	08009640 	.word	0x08009640

08004f90 <AppRun>:

//toggle led
void AppRun(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  AppHandleMenu();
 8004f94:	f000 f80a 	bl	8004fac <AppHandleMenu>

  while(1)
  {
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8004f98:	23a0      	movs	r3, #160	; 0xa0
 8004f9a:	05db      	lsls	r3, r3, #23
 8004f9c:	2120      	movs	r1, #32
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f001 fb71 	bl	8006686 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8004fa4:	2064      	movs	r0, #100	; 0x64
 8004fa6:	f000 fdaf 	bl	8005b08 <HAL_Delay>
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8004faa:	e7f5      	b.n	8004f98 <AppRun+0x8>

08004fac <AppHandleMenu>:
  }
}

//read & handle uart input
static void AppHandleMenu(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
  uint8_t key = 0U;
 8004fb2:	1dbb      	adds	r3, r7, #6
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	701a      	strb	r2, [r3, #0]
  uint8_t exit = 0U;
 8004fb8:	1dfb      	adds	r3, r7, #7
 8004fba:	2200      	movs	r2, #0
 8004fbc:	701a      	strb	r2, [r3, #0]

  AppPrintMenu();
 8004fbe:	f000 f841 	bl	8005044 <AppPrintMenu>

  while(exit == 0U)
 8004fc2:	e031      	b.n	8005028 <AppHandleMenu+0x7c>
  {
    //clear data register
    __HAL_UART_FLUSH_DRREGISTER(&huart2);
 8004fc4:	4b1d      	ldr	r3, [pc, #116]	; (800503c <AppHandleMenu+0x90>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	4b1c      	ldr	r3, [pc, #112]	; (800503c <AppHandleMenu+0x90>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2108      	movs	r1, #8
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	619a      	str	r2, [r3, #24]
 8004fd4:	4b19      	ldr	r3, [pc, #100]	; (800503c <AppHandleMenu+0x90>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	4b18      	ldr	r3, [pc, #96]	; (800503c <AppHandleMenu+0x90>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2110      	movs	r1, #16
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	619a      	str	r2, [r3, #24]

    HAL_UART_Receive(&huart2, &key, 1U, HAL_MAX_DELAY);
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	425b      	negs	r3, r3
 8004fe8:	1db9      	adds	r1, r7, #6
 8004fea:	4814      	ldr	r0, [pc, #80]	; (800503c <AppHandleMenu+0x90>)
 8004fec:	2201      	movs	r2, #1
 8004fee:	f002 fb1f 	bl	8007630 <HAL_UART_Receive>

    switch (key)
 8004ff2:	1dbb      	adds	r3, r7, #6
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b78      	cmp	r3, #120	; 0x78
 8004ff8:	d00b      	beq.n	8005012 <AppHandleMenu+0x66>
 8004ffa:	dc0e      	bgt.n	800501a <AppHandleMenu+0x6e>
 8004ffc:	2b31      	cmp	r3, #49	; 0x31
 8004ffe:	d002      	beq.n	8005006 <AppHandleMenu+0x5a>
 8005000:	2b32      	cmp	r3, #50	; 0x32
 8005002:	d003      	beq.n	800500c <AppHandleMenu+0x60>
 8005004:	e009      	b.n	800501a <AppHandleMenu+0x6e>
    {
    case '1' :
      AppEnableOBWRP();
 8005006:	f000 f841 	bl	800508c <AppEnableOBWRP>
      break;
 800500a:	e00b      	b.n	8005024 <AppHandleMenu+0x78>
    case '2' :
      AppEnableOBRDP();
 800500c:	f000 f934 	bl	8005278 <AppEnableOBRDP>
      break;
 8005010:	e008      	b.n	8005024 <AppHandleMenu+0x78>
    case 'x' :
      exit = 1U;
 8005012:	1dfb      	adds	r3, r7, #7
 8005014:	2201      	movs	r2, #1
 8005016:	701a      	strb	r2, [r3, #0]
      break;
 8005018:	e004      	b.n	8005024 <AppHandleMenu+0x78>
    default:
      printf("Invalid key!\r\n");
 800501a:	4b09      	ldr	r3, [pc, #36]	; (8005040 <AppHandleMenu+0x94>)
 800501c:	0018      	movs	r0, r3
 800501e:	f003 fa71 	bl	8008504 <puts>
      break;
 8005022:	46c0      	nop			; (mov r8, r8)
    }

    AppPrintMenu();
 8005024:	f000 f80e 	bl	8005044 <AppPrintMenu>
  while(exit == 0U)
 8005028:	1dfb      	adds	r3, r7, #7
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0c9      	beq.n	8004fc4 <AppHandleMenu+0x18>
  }
}
 8005030:	46c0      	nop			; (mov r8, r8)
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	46bd      	mov	sp, r7
 8005036:	b002      	add	sp, #8
 8005038:	bd80      	pop	{r7, pc}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	200008bc 	.word	0x200008bc
 8005040:	08009660 	.word	0x08009660

08005044 <AppPrintMenu>:

//show menu
static void AppPrintMenu(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  printf("\r\n");
 8005048:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <AppPrintMenu+0x34>)
 800504a:	0018      	movs	r0, r3
 800504c:	f003 fa5a 	bl	8008504 <puts>
  printf("=================== Test Menu ===========================\r\n\n");
 8005050:	4b0a      	ldr	r3, [pc, #40]	; (800507c <AppPrintMenu+0x38>)
 8005052:	0018      	movs	r0, r3
 8005054:	f003 fa56 	bl	8008504 <puts>
  printf("Test Protection: Enable WRP Option Bytes -------------- 1\r\n\n");
 8005058:	4b09      	ldr	r3, [pc, #36]	; (8005080 <AppPrintMenu+0x3c>)
 800505a:	0018      	movs	r0, r3
 800505c:	f003 fa52 	bl	8008504 <puts>
  printf("Test Protection: Enable RDP Option Bytes -------------- 2\r\n\n");
 8005060:	4b08      	ldr	r3, [pc, #32]	; (8005084 <AppPrintMenu+0x40>)
 8005062:	0018      	movs	r0, r3
 8005064:	f003 fa4e 	bl	8008504 <puts>
  printf("Previous Menu ----------------------------------------- x\r\n\n");
 8005068:	4b07      	ldr	r3, [pc, #28]	; (8005088 <AppPrintMenu+0x44>)
 800506a:	0018      	movs	r0, r3
 800506c:	f003 fa4a 	bl	8008504 <puts>
}
 8005070:	46c0      	nop			; (mov r8, r8)
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	08009670 	.word	0x08009670
 800507c:	08009674 	.word	0x08009674
 8005080:	080096b0 	.word	0x080096b0
 8005084:	080096ec 	.word	0x080096ec
 8005088:	08009728 	.word	0x08009728

0800508c <AppEnableOBWRP>:

//enable WRP protection
static void AppEnableOBWRP(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b090      	sub	sp, #64	; 0x40
 8005090:	af00      	add	r7, sp, #0
  FLASH_OBProgramInitTypeDef optionBytes;
  int32_t isOBChangeToApply = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	63fb      	str	r3, [r7, #60]	; 0x3c

  //unlock flash & option bytes
  HAL_FLASH_Unlock();
 8005096:	f000 fe0f 	bl	8005cb8 <HAL_FLASH_Unlock>
  HAL_FLASH_OB_Unlock();
 800509a:	f000 fe4d 	bl	8005d38 <HAL_FLASH_OB_Unlock>

  //read option bytes
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800509e:	4b6f      	ldr	r3, [pc, #444]	; (800525c <AppEnableOBWRP+0x1d0>)
 80050a0:	2280      	movs	r2, #128	; 0x80
 80050a2:	0212      	lsls	r2, r2, #8
 80050a4:	611a      	str	r2, [r3, #16]
  optionBytes.WRPArea = OB_WRPAREA_ZONE_A;
 80050a6:	1d3b      	adds	r3, r7, #4
 80050a8:	2201      	movs	r2, #1
 80050aa:	605a      	str	r2, [r3, #4]
  HAL_FLASHEx_OBGetConfig(&optionBytes);
 80050ac:	1d3b      	adds	r3, r7, #4
 80050ae:	0018      	movs	r0, r3
 80050b0:	f000 ff98 	bl	8005fe4 <HAL_FLASHEx_OBGetConfig>

  if (optionBytes.RDPLevel == OB_RDP_LEVEL_2)
 80050b4:	1d3b      	adds	r3, r7, #4
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	2bcc      	cmp	r3, #204	; 0xcc
 80050ba:	d139      	bne.n	8005130 <AppEnableOBWRP+0xa4>
  {
    if((optionBytes.WRPStartOffset > WRP_START_OFFSET) ||
 80050bc:	1d3b      	adds	r3, r7, #4
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	4b67      	ldr	r3, [pc, #412]	; (8005260 <AppEnableOBWRP+0x1d4>)
 80050c2:	055b      	lsls	r3, r3, #21
 80050c4:	0d5b      	lsrs	r3, r3, #21
 80050c6:	d106      	bne.n	80050d6 <AppEnableOBWRP+0x4a>
 80050c8:	4b65      	ldr	r3, [pc, #404]	; (8005260 <AppEnableOBWRP+0x1d4>)
 80050ca:	21f8      	movs	r1, #248	; 0xf8
 80050cc:	0609      	lsls	r1, r1, #24
 80050ce:	468c      	mov	ip, r1
 80050d0:	4463      	add	r3, ip
 80050d2:	0adb      	lsrs	r3, r3, #11
 80050d4:	e00a      	b.n	80050ec <AppEnableOBWRP+0x60>
 80050d6:	4b62      	ldr	r3, [pc, #392]	; (8005260 <AppEnableOBWRP+0x1d4>)
 80050d8:	21f8      	movs	r1, #248	; 0xf8
 80050da:	0609      	lsls	r1, r1, #24
 80050dc:	468c      	mov	ip, r1
 80050de:	4463      	add	r3, ip
 80050e0:	0adb      	lsrs	r3, r3, #11
 80050e2:	4960      	ldr	r1, [pc, #384]	; (8005264 <AppEnableOBWRP+0x1d8>)
 80050e4:	468c      	mov	ip, r1
 80050e6:	4463      	add	r3, ip
 80050e8:	02db      	lsls	r3, r3, #11
 80050ea:	0adb      	lsrs	r3, r3, #11
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d31a      	bcc.n	8005126 <AppEnableOBWRP+0x9a>
        (optionBytes.WRPEndOffset < WRP_END_OFFSET))
 80050f0:	1d3b      	adds	r3, r7, #4
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	4b5a      	ldr	r3, [pc, #360]	; (8005260 <AppEnableOBWRP+0x1d4>)
 80050f6:	055b      	lsls	r3, r3, #21
 80050f8:	0d5b      	lsrs	r3, r3, #21
 80050fa:	d106      	bne.n	800510a <AppEnableOBWRP+0x7e>
 80050fc:	4b58      	ldr	r3, [pc, #352]	; (8005260 <AppEnableOBWRP+0x1d4>)
 80050fe:	21f8      	movs	r1, #248	; 0xf8
 8005100:	0609      	lsls	r1, r1, #24
 8005102:	468c      	mov	ip, r1
 8005104:	4463      	add	r3, ip
 8005106:	0adb      	lsrs	r3, r3, #11
 8005108:	e00a      	b.n	8005120 <AppEnableOBWRP+0x94>
 800510a:	4b55      	ldr	r3, [pc, #340]	; (8005260 <AppEnableOBWRP+0x1d4>)
 800510c:	21f8      	movs	r1, #248	; 0xf8
 800510e:	0609      	lsls	r1, r1, #24
 8005110:	468c      	mov	ip, r1
 8005112:	4463      	add	r3, ip
 8005114:	0adb      	lsrs	r3, r3, #11
 8005116:	4953      	ldr	r1, [pc, #332]	; (8005264 <AppEnableOBWRP+0x1d8>)
 8005118:	468c      	mov	ip, r1
 800511a:	4463      	add	r3, ip
 800511c:	02db      	lsls	r3, r3, #11
 800511e:	0adb      	lsrs	r3, r3, #11
    if((optionBytes.WRPStartOffset > WRP_START_OFFSET) ||
 8005120:	4293      	cmp	r3, r2
 8005122:	d800      	bhi.n	8005126 <AppEnableOBWRP+0x9a>
 8005124:	e08b      	b.n	800523e <AppEnableOBWRP+0x1b2>
    {
      printf("Unable to write WRP offset when RDP level is 2.\r\n");
 8005126:	4b50      	ldr	r3, [pc, #320]	; (8005268 <AppEnableOBWRP+0x1dc>)
 8005128:	0018      	movs	r0, r3
 800512a:	f003 f9eb 	bl	8008504 <puts>
      goto ERROR;
 800512e:	e08b      	b.n	8005248 <AppEnableOBWRP+0x1bc>
    }
  }
  else
  {
    //configure WRP offset
    if((optionBytes.WRPStartOffset > WRP_START_OFFSET) || (optionBytes.WRPEndOffset < WRP_END_OFFSET))
 8005130:	1d3b      	adds	r3, r7, #4
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	4b4a      	ldr	r3, [pc, #296]	; (8005260 <AppEnableOBWRP+0x1d4>)
 8005136:	055b      	lsls	r3, r3, #21
 8005138:	0d5b      	lsrs	r3, r3, #21
 800513a:	d106      	bne.n	800514a <AppEnableOBWRP+0xbe>
 800513c:	4b48      	ldr	r3, [pc, #288]	; (8005260 <AppEnableOBWRP+0x1d4>)
 800513e:	21f8      	movs	r1, #248	; 0xf8
 8005140:	0609      	lsls	r1, r1, #24
 8005142:	468c      	mov	ip, r1
 8005144:	4463      	add	r3, ip
 8005146:	0adb      	lsrs	r3, r3, #11
 8005148:	e00a      	b.n	8005160 <AppEnableOBWRP+0xd4>
 800514a:	4b45      	ldr	r3, [pc, #276]	; (8005260 <AppEnableOBWRP+0x1d4>)
 800514c:	21f8      	movs	r1, #248	; 0xf8
 800514e:	0609      	lsls	r1, r1, #24
 8005150:	468c      	mov	ip, r1
 8005152:	4463      	add	r3, ip
 8005154:	0adb      	lsrs	r3, r3, #11
 8005156:	4943      	ldr	r1, [pc, #268]	; (8005264 <AppEnableOBWRP+0x1d8>)
 8005158:	468c      	mov	ip, r1
 800515a:	4463      	add	r3, ip
 800515c:	02db      	lsls	r3, r3, #11
 800515e:	0adb      	lsrs	r3, r3, #11
 8005160:	4293      	cmp	r3, r2
 8005162:	d319      	bcc.n	8005198 <AppEnableOBWRP+0x10c>
 8005164:	1d3b      	adds	r3, r7, #4
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	4b3d      	ldr	r3, [pc, #244]	; (8005260 <AppEnableOBWRP+0x1d4>)
 800516a:	055b      	lsls	r3, r3, #21
 800516c:	0d5b      	lsrs	r3, r3, #21
 800516e:	d106      	bne.n	800517e <AppEnableOBWRP+0xf2>
 8005170:	4b3b      	ldr	r3, [pc, #236]	; (8005260 <AppEnableOBWRP+0x1d4>)
 8005172:	21f8      	movs	r1, #248	; 0xf8
 8005174:	0609      	lsls	r1, r1, #24
 8005176:	468c      	mov	ip, r1
 8005178:	4463      	add	r3, ip
 800517a:	0adb      	lsrs	r3, r3, #11
 800517c:	e00a      	b.n	8005194 <AppEnableOBWRP+0x108>
 800517e:	4b38      	ldr	r3, [pc, #224]	; (8005260 <AppEnableOBWRP+0x1d4>)
 8005180:	21f8      	movs	r1, #248	; 0xf8
 8005182:	0609      	lsls	r1, r1, #24
 8005184:	468c      	mov	ip, r1
 8005186:	4463      	add	r3, ip
 8005188:	0adb      	lsrs	r3, r3, #11
 800518a:	4936      	ldr	r1, [pc, #216]	; (8005264 <AppEnableOBWRP+0x1d8>)
 800518c:	468c      	mov	ip, r1
 800518e:	4463      	add	r3, ip
 8005190:	02db      	lsls	r3, r3, #11
 8005192:	0adb      	lsrs	r3, r3, #11
 8005194:	4293      	cmp	r3, r2
 8005196:	d945      	bls.n	8005224 <AppEnableOBWRP+0x198>
    {
      optionBytes.WRPStartOffset = WRP_START_OFFSET;
 8005198:	4b31      	ldr	r3, [pc, #196]	; (8005260 <AppEnableOBWRP+0x1d4>)
 800519a:	055b      	lsls	r3, r3, #21
 800519c:	0d5b      	lsrs	r3, r3, #21
 800519e:	d106      	bne.n	80051ae <AppEnableOBWRP+0x122>
 80051a0:	4b2f      	ldr	r3, [pc, #188]	; (8005260 <AppEnableOBWRP+0x1d4>)
 80051a2:	22f8      	movs	r2, #248	; 0xf8
 80051a4:	0612      	lsls	r2, r2, #24
 80051a6:	4694      	mov	ip, r2
 80051a8:	4463      	add	r3, ip
 80051aa:	0ada      	lsrs	r2, r3, #11
 80051ac:	e00a      	b.n	80051c4 <AppEnableOBWRP+0x138>
 80051ae:	4b2c      	ldr	r3, [pc, #176]	; (8005260 <AppEnableOBWRP+0x1d4>)
 80051b0:	22f8      	movs	r2, #248	; 0xf8
 80051b2:	0612      	lsls	r2, r2, #24
 80051b4:	4694      	mov	ip, r2
 80051b6:	4463      	add	r3, ip
 80051b8:	0adb      	lsrs	r3, r3, #11
 80051ba:	4a2a      	ldr	r2, [pc, #168]	; (8005264 <AppEnableOBWRP+0x1d8>)
 80051bc:	4694      	mov	ip, r2
 80051be:	4463      	add	r3, ip
 80051c0:	02db      	lsls	r3, r3, #11
 80051c2:	0ada      	lsrs	r2, r3, #11
 80051c4:	1d3b      	adds	r3, r7, #4
 80051c6:	609a      	str	r2, [r3, #8]
      optionBytes.WRPEndOffset = WRP_END_OFFSET;
 80051c8:	4b25      	ldr	r3, [pc, #148]	; (8005260 <AppEnableOBWRP+0x1d4>)
 80051ca:	055b      	lsls	r3, r3, #21
 80051cc:	0d5b      	lsrs	r3, r3, #21
 80051ce:	d106      	bne.n	80051de <AppEnableOBWRP+0x152>
 80051d0:	4b23      	ldr	r3, [pc, #140]	; (8005260 <AppEnableOBWRP+0x1d4>)
 80051d2:	22f8      	movs	r2, #248	; 0xf8
 80051d4:	0612      	lsls	r2, r2, #24
 80051d6:	4694      	mov	ip, r2
 80051d8:	4463      	add	r3, ip
 80051da:	0ada      	lsrs	r2, r3, #11
 80051dc:	e00a      	b.n	80051f4 <AppEnableOBWRP+0x168>
 80051de:	4b20      	ldr	r3, [pc, #128]	; (8005260 <AppEnableOBWRP+0x1d4>)
 80051e0:	22f8      	movs	r2, #248	; 0xf8
 80051e2:	0612      	lsls	r2, r2, #24
 80051e4:	4694      	mov	ip, r2
 80051e6:	4463      	add	r3, ip
 80051e8:	0adb      	lsrs	r3, r3, #11
 80051ea:	4a1e      	ldr	r2, [pc, #120]	; (8005264 <AppEnableOBWRP+0x1d8>)
 80051ec:	4694      	mov	ip, r2
 80051ee:	4463      	add	r3, ip
 80051f0:	02db      	lsls	r3, r3, #11
 80051f2:	0ada      	lsrs	r2, r3, #11
 80051f4:	1d3b      	adds	r3, r7, #4
 80051f6:	60da      	str	r2, [r3, #12]

      printf("\r\nTry to apply WRP from page [%08lx] to [%08lx]\r\n",
 80051f8:	1d3b      	adds	r3, r7, #4
 80051fa:	6899      	ldr	r1, [r3, #8]
 80051fc:	1d3b      	adds	r3, r7, #4
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	4b1a      	ldr	r3, [pc, #104]	; (800526c <AppEnableOBWRP+0x1e0>)
 8005202:	0018      	movs	r0, r3
 8005204:	f003 f8f2 	bl	80083ec <iprintf>
          optionBytes.WRPStartOffset,
          optionBytes.WRPEndOffset);

      if(HAL_FLASHEx_OBProgram(&optionBytes) != HAL_OK)
 8005208:	1d3b      	adds	r3, r7, #4
 800520a:	0018      	movs	r0, r3
 800520c:	f000 fe38 	bl	8005e80 <HAL_FLASHEx_OBProgram>
 8005210:	1e03      	subs	r3, r0, #0
 8005212:	d004      	beq.n	800521e <AppEnableOBWRP+0x192>
      {
        printf("Fail to program option bytes.\r\n");
 8005214:	4b16      	ldr	r3, [pc, #88]	; (8005270 <AppEnableOBWRP+0x1e4>)
 8005216:	0018      	movs	r0, r3
 8005218:	f003 f974 	bl	8008504 <puts>
        goto ERROR;
 800521c:	e014      	b.n	8005248 <AppEnableOBWRP+0x1bc>
      }

      isOBChangeToApply++;
 800521e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005220:	3301      	adds	r3, #1
 8005222:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    printf("\r\nWRP already applied from page [%08lx] to [%08lx]\r\n",
 8005224:	1d3b      	adds	r3, r7, #4
 8005226:	6899      	ldr	r1, [r3, #8]
 8005228:	1d3b      	adds	r3, r7, #4
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	4b11      	ldr	r3, [pc, #68]	; (8005274 <AppEnableOBWRP+0x1e8>)
 800522e:	0018      	movs	r0, r3
 8005230:	f003 f8dc 	bl	80083ec <iprintf>
        optionBytes.WRPStartOffset,
        optionBytes.WRPEndOffset);

    if ( isOBChangeToApply > 0 )
 8005234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005236:	2b00      	cmp	r3, #0
 8005238:	dd01      	ble.n	800523e <AppEnableOBWRP+0x1b2>
    {
      HAL_FLASH_OB_Launch();
 800523a:	f000 fdc3 	bl	8005dc4 <HAL_FLASH_OB_Launch>
    }
  }

  HAL_FLASH_OB_Lock();
 800523e:	f000 fda3 	bl	8005d88 <HAL_FLASH_OB_Lock>
  HAL_FLASH_Lock();
 8005242:	f000 fd5d 	bl	8005d00 <HAL_FLASH_Lock>
 8005246:	e005      	b.n	8005254 <AppEnableOBWRP+0x1c8>

  return;

ERROR:
  HAL_FLASH_OB_Lock();
 8005248:	f000 fd9e 	bl	8005d88 <HAL_FLASH_OB_Lock>
  HAL_FLASH_Lock();
 800524c:	f000 fd58 	bl	8005d00 <HAL_FLASH_Lock>

  Error_Handler();
 8005250:	f000 fa25 	bl	800569e <Error_Handler>
}
 8005254:	46bd      	mov	sp, r7
 8005256:	b010      	add	sp, #64	; 0x40
 8005258:	bd80      	pop	{r7, pc}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	40022000 	.word	0x40022000
 8005260:	0800a1e4 	.word	0x0800a1e4
 8005264:	00200001 	.word	0x00200001
 8005268:	08009764 	.word	0x08009764
 800526c:	08009798 	.word	0x08009798
 8005270:	080097cc 	.word	0x080097cc
 8005274:	080097ec 	.word	0x080097ec

08005278 <AppEnableOBRDP>:

//enable RDP level1
static void AppEnableOBRDP(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b090      	sub	sp, #64	; 0x40
 800527c:	af00      	add	r7, sp, #0
  FLASH_OBProgramInitTypeDef optionBytes;
  int32_t isOBChangeToApply = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	63fb      	str	r3, [r7, #60]	; 0x3c

  //unlock flash & option bytes
  HAL_FLASH_Unlock();
 8005282:	f000 fd19 	bl	8005cb8 <HAL_FLASH_Unlock>
  HAL_FLASH_OB_Unlock();
 8005286:	f000 fd57 	bl	8005d38 <HAL_FLASH_OB_Unlock>

  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800528a:	4b27      	ldr	r3, [pc, #156]	; (8005328 <AppEnableOBRDP+0xb0>)
 800528c:	2280      	movs	r2, #128	; 0x80
 800528e:	0212      	lsls	r2, r2, #8
 8005290:	611a      	str	r2, [r3, #16]
  optionBytes.WRPArea = OB_WRPAREA_ZONE_A;
 8005292:	1d3b      	adds	r3, r7, #4
 8005294:	2201      	movs	r2, #1
 8005296:	605a      	str	r2, [r3, #4]
  HAL_FLASHEx_OBGetConfig(&optionBytes);
 8005298:	1d3b      	adds	r3, r7, #4
 800529a:	0018      	movs	r0, r3
 800529c:	f000 fea2 	bl	8005fe4 <HAL_FLASHEx_OBGetConfig>

  if (optionBytes.RDPLevel == OB_RDP_LEVEL_2)
 80052a0:	1d3b      	adds	r3, r7, #4
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2bcc      	cmp	r3, #204	; 0xcc
 80052a6:	d104      	bne.n	80052b2 <AppEnableOBRDP+0x3a>
  {
    printf("Unable to modify RDP level when RDP level is 2.\r\n");
 80052a8:	4b20      	ldr	r3, [pc, #128]	; (800532c <AppEnableOBRDP+0xb4>)
 80052aa:	0018      	movs	r0, r3
 80052ac:	f003 f92a 	bl	8008504 <puts>
    goto ERROR;
 80052b0:	e030      	b.n	8005314 <AppEnableOBRDP+0x9c>
  }
  else
  {
    if(optionBytes.RDPLevel != RDP_LEVEL_CONFIG)
 80052b2:	1d3b      	adds	r3, r7, #4
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2bbb      	cmp	r3, #187	; 0xbb
 80052b8:	d01b      	beq.n	80052f2 <AppEnableOBRDP+0x7a>
    {
      optionBytes.OptionType = OPTIONBYTE_RDP | OPTIONBYTE_USER;
 80052ba:	1d3b      	adds	r3, r7, #4
 80052bc:	2206      	movs	r2, #6
 80052be:	601a      	str	r2, [r3, #0]
      optionBytes.RDPLevel = RDP_LEVEL_CONFIG;
 80052c0:	1d3b      	adds	r3, r7, #4
 80052c2:	22bb      	movs	r2, #187	; 0xbb
 80052c4:	611a      	str	r2, [r3, #16]
      if (HAL_FLASHEx_OBProgram(&optionBytes) != HAL_OK)
 80052c6:	1d3b      	adds	r3, r7, #4
 80052c8:	0018      	movs	r0, r3
 80052ca:	f000 fdd9 	bl	8005e80 <HAL_FLASHEx_OBProgram>
 80052ce:	1e03      	subs	r3, r0, #0
 80052d0:	d004      	beq.n	80052dc <AppEnableOBRDP+0x64>
      {
        printf("Fail to program option bytes.\r\n");
 80052d2:	4b17      	ldr	r3, [pc, #92]	; (8005330 <AppEnableOBRDP+0xb8>)
 80052d4:	0018      	movs	r0, r3
 80052d6:	f003 f915 	bl	8008504 <puts>
        goto ERROR;
 80052da:	e01b      	b.n	8005314 <AppEnableOBRDP+0x9c>
      }

      printf("\r\nSet RDP to [0x%02lx], please power off and power on again.\r\n", optionBytes.RDPLevel);
 80052dc:	1d3b      	adds	r3, r7, #4
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	4b14      	ldr	r3, [pc, #80]	; (8005334 <AppEnableOBRDP+0xbc>)
 80052e2:	0011      	movs	r1, r2
 80052e4:	0018      	movs	r0, r3
 80052e6:	f003 f881 	bl	80083ec <iprintf>
      isOBChangeToApply++;
 80052ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ec:	3301      	adds	r3, #1
 80052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f0:	e006      	b.n	8005300 <AppEnableOBRDP+0x88>
    }
    else
    {
      printf("\r\nRDP level set to [0x%02lx]\r\n", optionBytes.RDPLevel);
 80052f2:	1d3b      	adds	r3, r7, #4
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	4b10      	ldr	r3, [pc, #64]	; (8005338 <AppEnableOBRDP+0xc0>)
 80052f8:	0011      	movs	r1, r2
 80052fa:	0018      	movs	r0, r3
 80052fc:	f003 f876 	bl	80083ec <iprintf>
    }

    if(isOBChangeToApply > 0)
 8005300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005302:	2b00      	cmp	r3, #0
 8005304:	dd01      	ble.n	800530a <AppEnableOBRDP+0x92>
    {
      HAL_FLASH_OB_Launch();
 8005306:	f000 fd5d 	bl	8005dc4 <HAL_FLASH_OB_Launch>
    }
  }

  HAL_FLASH_OB_Lock();
 800530a:	f000 fd3d 	bl	8005d88 <HAL_FLASH_OB_Lock>
  HAL_FLASH_Lock();
 800530e:	f000 fcf7 	bl	8005d00 <HAL_FLASH_Lock>
 8005312:	e005      	b.n	8005320 <AppEnableOBRDP+0xa8>

  return;

ERROR:
  HAL_FLASH_OB_Lock();
 8005314:	f000 fd38 	bl	8005d88 <HAL_FLASH_OB_Lock>
  HAL_FLASH_Lock();
 8005318:	f000 fcf2 	bl	8005d00 <HAL_FLASH_Lock>

  Error_Handler();
 800531c:	f000 f9bf 	bl	800569e <Error_Handler>
}
 8005320:	46bd      	mov	sp, r7
 8005322:	b010      	add	sp, #64	; 0x40
 8005324:	bd80      	pop	{r7, pc}
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	40022000 	.word	0x40022000
 800532c:	08009824 	.word	0x08009824
 8005330:	080097cc 	.word	0x080097cc
 8005334:	08009858 	.word	0x08009858
 8005338:	08009898 	.word	0x08009898

0800533c <SingleCallSHA256>:

//calculate SHA256 hash
static bool SingleCallSHA256(const uint8_t* message, const size_t messageLen, uint8_t* digest, size_t* digestLen)
{
 800533c:	b590      	push	{r4, r7, lr}
 800533e:	b089      	sub	sp, #36	; 0x24
 8005340:	af02      	add	r7, sp, #8
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
  cmox_hash_retval_t retVal;

  retVal = cmox_hash_compute(
 800534a:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <SingleCallSHA256+0x4c>)
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	687c      	ldr	r4, [r7, #4]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	68f9      	ldr	r1, [r7, #12]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	2320      	movs	r3, #32
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	0023      	movs	r3, r4
 800535e:	f7fb ff43 	bl	80011e8 <cmox_hash_compute>
 8005362:	0003      	movs	r3, r0
 8005364:	617b      	str	r3, [r7, #20]
      message, messageLen,
      digest,
      CMOX_SHA256_SIZE,
      digestLen);

  if((retVal != CMOX_HASH_SUCCESS) || (*digestLen != CMOX_SHA256_SIZE)) return false;
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	2380      	movs	r3, #128	; 0x80
 800536a:	029b      	lsls	r3, r3, #10
 800536c:	429a      	cmp	r2, r3
 800536e:	d103      	bne.n	8005378 <SingleCallSHA256+0x3c>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b20      	cmp	r3, #32
 8005376:	d001      	beq.n	800537c <SingleCallSHA256+0x40>
 8005378:	2300      	movs	r3, #0
 800537a:	e000      	b.n	800537e <SingleCallSHA256+0x42>

  return true;
 800537c:	2301      	movs	r3, #1
}
 800537e:	0018      	movs	r0, r3
 8005380:	46bd      	mov	sp, r7
 8005382:	b007      	add	sp, #28
 8005384:	bd90      	pop	{r4, r7, pc}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	08009c7c 	.word	0x08009c7c

0800538c <VerifySignatureWithPubKey>:

// verify signature
bool VerifySignatureWithPubKey(const uint8_t* pubKey, size_t pubKeyLen, const uint8_t* hash, size_t hashLen, const uint8_t* signature, size_t signatureLen)
{
 800538c:	b590      	push	{r4, r7, lr}
 800538e:	b08d      	sub	sp, #52	; 0x34
 8005390:	af06      	add	r7, sp, #24
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
  cmox_ecc_retval_t retVal;
  uint32_t fault_check = CMOX_ECC_AUTH_FAIL;
 800539a:	4b19      	ldr	r3, [pc, #100]	; (8005400 <VerifySignatureWithPubKey+0x74>)
 800539c:	613b      	str	r3, [r7, #16]

  //allocate resources
  cmox_ecc_construct(&hECC, CMOX_ECC256_MATH_FUNCS, eccBuffer, sizeof(eccBuffer));
 800539e:	4b19      	ldr	r3, [pc, #100]	; (8005404 <VerifySignatureWithPubKey+0x78>)
 80053a0:	6819      	ldr	r1, [r3, #0]
 80053a2:	23fa      	movs	r3, #250	; 0xfa
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	4a18      	ldr	r2, [pc, #96]	; (8005408 <VerifySignatureWithPubKey+0x7c>)
 80053a8:	4818      	ldr	r0, [pc, #96]	; (800540c <VerifySignatureWithPubKey+0x80>)
 80053aa:	f7fa feab 	bl	8000104 <cmox_ecc_construct>

  //verify signature
  retVal = cmox_ecdsa_verify(
 80053ae:	4b18      	ldr	r3, [pc, #96]	; (8005410 <VerifySignatureWithPubKey+0x84>)
 80053b0:	6819      	ldr	r1, [r3, #0]
 80053b2:	68bc      	ldr	r4, [r7, #8]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4815      	ldr	r0, [pc, #84]	; (800540c <VerifySignatureWithPubKey+0x80>)
 80053b8:	2310      	movs	r3, #16
 80053ba:	18fb      	adds	r3, r7, r3
 80053bc:	9304      	str	r3, [sp, #16]
 80053be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c0:	9303      	str	r3, [sp, #12]
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	9302      	str	r3, [sp, #8]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	9301      	str	r3, [sp, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	0023      	movs	r3, r4
 80053d0:	f7fb fda0 	bl	8000f14 <cmox_ecdsa_verify>
 80053d4:	0003      	movs	r3, r0
 80053d6:	617b      	str	r3, [r7, #20]
      signature,                  //signature to verify
      signatureLen,               //signature length
      &fault_check);              //verification result

  //check the result
  if((retVal != CMOX_ECC_AUTH_SUCCESS) || (fault_check != CMOX_ECC_AUTH_SUCCESS)) return false;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	4a0e      	ldr	r2, [pc, #56]	; (8005414 <VerifySignatureWithPubKey+0x88>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d103      	bne.n	80053e8 <VerifySignatureWithPubKey+0x5c>
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4a0c      	ldr	r2, [pc, #48]	; (8005414 <VerifySignatureWithPubKey+0x88>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d001      	beq.n	80053ec <VerifySignatureWithPubKey+0x60>
 80053e8:	2300      	movs	r3, #0
 80053ea:	e004      	b.n	80053f6 <VerifySignatureWithPubKey+0x6a>

  //clean up resources
  cmox_ecc_cleanup(&hECC);
 80053ec:	4b07      	ldr	r3, [pc, #28]	; (800540c <VerifySignatureWithPubKey+0x80>)
 80053ee:	0018      	movs	r0, r3
 80053f0:	f7fa fe9e 	bl	8000130 <cmox_ecc_cleanup>

  return true;
 80053f4:	2301      	movs	r3, #1
}
 80053f6:	0018      	movs	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	b007      	add	sp, #28
 80053fc:	bd90      	pop	{r4, r7, pc}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	00066e93 	.word	0x00066e93
 8005404:	08009c58 	.word	0x08009c58
 8005408:	200000e8 	.word	0x200000e8
 800540c:	200000d0 	.word	0x200000d0
 8005410:	08009c0c 	.word	0x08009c0c
 8005414:	0006c726 	.word	0x0006c726

08005418 <cmox_ll_init>:
  * @brief          CMOX library low level initialization
  * @param          pArg User defined parameter that is transmitted from initialize service
  * @retval         Initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_init(void *pArg)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Ensure CRC is enabled for cryptographic processing */
  __HAL_RCC_CRC_RELEASE_RESET();
 8005420:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <cmox_ll_init+0x3c>)
 8005422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005424:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <cmox_ll_init+0x3c>)
 8005426:	490c      	ldr	r1, [pc, #48]	; (8005458 <cmox_ll_init+0x40>)
 8005428:	400a      	ands	r2, r1
 800542a:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_CRC_CLK_ENABLE();
 800542c:	4b09      	ldr	r3, [pc, #36]	; (8005454 <cmox_ll_init+0x3c>)
 800542e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005430:	4b08      	ldr	r3, [pc, #32]	; (8005454 <cmox_ll_init+0x3c>)
 8005432:	2180      	movs	r1, #128	; 0x80
 8005434:	0149      	lsls	r1, r1, #5
 8005436:	430a      	orrs	r2, r1
 8005438:	639a      	str	r2, [r3, #56]	; 0x38
 800543a:	4b06      	ldr	r3, [pc, #24]	; (8005454 <cmox_ll_init+0x3c>)
 800543c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	015b      	lsls	r3, r3, #5
 8005442:	4013      	ands	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	68fb      	ldr	r3, [r7, #12]
  return CMOX_INIT_SUCCESS;
 8005448:	2300      	movs	r3, #0
}
 800544a:	0018      	movs	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	b004      	add	sp, #16
 8005450:	bd80      	pop	{r7, pc}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	40021000 	.word	0x40021000
 8005458:	ffffefff 	.word	0xffffefff

0800545c <cmox_ll_deInit>:
  * @brief          CMOX library low level de-initialization
  * @param          pArg User defined parameter that is transmitted from finalize service
  * @retval         De-initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_deInit(void *pArg)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Do not turn off CRC to avoid side effect on other SW parts using it */
  return CMOX_INIT_SUCCESS;
 8005464:	2300      	movs	r3, #0
}
 8005466:	0018      	movs	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	b002      	add	sp, #8
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	b089      	sub	sp, #36	; 0x24
 8005474:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005476:	240c      	movs	r4, #12
 8005478:	193b      	adds	r3, r7, r4
 800547a:	0018      	movs	r0, r3
 800547c:	2314      	movs	r3, #20
 800547e:	001a      	movs	r2, r3
 8005480:	2100      	movs	r1, #0
 8005482:	f002 ffaa 	bl	80083da <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005486:	4b29      	ldr	r3, [pc, #164]	; (800552c <MX_GPIO_Init+0xbc>)
 8005488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800548a:	4b28      	ldr	r3, [pc, #160]	; (800552c <MX_GPIO_Init+0xbc>)
 800548c:	2104      	movs	r1, #4
 800548e:	430a      	orrs	r2, r1
 8005490:	635a      	str	r2, [r3, #52]	; 0x34
 8005492:	4b26      	ldr	r3, [pc, #152]	; (800552c <MX_GPIO_Init+0xbc>)
 8005494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005496:	2204      	movs	r2, #4
 8005498:	4013      	ands	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]
 800549c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800549e:	4b23      	ldr	r3, [pc, #140]	; (800552c <MX_GPIO_Init+0xbc>)
 80054a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a2:	4b22      	ldr	r3, [pc, #136]	; (800552c <MX_GPIO_Init+0xbc>)
 80054a4:	2120      	movs	r1, #32
 80054a6:	430a      	orrs	r2, r1
 80054a8:	635a      	str	r2, [r3, #52]	; 0x34
 80054aa:	4b20      	ldr	r3, [pc, #128]	; (800552c <MX_GPIO_Init+0xbc>)
 80054ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ae:	2220      	movs	r2, #32
 80054b0:	4013      	ands	r3, r2
 80054b2:	607b      	str	r3, [r7, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80054b6:	4b1d      	ldr	r3, [pc, #116]	; (800552c <MX_GPIO_Init+0xbc>)
 80054b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ba:	4b1c      	ldr	r3, [pc, #112]	; (800552c <MX_GPIO_Init+0xbc>)
 80054bc:	2101      	movs	r1, #1
 80054be:	430a      	orrs	r2, r1
 80054c0:	635a      	str	r2, [r3, #52]	; 0x34
 80054c2:	4b1a      	ldr	r3, [pc, #104]	; (800552c <MX_GPIO_Init+0xbc>)
 80054c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c6:	2201      	movs	r2, #1
 80054c8:	4013      	ands	r3, r2
 80054ca:	603b      	str	r3, [r7, #0]
 80054cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80054ce:	23a0      	movs	r3, #160	; 0xa0
 80054d0:	05db      	lsls	r3, r3, #23
 80054d2:	2200      	movs	r2, #0
 80054d4:	2120      	movs	r1, #32
 80054d6:	0018      	movs	r0, r3
 80054d8:	f001 f8b8 	bl	800664c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80054dc:	193b      	adds	r3, r7, r4
 80054de:	2280      	movs	r2, #128	; 0x80
 80054e0:	0192      	lsls	r2, r2, #6
 80054e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054e4:	193b      	adds	r3, r7, r4
 80054e6:	2200      	movs	r2, #0
 80054e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ea:	193b      	adds	r3, r7, r4
 80054ec:	2200      	movs	r2, #0
 80054ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80054f0:	193b      	adds	r3, r7, r4
 80054f2:	4a0f      	ldr	r2, [pc, #60]	; (8005530 <MX_GPIO_Init+0xc0>)
 80054f4:	0019      	movs	r1, r3
 80054f6:	0010      	movs	r0, r2
 80054f8:	f000 ff44 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80054fc:	0021      	movs	r1, r4
 80054fe:	187b      	adds	r3, r7, r1
 8005500:	2220      	movs	r2, #32
 8005502:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005504:	187b      	adds	r3, r7, r1
 8005506:	2201      	movs	r2, #1
 8005508:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550a:	187b      	adds	r3, r7, r1
 800550c:	2200      	movs	r2, #0
 800550e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005510:	187b      	adds	r3, r7, r1
 8005512:	2202      	movs	r2, #2
 8005514:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8005516:	187a      	adds	r2, r7, r1
 8005518:	23a0      	movs	r3, #160	; 0xa0
 800551a:	05db      	lsls	r3, r3, #23
 800551c:	0011      	movs	r1, r2
 800551e:	0018      	movs	r0, r3
 8005520:	f000 ff30 	bl	8006384 <HAL_GPIO_Init>

}
 8005524:	46c0      	nop			; (mov r8, r8)
 8005526:	46bd      	mov	sp, r7
 8005528:	b009      	add	sp, #36	; 0x24
 800552a:	bd90      	pop	{r4, r7, pc}
 800552c:	40021000 	.word	0x40021000
 8005530:	50000800 	.word	0x50000800

08005534 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar (int ch)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800553c:	2301      	movs	r3, #1
 800553e:	425b      	negs	r3, r3
 8005540:	1d39      	adds	r1, r7, #4
 8005542:	4804      	ldr	r0, [pc, #16]	; (8005554 <__io_putchar+0x20>)
 8005544:	2201      	movs	r2, #1
 8005546:	f001 ffd7 	bl	80074f8 <HAL_UART_Transmit>
  return ch;
 800554a:	687b      	ldr	r3, [r7, #4]
}
 800554c:	0018      	movs	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	b002      	add	sp, #8
 8005552:	bd80      	pop	{r7, pc}
 8005554:	200008bc 	.word	0x200008bc

08005558 <printHexArray>:

void printHexArray(const uint8_t* arr, const size_t len)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  for(size_t i = 0; i < len; i++)
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	e00c      	b.n	8005582 <printHexArray+0x2a>
  {
    printf("%02X ", arr[i]);
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	18d3      	adds	r3, r2, r3
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	001a      	movs	r2, r3
 8005572:	4b0a      	ldr	r3, [pc, #40]	; (800559c <printHexArray+0x44>)
 8005574:	0011      	movs	r1, r2
 8005576:	0018      	movs	r0, r3
 8005578:	f002 ff38 	bl	80083ec <iprintf>
  for(size_t i = 0; i < len; i++)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3301      	adds	r3, #1
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d3ee      	bcc.n	8005568 <printHexArray+0x10>
  }

  printf("\r\n");
 800558a:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <printHexArray+0x48>)
 800558c:	0018      	movs	r0, r3
 800558e:	f002 ffb9 	bl	8008504 <puts>
}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	46bd      	mov	sp, r7
 8005596:	b004      	add	sp, #16
 8005598:	bd80      	pop	{r7, pc}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	080098b8 	.word	0x080098b8
 80055a0:	080098c0 	.word	0x080098c0

080055a4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80055a8:	f000 fa31 	bl	8005a0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80055ac:	f000 f819 	bl	80055e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80055b0:	f7ff ff5e 	bl	8005470 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80055b4:	f000 f954 	bl	8005860 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //initialize cmox
  if(cmox_initialize(NULL) != CMOX_INIT_SUCCESS)
 80055b8:	2000      	movs	r0, #0
 80055ba:	f7fb fe5f 	bl	800127c <cmox_initialize>
 80055be:	1e03      	subs	r3, r0, #0
 80055c0:	d001      	beq.n	80055c6 <main+0x22>
  {
    Error_Handler();
 80055c2:	f000 f86c 	bl	800569e <Error_Handler>
  }

  //verify hash
  AppHashVerify();
 80055c6:	f7ff fb0f 	bl	8004be8 <AppHashVerify>

  //verify authentication
  AppSignatureVerify();
 80055ca:	f7ff fbd7 	bl	8004d7c <AppSignatureVerify>

  //finalize cmox
  if(cmox_finalize(NULL) != CMOX_INIT_SUCCESS)
 80055ce:	2000      	movs	r0, #0
 80055d0:	f7fb fe68 	bl	80012a4 <cmox_finalize>
 80055d4:	1e03      	subs	r3, r0, #0
 80055d6:	d001      	beq.n	80055dc <main+0x38>
  {
    Error_Handler();
 80055d8:	f000 f861 	bl	800569e <Error_Handler>
  }

  //run application
  AppRun();
 80055dc:	f7ff fcd8 	bl	8004f90 <AppRun>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80055e0:	e7fe      	b.n	80055e0 <main+0x3c>

080055e2 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80055e2:	b590      	push	{r4, r7, lr}
 80055e4:	b093      	sub	sp, #76	; 0x4c
 80055e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80055e8:	2410      	movs	r4, #16
 80055ea:	193b      	adds	r3, r7, r4
 80055ec:	0018      	movs	r0, r3
 80055ee:	2338      	movs	r3, #56	; 0x38
 80055f0:	001a      	movs	r2, r3
 80055f2:	2100      	movs	r1, #0
 80055f4:	f002 fef1 	bl	80083da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80055f8:	003b      	movs	r3, r7
 80055fa:	0018      	movs	r0, r3
 80055fc:	2310      	movs	r3, #16
 80055fe:	001a      	movs	r2, r3
 8005600:	2100      	movs	r1, #0
 8005602:	f002 feea 	bl	80083da <memset>

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005606:	2380      	movs	r3, #128	; 0x80
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	0018      	movs	r0, r3
 800560c:	f001 f856 	bl	80066bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005610:	193b      	adds	r3, r7, r4
 8005612:	2202      	movs	r2, #2
 8005614:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005616:	193b      	adds	r3, r7, r4
 8005618:	2280      	movs	r2, #128	; 0x80
 800561a:	0052      	lsls	r2, r2, #1
 800561c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800561e:	0021      	movs	r1, r4
 8005620:	187b      	adds	r3, r7, r1
 8005622:	2200      	movs	r2, #0
 8005624:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005626:	187b      	adds	r3, r7, r1
 8005628:	2240      	movs	r2, #64	; 0x40
 800562a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800562c:	187b      	adds	r3, r7, r1
 800562e:	2202      	movs	r2, #2
 8005630:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005632:	187b      	adds	r3, r7, r1
 8005634:	2202      	movs	r2, #2
 8005636:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8005638:	187b      	adds	r3, r7, r1
 800563a:	2200      	movs	r2, #0
 800563c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800563e:	187b      	adds	r3, r7, r1
 8005640:	2208      	movs	r2, #8
 8005642:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005644:	187b      	adds	r3, r7, r1
 8005646:	2280      	movs	r2, #128	; 0x80
 8005648:	0292      	lsls	r2, r2, #10
 800564a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800564c:	187b      	adds	r3, r7, r1
 800564e:	2280      	movs	r2, #128	; 0x80
 8005650:	0492      	lsls	r2, r2, #18
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005654:	187b      	adds	r3, r7, r1
 8005656:	2280      	movs	r2, #128	; 0x80
 8005658:	0592      	lsls	r2, r2, #22
 800565a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800565c:	187b      	adds	r3, r7, r1
 800565e:	0018      	movs	r0, r3
 8005660:	f001 f878 	bl	8006754 <HAL_RCC_OscConfig>
 8005664:	1e03      	subs	r3, r0, #0
 8005666:	d001      	beq.n	800566c <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8005668:	f000 f819 	bl	800569e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800566c:	003b      	movs	r3, r7
 800566e:	2207      	movs	r2, #7
 8005670:	601a      	str	r2, [r3, #0]
      |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005672:	003b      	movs	r3, r7
 8005674:	2202      	movs	r2, #2
 8005676:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005678:	003b      	movs	r3, r7
 800567a:	2200      	movs	r2, #0
 800567c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800567e:	003b      	movs	r3, r7
 8005680:	2200      	movs	r2, #0
 8005682:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005684:	003b      	movs	r3, r7
 8005686:	2102      	movs	r1, #2
 8005688:	0018      	movs	r0, r3
 800568a:	f001 fb7d 	bl	8006d88 <HAL_RCC_ClockConfig>
 800568e:	1e03      	subs	r3, r0, #0
 8005690:	d001      	beq.n	8005696 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8005692:	f000 f804 	bl	800569e <Error_Handler>
  }
}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	46bd      	mov	sp, r7
 800569a:	b013      	add	sp, #76	; 0x4c
 800569c:	bd90      	pop	{r4, r7, pc}

0800569e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80056a2:	b672      	cpsid	i
}
 80056a4:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80056a6:	e7fe      	b.n	80056a6 <Error_Handler+0x8>

080056a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056ae:	4b0f      	ldr	r3, [pc, #60]	; (80056ec <HAL_MspInit+0x44>)
 80056b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056b2:	4b0e      	ldr	r3, [pc, #56]	; (80056ec <HAL_MspInit+0x44>)
 80056b4:	2101      	movs	r1, #1
 80056b6:	430a      	orrs	r2, r1
 80056b8:	641a      	str	r2, [r3, #64]	; 0x40
 80056ba:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <HAL_MspInit+0x44>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	2201      	movs	r2, #1
 80056c0:	4013      	ands	r3, r2
 80056c2:	607b      	str	r3, [r7, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80056c6:	4b09      	ldr	r3, [pc, #36]	; (80056ec <HAL_MspInit+0x44>)
 80056c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056ca:	4b08      	ldr	r3, [pc, #32]	; (80056ec <HAL_MspInit+0x44>)
 80056cc:	2180      	movs	r1, #128	; 0x80
 80056ce:	0549      	lsls	r1, r1, #21
 80056d0:	430a      	orrs	r2, r1
 80056d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80056d4:	4b05      	ldr	r3, [pc, #20]	; (80056ec <HAL_MspInit+0x44>)
 80056d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d8:	2380      	movs	r3, #128	; 0x80
 80056da:	055b      	lsls	r3, r3, #21
 80056dc:	4013      	ands	r3, r2
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	46bd      	mov	sp, r7
 80056e6:	b002      	add	sp, #8
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	40021000 	.word	0x40021000

080056f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80056f4:	e7fe      	b.n	80056f4 <NMI_Handler+0x4>

080056f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056fa:	e7fe      	b.n	80056fa <HardFault_Handler+0x4>

080056fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005700:	46c0      	nop			; (mov r8, r8)
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005714:	f000 f9dc 	bl	8005ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005718:	46c0      	nop			; (mov r8, r8)
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b086      	sub	sp, #24
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	e00a      	b.n	8005746 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005730:	e000      	b.n	8005734 <_read+0x16>
 8005732:	bf00      	nop
 8005734:	0001      	movs	r1, r0
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	60ba      	str	r2, [r7, #8]
 800573c:	b2ca      	uxtb	r2, r1
 800573e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	3301      	adds	r3, #1
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	429a      	cmp	r2, r3
 800574c:	dbf0      	blt.n	8005730 <_read+0x12>
	}

return len;
 800574e:	687b      	ldr	r3, [r7, #4]
}
 8005750:	0018      	movs	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	b006      	add	sp, #24
 8005756:	bd80      	pop	{r7, pc}

08005758 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005764:	2300      	movs	r3, #0
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	e009      	b.n	800577e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	60ba      	str	r2, [r7, #8]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	0018      	movs	r0, r3
 8005774:	f7ff fede 	bl	8005534 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	3301      	adds	r3, #1
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	429a      	cmp	r2, r3
 8005784:	dbf1      	blt.n	800576a <_write+0x12>
	}
	return len;
 8005786:	687b      	ldr	r3, [r7, #4]
}
 8005788:	0018      	movs	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	b006      	add	sp, #24
 800578e:	bd80      	pop	{r7, pc}

08005790 <_close>:

int _close(int file)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
	return -1;
 8005798:	2301      	movs	r3, #1
 800579a:	425b      	negs	r3, r3
}
 800579c:	0018      	movs	r0, r3
 800579e:	46bd      	mov	sp, r7
 80057a0:	b002      	add	sp, #8
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2280      	movs	r2, #128	; 0x80
 80057b2:	0192      	lsls	r2, r2, #6
 80057b4:	605a      	str	r2, [r3, #4]
	return 0;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	0018      	movs	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	b002      	add	sp, #8
 80057be:	bd80      	pop	{r7, pc}

080057c0 <_isatty>:

int _isatty(int file)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
	return 1;
 80057c8:	2301      	movs	r3, #1
}
 80057ca:	0018      	movs	r0, r3
 80057cc:	46bd      	mov	sp, r7
 80057ce:	b002      	add	sp, #8
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b084      	sub	sp, #16
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
	return 0;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	0018      	movs	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	b004      	add	sp, #16
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057f0:	4a14      	ldr	r2, [pc, #80]	; (8005844 <_sbrk+0x5c>)
 80057f2:	4b15      	ldr	r3, [pc, #84]	; (8005848 <_sbrk+0x60>)
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057fc:	4b13      	ldr	r3, [pc, #76]	; (800584c <_sbrk+0x64>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d102      	bne.n	800580a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005804:	4b11      	ldr	r3, [pc, #68]	; (800584c <_sbrk+0x64>)
 8005806:	4a12      	ldr	r2, [pc, #72]	; (8005850 <_sbrk+0x68>)
 8005808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800580a:	4b10      	ldr	r3, [pc, #64]	; (800584c <_sbrk+0x64>)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	18d3      	adds	r3, r2, r3
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	429a      	cmp	r2, r3
 8005816:	d207      	bcs.n	8005828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005818:	f002 fd9e 	bl	8008358 <__errno>
 800581c:	0003      	movs	r3, r0
 800581e:	220c      	movs	r2, #12
 8005820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005822:	2301      	movs	r3, #1
 8005824:	425b      	negs	r3, r3
 8005826:	e009      	b.n	800583c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005828:	4b08      	ldr	r3, [pc, #32]	; (800584c <_sbrk+0x64>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800582e:	4b07      	ldr	r3, [pc, #28]	; (800584c <_sbrk+0x64>)
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	18d2      	adds	r2, r2, r3
 8005836:	4b05      	ldr	r3, [pc, #20]	; (800584c <_sbrk+0x64>)
 8005838:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800583a:	68fb      	ldr	r3, [r7, #12]
}
 800583c:	0018      	movs	r0, r3
 800583e:	46bd      	mov	sp, r7
 8005840:	b006      	add	sp, #24
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20009000 	.word	0x20009000
 8005848:	00000400 	.word	0x00000400
 800584c:	200008b8 	.word	0x200008b8
 8005850:	20000980 	.word	0x20000980

08005854 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005858:	46c0      	nop			; (mov r8, r8)
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005864:	4b23      	ldr	r3, [pc, #140]	; (80058f4 <MX_USART2_UART_Init+0x94>)
 8005866:	4a24      	ldr	r2, [pc, #144]	; (80058f8 <MX_USART2_UART_Init+0x98>)
 8005868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800586a:	4b22      	ldr	r3, [pc, #136]	; (80058f4 <MX_USART2_UART_Init+0x94>)
 800586c:	22e1      	movs	r2, #225	; 0xe1
 800586e:	0252      	lsls	r2, r2, #9
 8005870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005872:	4b20      	ldr	r3, [pc, #128]	; (80058f4 <MX_USART2_UART_Init+0x94>)
 8005874:	2200      	movs	r2, #0
 8005876:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005878:	4b1e      	ldr	r3, [pc, #120]	; (80058f4 <MX_USART2_UART_Init+0x94>)
 800587a:	2200      	movs	r2, #0
 800587c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800587e:	4b1d      	ldr	r3, [pc, #116]	; (80058f4 <MX_USART2_UART_Init+0x94>)
 8005880:	2200      	movs	r2, #0
 8005882:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005884:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <MX_USART2_UART_Init+0x94>)
 8005886:	220c      	movs	r2, #12
 8005888:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800588a:	4b1a      	ldr	r3, [pc, #104]	; (80058f4 <MX_USART2_UART_Init+0x94>)
 800588c:	2200      	movs	r2, #0
 800588e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005890:	4b18      	ldr	r3, [pc, #96]	; (80058f4 <MX_USART2_UART_Init+0x94>)
 8005892:	2200      	movs	r2, #0
 8005894:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005896:	4b17      	ldr	r3, [pc, #92]	; (80058f4 <MX_USART2_UART_Init+0x94>)
 8005898:	2200      	movs	r2, #0
 800589a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800589c:	4b15      	ldr	r3, [pc, #84]	; (80058f4 <MX_USART2_UART_Init+0x94>)
 800589e:	2200      	movs	r2, #0
 80058a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058a2:	4b14      	ldr	r3, [pc, #80]	; (80058f4 <MX_USART2_UART_Init+0x94>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80058a8:	4b12      	ldr	r3, [pc, #72]	; (80058f4 <MX_USART2_UART_Init+0x94>)
 80058aa:	0018      	movs	r0, r3
 80058ac:	f001 fdce 	bl	800744c <HAL_UART_Init>
 80058b0:	1e03      	subs	r3, r0, #0
 80058b2:	d001      	beq.n	80058b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80058b4:	f7ff fef3 	bl	800569e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058b8:	4b0e      	ldr	r3, [pc, #56]	; (80058f4 <MX_USART2_UART_Init+0x94>)
 80058ba:	2100      	movs	r1, #0
 80058bc:	0018      	movs	r0, r3
 80058be:	f002 fc5b 	bl	8008178 <HAL_UARTEx_SetTxFifoThreshold>
 80058c2:	1e03      	subs	r3, r0, #0
 80058c4:	d001      	beq.n	80058ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80058c6:	f7ff feea 	bl	800569e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058ca:	4b0a      	ldr	r3, [pc, #40]	; (80058f4 <MX_USART2_UART_Init+0x94>)
 80058cc:	2100      	movs	r1, #0
 80058ce:	0018      	movs	r0, r3
 80058d0:	f002 fc92 	bl	80081f8 <HAL_UARTEx_SetRxFifoThreshold>
 80058d4:	1e03      	subs	r3, r0, #0
 80058d6:	d001      	beq.n	80058dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80058d8:	f7ff fee1 	bl	800569e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80058dc:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <MX_USART2_UART_Init+0x94>)
 80058de:	0018      	movs	r0, r3
 80058e0:	f002 fc10 	bl	8008104 <HAL_UARTEx_DisableFifoMode>
 80058e4:	1e03      	subs	r3, r0, #0
 80058e6:	d001      	beq.n	80058ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80058e8:	f7ff fed9 	bl	800569e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80058ec:	46c0      	nop			; (mov r8, r8)
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	200008bc 	.word	0x200008bc
 80058f8:	40004400 	.word	0x40004400

080058fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80058fc:	b590      	push	{r4, r7, lr}
 80058fe:	b097      	sub	sp, #92	; 0x5c
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005904:	2344      	movs	r3, #68	; 0x44
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	0018      	movs	r0, r3
 800590a:	2314      	movs	r3, #20
 800590c:	001a      	movs	r2, r3
 800590e:	2100      	movs	r1, #0
 8005910:	f002 fd63 	bl	80083da <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005914:	2410      	movs	r4, #16
 8005916:	193b      	adds	r3, r7, r4
 8005918:	0018      	movs	r0, r3
 800591a:	2334      	movs	r3, #52	; 0x34
 800591c:	001a      	movs	r2, r3
 800591e:	2100      	movs	r1, #0
 8005920:	f002 fd5b 	bl	80083da <memset>
  if(uartHandle->Instance==USART2)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a22      	ldr	r2, [pc, #136]	; (80059b4 <HAL_UART_MspInit+0xb8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d13e      	bne.n	80059ac <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800592e:	193b      	adds	r3, r7, r4
 8005930:	2202      	movs	r2, #2
 8005932:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005934:	193b      	adds	r3, r7, r4
 8005936:	2200      	movs	r2, #0
 8005938:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800593a:	193b      	adds	r3, r7, r4
 800593c:	0018      	movs	r0, r3
 800593e:	f001 fbcd 	bl	80070dc <HAL_RCCEx_PeriphCLKConfig>
 8005942:	1e03      	subs	r3, r0, #0
 8005944:	d001      	beq.n	800594a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005946:	f7ff feaa 	bl	800569e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800594a:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <HAL_UART_MspInit+0xbc>)
 800594c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800594e:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <HAL_UART_MspInit+0xbc>)
 8005950:	2180      	movs	r1, #128	; 0x80
 8005952:	0289      	lsls	r1, r1, #10
 8005954:	430a      	orrs	r2, r1
 8005956:	63da      	str	r2, [r3, #60]	; 0x3c
 8005958:	4b17      	ldr	r3, [pc, #92]	; (80059b8 <HAL_UART_MspInit+0xbc>)
 800595a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	029b      	lsls	r3, r3, #10
 8005960:	4013      	ands	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005966:	4b14      	ldr	r3, [pc, #80]	; (80059b8 <HAL_UART_MspInit+0xbc>)
 8005968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800596a:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <HAL_UART_MspInit+0xbc>)
 800596c:	2101      	movs	r1, #1
 800596e:	430a      	orrs	r2, r1
 8005970:	635a      	str	r2, [r3, #52]	; 0x34
 8005972:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <HAL_UART_MspInit+0xbc>)
 8005974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005976:	2201      	movs	r2, #1
 8005978:	4013      	ands	r3, r2
 800597a:	60bb      	str	r3, [r7, #8]
 800597c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800597e:	2144      	movs	r1, #68	; 0x44
 8005980:	187b      	adds	r3, r7, r1
 8005982:	220c      	movs	r2, #12
 8005984:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005986:	187b      	adds	r3, r7, r1
 8005988:	2202      	movs	r2, #2
 800598a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800598c:	187b      	adds	r3, r7, r1
 800598e:	2201      	movs	r2, #1
 8005990:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005992:	187b      	adds	r3, r7, r1
 8005994:	2200      	movs	r2, #0
 8005996:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005998:	187b      	adds	r3, r7, r1
 800599a:	2201      	movs	r2, #1
 800599c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800599e:	187a      	adds	r2, r7, r1
 80059a0:	23a0      	movs	r3, #160	; 0xa0
 80059a2:	05db      	lsls	r3, r3, #23
 80059a4:	0011      	movs	r1, r2
 80059a6:	0018      	movs	r0, r3
 80059a8:	f000 fcec 	bl	8006384 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80059ac:	46c0      	nop			; (mov r8, r8)
 80059ae:	46bd      	mov	sp, r7
 80059b0:	b017      	add	sp, #92	; 0x5c
 80059b2:	bd90      	pop	{r4, r7, pc}
 80059b4:	40004400 	.word	0x40004400
 80059b8:	40021000 	.word	0x40021000

080059bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80059bc:	480d      	ldr	r0, [pc, #52]	; (80059f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80059be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80059c0:	f7ff ff48 	bl	8005854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059c4:	480c      	ldr	r0, [pc, #48]	; (80059f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80059c6:	490d      	ldr	r1, [pc, #52]	; (80059fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80059c8:	4a0d      	ldr	r2, [pc, #52]	; (8005a00 <LoopForever+0xe>)
  movs r3, #0
 80059ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059cc:	e002      	b.n	80059d4 <LoopCopyDataInit>

080059ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059d2:	3304      	adds	r3, #4

080059d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059d8:	d3f9      	bcc.n	80059ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059da:	4a0a      	ldr	r2, [pc, #40]	; (8005a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80059dc:	4c0a      	ldr	r4, [pc, #40]	; (8005a08 <LoopForever+0x16>)
  movs r3, #0
 80059de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059e0:	e001      	b.n	80059e6 <LoopFillZerobss>

080059e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059e4:	3204      	adds	r2, #4

080059e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059e8:	d3fb      	bcc.n	80059e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80059ea:	f002 fcbb 	bl	8008364 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80059ee:	f7ff fdd9 	bl	80055a4 <main>

080059f2 <LoopForever>:

LoopForever:
  b LoopForever
 80059f2:	e7fe      	b.n	80059f2 <LoopForever>
  ldr   r0, =_estack
 80059f4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80059f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059fc:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8005a00:	0800a134 	.word	0x0800a134
  ldr r2, =_sbss
 8005a04:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8005a08:	20000980 	.word	0x20000980

08005a0c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005a0c:	e7fe      	b.n	8005a0c <ADC1_COMP_IRQHandler>

08005a0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b082      	sub	sp, #8
 8005a12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005a14:	1dfb      	adds	r3, r7, #7
 8005a16:	2200      	movs	r2, #0
 8005a18:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	f000 f80e 	bl	8005a3c <HAL_InitTick>
 8005a20:	1e03      	subs	r3, r0, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8005a24:	1dfb      	adds	r3, r7, #7
 8005a26:	2201      	movs	r2, #1
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	e001      	b.n	8005a30 <HAL_Init+0x22>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005a2c:	f7ff fe3c 	bl	80056a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005a30:	1dfb      	adds	r3, r7, #7
 8005a32:	781b      	ldrb	r3, [r3, #0]
}
 8005a34:	0018      	movs	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b002      	add	sp, #8
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a3c:	b590      	push	{r4, r7, lr}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005a44:	230f      	movs	r3, #15
 8005a46:	18fb      	adds	r3, r7, r3
 8005a48:	2200      	movs	r2, #0
 8005a4a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005a4c:	4b1d      	ldr	r3, [pc, #116]	; (8005ac4 <HAL_InitTick+0x88>)
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d02b      	beq.n	8005aac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005a54:	4b1c      	ldr	r3, [pc, #112]	; (8005ac8 <HAL_InitTick+0x8c>)
 8005a56:	681c      	ldr	r4, [r3, #0]
 8005a58:	4b1a      	ldr	r3, [pc, #104]	; (8005ac4 <HAL_InitTick+0x88>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	0019      	movs	r1, r3
 8005a5e:	23fa      	movs	r3, #250	; 0xfa
 8005a60:	0098      	lsls	r0, r3, #2
 8005a62:	f7fe fe35 	bl	80046d0 <__udivsi3>
 8005a66:	0003      	movs	r3, r0
 8005a68:	0019      	movs	r1, r3
 8005a6a:	0020      	movs	r0, r4
 8005a6c:	f7fe fe30 	bl	80046d0 <__udivsi3>
 8005a70:	0003      	movs	r3, r0
 8005a72:	0018      	movs	r0, r3
 8005a74:	f000 f913 	bl	8005c9e <HAL_SYSTICK_Config>
 8005a78:	1e03      	subs	r3, r0, #0
 8005a7a:	d112      	bne.n	8005aa2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d80a      	bhi.n	8005a98 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a82:	6879      	ldr	r1, [r7, #4]
 8005a84:	2301      	movs	r3, #1
 8005a86:	425b      	negs	r3, r3
 8005a88:	2200      	movs	r2, #0
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f000 f8f2 	bl	8005c74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a90:	4b0e      	ldr	r3, [pc, #56]	; (8005acc <HAL_InitTick+0x90>)
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	e00d      	b.n	8005ab4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005a98:	230f      	movs	r3, #15
 8005a9a:	18fb      	adds	r3, r7, r3
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	701a      	strb	r2, [r3, #0]
 8005aa0:	e008      	b.n	8005ab4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005aa2:	230f      	movs	r3, #15
 8005aa4:	18fb      	adds	r3, r7, r3
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	e003      	b.n	8005ab4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005aac:	230f      	movs	r3, #15
 8005aae:	18fb      	adds	r3, r7, r3
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005ab4:	230f      	movs	r3, #15
 8005ab6:	18fb      	adds	r3, r7, r3
 8005ab8:	781b      	ldrb	r3, [r3, #0]
}
 8005aba:	0018      	movs	r0, r3
 8005abc:	46bd      	mov	sp, r7
 8005abe:	b005      	add	sp, #20
 8005ac0:	bd90      	pop	{r4, r7, pc}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	20000048 	.word	0x20000048
 8005ac8:	20000040 	.word	0x20000040
 8005acc:	20000044 	.word	0x20000044

08005ad0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005ad4:	4b05      	ldr	r3, [pc, #20]	; (8005aec <HAL_IncTick+0x1c>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	001a      	movs	r2, r3
 8005ada:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <HAL_IncTick+0x20>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	18d2      	adds	r2, r2, r3
 8005ae0:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <HAL_IncTick+0x20>)
 8005ae2:	601a      	str	r2, [r3, #0]
}
 8005ae4:	46c0      	nop			; (mov r8, r8)
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	46c0      	nop			; (mov r8, r8)
 8005aec:	20000048 	.word	0x20000048
 8005af0:	20000950 	.word	0x20000950

08005af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  return uwTick;
 8005af8:	4b02      	ldr	r3, [pc, #8]	; (8005b04 <HAL_GetTick+0x10>)
 8005afa:	681b      	ldr	r3, [r3, #0]
}
 8005afc:	0018      	movs	r0, r3
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	46c0      	nop			; (mov r8, r8)
 8005b04:	20000950 	.word	0x20000950

08005b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b10:	f7ff fff0 	bl	8005af4 <HAL_GetTick>
 8005b14:	0003      	movs	r3, r0
 8005b16:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	d005      	beq.n	8005b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b22:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <HAL_Delay+0x44>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	001a      	movs	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	189b      	adds	r3, r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	f7ff ffe0 	bl	8005af4 <HAL_GetTick>
 8005b34:	0002      	movs	r2, r0
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d8f7      	bhi.n	8005b30 <HAL_Delay+0x28>
  {
  }
}
 8005b40:	46c0      	nop			; (mov r8, r8)
 8005b42:	46c0      	nop			; (mov r8, r8)
 8005b44:	46bd      	mov	sp, r7
 8005b46:	b004      	add	sp, #16
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	20000048 	.word	0x20000048

08005b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b50:	b590      	push	{r4, r7, lr}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	0002      	movs	r2, r0
 8005b58:	6039      	str	r1, [r7, #0]
 8005b5a:	1dfb      	adds	r3, r7, #7
 8005b5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005b5e:	1dfb      	adds	r3, r7, #7
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2b7f      	cmp	r3, #127	; 0x7f
 8005b64:	d828      	bhi.n	8005bb8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b66:	4a2f      	ldr	r2, [pc, #188]	; (8005c24 <__NVIC_SetPriority+0xd4>)
 8005b68:	1dfb      	adds	r3, r7, #7
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	b25b      	sxtb	r3, r3
 8005b6e:	089b      	lsrs	r3, r3, #2
 8005b70:	33c0      	adds	r3, #192	; 0xc0
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	589b      	ldr	r3, [r3, r2]
 8005b76:	1dfa      	adds	r2, r7, #7
 8005b78:	7812      	ldrb	r2, [r2, #0]
 8005b7a:	0011      	movs	r1, r2
 8005b7c:	2203      	movs	r2, #3
 8005b7e:	400a      	ands	r2, r1
 8005b80:	00d2      	lsls	r2, r2, #3
 8005b82:	21ff      	movs	r1, #255	; 0xff
 8005b84:	4091      	lsls	r1, r2
 8005b86:	000a      	movs	r2, r1
 8005b88:	43d2      	mvns	r2, r2
 8005b8a:	401a      	ands	r2, r3
 8005b8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	019b      	lsls	r3, r3, #6
 8005b92:	22ff      	movs	r2, #255	; 0xff
 8005b94:	401a      	ands	r2, r3
 8005b96:	1dfb      	adds	r3, r7, #7
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	4003      	ands	r3, r0
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005ba4:	481f      	ldr	r0, [pc, #124]	; (8005c24 <__NVIC_SetPriority+0xd4>)
 8005ba6:	1dfb      	adds	r3, r7, #7
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	b25b      	sxtb	r3, r3
 8005bac:	089b      	lsrs	r3, r3, #2
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	33c0      	adds	r3, #192	; 0xc0
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005bb6:	e031      	b.n	8005c1c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005bb8:	4a1b      	ldr	r2, [pc, #108]	; (8005c28 <__NVIC_SetPriority+0xd8>)
 8005bba:	1dfb      	adds	r3, r7, #7
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	0019      	movs	r1, r3
 8005bc0:	230f      	movs	r3, #15
 8005bc2:	400b      	ands	r3, r1
 8005bc4:	3b08      	subs	r3, #8
 8005bc6:	089b      	lsrs	r3, r3, #2
 8005bc8:	3306      	adds	r3, #6
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	18d3      	adds	r3, r2, r3
 8005bce:	3304      	adds	r3, #4
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	1dfa      	adds	r2, r7, #7
 8005bd4:	7812      	ldrb	r2, [r2, #0]
 8005bd6:	0011      	movs	r1, r2
 8005bd8:	2203      	movs	r2, #3
 8005bda:	400a      	ands	r2, r1
 8005bdc:	00d2      	lsls	r2, r2, #3
 8005bde:	21ff      	movs	r1, #255	; 0xff
 8005be0:	4091      	lsls	r1, r2
 8005be2:	000a      	movs	r2, r1
 8005be4:	43d2      	mvns	r2, r2
 8005be6:	401a      	ands	r2, r3
 8005be8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	019b      	lsls	r3, r3, #6
 8005bee:	22ff      	movs	r2, #255	; 0xff
 8005bf0:	401a      	ands	r2, r3
 8005bf2:	1dfb      	adds	r3, r7, #7
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	4003      	ands	r3, r0
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005c00:	4809      	ldr	r0, [pc, #36]	; (8005c28 <__NVIC_SetPriority+0xd8>)
 8005c02:	1dfb      	adds	r3, r7, #7
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	001c      	movs	r4, r3
 8005c08:	230f      	movs	r3, #15
 8005c0a:	4023      	ands	r3, r4
 8005c0c:	3b08      	subs	r3, #8
 8005c0e:	089b      	lsrs	r3, r3, #2
 8005c10:	430a      	orrs	r2, r1
 8005c12:	3306      	adds	r3, #6
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	18c3      	adds	r3, r0, r3
 8005c18:	3304      	adds	r3, #4
 8005c1a:	601a      	str	r2, [r3, #0]
}
 8005c1c:	46c0      	nop			; (mov r8, r8)
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b003      	add	sp, #12
 8005c22:	bd90      	pop	{r4, r7, pc}
 8005c24:	e000e100 	.word	0xe000e100
 8005c28:	e000ed00 	.word	0xe000ed00

08005c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	1e5a      	subs	r2, r3, #1
 8005c38:	2380      	movs	r3, #128	; 0x80
 8005c3a:	045b      	lsls	r3, r3, #17
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d301      	bcc.n	8005c44 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c40:	2301      	movs	r3, #1
 8005c42:	e010      	b.n	8005c66 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c44:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <SysTick_Config+0x44>)
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	3a01      	subs	r2, #1
 8005c4a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	425b      	negs	r3, r3
 8005c50:	2103      	movs	r1, #3
 8005c52:	0018      	movs	r0, r3
 8005c54:	f7ff ff7c 	bl	8005b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <SysTick_Config+0x44>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c5e:	4b04      	ldr	r3, [pc, #16]	; (8005c70 <SysTick_Config+0x44>)
 8005c60:	2207      	movs	r2, #7
 8005c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	0018      	movs	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	b002      	add	sp, #8
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	46c0      	nop			; (mov r8, r8)
 8005c70:	e000e010 	.word	0xe000e010

08005c74 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60b9      	str	r1, [r7, #8]
 8005c7c:	607a      	str	r2, [r7, #4]
 8005c7e:	210f      	movs	r1, #15
 8005c80:	187b      	adds	r3, r7, r1
 8005c82:	1c02      	adds	r2, r0, #0
 8005c84:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	187b      	adds	r3, r7, r1
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	b25b      	sxtb	r3, r3
 8005c8e:	0011      	movs	r1, r2
 8005c90:	0018      	movs	r0, r3
 8005c92:	f7ff ff5d 	bl	8005b50 <__NVIC_SetPriority>
}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	b004      	add	sp, #16
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b082      	sub	sp, #8
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f7ff ffbf 	bl	8005c2c <SysTick_Config>
 8005cae:	0003      	movs	r3, r0
}
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	b002      	add	sp, #8
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005cbe:	1dfb      	adds	r3, r7, #7
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8005cc4:	4b0b      	ldr	r3, [pc, #44]	; (8005cf4 <HAL_FLASH_Unlock+0x3c>)
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	da0c      	bge.n	8005ce6 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005ccc:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <HAL_FLASH_Unlock+0x3c>)
 8005cce:	4a0a      	ldr	r2, [pc, #40]	; (8005cf8 <HAL_FLASH_Unlock+0x40>)
 8005cd0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005cd2:	4b08      	ldr	r3, [pc, #32]	; (8005cf4 <HAL_FLASH_Unlock+0x3c>)
 8005cd4:	4a09      	ldr	r2, [pc, #36]	; (8005cfc <HAL_FLASH_Unlock+0x44>)
 8005cd6:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8005cd8:	4b06      	ldr	r3, [pc, #24]	; (8005cf4 <HAL_FLASH_Unlock+0x3c>)
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	da02      	bge.n	8005ce6 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8005ce0:	1dfb      	adds	r3, r7, #7
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005ce6:	1dfb      	adds	r3, r7, #7
 8005ce8:	781b      	ldrb	r3, [r3, #0]
}
 8005cea:	0018      	movs	r0, r3
 8005cec:	46bd      	mov	sp, r7
 8005cee:	b002      	add	sp, #8
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	40022000 	.word	0x40022000
 8005cf8:	45670123 	.word	0x45670123
 8005cfc:	cdef89ab 	.word	0xcdef89ab

08005d00 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d06:	1dfb      	adds	r3, r7, #7
 8005d08:	2201      	movs	r2, #1
 8005d0a:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005d0c:	4b09      	ldr	r3, [pc, #36]	; (8005d34 <HAL_FLASH_Lock+0x34>)
 8005d0e:	695a      	ldr	r2, [r3, #20]
 8005d10:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <HAL_FLASH_Lock+0x34>)
 8005d12:	2180      	movs	r1, #128	; 0x80
 8005d14:	0609      	lsls	r1, r1, #24
 8005d16:	430a      	orrs	r2, r1
 8005d18:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8005d1a:	4b06      	ldr	r3, [pc, #24]	; (8005d34 <HAL_FLASH_Lock+0x34>)
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	da02      	bge.n	8005d28 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 8005d22:	1dfb      	adds	r3, r7, #7
 8005d24:	2200      	movs	r2, #0
 8005d26:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005d28:	1dfb      	adds	r3, r7, #7
 8005d2a:	781b      	ldrb	r3, [r3, #0]
}
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	b002      	add	sp, #8
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40022000 	.word	0x40022000

08005d38 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d3e:	1dfb      	adds	r3, r7, #7
 8005d40:	2201      	movs	r2, #1
 8005d42:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 8005d44:	4b0d      	ldr	r3, [pc, #52]	; (8005d7c <HAL_FLASH_OB_Unlock+0x44>)
 8005d46:	695a      	ldr	r2, [r3, #20]
 8005d48:	2380      	movs	r3, #128	; 0x80
 8005d4a:	05db      	lsls	r3, r3, #23
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	d00e      	beq.n	8005d6e <HAL_FLASH_OB_Unlock+0x36>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8005d50:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <HAL_FLASH_OB_Unlock+0x44>)
 8005d52:	4a0b      	ldr	r2, [pc, #44]	; (8005d80 <HAL_FLASH_OB_Unlock+0x48>)
 8005d54:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8005d56:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <HAL_FLASH_OB_Unlock+0x44>)
 8005d58:	4a0a      	ldr	r2, [pc, #40]	; (8005d84 <HAL_FLASH_OB_Unlock+0x4c>)
 8005d5a:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 8005d5c:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <HAL_FLASH_OB_Unlock+0x44>)
 8005d5e:	695a      	ldr	r2, [r3, #20]
 8005d60:	2380      	movs	r3, #128	; 0x80
 8005d62:	05db      	lsls	r3, r3, #23
 8005d64:	4013      	ands	r3, r2
 8005d66:	d102      	bne.n	8005d6e <HAL_FLASH_OB_Unlock+0x36>
    {
      status = HAL_OK;
 8005d68:	1dfb      	adds	r3, r7, #7
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005d6e:	1dfb      	adds	r3, r7, #7
 8005d70:	781b      	ldrb	r3, [r3, #0]
}
 8005d72:	0018      	movs	r0, r3
 8005d74:	46bd      	mov	sp, r7
 8005d76:	b002      	add	sp, #8
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	40022000 	.word	0x40022000
 8005d80:	08192a3b 	.word	0x08192a3b
 8005d84:	4c5d6e7f 	.word	0x4c5d6e7f

08005d88 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d8e:	1dfb      	adds	r3, r7, #7
 8005d90:	2201      	movs	r2, #1
 8005d92:	701a      	strb	r2, [r3, #0]

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8005d94:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <HAL_FLASH_OB_Lock+0x38>)
 8005d96:	695a      	ldr	r2, [r3, #20]
 8005d98:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <HAL_FLASH_OB_Lock+0x38>)
 8005d9a:	2180      	movs	r1, #128	; 0x80
 8005d9c:	05c9      	lsls	r1, r1, #23
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	615a      	str	r2, [r3, #20]

  /* verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 8005da2:	4b07      	ldr	r3, [pc, #28]	; (8005dc0 <HAL_FLASH_OB_Lock+0x38>)
 8005da4:	695a      	ldr	r2, [r3, #20]
 8005da6:	2380      	movs	r3, #128	; 0x80
 8005da8:	05db      	lsls	r3, r3, #23
 8005daa:	4013      	ands	r3, r2
 8005dac:	d002      	beq.n	8005db4 <HAL_FLASH_OB_Lock+0x2c>
  {
    status = HAL_OK;
 8005dae:	1dfb      	adds	r3, r7, #7
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005db4:	1dfb      	adds	r3, r7, #7
 8005db6:	781b      	ldrb	r3, [r3, #0]
}
 8005db8:	0018      	movs	r0, r3
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b002      	add	sp, #8
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40022000 	.word	0x40022000

08005dc4 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <HAL_FLASH_OB_Launch+0x1c>)
 8005dca:	695a      	ldr	r2, [r3, #20]
 8005dcc:	4b04      	ldr	r3, [pc, #16]	; (8005de0 <HAL_FLASH_OB_Launch+0x1c>)
 8005dce:	2180      	movs	r1, #128	; 0x80
 8005dd0:	0509      	lsls	r1, r1, #20
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	615a      	str	r2, [r3, #20]

  /* We should not reach here : Option byte launch generates Option byte reset
     so return error */
  return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
}
 8005dd8:	0018      	movs	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	40022000 	.word	0x40022000

08005de4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8005dec:	f7ff fe82 	bl	8005af4 <HAL_GetTick>
 8005df0:	0002      	movs	r2, r0
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	189b      	adds	r3, r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8005df8:	2380      	movs	r3, #128	; 0x80
 8005dfa:	025b      	lsls	r3, r3, #9
 8005dfc:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8005dfe:	e007      	b.n	8005e10 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8005e00:	f7ff fe78 	bl	8005af4 <HAL_GetTick>
 8005e04:	0002      	movs	r2, r0
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d801      	bhi.n	8005e10 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e02a      	b.n	8005e66 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 8005e10:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <FLASH_WaitForLastOperation+0x8c>)
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	4013      	ands	r3, r2
 8005e18:	d1f2      	bne.n	8005e00 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8005e1a:	4b15      	ldr	r3, [pc, #84]	; (8005e70 <FLASH_WaitForLastOperation+0x8c>)
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	4a15      	ldr	r2, [pc, #84]	; (8005e74 <FLASH_WaitForLastOperation+0x90>)
 8005e20:	4013      	ands	r3, r2
 8005e22:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8005e24:	4b12      	ldr	r3, [pc, #72]	; (8005e70 <FLASH_WaitForLastOperation+0x8c>)
 8005e26:	4a14      	ldr	r2, [pc, #80]	; (8005e78 <FLASH_WaitForLastOperation+0x94>)
 8005e28:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d004      	beq.n	8005e3a <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005e30:	4b12      	ldr	r3, [pc, #72]	; (8005e7c <FLASH_WaitForLastOperation+0x98>)
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e015      	b.n	8005e66 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8005e3a:	f7ff fe5b 	bl	8005af4 <HAL_GetTick>
 8005e3e:	0002      	movs	r2, r0
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	189b      	adds	r3, r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005e46:	e007      	b.n	8005e58 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8005e48:	f7ff fe54 	bl	8005af4 <HAL_GetTick>
 8005e4c:	0002      	movs	r2, r0
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d801      	bhi.n	8005e58 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e006      	b.n	8005e66 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005e58:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <FLASH_WaitForLastOperation+0x8c>)
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	2380      	movs	r3, #128	; 0x80
 8005e5e:	02db      	lsls	r3, r3, #11
 8005e60:	4013      	ands	r3, r2
 8005e62:	d1f1      	bne.n	8005e48 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	0018      	movs	r0, r3
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	b004      	add	sp, #16
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	40022000 	.word	0x40022000
 8005e74:	0000c3fa 	.word	0x0000c3fa
 8005e78:	0000c3fb 	.word	0x0000c3fb
 8005e7c:	20000954 	.word	0x20000954

08005e80 <HAL_FLASHEx_OBProgram>:
  *         - a Power On Reset
  *         - an exit from Standby or Shutdown mode.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8005e80:	b5b0      	push	{r4, r5, r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e88:	4b52      	ldr	r3, [pc, #328]	; (8005fd4 <HAL_FLASHEx_OBProgram+0x154>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_FLASHEx_OBProgram+0x14>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e09b      	b.n	8005fcc <HAL_FLASHEx_OBProgram+0x14c>
 8005e94:	4b4f      	ldr	r3, [pc, #316]	; (8005fd4 <HAL_FLASHEx_OBProgram+0x154>)
 8005e96:	2201      	movs	r2, #1
 8005e98:	701a      	strb	r2, [r3, #0]

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e9a:	4b4e      	ldr	r3, [pc, #312]	; (8005fd4 <HAL_FLASHEx_OBProgram+0x154>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0x00U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	d008      	beq.n	8005ebc <HAL_FLASHEx_OBProgram+0x3c>
  {
    /* Configure of Write protection on the selected area */
    FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6858      	ldr	r0, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6899      	ldr	r1, [r3, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	001a      	movs	r2, r3
 8005eb8:	f000 f8dc 	bl	8006074 <FLASH_OB_WRPConfig>
  }

  /* Option register */
  if ((pOBInit->OptionType & (OPTIONBYTE_RDP | OPTIONBYTE_USER)) == (OPTIONBYTE_RDP | OPTIONBYTE_USER))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2206      	movs	r2, #6
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	2b06      	cmp	r3, #6
 8005ec6:	d109      	bne.n	8005edc <HAL_FLASHEx_OBProgram+0x5c>
  {
    /* Fully modify OPTR register with RDP & user data */
    FLASH_OB_OptrConfig(pOBInit->USERType, pOBInit->USERConfig, pOBInit->RDPLevel);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6958      	ldr	r0, [r3, #20]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6999      	ldr	r1, [r3, #24]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	001a      	movs	r2, r3
 8005ed6:	f000 f913 	bl	8006100 <FLASH_OB_OptrConfig>
 8005eda:	e021      	b.n	8005f20 <HAL_FLASHEx_OBProgram+0xa0>
  }
  else if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0x00U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d00b      	beq.n	8005efe <HAL_FLASHEx_OBProgram+0x7e>
  {
    /* Only modify RDP so get current user data */
    optr = FLASH_OB_GetUser();
 8005ee6:	f000 f941 	bl	800616c <FLASH_OB_GetUser>
 8005eea:	0003      	movs	r3, r0
 8005eec:	60bb      	str	r3, [r7, #8]
    FLASH_OB_OptrConfig(optr, optr, pOBInit->RDPLevel);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691a      	ldr	r2, [r3, #16]
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	f000 f902 	bl	8006100 <FLASH_OB_OptrConfig>
 8005efc:	e010      	b.n	8005f20 <HAL_FLASHEx_OBProgram+0xa0>
  }
  else if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0x00U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2204      	movs	r2, #4
 8005f04:	4013      	ands	r3, r2
 8005f06:	d00b      	beq.n	8005f20 <HAL_FLASHEx_OBProgram+0xa0>
  {
    /* Only modify user so get current RDP level */
    optr = FLASH_OB_GetRDP();
 8005f08:	f000 f918 	bl	800613c <FLASH_OB_GetRDP>
 8005f0c:	0003      	movs	r3, r0
 8005f0e:	60bb      	str	r3, [r7, #8]
    FLASH_OB_OptrConfig(pOBInit->USERType, pOBInit->USERConfig, optr);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6958      	ldr	r0, [r3, #20]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	0019      	movs	r1, r3
 8005f1c:	f000 f8f0 	bl	8006100 <FLASH_OB_OptrConfig>
    /* nothing to do */
  }

#if defined(FLASH_PCROP_SUPPORT)
  /* PCROP Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0x00U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2208      	movs	r2, #8
 8005f26:	4013      	ands	r3, r2
 8005f28:	d01a      	beq.n	8005f60 <HAL_FLASHEx_OBProgram+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_OB_PCROP_CONFIG(pOBInit->PCROPConfig));

    if ((pOBInit->PCROPConfig & (OB_PCROP_ZONE_A | OB_PCROP_RDP_ERASE)) != 0x00U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	4a2a      	ldr	r2, [pc, #168]	; (8005fd8 <HAL_FLASHEx_OBProgram+0x158>)
 8005f30:	4013      	ands	r3, r2
 8005f32:	d008      	beq.n	8005f46 <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the 1A Proprietary code readout protection */
      FLASH_OB_PCROP1AConfig(pOBInit->PCROPConfig, pOBInit->PCROP1AStartAddr, pOBInit->PCROP1AEndAddr);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	69d8      	ldr	r0, [r3, #28]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a19      	ldr	r1, [r3, #32]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	001a      	movs	r2, r3
 8005f42:	f000 f925 	bl	8006190 <FLASH_OB_PCROP1AConfig>
    }

    if ((pOBInit->PCROPConfig & OB_PCROP_ZONE_B) != 0x00U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d007      	beq.n	8005f60 <HAL_FLASHEx_OBProgram+0xe0>
    {
      /* Configure the 1B Proprietary code readout protection */
      FLASH_OB_PCROP1BConfig(pOBInit->PCROP1BStartAddr, pOBInit->PCROP1BEndAddr);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	0019      	movs	r1, r3
 8005f5a:	0010      	movs	r0, r2
 8005f5c:	f000 f94e 	bl	80061fc <FLASH_OB_PCROP1BConfig>
  }
#endif /* FLASH_PCROP_SUPPORT */

#if defined(FLASH_SECURABLE_MEMORY_SUPPORT)
  /* Securable Memory Area Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_SEC) != 0x00U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2210      	movs	r2, #16
 8005f66:	4013      	ands	r3, r2
 8005f68:	d007      	beq.n	8005f7a <HAL_FLASHEx_OBProgram+0xfa>
#if defined(FLASH_DBANK_SUPPORT)
    /* Configure the securable memory area protection */
    FLASH_OB_SecMemConfig(pOBInit->BootEntryPoint, pOBInit->SecSize, pOBInit->SecSize2);
#else
    /* Configure the securable memory area protection */
    FLASH_OB_SecMemConfig(pOBInit->BootEntryPoint, pOBInit->SecSize);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f72:	0019      	movs	r1, r3
 8005f74:	0010      	movs	r0, r2
 8005f76:	f000 f9cf 	bl	8006318 <FLASH_OB_SecMemConfig>
#endif /* FLASH_DBANK_SUPPORT */
  }
#endif /* FLASH_SECURABLE_MEMORY_SUPPORT */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005f7a:	250f      	movs	r5, #15
 8005f7c:	197c      	adds	r4, r7, r5
 8005f7e:	23fa      	movs	r3, #250	; 0xfa
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	0018      	movs	r0, r3
 8005f84:	f7ff ff2e 	bl	8005de4 <FLASH_WaitForLastOperation>
 8005f88:	0003      	movs	r3, r0
 8005f8a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8005f8c:	0028      	movs	r0, r5
 8005f8e:	183b      	adds	r3, r7, r0
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d114      	bne.n	8005fc0 <HAL_FLASHEx_OBProgram+0x140>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8005f96:	4b11      	ldr	r3, [pc, #68]	; (8005fdc <HAL_FLASHEx_OBProgram+0x15c>)
 8005f98:	695a      	ldr	r2, [r3, #20]
 8005f9a:	4b10      	ldr	r3, [pc, #64]	; (8005fdc <HAL_FLASHEx_OBProgram+0x15c>)
 8005f9c:	2180      	movs	r1, #128	; 0x80
 8005f9e:	0289      	lsls	r1, r1, #10
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	615a      	str	r2, [r3, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005fa4:	183c      	adds	r4, r7, r0
 8005fa6:	23fa      	movs	r3, #250	; 0xfa
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	0018      	movs	r0, r3
 8005fac:	f7ff ff1a 	bl	8005de4 <FLASH_WaitForLastOperation>
 8005fb0:	0003      	movs	r3, r0
 8005fb2:	7023      	strb	r3, [r4, #0]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8005fb4:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <HAL_FLASHEx_OBProgram+0x15c>)
 8005fb6:	695a      	ldr	r2, [r3, #20]
 8005fb8:	4b08      	ldr	r3, [pc, #32]	; (8005fdc <HAL_FLASHEx_OBProgram+0x15c>)
 8005fba:	4909      	ldr	r1, [pc, #36]	; (8005fe0 <HAL_FLASHEx_OBProgram+0x160>)
 8005fbc:	400a      	ands	r2, r1
 8005fbe:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005fc0:	4b04      	ldr	r3, [pc, #16]	; (8005fd4 <HAL_FLASHEx_OBProgram+0x154>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005fc6:	230f      	movs	r3, #15
 8005fc8:	18fb      	adds	r3, r7, r3
 8005fca:	781b      	ldrb	r3, [r3, #0]
}
 8005fcc:	0018      	movs	r0, r3
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	b004      	add	sp, #16
 8005fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8005fd4:	20000954 	.word	0x20000954
 8005fd8:	80000001 	.word	0x80000001
 8005fdc:	40022000 	.word	0x40022000
 8005fe0:	fffdffff 	.word	0xfffdffff

08005fe4 <HAL_FLASHEx_OBGetConfig>:
  *                  configuration information. The fields pOBInit->WRPArea should
  *                  indicate which area is requested for the WRP.
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_ALL;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	221f      	movs	r2, #31
 8005ff0:	601a      	str	r2, [r3, #0]

  /* Get write protection on the selected area */
  FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6858      	ldr	r0, [r3, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	0019      	movs	r1, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	330c      	adds	r3, #12
 8006000:	001a      	movs	r2, r3
 8006002:	f000 f853 	bl	80060ac <FLASH_OB_GetWRP>

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8006006:	f000 f899 	bl	800613c <FLASH_OB_GetRDP>
 800600a:	0002      	movs	r2, r0
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8006010:	f000 f8ac 	bl	800616c <FLASH_OB_GetUser>
 8006014:	0002      	movs	r2, r0
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	619a      	str	r2, [r3, #24]
  pOBInit->USERType = OB_USER_ALL;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a14      	ldr	r2, [pc, #80]	; (8006070 <HAL_FLASHEx_OBGetConfig+0x8c>)
 800601e:	615a      	str	r2, [r3, #20]

#if defined(FLASH_PCROP_SUPPORT)
  /* Get the Proprietary code readout protection */
  FLASH_OB_GetPCROP1A(&(pOBInit->PCROPConfig), &(pOBInit->PCROP1AStartAddr), &(pOBInit->PCROP1AEndAddr));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	331c      	adds	r3, #28
 8006024:	0018      	movs	r0, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3320      	adds	r3, #32
 800602a:	0019      	movs	r1, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3324      	adds	r3, #36	; 0x24
 8006030:	001a      	movs	r2, r3
 8006032:	f000 f901 	bl	8006238 <FLASH_OB_GetPCROP1A>
  FLASH_OB_GetPCROP1B(&(pOBInit->PCROP1BStartAddr), &(pOBInit->PCROP1BEndAddr));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3328      	adds	r3, #40	; 0x28
 800603a:	001a      	movs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	332c      	adds	r3, #44	; 0x2c
 8006040:	0019      	movs	r1, r3
 8006042:	0010      	movs	r0, r2
 8006044:	f000 f938 	bl	80062b8 <FLASH_OB_GetPCROP1B>
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE_A | OB_PCROP_ZONE_B);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	2203      	movs	r2, #3
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	61da      	str	r2, [r3, #28]
#if defined(FLASH_DBANK_SUPPORT)
  /* Get the Securable Memory Area protection */
  FLASH_OB_GetSecMem(&(pOBInit->BootEntryPoint), &(pOBInit->SecSize), &(pOBInit->SecSize2));
#else
  /* Get the Securable Memory Area protection */
  FLASH_OB_GetSecMem(&(pOBInit->BootEntryPoint), &(pOBInit->SecSize));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3330      	adds	r3, #48	; 0x30
 8006058:	001a      	movs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3334      	adds	r3, #52	; 0x34
 800605e:	0019      	movs	r1, r3
 8006060:	0010      	movs	r0, r2
 8006062:	f000 f975 	bl	8006350 <FLASH_OB_GetSecMem>
#endif /* FLASH_DBANK_SUPPORT */
#endif /* FLASH_SECURABLE_MEMORY_SUPPORT */
}
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	46bd      	mov	sp, r7
 800606a:	b002      	add	sp, #8
 800606c:	bd80      	pop	{r7, pc}
 800606e:	46c0      	nop			; (mov r8, r8)
 8006070:	3f4fff00 	.word	0x3f4fff00

08006074 <FLASH_OB_WRPConfig>:
  * @param  WRDPEndOffset  Specifies the end page of the write protected area
  *         This parameter can be page number between WRPStartOffset and (max number of pages in the Flash Bank - 1)
  * @retval None
  */
static void FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Configure the write protected area */
  if (WRPArea == OB_WRPAREA_ZONE_A)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d106      	bne.n	8006094 <FLASH_OB_WRPConfig+0x20>
  {
    FLASH->WRP1AR = ((WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos) | WRPStartOffset);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	0419      	lsls	r1, r3, #16
 800608a:	4b07      	ldr	r3, [pc, #28]	; (80060a8 <FLASH_OB_WRPConfig+0x34>)
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	430a      	orrs	r2, r1
 8006090:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* FLASH_DBANK_SUPPORT */
  else
  {
    FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
  }
}
 8006092:	e005      	b.n	80060a0 <FLASH_OB_WRPConfig+0x2c>
    FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	0419      	lsls	r1, r3, #16
 8006098:	4b03      	ldr	r3, [pc, #12]	; (80060a8 <FLASH_OB_WRPConfig+0x34>)
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	430a      	orrs	r2, r1
 800609e:	631a      	str	r2, [r3, #48]	; 0x30
}
 80060a0:	46c0      	nop			; (mov r8, r8)
 80060a2:	46bd      	mov	sp, r7
 80060a4:	b004      	add	sp, #16
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	40022000 	.word	0x40022000

080060ac <FLASH_OB_GetWRP>:
  * @param[out]  WRDPEndOffset  Dpecifies the address where to copied the end page of
  *                        the write protected area
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRDPEndOffset)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_WRPAREA(WRPArea));

  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_ZONE_A)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d10d      	bne.n	80060da <FLASH_OB_GetWRP+0x2e>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 80060be:	4b0f      	ldr	r3, [pc, #60]	; (80060fc <FLASH_OB_GetWRP+0x50>)
 80060c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c2:	223f      	movs	r2, #63	; 0x3f
 80060c4:	401a      	ands	r2, r3
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 80060ca:	4b0c      	ldr	r3, [pc, #48]	; (80060fc <FLASH_OB_GetWRP+0x50>)
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	0c1b      	lsrs	r3, r3, #16
 80060d0:	223f      	movs	r2, #63	; 0x3f
 80060d2:	401a      	ands	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	601a      	str	r2, [r3, #0]
  else
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
  }
}
 80060d8:	e00c      	b.n	80060f4 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 80060da:	4b08      	ldr	r3, [pc, #32]	; (80060fc <FLASH_OB_GetWRP+0x50>)
 80060dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060de:	223f      	movs	r2, #63	; 0x3f
 80060e0:	401a      	ands	r2, r3
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 80060e6:	4b05      	ldr	r3, [pc, #20]	; (80060fc <FLASH_OB_GetWRP+0x50>)
 80060e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ea:	0c1b      	lsrs	r3, r3, #16
 80060ec:	223f      	movs	r2, #63	; 0x3f
 80060ee:	401a      	ands	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	601a      	str	r2, [r3, #0]
}
 80060f4:	46c0      	nop			; (mov r8, r8)
 80060f6:	46bd      	mov	sp, r7
 80060f8:	b004      	add	sp, #16
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	40022000 	.word	0x40022000

08006100 <FLASH_OB_OptrConfig>:
  *           @arg @ref OB_RDP_LEVEL_2 Full chip protection
  * @note  (*) availability depends on devices
  * @retval None
  */
static void FLASH_OB_OptrConfig(uint32_t UserType, uint32_t UserConfig, uint32_t RDPLevel)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_USER_TYPE(UserType));
  assert_param(IS_OB_USER_CONFIG(UserType, UserConfig));
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  optr = FLASH->OPTR;
 800610c:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <FLASH_OB_OptrConfig+0x38>)
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	617b      	str	r3, [r7, #20]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	22ff      	movs	r2, #255	; 0xff
 8006116:	4313      	orrs	r3, r2
 8006118:	43da      	mvns	r2, r3
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	4013      	ands	r3, r2
 800611e:	617b      	str	r3, [r7, #20]
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	431a      	orrs	r2, r3
 8006126:	0011      	movs	r1, r2
 8006128:	4b03      	ldr	r3, [pc, #12]	; (8006138 <FLASH_OB_OptrConfig+0x38>)
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	430a      	orrs	r2, r1
 800612e:	621a      	str	r2, [r3, #32]
}
 8006130:	46c0      	nop			; (mov r8, r8)
 8006132:	46bd      	mov	sp, r7
 8006134:	b006      	add	sp, #24
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40022000 	.word	0x40022000

0800613c <FLASH_OB_GetRDP>:
  *           @arg @ref OB_RDP_LEVEL_0 No protection
  *           @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *           @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8006142:	4b09      	ldr	r3, [pc, #36]	; (8006168 <FLASH_OB_GetRDP+0x2c>)
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	22ff      	movs	r2, #255	; 0xff
 8006148:	4013      	ands	r3, r2
 800614a:	607b      	str	r3, [r7, #4]

  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2baa      	cmp	r3, #170	; 0xaa
 8006150:	d004      	beq.n	800615c <FLASH_OB_GetRDP+0x20>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2bcc      	cmp	r3, #204	; 0xcc
 8006156:	d001      	beq.n	800615c <FLASH_OB_GetRDP+0x20>
  {
    return (OB_RDP_LEVEL_1);
 8006158:	23bb      	movs	r3, #187	; 0xbb
 800615a:	e000      	b.n	800615e <FLASH_OB_GetRDP+0x22>
  }
  else
  {
    return rdplvl;
 800615c:	687b      	ldr	r3, [r7, #4]
  }
}
 800615e:	0018      	movs	r0, r3
 8006160:	46bd      	mov	sp, r7
 8006162:	b002      	add	sp, #8
 8006164:	bd80      	pop	{r7, pc}
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	40022000 	.word	0x40022000

0800616c <FLASH_OB_GetUser>:
  *           @arg @ref FLASH_OB_USER_nBOOT0
  *           @arg @ref FLASH_OB_USER_INPUT_RESET_HOLDER(*)
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 8006172:	4b05      	ldr	r3, [pc, #20]	; (8006188 <FLASH_OB_GetUser+0x1c>)
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	4a05      	ldr	r2, [pc, #20]	; (800618c <FLASH_OB_GetUser+0x20>)
 8006178:	4013      	ands	r3, r2
 800617a:	607b      	str	r3, [r7, #4]
  return user;
 800617c:	687b      	ldr	r3, [r7, #4]
}
 800617e:	0018      	movs	r0, r3
 8006180:	46bd      	mov	sp, r7
 8006182:	b002      	add	sp, #8
 8006184:	bd80      	pop	{r7, pc}
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	40022000 	.word	0x40022000
 800618c:	3f4fff00 	.word	0x3f4fff00

08006190 <FLASH_OB_PCROP1AConfig>:
  * @param  PCROP1AEndAddr Specifies the Zone 1A end address of the Proprietary code readout protection
  *          This parameter can be an address between PCROP1AStartAddr and end of the flash
  * @retval None
  */
static void FLASH_OB_PCROP1AConfig(uint32_t PCROPConfig, uint32_t PCROP1AStartAddr, uint32_t PCROP1AEndAddr)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
    /* Check the parameters */
    assert_param(IS_FLASH_MAIN_FIRSTHALF_MEM_ADDRESS(PCROP1AStartAddr));
    assert_param(IS_FLASH_MAIN_FIRSTHALF_MEM_ADDRESS(PCROP1AEndAddr));

    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 800619c:	2380      	movs	r3, #128	; 0x80
 800619e:	051b      	lsls	r3, r3, #20
 80061a0:	61bb      	str	r3, [r7, #24]
  }

  /* get pcrop 1A end register */
  pcrop1aend = FLASH->PCROP1AER;
 80061a2:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <FLASH_OB_PCROP1AConfig+0x68>)
 80061a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a6:	61fb      	str	r3, [r7, #28]

  /* Configure the Proprietary code readout protection offset */
  if ((PCROPConfig & OB_PCROP_ZONE_A) != 0x00U)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2201      	movs	r2, #1
 80061ac:	4013      	ands	r3, r2
 80061ae:	d014      	beq.n	80061da <FLASH_OB_PCROP1AConfig+0x4a>
  {
    /* Compute offset depending on pcrop granularity */
    startoffset = ((PCROP1AStartAddr - ropbase) >> FLASH_PCROP_GRANULARITY_OFFSET);
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	0a5b      	lsrs	r3, r3, #9
 80061b8:	617b      	str	r3, [r7, #20]
    endoffset = ((PCROP1AEndAddr - ropbase) >> FLASH_PCROP_GRANULARITY_OFFSET);
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	0a5b      	lsrs	r3, r3, #9
 80061c2:	613b      	str	r3, [r7, #16]

    /* Set Zone A start offset */
    FLASH->PCROP1ASR = startoffset;
 80061c4:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <FLASH_OB_PCROP1AConfig+0x68>)
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Zone A end offset */
    pcrop1aend &= ~FLASH_PCROP1AER_PCROP1A_END;
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	22ff      	movs	r2, #255	; 0xff
 80061ce:	4393      	bics	r3, r2
 80061d0:	61fb      	str	r3, [r7, #28]
    pcrop1aend |= endoffset;
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	61fb      	str	r3, [r7, #28]
  }

  /* Set RDP erase protection if needed. This bit is only set & will be reset by mass erase */
  if ((PCROPConfig & OB_PCROP_RDP_ERASE) != 0x00U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	da04      	bge.n	80061ea <FLASH_OB_PCROP1AConfig+0x5a>
  {
    pcrop1aend |= FLASH_PCROP1AER_PCROP_RDP;
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	2280      	movs	r2, #128	; 0x80
 80061e4:	0612      	lsls	r2, r2, #24
 80061e6:	4313      	orrs	r3, r2
 80061e8:	61fb      	str	r3, [r7, #28]
  }

  /* set 1A End register */
  FLASH->PCROP1AER = pcrop1aend;
 80061ea:	4b03      	ldr	r3, [pc, #12]	; (80061f8 <FLASH_OB_PCROP1AConfig+0x68>)
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80061f0:	46c0      	nop			; (mov r8, r8)
 80061f2:	46bd      	mov	sp, r7
 80061f4:	b008      	add	sp, #32
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40022000 	.word	0x40022000

080061fc <FLASH_OB_PCROP1BConfig>:
  * @param  PCROP1BEndAddr  Specifies the Zone 1B end address of the Proprietary code readout protection
  *         This parameter can be an address between PCROP1BStartAddr and end of the flash
  * @retval None
  */
static void FLASH_OB_PCROP1BConfig(uint32_t PCROP1BStartAddr, uint32_t PCROP1BEndAddr)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
    /* Check the parameters */
    assert_param(IS_FLASH_MAIN_FIRSTHALF_MEM_ADDRESS(PCROP1BStartAddr));
    assert_param(IS_FLASH_MAIN_FIRSTHALF_MEM_ADDRESS(PCROP1BEndAddr));

    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 8006206:	2380      	movs	r3, #128	; 0x80
 8006208:	051b      	lsls	r3, r3, #20
 800620a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the Proprietary code readout protection offset */
  startoffset = ((PCROP1BStartAddr - ropbase) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	0a5b      	lsrs	r3, r3, #9
 8006214:	613b      	str	r3, [r7, #16]
  endoffset = ((PCROP1BEndAddr - ropbase) >> FLASH_PCROP_GRANULARITY_OFFSET);
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	0a5b      	lsrs	r3, r3, #9
 800621e:	60fb      	str	r3, [r7, #12]

  /* Set Zone B start offset */
  FLASH->PCROP1BSR = startoffset;
 8006220:	4b04      	ldr	r3, [pc, #16]	; (8006234 <FLASH_OB_PCROP1BConfig+0x38>)
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	635a      	str	r2, [r3, #52]	; 0x34
  /* Set Zone B end offset */
  FLASH->PCROP1BER = endoffset;
 8006226:	4b03      	ldr	r3, [pc, #12]	; (8006234 <FLASH_OB_PCROP1BConfig+0x38>)
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800622c:	46c0      	nop			; (mov r8, r8)
 800622e:	46bd      	mov	sp, r7
 8006230:	b006      	add	sp, #24
 8006232:	bd80      	pop	{r7, pc}
 8006234:	40022000 	.word	0x40022000

08006238 <FLASH_OB_GetPCROP1A>:
  * @param  PCROP1AEndAddr [out]  Specifies the address where to copied the end address of
  *         the 1A Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP1A(uint32_t *PCROPConfig, uint32_t *PCROP1AStartAddr, uint32_t *PCROP1AEndAddr)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  }
  else
#endif /* FLASH_DBANK_SUPPORT */
  {
    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 8006244:	2380      	movs	r3, #128	; 0x80
 8006246:	051b      	lsls	r3, r3, #20
 8006248:	617b      	str	r3, [r7, #20]
  }

  pcrop = (FLASH->PCROP1ASR & FLASH_PCROP1ASR_PCROP1A_STRT);
 800624a:	4b19      	ldr	r3, [pc, #100]	; (80062b0 <FLASH_OB_GetPCROP1A+0x78>)
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	22ff      	movs	r2, #255	; 0xff
 8006250:	4013      	ands	r3, r2
 8006252:	613b      	str	r3, [r7, #16]
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	025a      	lsls	r2, r3, #9
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	601a      	str	r2, [r3, #0]
  *PCROP1AStartAddr += ropbase;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	18d2      	adds	r2, r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	601a      	str	r2, [r3, #0]

  pcrop = FLASH->PCROP1AER;
 8006268:	4b11      	ldr	r3, [pc, #68]	; (80062b0 <FLASH_OB_GetPCROP1A+0x78>)
 800626a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626c:	613b      	str	r3, [r7, #16]
  *PCROP1AEndAddr = ((pcrop & FLASH_PCROP1AER_PCROP1A_END) << FLASH_PCROP_GRANULARITY_OFFSET);
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	025a      	lsls	r2, r3, #9
 8006272:	23ff      	movs	r3, #255	; 0xff
 8006274:	025b      	lsls	r3, r3, #9
 8006276:	401a      	ands	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	601a      	str	r2, [r3, #0]
  *PCROP1AEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	18d3      	adds	r3, r2, r3
 8006284:	4a0b      	ldr	r2, [pc, #44]	; (80062b4 <FLASH_OB_GetPCROP1A+0x7c>)
 8006286:	189a      	adds	r2, r3, r2
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	601a      	str	r2, [r3, #0]

  *PCROPConfig &= ~OB_PCROP_RDP_ERASE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	085a      	lsrs	r2, r3, #1
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	601a      	str	r2, [r3, #0]
  *PCROPConfig |= (pcrop & FLASH_PCROP1AER_PCROP_RDP);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	0fdb      	lsrs	r3, r3, #31
 80062a0:	07db      	lsls	r3, r3, #31
 80062a2:	431a      	orrs	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	601a      	str	r2, [r3, #0]
}
 80062a8:	46c0      	nop			; (mov r8, r8)
 80062aa:	46bd      	mov	sp, r7
 80062ac:	b006      	add	sp, #24
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40022000 	.word	0x40022000
 80062b4:	000001ff 	.word	0x000001ff

080062b8 <FLASH_OB_GetPCROP1B>:
  * @param  PCROP1BEndAddr [out]  Specifies the address where to copied the end address of
  *         the 1B Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP1B(uint32_t *PCROP1BStartAddr, uint32_t *PCROP1BEndAddr)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* FLASH_DBANK_SUPPORT */
  {
    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 80062c2:	2380      	movs	r3, #128	; 0x80
 80062c4:	051b      	lsls	r3, r3, #20
 80062c6:	60fb      	str	r3, [r7, #12]
  }

  pcrop = (FLASH->PCROP1BSR & FLASH_PCROP1BSR_PCROP1B_STRT);
 80062c8:	4b11      	ldr	r3, [pc, #68]	; (8006310 <FLASH_OB_GetPCROP1B+0x58>)
 80062ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062cc:	22ff      	movs	r2, #255	; 0xff
 80062ce:	4013      	ands	r3, r2
 80062d0:	60bb      	str	r3, [r7, #8]
  *PCROP1BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	025a      	lsls	r2, r3, #9
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	601a      	str	r2, [r3, #0]
  *PCROP1BStartAddr += ropbase;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	18d2      	adds	r2, r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	601a      	str	r2, [r3, #0]

  pcrop = (FLASH->PCROP1BER & FLASH_PCROP1BER_PCROP1B_END);
 80062e6:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <FLASH_OB_GetPCROP1B+0x58>)
 80062e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ea:	22ff      	movs	r2, #255	; 0xff
 80062ec:	4013      	ands	r3, r2
 80062ee:	60bb      	str	r3, [r7, #8]
  *PCROP1BEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	025a      	lsls	r2, r3, #9
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	601a      	str	r2, [r3, #0]
  *PCROP1BEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	18d3      	adds	r3, r2, r3
 8006300:	4a04      	ldr	r2, [pc, #16]	; (8006314 <FLASH_OB_GetPCROP1B+0x5c>)
 8006302:	189a      	adds	r2, r3, r2
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	601a      	str	r2, [r3, #0]
}
 8006308:	46c0      	nop			; (mov r8, r8)
 800630a:	46bd      	mov	sp, r7
 800630c:	b004      	add	sp, #16
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40022000 	.word	0x40022000
 8006314:	000001ff 	.word	0x000001ff

08006318 <FLASH_OB_SecMemConfig>:
  * @param  SecSize specifies number of pages to protect as securable memory area, starting from
  *         beginning of the Flash (page 0).
  * @retval None
  */
static void FLASH_OB_SecMemConfig(uint32_t BootEntry, uint32_t SecSize)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_SEC_BOOT_LOCK(BootEntry));
  assert_param(IS_OB_SEC_SIZE(SecSize));

  /* Set securable memory area configuration */
  secmem = (FLASH->SECR & ~(FLASH_SECR_BOOT_LOCK | FLASH_SECR_SEC_SIZE));
 8006322:	4a09      	ldr	r2, [pc, #36]	; (8006348 <FLASH_OB_SecMemConfig+0x30>)
 8006324:	2380      	movs	r3, #128	; 0x80
 8006326:	58d3      	ldr	r3, [r2, r3]
 8006328:	4a08      	ldr	r2, [pc, #32]	; (800634c <FLASH_OB_SecMemConfig+0x34>)
 800632a:	4013      	ands	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
  FLASH->SECR = (secmem | BootEntry | SecSize);
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	431a      	orrs	r2, r3
 8006334:	4904      	ldr	r1, [pc, #16]	; (8006348 <FLASH_OB_SecMemConfig+0x30>)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	4313      	orrs	r3, r2
 800633a:	2280      	movs	r2, #128	; 0x80
 800633c:	508b      	str	r3, [r1, r2]
}
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	46bd      	mov	sp, r7
 8006342:	b004      	add	sp, #16
 8006344:	bd80      	pop	{r7, pc}
 8006346:	46c0      	nop			; (mov r8, r8)
 8006348:	40022000 	.word	0x40022000
 800634c:	fffeff80 	.word	0xfffeff80

08006350 <FLASH_OB_GetSecMem>:
  * @param  SecSize specifies number of pages to protect as secure memory area, starting from
  *         beginning of the Flash (page 0).
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t *BootEntry, uint32_t *SecSize)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t secmem = FLASH->SECR;
 800635a:	4a09      	ldr	r2, [pc, #36]	; (8006380 <FLASH_OB_GetSecMem+0x30>)
 800635c:	2380      	movs	r3, #128	; 0x80
 800635e:	58d3      	ldr	r3, [r2, r3]
 8006360:	60fb      	str	r3, [r7, #12]

  *BootEntry = (secmem & FLASH_SECR_BOOT_LOCK);
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	2380      	movs	r3, #128	; 0x80
 8006366:	025b      	lsls	r3, r3, #9
 8006368:	401a      	ands	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	601a      	str	r2, [r3, #0]
  *SecSize = (secmem & FLASH_SECR_SEC_SIZE);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	227f      	movs	r2, #127	; 0x7f
 8006372:	401a      	ands	r2, r3
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	601a      	str	r2, [r3, #0]
}
 8006378:	46c0      	nop			; (mov r8, r8)
 800637a:	46bd      	mov	sp, r7
 800637c:	b004      	add	sp, #16
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40022000 	.word	0x40022000

08006384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800638e:	2300      	movs	r3, #0
 8006390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006392:	e147      	b.n	8006624 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2101      	movs	r1, #1
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4091      	lsls	r1, r2
 800639e:	000a      	movs	r2, r1
 80063a0:	4013      	ands	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d100      	bne.n	80063ac <HAL_GPIO_Init+0x28>
 80063aa:	e138      	b.n	800661e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	2203      	movs	r2, #3
 80063b2:	4013      	ands	r3, r2
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d005      	beq.n	80063c4 <HAL_GPIO_Init+0x40>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	2203      	movs	r2, #3
 80063be:	4013      	ands	r3, r2
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d130      	bne.n	8006426 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	2203      	movs	r2, #3
 80063d0:	409a      	lsls	r2, r3
 80063d2:	0013      	movs	r3, r2
 80063d4:	43da      	mvns	r2, r3
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	4013      	ands	r3, r2
 80063da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	409a      	lsls	r2, r3
 80063e6:	0013      	movs	r3, r2
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063fa:	2201      	movs	r2, #1
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	409a      	lsls	r2, r3
 8006400:	0013      	movs	r3, r2
 8006402:	43da      	mvns	r2, r3
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	4013      	ands	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	091b      	lsrs	r3, r3, #4
 8006410:	2201      	movs	r2, #1
 8006412:	401a      	ands	r2, r3
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	409a      	lsls	r2, r3
 8006418:	0013      	movs	r3, r2
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2203      	movs	r2, #3
 800642c:	4013      	ands	r3, r2
 800642e:	2b03      	cmp	r3, #3
 8006430:	d017      	beq.n	8006462 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	2203      	movs	r2, #3
 800643e:	409a      	lsls	r2, r3
 8006440:	0013      	movs	r3, r2
 8006442:	43da      	mvns	r2, r3
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	4013      	ands	r3, r2
 8006448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	409a      	lsls	r2, r3
 8006454:	0013      	movs	r3, r2
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2203      	movs	r2, #3
 8006468:	4013      	ands	r3, r2
 800646a:	2b02      	cmp	r3, #2
 800646c:	d123      	bne.n	80064b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	08da      	lsrs	r2, r3, #3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3208      	adds	r2, #8
 8006476:	0092      	lsls	r2, r2, #2
 8006478:	58d3      	ldr	r3, [r2, r3]
 800647a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2207      	movs	r2, #7
 8006480:	4013      	ands	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	220f      	movs	r2, #15
 8006486:	409a      	lsls	r2, r3
 8006488:	0013      	movs	r3, r2
 800648a:	43da      	mvns	r2, r3
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	4013      	ands	r3, r2
 8006490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	691a      	ldr	r2, [r3, #16]
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2107      	movs	r1, #7
 800649a:	400b      	ands	r3, r1
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	409a      	lsls	r2, r3
 80064a0:	0013      	movs	r3, r2
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	08da      	lsrs	r2, r3, #3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3208      	adds	r2, #8
 80064b0:	0092      	lsls	r2, r2, #2
 80064b2:	6939      	ldr	r1, [r7, #16]
 80064b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	2203      	movs	r2, #3
 80064c2:	409a      	lsls	r2, r3
 80064c4:	0013      	movs	r3, r2
 80064c6:	43da      	mvns	r2, r3
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	4013      	ands	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2203      	movs	r2, #3
 80064d4:	401a      	ands	r2, r3
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	409a      	lsls	r2, r3
 80064dc:	0013      	movs	r3, r2
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	23c0      	movs	r3, #192	; 0xc0
 80064f0:	029b      	lsls	r3, r3, #10
 80064f2:	4013      	ands	r3, r2
 80064f4:	d100      	bne.n	80064f8 <HAL_GPIO_Init+0x174>
 80064f6:	e092      	b.n	800661e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80064f8:	4a50      	ldr	r2, [pc, #320]	; (800663c <HAL_GPIO_Init+0x2b8>)
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	089b      	lsrs	r3, r3, #2
 80064fe:	3318      	adds	r3, #24
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	589b      	ldr	r3, [r3, r2]
 8006504:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2203      	movs	r2, #3
 800650a:	4013      	ands	r3, r2
 800650c:	00db      	lsls	r3, r3, #3
 800650e:	220f      	movs	r2, #15
 8006510:	409a      	lsls	r2, r3
 8006512:	0013      	movs	r3, r2
 8006514:	43da      	mvns	r2, r3
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	4013      	ands	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	23a0      	movs	r3, #160	; 0xa0
 8006520:	05db      	lsls	r3, r3, #23
 8006522:	429a      	cmp	r2, r3
 8006524:	d013      	beq.n	800654e <HAL_GPIO_Init+0x1ca>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a45      	ldr	r2, [pc, #276]	; (8006640 <HAL_GPIO_Init+0x2bc>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d00d      	beq.n	800654a <HAL_GPIO_Init+0x1c6>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a44      	ldr	r2, [pc, #272]	; (8006644 <HAL_GPIO_Init+0x2c0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d007      	beq.n	8006546 <HAL_GPIO_Init+0x1c2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a43      	ldr	r2, [pc, #268]	; (8006648 <HAL_GPIO_Init+0x2c4>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d101      	bne.n	8006542 <HAL_GPIO_Init+0x1be>
 800653e:	2303      	movs	r3, #3
 8006540:	e006      	b.n	8006550 <HAL_GPIO_Init+0x1cc>
 8006542:	2305      	movs	r3, #5
 8006544:	e004      	b.n	8006550 <HAL_GPIO_Init+0x1cc>
 8006546:	2302      	movs	r3, #2
 8006548:	e002      	b.n	8006550 <HAL_GPIO_Init+0x1cc>
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <HAL_GPIO_Init+0x1cc>
 800654e:	2300      	movs	r3, #0
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	2103      	movs	r1, #3
 8006554:	400a      	ands	r2, r1
 8006556:	00d2      	lsls	r2, r2, #3
 8006558:	4093      	lsls	r3, r2
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006560:	4936      	ldr	r1, [pc, #216]	; (800663c <HAL_GPIO_Init+0x2b8>)
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	089b      	lsrs	r3, r3, #2
 8006566:	3318      	adds	r3, #24
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800656e:	4b33      	ldr	r3, [pc, #204]	; (800663c <HAL_GPIO_Init+0x2b8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	43da      	mvns	r2, r3
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	4013      	ands	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	2380      	movs	r3, #128	; 0x80
 8006584:	035b      	lsls	r3, r3, #13
 8006586:	4013      	ands	r3, r2
 8006588:	d003      	beq.n	8006592 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006592:	4b2a      	ldr	r3, [pc, #168]	; (800663c <HAL_GPIO_Init+0x2b8>)
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006598:	4b28      	ldr	r3, [pc, #160]	; (800663c <HAL_GPIO_Init+0x2b8>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	43da      	mvns	r2, r3
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	4013      	ands	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	2380      	movs	r3, #128	; 0x80
 80065ae:	039b      	lsls	r3, r3, #14
 80065b0:	4013      	ands	r3, r2
 80065b2:	d003      	beq.n	80065bc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80065bc:	4b1f      	ldr	r3, [pc, #124]	; (800663c <HAL_GPIO_Init+0x2b8>)
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80065c2:	4a1e      	ldr	r2, [pc, #120]	; (800663c <HAL_GPIO_Init+0x2b8>)
 80065c4:	2384      	movs	r3, #132	; 0x84
 80065c6:	58d3      	ldr	r3, [r2, r3]
 80065c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	43da      	mvns	r2, r3
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	4013      	ands	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	2380      	movs	r3, #128	; 0x80
 80065da:	029b      	lsls	r3, r3, #10
 80065dc:	4013      	ands	r3, r2
 80065de:	d003      	beq.n	80065e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80065e8:	4914      	ldr	r1, [pc, #80]	; (800663c <HAL_GPIO_Init+0x2b8>)
 80065ea:	2284      	movs	r2, #132	; 0x84
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80065f0:	4a12      	ldr	r2, [pc, #72]	; (800663c <HAL_GPIO_Init+0x2b8>)
 80065f2:	2380      	movs	r3, #128	; 0x80
 80065f4:	58d3      	ldr	r3, [r2, r3]
 80065f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	43da      	mvns	r2, r3
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	4013      	ands	r3, r2
 8006600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	2380      	movs	r3, #128	; 0x80
 8006608:	025b      	lsls	r3, r3, #9
 800660a:	4013      	ands	r3, r2
 800660c:	d003      	beq.n	8006616 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006616:	4909      	ldr	r1, [pc, #36]	; (800663c <HAL_GPIO_Init+0x2b8>)
 8006618:	2280      	movs	r2, #128	; 0x80
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	3301      	adds	r3, #1
 8006622:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	40da      	lsrs	r2, r3
 800662c:	1e13      	subs	r3, r2, #0
 800662e:	d000      	beq.n	8006632 <HAL_GPIO_Init+0x2ae>
 8006630:	e6b0      	b.n	8006394 <HAL_GPIO_Init+0x10>
  }
}
 8006632:	46c0      	nop			; (mov r8, r8)
 8006634:	46c0      	nop			; (mov r8, r8)
 8006636:	46bd      	mov	sp, r7
 8006638:	b006      	add	sp, #24
 800663a:	bd80      	pop	{r7, pc}
 800663c:	40021800 	.word	0x40021800
 8006640:	50000400 	.word	0x50000400
 8006644:	50000800 	.word	0x50000800
 8006648:	50000c00 	.word	0x50000c00

0800664c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	0008      	movs	r0, r1
 8006656:	0011      	movs	r1, r2
 8006658:	1cbb      	adds	r3, r7, #2
 800665a:	1c02      	adds	r2, r0, #0
 800665c:	801a      	strh	r2, [r3, #0]
 800665e:	1c7b      	adds	r3, r7, #1
 8006660:	1c0a      	adds	r2, r1, #0
 8006662:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006664:	1c7b      	adds	r3, r7, #1
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800666c:	1cbb      	adds	r3, r7, #2
 800666e:	881a      	ldrh	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006674:	e003      	b.n	800667e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006676:	1cbb      	adds	r3, r7, #2
 8006678:	881a      	ldrh	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800667e:	46c0      	nop			; (mov r8, r8)
 8006680:	46bd      	mov	sp, r7
 8006682:	b002      	add	sp, #8
 8006684:	bd80      	pop	{r7, pc}

08006686 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	000a      	movs	r2, r1
 8006690:	1cbb      	adds	r3, r7, #2
 8006692:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800669a:	1cbb      	adds	r3, r7, #2
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	4013      	ands	r3, r2
 80066a2:	041a      	lsls	r2, r3, #16
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	43db      	mvns	r3, r3
 80066a8:	1cb9      	adds	r1, r7, #2
 80066aa:	8809      	ldrh	r1, [r1, #0]
 80066ac:	400b      	ands	r3, r1
 80066ae:	431a      	orrs	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	619a      	str	r2, [r3, #24]
}
 80066b4:	46c0      	nop			; (mov r8, r8)
 80066b6:	46bd      	mov	sp, r7
 80066b8:	b004      	add	sp, #16
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80066c4:	4b19      	ldr	r3, [pc, #100]	; (800672c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a19      	ldr	r2, [pc, #100]	; (8006730 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80066ca:	4013      	ands	r3, r2
 80066cc:	0019      	movs	r1, r3
 80066ce:	4b17      	ldr	r3, [pc, #92]	; (800672c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	2380      	movs	r3, #128	; 0x80
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	429a      	cmp	r2, r3
 80066de:	d11f      	bne.n	8006720 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80066e0:	4b14      	ldr	r3, [pc, #80]	; (8006734 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	0013      	movs	r3, r2
 80066e6:	005b      	lsls	r3, r3, #1
 80066e8:	189b      	adds	r3, r3, r2
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	4912      	ldr	r1, [pc, #72]	; (8006738 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80066ee:	0018      	movs	r0, r3
 80066f0:	f7fd ffee 	bl	80046d0 <__udivsi3>
 80066f4:	0003      	movs	r3, r0
 80066f6:	3301      	adds	r3, #1
 80066f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066fa:	e008      	b.n	800670e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3b01      	subs	r3, #1
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	e001      	b.n	800670e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e009      	b.n	8006722 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800670e:	4b07      	ldr	r3, [pc, #28]	; (800672c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006710:	695a      	ldr	r2, [r3, #20]
 8006712:	2380      	movs	r3, #128	; 0x80
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	401a      	ands	r2, r3
 8006718:	2380      	movs	r3, #128	; 0x80
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	429a      	cmp	r2, r3
 800671e:	d0ed      	beq.n	80066fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	0018      	movs	r0, r3
 8006724:	46bd      	mov	sp, r7
 8006726:	b004      	add	sp, #16
 8006728:	bd80      	pop	{r7, pc}
 800672a:	46c0      	nop			; (mov r8, r8)
 800672c:	40007000 	.word	0x40007000
 8006730:	fffff9ff 	.word	0xfffff9ff
 8006734:	20000040 	.word	0x20000040
 8006738:	000f4240 	.word	0x000f4240

0800673c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006740:	4b03      	ldr	r3, [pc, #12]	; (8006750 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	23e0      	movs	r3, #224	; 0xe0
 8006746:	01db      	lsls	r3, r3, #7
 8006748:	4013      	ands	r3, r2
}
 800674a:	0018      	movs	r0, r3
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	40021000 	.word	0x40021000

08006754 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e2fe      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2201      	movs	r2, #1
 800676c:	4013      	ands	r3, r2
 800676e:	d100      	bne.n	8006772 <HAL_RCC_OscConfig+0x1e>
 8006770:	e07c      	b.n	800686c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006772:	4bc3      	ldr	r3, [pc, #780]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2238      	movs	r2, #56	; 0x38
 8006778:	4013      	ands	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800677c:	4bc0      	ldr	r3, [pc, #768]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	2203      	movs	r2, #3
 8006782:	4013      	ands	r3, r2
 8006784:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	2b10      	cmp	r3, #16
 800678a:	d102      	bne.n	8006792 <HAL_RCC_OscConfig+0x3e>
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2b03      	cmp	r3, #3
 8006790:	d002      	beq.n	8006798 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	2b08      	cmp	r3, #8
 8006796:	d10b      	bne.n	80067b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006798:	4bb9      	ldr	r3, [pc, #740]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	2380      	movs	r3, #128	; 0x80
 800679e:	029b      	lsls	r3, r3, #10
 80067a0:	4013      	ands	r3, r2
 80067a2:	d062      	beq.n	800686a <HAL_RCC_OscConfig+0x116>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d15e      	bne.n	800686a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e2d9      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	2380      	movs	r3, #128	; 0x80
 80067b6:	025b      	lsls	r3, r3, #9
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d107      	bne.n	80067cc <HAL_RCC_OscConfig+0x78>
 80067bc:	4bb0      	ldr	r3, [pc, #704]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	4baf      	ldr	r3, [pc, #700]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80067c2:	2180      	movs	r1, #128	; 0x80
 80067c4:	0249      	lsls	r1, r1, #9
 80067c6:	430a      	orrs	r2, r1
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	e020      	b.n	800680e <HAL_RCC_OscConfig+0xba>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	23a0      	movs	r3, #160	; 0xa0
 80067d2:	02db      	lsls	r3, r3, #11
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d10e      	bne.n	80067f6 <HAL_RCC_OscConfig+0xa2>
 80067d8:	4ba9      	ldr	r3, [pc, #676]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	4ba8      	ldr	r3, [pc, #672]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80067de:	2180      	movs	r1, #128	; 0x80
 80067e0:	02c9      	lsls	r1, r1, #11
 80067e2:	430a      	orrs	r2, r1
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	4ba6      	ldr	r3, [pc, #664]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	4ba5      	ldr	r3, [pc, #660]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80067ec:	2180      	movs	r1, #128	; 0x80
 80067ee:	0249      	lsls	r1, r1, #9
 80067f0:	430a      	orrs	r2, r1
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	e00b      	b.n	800680e <HAL_RCC_OscConfig+0xba>
 80067f6:	4ba2      	ldr	r3, [pc, #648]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4ba1      	ldr	r3, [pc, #644]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80067fc:	49a1      	ldr	r1, [pc, #644]	; (8006a84 <HAL_RCC_OscConfig+0x330>)
 80067fe:	400a      	ands	r2, r1
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	4b9f      	ldr	r3, [pc, #636]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	4b9e      	ldr	r3, [pc, #632]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 8006808:	499f      	ldr	r1, [pc, #636]	; (8006a88 <HAL_RCC_OscConfig+0x334>)
 800680a:	400a      	ands	r2, r1
 800680c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d014      	beq.n	8006840 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006816:	f7ff f96d 	bl	8005af4 <HAL_GetTick>
 800681a:	0003      	movs	r3, r0
 800681c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006820:	f7ff f968 	bl	8005af4 <HAL_GetTick>
 8006824:	0002      	movs	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b64      	cmp	r3, #100	; 0x64
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e298      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006832:	4b93      	ldr	r3, [pc, #588]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	2380      	movs	r3, #128	; 0x80
 8006838:	029b      	lsls	r3, r3, #10
 800683a:	4013      	ands	r3, r2
 800683c:	d0f0      	beq.n	8006820 <HAL_RCC_OscConfig+0xcc>
 800683e:	e015      	b.n	800686c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006840:	f7ff f958 	bl	8005af4 <HAL_GetTick>
 8006844:	0003      	movs	r3, r0
 8006846:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006848:	e008      	b.n	800685c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800684a:	f7ff f953 	bl	8005af4 <HAL_GetTick>
 800684e:	0002      	movs	r2, r0
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b64      	cmp	r3, #100	; 0x64
 8006856:	d901      	bls.n	800685c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e283      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800685c:	4b88      	ldr	r3, [pc, #544]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	2380      	movs	r3, #128	; 0x80
 8006862:	029b      	lsls	r3, r3, #10
 8006864:	4013      	ands	r3, r2
 8006866:	d1f0      	bne.n	800684a <HAL_RCC_OscConfig+0xf6>
 8006868:	e000      	b.n	800686c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800686a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2202      	movs	r2, #2
 8006872:	4013      	ands	r3, r2
 8006874:	d100      	bne.n	8006878 <HAL_RCC_OscConfig+0x124>
 8006876:	e099      	b.n	80069ac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006878:	4b81      	ldr	r3, [pc, #516]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	2238      	movs	r2, #56	; 0x38
 800687e:	4013      	ands	r3, r2
 8006880:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006882:	4b7f      	ldr	r3, [pc, #508]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	2203      	movs	r2, #3
 8006888:	4013      	ands	r3, r2
 800688a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	2b10      	cmp	r3, #16
 8006890:	d102      	bne.n	8006898 <HAL_RCC_OscConfig+0x144>
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b02      	cmp	r3, #2
 8006896:	d002      	beq.n	800689e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d135      	bne.n	800690a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800689e:	4b78      	ldr	r3, [pc, #480]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	2380      	movs	r3, #128	; 0x80
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	4013      	ands	r3, r2
 80068a8:	d005      	beq.n	80068b6 <HAL_RCC_OscConfig+0x162>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e256      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068b6:	4b72      	ldr	r3, [pc, #456]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	4a74      	ldr	r2, [pc, #464]	; (8006a8c <HAL_RCC_OscConfig+0x338>)
 80068bc:	4013      	ands	r3, r2
 80068be:	0019      	movs	r1, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	021a      	lsls	r2, r3, #8
 80068c6:	4b6e      	ldr	r3, [pc, #440]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80068c8:	430a      	orrs	r2, r1
 80068ca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d112      	bne.n	80068f8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80068d2:	4b6b      	ldr	r3, [pc, #428]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a6e      	ldr	r2, [pc, #440]	; (8006a90 <HAL_RCC_OscConfig+0x33c>)
 80068d8:	4013      	ands	r3, r2
 80068da:	0019      	movs	r1, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	4b67      	ldr	r3, [pc, #412]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80068e2:	430a      	orrs	r2, r1
 80068e4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80068e6:	4b66      	ldr	r3, [pc, #408]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	0adb      	lsrs	r3, r3, #11
 80068ec:	2207      	movs	r2, #7
 80068ee:	4013      	ands	r3, r2
 80068f0:	4a68      	ldr	r2, [pc, #416]	; (8006a94 <HAL_RCC_OscConfig+0x340>)
 80068f2:	40da      	lsrs	r2, r3
 80068f4:	4b68      	ldr	r3, [pc, #416]	; (8006a98 <HAL_RCC_OscConfig+0x344>)
 80068f6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80068f8:	4b68      	ldr	r3, [pc, #416]	; (8006a9c <HAL_RCC_OscConfig+0x348>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	0018      	movs	r0, r3
 80068fe:	f7ff f89d 	bl	8005a3c <HAL_InitTick>
 8006902:	1e03      	subs	r3, r0, #0
 8006904:	d051      	beq.n	80069aa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e22c      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d030      	beq.n	8006974 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006912:	4b5b      	ldr	r3, [pc, #364]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a5e      	ldr	r2, [pc, #376]	; (8006a90 <HAL_RCC_OscConfig+0x33c>)
 8006918:	4013      	ands	r3, r2
 800691a:	0019      	movs	r1, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691a      	ldr	r2, [r3, #16]
 8006920:	4b57      	ldr	r3, [pc, #348]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 8006922:	430a      	orrs	r2, r1
 8006924:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006926:	4b56      	ldr	r3, [pc, #344]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	4b55      	ldr	r3, [pc, #340]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 800692c:	2180      	movs	r1, #128	; 0x80
 800692e:	0049      	lsls	r1, r1, #1
 8006930:	430a      	orrs	r2, r1
 8006932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006934:	f7ff f8de 	bl	8005af4 <HAL_GetTick>
 8006938:	0003      	movs	r3, r0
 800693a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800693c:	e008      	b.n	8006950 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800693e:	f7ff f8d9 	bl	8005af4 <HAL_GetTick>
 8006942:	0002      	movs	r2, r0
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d901      	bls.n	8006950 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e209      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006950:	4b4b      	ldr	r3, [pc, #300]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	2380      	movs	r3, #128	; 0x80
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	4013      	ands	r3, r2
 800695a:	d0f0      	beq.n	800693e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800695c:	4b48      	ldr	r3, [pc, #288]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	4a4a      	ldr	r2, [pc, #296]	; (8006a8c <HAL_RCC_OscConfig+0x338>)
 8006962:	4013      	ands	r3, r2
 8006964:	0019      	movs	r1, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	021a      	lsls	r2, r3, #8
 800696c:	4b44      	ldr	r3, [pc, #272]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
 8006972:	e01b      	b.n	80069ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006974:	4b42      	ldr	r3, [pc, #264]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	4b41      	ldr	r3, [pc, #260]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 800697a:	4949      	ldr	r1, [pc, #292]	; (8006aa0 <HAL_RCC_OscConfig+0x34c>)
 800697c:	400a      	ands	r2, r1
 800697e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006980:	f7ff f8b8 	bl	8005af4 <HAL_GetTick>
 8006984:	0003      	movs	r3, r0
 8006986:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006988:	e008      	b.n	800699c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800698a:	f7ff f8b3 	bl	8005af4 <HAL_GetTick>
 800698e:	0002      	movs	r2, r0
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e1e3      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800699c:	4b38      	ldr	r3, [pc, #224]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	2380      	movs	r3, #128	; 0x80
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	4013      	ands	r3, r2
 80069a6:	d1f0      	bne.n	800698a <HAL_RCC_OscConfig+0x236>
 80069a8:	e000      	b.n	80069ac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2208      	movs	r2, #8
 80069b2:	4013      	ands	r3, r2
 80069b4:	d047      	beq.n	8006a46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80069b6:	4b32      	ldr	r3, [pc, #200]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2238      	movs	r2, #56	; 0x38
 80069bc:	4013      	ands	r3, r2
 80069be:	2b18      	cmp	r3, #24
 80069c0:	d10a      	bne.n	80069d8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80069c2:	4b2f      	ldr	r3, [pc, #188]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80069c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c6:	2202      	movs	r2, #2
 80069c8:	4013      	ands	r3, r2
 80069ca:	d03c      	beq.n	8006a46 <HAL_RCC_OscConfig+0x2f2>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d138      	bne.n	8006a46 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e1c5      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d019      	beq.n	8006a14 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80069e0:	4b27      	ldr	r3, [pc, #156]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80069e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80069e4:	4b26      	ldr	r3, [pc, #152]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 80069e6:	2101      	movs	r1, #1
 80069e8:	430a      	orrs	r2, r1
 80069ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ec:	f7ff f882 	bl	8005af4 <HAL_GetTick>
 80069f0:	0003      	movs	r3, r0
 80069f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069f4:	e008      	b.n	8006a08 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069f6:	f7ff f87d 	bl	8005af4 <HAL_GetTick>
 80069fa:	0002      	movs	r2, r0
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d901      	bls.n	8006a08 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e1ad      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a08:	4b1d      	ldr	r3, [pc, #116]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 8006a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	4013      	ands	r3, r2
 8006a10:	d0f1      	beq.n	80069f6 <HAL_RCC_OscConfig+0x2a2>
 8006a12:	e018      	b.n	8006a46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006a14:	4b1a      	ldr	r3, [pc, #104]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 8006a16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006a18:	4b19      	ldr	r3, [pc, #100]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	438a      	bics	r2, r1
 8006a1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a20:	f7ff f868 	bl	8005af4 <HAL_GetTick>
 8006a24:	0003      	movs	r3, r0
 8006a26:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a28:	e008      	b.n	8006a3c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a2a:	f7ff f863 	bl	8005af4 <HAL_GetTick>
 8006a2e:	0002      	movs	r2, r0
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d901      	bls.n	8006a3c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e193      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a3c:	4b10      	ldr	r3, [pc, #64]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 8006a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a40:	2202      	movs	r2, #2
 8006a42:	4013      	ands	r3, r2
 8006a44:	d1f1      	bne.n	8006a2a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2204      	movs	r2, #4
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	d100      	bne.n	8006a52 <HAL_RCC_OscConfig+0x2fe>
 8006a50:	e0c6      	b.n	8006be0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a52:	231f      	movs	r3, #31
 8006a54:	18fb      	adds	r3, r7, r3
 8006a56:	2200      	movs	r2, #0
 8006a58:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006a5a:	4b09      	ldr	r3, [pc, #36]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	2238      	movs	r2, #56	; 0x38
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b20      	cmp	r3, #32
 8006a64:	d11e      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006a66:	4b06      	ldr	r3, [pc, #24]	; (8006a80 <HAL_RCC_OscConfig+0x32c>)
 8006a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	d100      	bne.n	8006a72 <HAL_RCC_OscConfig+0x31e>
 8006a70:	e0b6      	b.n	8006be0 <HAL_RCC_OscConfig+0x48c>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d000      	beq.n	8006a7c <HAL_RCC_OscConfig+0x328>
 8006a7a:	e0b1      	b.n	8006be0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e171      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
 8006a80:	40021000 	.word	0x40021000
 8006a84:	fffeffff 	.word	0xfffeffff
 8006a88:	fffbffff 	.word	0xfffbffff
 8006a8c:	ffff80ff 	.word	0xffff80ff
 8006a90:	ffffc7ff 	.word	0xffffc7ff
 8006a94:	00f42400 	.word	0x00f42400
 8006a98:	20000040 	.word	0x20000040
 8006a9c:	20000044 	.word	0x20000044
 8006aa0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006aa4:	4bb1      	ldr	r3, [pc, #708]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aa8:	2380      	movs	r3, #128	; 0x80
 8006aaa:	055b      	lsls	r3, r3, #21
 8006aac:	4013      	ands	r3, r2
 8006aae:	d101      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x360>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <HAL_RCC_OscConfig+0x362>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d011      	beq.n	8006ade <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006aba:	4bac      	ldr	r3, [pc, #688]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006abe:	4bab      	ldr	r3, [pc, #684]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006ac0:	2180      	movs	r1, #128	; 0x80
 8006ac2:	0549      	lsls	r1, r1, #21
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	63da      	str	r2, [r3, #60]	; 0x3c
 8006ac8:	4ba8      	ldr	r3, [pc, #672]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006acc:	2380      	movs	r3, #128	; 0x80
 8006ace:	055b      	lsls	r3, r3, #21
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006ad6:	231f      	movs	r3, #31
 8006ad8:	18fb      	adds	r3, r7, r3
 8006ada:	2201      	movs	r2, #1
 8006adc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ade:	4ba4      	ldr	r3, [pc, #656]	; (8006d70 <HAL_RCC_OscConfig+0x61c>)
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	2380      	movs	r3, #128	; 0x80
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	d11a      	bne.n	8006b20 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006aea:	4ba1      	ldr	r3, [pc, #644]	; (8006d70 <HAL_RCC_OscConfig+0x61c>)
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	4ba0      	ldr	r3, [pc, #640]	; (8006d70 <HAL_RCC_OscConfig+0x61c>)
 8006af0:	2180      	movs	r1, #128	; 0x80
 8006af2:	0049      	lsls	r1, r1, #1
 8006af4:	430a      	orrs	r2, r1
 8006af6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006af8:	f7fe fffc 	bl	8005af4 <HAL_GetTick>
 8006afc:	0003      	movs	r3, r0
 8006afe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b00:	e008      	b.n	8006b14 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b02:	f7fe fff7 	bl	8005af4 <HAL_GetTick>
 8006b06:	0002      	movs	r2, r0
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e127      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b14:	4b96      	ldr	r3, [pc, #600]	; (8006d70 <HAL_RCC_OscConfig+0x61c>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	2380      	movs	r3, #128	; 0x80
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	d0f0      	beq.n	8006b02 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d106      	bne.n	8006b36 <HAL_RCC_OscConfig+0x3e2>
 8006b28:	4b90      	ldr	r3, [pc, #576]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006b2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b2c:	4b8f      	ldr	r3, [pc, #572]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006b2e:	2101      	movs	r1, #1
 8006b30:	430a      	orrs	r2, r1
 8006b32:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b34:	e01c      	b.n	8006b70 <HAL_RCC_OscConfig+0x41c>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	2b05      	cmp	r3, #5
 8006b3c:	d10c      	bne.n	8006b58 <HAL_RCC_OscConfig+0x404>
 8006b3e:	4b8b      	ldr	r3, [pc, #556]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006b40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b42:	4b8a      	ldr	r3, [pc, #552]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006b44:	2104      	movs	r1, #4
 8006b46:	430a      	orrs	r2, r1
 8006b48:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b4a:	4b88      	ldr	r3, [pc, #544]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006b4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b4e:	4b87      	ldr	r3, [pc, #540]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006b50:	2101      	movs	r1, #1
 8006b52:	430a      	orrs	r2, r1
 8006b54:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b56:	e00b      	b.n	8006b70 <HAL_RCC_OscConfig+0x41c>
 8006b58:	4b84      	ldr	r3, [pc, #528]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006b5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b5c:	4b83      	ldr	r3, [pc, #524]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006b5e:	2101      	movs	r1, #1
 8006b60:	438a      	bics	r2, r1
 8006b62:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b64:	4b81      	ldr	r3, [pc, #516]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006b66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b68:	4b80      	ldr	r3, [pc, #512]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006b6a:	2104      	movs	r1, #4
 8006b6c:	438a      	bics	r2, r1
 8006b6e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d014      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b78:	f7fe ffbc 	bl	8005af4 <HAL_GetTick>
 8006b7c:	0003      	movs	r3, r0
 8006b7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b80:	e009      	b.n	8006b96 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b82:	f7fe ffb7 	bl	8005af4 <HAL_GetTick>
 8006b86:	0002      	movs	r2, r0
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	4a79      	ldr	r2, [pc, #484]	; (8006d74 <HAL_RCC_OscConfig+0x620>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e0e6      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b96:	4b75      	ldr	r3, [pc, #468]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	d0f0      	beq.n	8006b82 <HAL_RCC_OscConfig+0x42e>
 8006ba0:	e013      	b.n	8006bca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba2:	f7fe ffa7 	bl	8005af4 <HAL_GetTick>
 8006ba6:	0003      	movs	r3, r0
 8006ba8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006baa:	e009      	b.n	8006bc0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bac:	f7fe ffa2 	bl	8005af4 <HAL_GetTick>
 8006bb0:	0002      	movs	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	4a6f      	ldr	r2, [pc, #444]	; (8006d74 <HAL_RCC_OscConfig+0x620>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e0d1      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006bc0:	4b6a      	ldr	r3, [pc, #424]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	d1f0      	bne.n	8006bac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006bca:	231f      	movs	r3, #31
 8006bcc:	18fb      	adds	r3, r7, r3
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d105      	bne.n	8006be0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006bd4:	4b65      	ldr	r3, [pc, #404]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bd8:	4b64      	ldr	r3, [pc, #400]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006bda:	4967      	ldr	r1, [pc, #412]	; (8006d78 <HAL_RCC_OscConfig+0x624>)
 8006bdc:	400a      	ands	r2, r1
 8006bde:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d100      	bne.n	8006bea <HAL_RCC_OscConfig+0x496>
 8006be8:	e0bb      	b.n	8006d62 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bea:	4b60      	ldr	r3, [pc, #384]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	2238      	movs	r2, #56	; 0x38
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	2b10      	cmp	r3, #16
 8006bf4:	d100      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x4a4>
 8006bf6:	e07b      	b.n	8006cf0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d156      	bne.n	8006cae <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c00:	4b5a      	ldr	r3, [pc, #360]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	4b59      	ldr	r3, [pc, #356]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006c06:	495d      	ldr	r1, [pc, #372]	; (8006d7c <HAL_RCC_OscConfig+0x628>)
 8006c08:	400a      	ands	r2, r1
 8006c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0c:	f7fe ff72 	bl	8005af4 <HAL_GetTick>
 8006c10:	0003      	movs	r3, r0
 8006c12:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c14:	e008      	b.n	8006c28 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c16:	f7fe ff6d 	bl	8005af4 <HAL_GetTick>
 8006c1a:	0002      	movs	r2, r0
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e09d      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c28:	4b50      	ldr	r3, [pc, #320]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	2380      	movs	r3, #128	; 0x80
 8006c2e:	049b      	lsls	r3, r3, #18
 8006c30:	4013      	ands	r3, r2
 8006c32:	d1f0      	bne.n	8006c16 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c34:	4b4d      	ldr	r3, [pc, #308]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	4a51      	ldr	r2, [pc, #324]	; (8006d80 <HAL_RCC_OscConfig+0x62c>)
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	0019      	movs	r1, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1a      	ldr	r2, [r3, #32]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	431a      	orrs	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c60:	431a      	orrs	r2, r3
 8006c62:	4b42      	ldr	r3, [pc, #264]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006c64:	430a      	orrs	r2, r1
 8006c66:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c68:	4b40      	ldr	r3, [pc, #256]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	4b3f      	ldr	r3, [pc, #252]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006c6e:	2180      	movs	r1, #128	; 0x80
 8006c70:	0449      	lsls	r1, r1, #17
 8006c72:	430a      	orrs	r2, r1
 8006c74:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006c76:	4b3d      	ldr	r3, [pc, #244]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	4b3c      	ldr	r3, [pc, #240]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006c7c:	2180      	movs	r1, #128	; 0x80
 8006c7e:	0549      	lsls	r1, r1, #21
 8006c80:	430a      	orrs	r2, r1
 8006c82:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c84:	f7fe ff36 	bl	8005af4 <HAL_GetTick>
 8006c88:	0003      	movs	r3, r0
 8006c8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c8c:	e008      	b.n	8006ca0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c8e:	f7fe ff31 	bl	8005af4 <HAL_GetTick>
 8006c92:	0002      	movs	r2, r0
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d901      	bls.n	8006ca0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e061      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ca0:	4b32      	ldr	r3, [pc, #200]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	2380      	movs	r3, #128	; 0x80
 8006ca6:	049b      	lsls	r3, r3, #18
 8006ca8:	4013      	ands	r3, r2
 8006caa:	d0f0      	beq.n	8006c8e <HAL_RCC_OscConfig+0x53a>
 8006cac:	e059      	b.n	8006d62 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cae:	4b2f      	ldr	r3, [pc, #188]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4b2e      	ldr	r3, [pc, #184]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006cb4:	4931      	ldr	r1, [pc, #196]	; (8006d7c <HAL_RCC_OscConfig+0x628>)
 8006cb6:	400a      	ands	r2, r1
 8006cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cba:	f7fe ff1b 	bl	8005af4 <HAL_GetTick>
 8006cbe:	0003      	movs	r3, r0
 8006cc0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cc2:	e008      	b.n	8006cd6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cc4:	f7fe ff16 	bl	8005af4 <HAL_GetTick>
 8006cc8:	0002      	movs	r2, r0
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e046      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cd6:	4b25      	ldr	r3, [pc, #148]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	2380      	movs	r3, #128	; 0x80
 8006cdc:	049b      	lsls	r3, r3, #18
 8006cde:	4013      	ands	r3, r2
 8006ce0:	d1f0      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006ce2:	4b22      	ldr	r3, [pc, #136]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	4b21      	ldr	r3, [pc, #132]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006ce8:	4926      	ldr	r1, [pc, #152]	; (8006d84 <HAL_RCC_OscConfig+0x630>)
 8006cea:	400a      	ands	r2, r1
 8006cec:	60da      	str	r2, [r3, #12]
 8006cee:	e038      	b.n	8006d62 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e033      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006cfc:	4b1b      	ldr	r3, [pc, #108]	; (8006d6c <HAL_RCC_OscConfig+0x618>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2203      	movs	r2, #3
 8006d06:	401a      	ands	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d126      	bne.n	8006d5e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	2270      	movs	r2, #112	; 0x70
 8006d14:	401a      	ands	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d11f      	bne.n	8006d5e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	23fe      	movs	r3, #254	; 0xfe
 8006d22:	01db      	lsls	r3, r3, #7
 8006d24:	401a      	ands	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d116      	bne.n	8006d5e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	23f8      	movs	r3, #248	; 0xf8
 8006d34:	039b      	lsls	r3, r3, #14
 8006d36:	401a      	ands	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d10e      	bne.n	8006d5e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	23e0      	movs	r3, #224	; 0xe0
 8006d44:	051b      	lsls	r3, r3, #20
 8006d46:	401a      	ands	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d106      	bne.n	8006d5e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	0f5b      	lsrs	r3, r3, #29
 8006d54:	075a      	lsls	r2, r3, #29
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d001      	beq.n	8006d62 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	0018      	movs	r0, r3
 8006d66:	46bd      	mov	sp, r7
 8006d68:	b008      	add	sp, #32
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40021000 	.word	0x40021000
 8006d70:	40007000 	.word	0x40007000
 8006d74:	00001388 	.word	0x00001388
 8006d78:	efffffff 	.word	0xefffffff
 8006d7c:	feffffff 	.word	0xfeffffff
 8006d80:	11c1808c 	.word	0x11c1808c
 8006d84:	eefefffc 	.word	0xeefefffc

08006d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e0e9      	b.n	8006f70 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d9c:	4b76      	ldr	r3, [pc, #472]	; (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2207      	movs	r2, #7
 8006da2:	4013      	ands	r3, r2
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d91e      	bls.n	8006de8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006daa:	4b73      	ldr	r3, [pc, #460]	; (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2207      	movs	r2, #7
 8006db0:	4393      	bics	r3, r2
 8006db2:	0019      	movs	r1, r3
 8006db4:	4b70      	ldr	r3, [pc, #448]	; (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006dbc:	f7fe fe9a 	bl	8005af4 <HAL_GetTick>
 8006dc0:	0003      	movs	r3, r0
 8006dc2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006dc4:	e009      	b.n	8006dda <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dc6:	f7fe fe95 	bl	8005af4 <HAL_GetTick>
 8006dca:	0002      	movs	r2, r0
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	4a6a      	ldr	r2, [pc, #424]	; (8006f7c <HAL_RCC_ClockConfig+0x1f4>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e0ca      	b.n	8006f70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006dda:	4b67      	ldr	r3, [pc, #412]	; (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2207      	movs	r2, #7
 8006de0:	4013      	ands	r3, r2
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d1ee      	bne.n	8006dc6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2202      	movs	r2, #2
 8006dee:	4013      	ands	r3, r2
 8006df0:	d015      	beq.n	8006e1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2204      	movs	r2, #4
 8006df8:	4013      	ands	r3, r2
 8006dfa:	d006      	beq.n	8006e0a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006dfc:	4b60      	ldr	r3, [pc, #384]	; (8006f80 <HAL_RCC_ClockConfig+0x1f8>)
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	4b5f      	ldr	r3, [pc, #380]	; (8006f80 <HAL_RCC_ClockConfig+0x1f8>)
 8006e02:	21e0      	movs	r1, #224	; 0xe0
 8006e04:	01c9      	lsls	r1, r1, #7
 8006e06:	430a      	orrs	r2, r1
 8006e08:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e0a:	4b5d      	ldr	r3, [pc, #372]	; (8006f80 <HAL_RCC_ClockConfig+0x1f8>)
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	4a5d      	ldr	r2, [pc, #372]	; (8006f84 <HAL_RCC_ClockConfig+0x1fc>)
 8006e10:	4013      	ands	r3, r2
 8006e12:	0019      	movs	r1, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	4b59      	ldr	r3, [pc, #356]	; (8006f80 <HAL_RCC_ClockConfig+0x1f8>)
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2201      	movs	r2, #1
 8006e24:	4013      	ands	r3, r2
 8006e26:	d057      	beq.n	8006ed8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d107      	bne.n	8006e40 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e30:	4b53      	ldr	r3, [pc, #332]	; (8006f80 <HAL_RCC_ClockConfig+0x1f8>)
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	2380      	movs	r3, #128	; 0x80
 8006e36:	029b      	lsls	r3, r3, #10
 8006e38:	4013      	ands	r3, r2
 8006e3a:	d12b      	bne.n	8006e94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e097      	b.n	8006f70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d107      	bne.n	8006e58 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e48:	4b4d      	ldr	r3, [pc, #308]	; (8006f80 <HAL_RCC_ClockConfig+0x1f8>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	2380      	movs	r3, #128	; 0x80
 8006e4e:	049b      	lsls	r3, r3, #18
 8006e50:	4013      	ands	r3, r2
 8006e52:	d11f      	bne.n	8006e94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e08b      	b.n	8006f70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d107      	bne.n	8006e70 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e60:	4b47      	ldr	r3, [pc, #284]	; (8006f80 <HAL_RCC_ClockConfig+0x1f8>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	2380      	movs	r3, #128	; 0x80
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	4013      	ands	r3, r2
 8006e6a:	d113      	bne.n	8006e94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e07f      	b.n	8006f70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d106      	bne.n	8006e86 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e78:	4b41      	ldr	r3, [pc, #260]	; (8006f80 <HAL_RCC_ClockConfig+0x1f8>)
 8006e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	4013      	ands	r3, r2
 8006e80:	d108      	bne.n	8006e94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e074      	b.n	8006f70 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e86:	4b3e      	ldr	r3, [pc, #248]	; (8006f80 <HAL_RCC_ClockConfig+0x1f8>)
 8006e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	d101      	bne.n	8006e94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e06d      	b.n	8006f70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e94:	4b3a      	ldr	r3, [pc, #232]	; (8006f80 <HAL_RCC_ClockConfig+0x1f8>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	2207      	movs	r2, #7
 8006e9a:	4393      	bics	r3, r2
 8006e9c:	0019      	movs	r1, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	4b37      	ldr	r3, [pc, #220]	; (8006f80 <HAL_RCC_ClockConfig+0x1f8>)
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ea8:	f7fe fe24 	bl	8005af4 <HAL_GetTick>
 8006eac:	0003      	movs	r3, r0
 8006eae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eb0:	e009      	b.n	8006ec6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eb2:	f7fe fe1f 	bl	8005af4 <HAL_GetTick>
 8006eb6:	0002      	movs	r2, r0
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	4a2f      	ldr	r2, [pc, #188]	; (8006f7c <HAL_RCC_ClockConfig+0x1f4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e054      	b.n	8006f70 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ec6:	4b2e      	ldr	r3, [pc, #184]	; (8006f80 <HAL_RCC_ClockConfig+0x1f8>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	2238      	movs	r2, #56	; 0x38
 8006ecc:	401a      	ands	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d1ec      	bne.n	8006eb2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ed8:	4b27      	ldr	r3, [pc, #156]	; (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2207      	movs	r2, #7
 8006ede:	4013      	ands	r3, r2
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d21e      	bcs.n	8006f24 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ee6:	4b24      	ldr	r3, [pc, #144]	; (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2207      	movs	r2, #7
 8006eec:	4393      	bics	r3, r2
 8006eee:	0019      	movs	r1, r3
 8006ef0:	4b21      	ldr	r3, [pc, #132]	; (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ef8:	f7fe fdfc 	bl	8005af4 <HAL_GetTick>
 8006efc:	0003      	movs	r3, r0
 8006efe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006f00:	e009      	b.n	8006f16 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f02:	f7fe fdf7 	bl	8005af4 <HAL_GetTick>
 8006f06:	0002      	movs	r2, r0
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	4a1b      	ldr	r2, [pc, #108]	; (8006f7c <HAL_RCC_ClockConfig+0x1f4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e02c      	b.n	8006f70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006f16:	4b18      	ldr	r3, [pc, #96]	; (8006f78 <HAL_RCC_ClockConfig+0x1f0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2207      	movs	r2, #7
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d1ee      	bne.n	8006f02 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2204      	movs	r2, #4
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	d009      	beq.n	8006f42 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006f2e:	4b14      	ldr	r3, [pc, #80]	; (8006f80 <HAL_RCC_ClockConfig+0x1f8>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	4a15      	ldr	r2, [pc, #84]	; (8006f88 <HAL_RCC_ClockConfig+0x200>)
 8006f34:	4013      	ands	r3, r2
 8006f36:	0019      	movs	r1, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68da      	ldr	r2, [r3, #12]
 8006f3c:	4b10      	ldr	r3, [pc, #64]	; (8006f80 <HAL_RCC_ClockConfig+0x1f8>)
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006f42:	f000 f829 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 8006f46:	0001      	movs	r1, r0
 8006f48:	4b0d      	ldr	r3, [pc, #52]	; (8006f80 <HAL_RCC_ClockConfig+0x1f8>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	0a1b      	lsrs	r3, r3, #8
 8006f4e:	220f      	movs	r2, #15
 8006f50:	401a      	ands	r2, r3
 8006f52:	4b0e      	ldr	r3, [pc, #56]	; (8006f8c <HAL_RCC_ClockConfig+0x204>)
 8006f54:	0092      	lsls	r2, r2, #2
 8006f56:	58d3      	ldr	r3, [r2, r3]
 8006f58:	221f      	movs	r2, #31
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	000a      	movs	r2, r1
 8006f5e:	40da      	lsrs	r2, r3
 8006f60:	4b0b      	ldr	r3, [pc, #44]	; (8006f90 <HAL_RCC_ClockConfig+0x208>)
 8006f62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006f64:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <HAL_RCC_ClockConfig+0x20c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	0018      	movs	r0, r3
 8006f6a:	f7fe fd67 	bl	8005a3c <HAL_InitTick>
 8006f6e:	0003      	movs	r3, r0
}
 8006f70:	0018      	movs	r0, r3
 8006f72:	46bd      	mov	sp, r7
 8006f74:	b004      	add	sp, #16
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	40022000 	.word	0x40022000
 8006f7c:	00001388 	.word	0x00001388
 8006f80:	40021000 	.word	0x40021000
 8006f84:	fffff0ff 	.word	0xfffff0ff
 8006f88:	ffff8fff 	.word	0xffff8fff
 8006f8c:	08009da0 	.word	0x08009da0
 8006f90:	20000040 	.word	0x20000040
 8006f94:	20000044 	.word	0x20000044

08006f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f9e:	4b3c      	ldr	r3, [pc, #240]	; (8007090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2238      	movs	r2, #56	; 0x38
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	d10f      	bne.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006fa8:	4b39      	ldr	r3, [pc, #228]	; (8007090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	0adb      	lsrs	r3, r3, #11
 8006fae:	2207      	movs	r2, #7
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	409a      	lsls	r2, r3
 8006fb6:	0013      	movs	r3, r2
 8006fb8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	4835      	ldr	r0, [pc, #212]	; (8007094 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006fbe:	f7fd fb87 	bl	80046d0 <__udivsi3>
 8006fc2:	0003      	movs	r3, r0
 8006fc4:	613b      	str	r3, [r7, #16]
 8006fc6:	e05d      	b.n	8007084 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fc8:	4b31      	ldr	r3, [pc, #196]	; (8007090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	2238      	movs	r2, #56	; 0x38
 8006fce:	4013      	ands	r3, r2
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d102      	bne.n	8006fda <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006fd4:	4b30      	ldr	r3, [pc, #192]	; (8007098 <HAL_RCC_GetSysClockFreq+0x100>)
 8006fd6:	613b      	str	r3, [r7, #16]
 8006fd8:	e054      	b.n	8007084 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fda:	4b2d      	ldr	r3, [pc, #180]	; (8007090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	2238      	movs	r2, #56	; 0x38
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	2b10      	cmp	r3, #16
 8006fe4:	d138      	bne.n	8007058 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006fe6:	4b2a      	ldr	r3, [pc, #168]	; (8007090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	2203      	movs	r2, #3
 8006fec:	4013      	ands	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ff0:	4b27      	ldr	r3, [pc, #156]	; (8007090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	091b      	lsrs	r3, r3, #4
 8006ff6:	2207      	movs	r2, #7
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b03      	cmp	r3, #3
 8007002:	d10d      	bne.n	8007020 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	4824      	ldr	r0, [pc, #144]	; (8007098 <HAL_RCC_GetSysClockFreq+0x100>)
 8007008:	f7fd fb62 	bl	80046d0 <__udivsi3>
 800700c:	0003      	movs	r3, r0
 800700e:	0019      	movs	r1, r3
 8007010:	4b1f      	ldr	r3, [pc, #124]	; (8007090 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	0a1b      	lsrs	r3, r3, #8
 8007016:	227f      	movs	r2, #127	; 0x7f
 8007018:	4013      	ands	r3, r2
 800701a:	434b      	muls	r3, r1
 800701c:	617b      	str	r3, [r7, #20]
        break;
 800701e:	e00d      	b.n	800703c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007020:	68b9      	ldr	r1, [r7, #8]
 8007022:	481c      	ldr	r0, [pc, #112]	; (8007094 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007024:	f7fd fb54 	bl	80046d0 <__udivsi3>
 8007028:	0003      	movs	r3, r0
 800702a:	0019      	movs	r1, r3
 800702c:	4b18      	ldr	r3, [pc, #96]	; (8007090 <HAL_RCC_GetSysClockFreq+0xf8>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	0a1b      	lsrs	r3, r3, #8
 8007032:	227f      	movs	r2, #127	; 0x7f
 8007034:	4013      	ands	r3, r2
 8007036:	434b      	muls	r3, r1
 8007038:	617b      	str	r3, [r7, #20]
        break;
 800703a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800703c:	4b14      	ldr	r3, [pc, #80]	; (8007090 <HAL_RCC_GetSysClockFreq+0xf8>)
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	0f5b      	lsrs	r3, r3, #29
 8007042:	2207      	movs	r2, #7
 8007044:	4013      	ands	r3, r2
 8007046:	3301      	adds	r3, #1
 8007048:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800704a:	6879      	ldr	r1, [r7, #4]
 800704c:	6978      	ldr	r0, [r7, #20]
 800704e:	f7fd fb3f 	bl	80046d0 <__udivsi3>
 8007052:	0003      	movs	r3, r0
 8007054:	613b      	str	r3, [r7, #16]
 8007056:	e015      	b.n	8007084 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007058:	4b0d      	ldr	r3, [pc, #52]	; (8007090 <HAL_RCC_GetSysClockFreq+0xf8>)
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	2238      	movs	r2, #56	; 0x38
 800705e:	4013      	ands	r3, r2
 8007060:	2b20      	cmp	r3, #32
 8007062:	d103      	bne.n	800706c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007064:	2380      	movs	r3, #128	; 0x80
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	613b      	str	r3, [r7, #16]
 800706a:	e00b      	b.n	8007084 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800706c:	4b08      	ldr	r3, [pc, #32]	; (8007090 <HAL_RCC_GetSysClockFreq+0xf8>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2238      	movs	r2, #56	; 0x38
 8007072:	4013      	ands	r3, r2
 8007074:	2b18      	cmp	r3, #24
 8007076:	d103      	bne.n	8007080 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007078:	23fa      	movs	r3, #250	; 0xfa
 800707a:	01db      	lsls	r3, r3, #7
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	e001      	b.n	8007084 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007084:	693b      	ldr	r3, [r7, #16]
}
 8007086:	0018      	movs	r0, r3
 8007088:	46bd      	mov	sp, r7
 800708a:	b006      	add	sp, #24
 800708c:	bd80      	pop	{r7, pc}
 800708e:	46c0      	nop			; (mov r8, r8)
 8007090:	40021000 	.word	0x40021000
 8007094:	00f42400 	.word	0x00f42400
 8007098:	007a1200 	.word	0x007a1200

0800709c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070a0:	4b02      	ldr	r3, [pc, #8]	; (80070ac <HAL_RCC_GetHCLKFreq+0x10>)
 80070a2:	681b      	ldr	r3, [r3, #0]
}
 80070a4:	0018      	movs	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	46c0      	nop			; (mov r8, r8)
 80070ac:	20000040 	.word	0x20000040

080070b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070b0:	b5b0      	push	{r4, r5, r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80070b4:	f7ff fff2 	bl	800709c <HAL_RCC_GetHCLKFreq>
 80070b8:	0004      	movs	r4, r0
 80070ba:	f7ff fb3f 	bl	800673c <LL_RCC_GetAPB1Prescaler>
 80070be:	0003      	movs	r3, r0
 80070c0:	0b1a      	lsrs	r2, r3, #12
 80070c2:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80070c4:	0092      	lsls	r2, r2, #2
 80070c6:	58d3      	ldr	r3, [r2, r3]
 80070c8:	221f      	movs	r2, #31
 80070ca:	4013      	ands	r3, r2
 80070cc:	40dc      	lsrs	r4, r3
 80070ce:	0023      	movs	r3, r4
}
 80070d0:	0018      	movs	r0, r3
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bdb0      	pop	{r4, r5, r7, pc}
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	08009de0 	.word	0x08009de0

080070dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80070e4:	2313      	movs	r3, #19
 80070e6:	18fb      	adds	r3, r7, r3
 80070e8:	2200      	movs	r2, #0
 80070ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070ec:	2312      	movs	r3, #18
 80070ee:	18fb      	adds	r3, r7, r3
 80070f0:	2200      	movs	r2, #0
 80070f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	2380      	movs	r3, #128	; 0x80
 80070fa:	029b      	lsls	r3, r3, #10
 80070fc:	4013      	ands	r3, r2
 80070fe:	d100      	bne.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007100:	e0a3      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007102:	2011      	movs	r0, #17
 8007104:	183b      	adds	r3, r7, r0
 8007106:	2200      	movs	r2, #0
 8007108:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800710a:	4bc3      	ldr	r3, [pc, #780]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800710c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800710e:	2380      	movs	r3, #128	; 0x80
 8007110:	055b      	lsls	r3, r3, #21
 8007112:	4013      	ands	r3, r2
 8007114:	d110      	bne.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007116:	4bc0      	ldr	r3, [pc, #768]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800711a:	4bbf      	ldr	r3, [pc, #764]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800711c:	2180      	movs	r1, #128	; 0x80
 800711e:	0549      	lsls	r1, r1, #21
 8007120:	430a      	orrs	r2, r1
 8007122:	63da      	str	r2, [r3, #60]	; 0x3c
 8007124:	4bbc      	ldr	r3, [pc, #752]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007126:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007128:	2380      	movs	r3, #128	; 0x80
 800712a:	055b      	lsls	r3, r3, #21
 800712c:	4013      	ands	r3, r2
 800712e:	60bb      	str	r3, [r7, #8]
 8007130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007132:	183b      	adds	r3, r7, r0
 8007134:	2201      	movs	r2, #1
 8007136:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007138:	4bb8      	ldr	r3, [pc, #736]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	4bb7      	ldr	r3, [pc, #732]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800713e:	2180      	movs	r1, #128	; 0x80
 8007140:	0049      	lsls	r1, r1, #1
 8007142:	430a      	orrs	r2, r1
 8007144:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007146:	f7fe fcd5 	bl	8005af4 <HAL_GetTick>
 800714a:	0003      	movs	r3, r0
 800714c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800714e:	e00b      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007150:	f7fe fcd0 	bl	8005af4 <HAL_GetTick>
 8007154:	0002      	movs	r2, r0
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d904      	bls.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800715e:	2313      	movs	r3, #19
 8007160:	18fb      	adds	r3, r7, r3
 8007162:	2203      	movs	r2, #3
 8007164:	701a      	strb	r2, [r3, #0]
        break;
 8007166:	e005      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007168:	4bac      	ldr	r3, [pc, #688]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	2380      	movs	r3, #128	; 0x80
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	4013      	ands	r3, r2
 8007172:	d0ed      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007174:	2313      	movs	r3, #19
 8007176:	18fb      	adds	r3, r7, r3
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d154      	bne.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800717e:	4ba6      	ldr	r3, [pc, #664]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007180:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007182:	23c0      	movs	r3, #192	; 0xc0
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4013      	ands	r3, r2
 8007188:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d019      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	429a      	cmp	r2, r3
 8007198:	d014      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800719a:	4b9f      	ldr	r3, [pc, #636]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800719c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719e:	4aa0      	ldr	r2, [pc, #640]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071a4:	4b9c      	ldr	r3, [pc, #624]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80071a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071a8:	4b9b      	ldr	r3, [pc, #620]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80071aa:	2180      	movs	r1, #128	; 0x80
 80071ac:	0249      	lsls	r1, r1, #9
 80071ae:	430a      	orrs	r2, r1
 80071b0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071b2:	4b99      	ldr	r3, [pc, #612]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80071b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071b6:	4b98      	ldr	r3, [pc, #608]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80071b8:	499a      	ldr	r1, [pc, #616]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80071ba:	400a      	ands	r2, r1
 80071bc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80071be:	4b96      	ldr	r3, [pc, #600]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2201      	movs	r2, #1
 80071c8:	4013      	ands	r3, r2
 80071ca:	d016      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071cc:	f7fe fc92 	bl	8005af4 <HAL_GetTick>
 80071d0:	0003      	movs	r3, r0
 80071d2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071d4:	e00c      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071d6:	f7fe fc8d 	bl	8005af4 <HAL_GetTick>
 80071da:	0002      	movs	r2, r0
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	4a91      	ldr	r2, [pc, #580]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d904      	bls.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80071e6:	2313      	movs	r3, #19
 80071e8:	18fb      	adds	r3, r7, r3
 80071ea:	2203      	movs	r2, #3
 80071ec:	701a      	strb	r2, [r3, #0]
            break;
 80071ee:	e004      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071f0:	4b89      	ldr	r3, [pc, #548]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80071f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f4:	2202      	movs	r2, #2
 80071f6:	4013      	ands	r3, r2
 80071f8:	d0ed      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80071fa:	2313      	movs	r3, #19
 80071fc:	18fb      	adds	r3, r7, r3
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10a      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007204:	4b84      	ldr	r3, [pc, #528]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007208:	4a85      	ldr	r2, [pc, #532]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800720a:	4013      	ands	r3, r2
 800720c:	0019      	movs	r1, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007212:	4b81      	ldr	r3, [pc, #516]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007214:	430a      	orrs	r2, r1
 8007216:	65da      	str	r2, [r3, #92]	; 0x5c
 8007218:	e00c      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800721a:	2312      	movs	r3, #18
 800721c:	18fb      	adds	r3, r7, r3
 800721e:	2213      	movs	r2, #19
 8007220:	18ba      	adds	r2, r7, r2
 8007222:	7812      	ldrb	r2, [r2, #0]
 8007224:	701a      	strb	r2, [r3, #0]
 8007226:	e005      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007228:	2312      	movs	r3, #18
 800722a:	18fb      	adds	r3, r7, r3
 800722c:	2213      	movs	r2, #19
 800722e:	18ba      	adds	r2, r7, r2
 8007230:	7812      	ldrb	r2, [r2, #0]
 8007232:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007234:	2311      	movs	r3, #17
 8007236:	18fb      	adds	r3, r7, r3
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d105      	bne.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800723e:	4b76      	ldr	r3, [pc, #472]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007242:	4b75      	ldr	r3, [pc, #468]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007244:	4979      	ldr	r1, [pc, #484]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8007246:	400a      	ands	r2, r1
 8007248:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2201      	movs	r2, #1
 8007250:	4013      	ands	r3, r2
 8007252:	d009      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007254:	4b70      	ldr	r3, [pc, #448]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007258:	2203      	movs	r2, #3
 800725a:	4393      	bics	r3, r2
 800725c:	0019      	movs	r1, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	4b6d      	ldr	r3, [pc, #436]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007264:	430a      	orrs	r2, r1
 8007266:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2202      	movs	r2, #2
 800726e:	4013      	ands	r3, r2
 8007270:	d009      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007272:	4b69      	ldr	r3, [pc, #420]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007276:	220c      	movs	r2, #12
 8007278:	4393      	bics	r3, r2
 800727a:	0019      	movs	r1, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	4b65      	ldr	r3, [pc, #404]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007282:	430a      	orrs	r2, r1
 8007284:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2210      	movs	r2, #16
 800728c:	4013      	ands	r3, r2
 800728e:	d009      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007290:	4b61      	ldr	r3, [pc, #388]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007294:	4a66      	ldr	r2, [pc, #408]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8007296:	4013      	ands	r3, r2
 8007298:	0019      	movs	r1, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	4b5e      	ldr	r3, [pc, #376]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072a0:	430a      	orrs	r2, r1
 80072a2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	2380      	movs	r3, #128	; 0x80
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4013      	ands	r3, r2
 80072ae:	d009      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072b0:	4b59      	ldr	r3, [pc, #356]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b4:	4a5f      	ldr	r2, [pc, #380]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80072b6:	4013      	ands	r3, r2
 80072b8:	0019      	movs	r1, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	699a      	ldr	r2, [r3, #24]
 80072be:	4b56      	ldr	r3, [pc, #344]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072c0:	430a      	orrs	r2, r1
 80072c2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	2380      	movs	r3, #128	; 0x80
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	4013      	ands	r3, r2
 80072ce:	d009      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80072d0:	4b51      	ldr	r3, [pc, #324]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d4:	4a58      	ldr	r2, [pc, #352]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072d6:	4013      	ands	r3, r2
 80072d8:	0019      	movs	r1, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	69da      	ldr	r2, [r3, #28]
 80072de:	4b4e      	ldr	r3, [pc, #312]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072e0:	430a      	orrs	r2, r1
 80072e2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2220      	movs	r2, #32
 80072ea:	4013      	ands	r3, r2
 80072ec:	d009      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072ee:	4b4a      	ldr	r3, [pc, #296]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f2:	4a52      	ldr	r2, [pc, #328]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80072f4:	4013      	ands	r3, r2
 80072f6:	0019      	movs	r1, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	691a      	ldr	r2, [r3, #16]
 80072fc:	4b46      	ldr	r3, [pc, #280]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072fe:	430a      	orrs	r2, r1
 8007300:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	2380      	movs	r3, #128	; 0x80
 8007308:	01db      	lsls	r3, r3, #7
 800730a:	4013      	ands	r3, r2
 800730c:	d015      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800730e:	4b42      	ldr	r3, [pc, #264]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	0899      	lsrs	r1, r3, #2
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1a      	ldr	r2, [r3, #32]
 800731a:	4b3f      	ldr	r3, [pc, #252]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800731c:	430a      	orrs	r2, r1
 800731e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a1a      	ldr	r2, [r3, #32]
 8007324:	2380      	movs	r3, #128	; 0x80
 8007326:	05db      	lsls	r3, r3, #23
 8007328:	429a      	cmp	r2, r3
 800732a:	d106      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800732c:	4b3a      	ldr	r3, [pc, #232]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800732e:	68da      	ldr	r2, [r3, #12]
 8007330:	4b39      	ldr	r3, [pc, #228]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007332:	2180      	movs	r1, #128	; 0x80
 8007334:	0249      	lsls	r1, r1, #9
 8007336:	430a      	orrs	r2, r1
 8007338:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	2380      	movs	r3, #128	; 0x80
 8007340:	031b      	lsls	r3, r3, #12
 8007342:	4013      	ands	r3, r2
 8007344:	d009      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007346:	4b34      	ldr	r3, [pc, #208]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734a:	2240      	movs	r2, #64	; 0x40
 800734c:	4393      	bics	r3, r2
 800734e:	0019      	movs	r1, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007354:	4b30      	ldr	r3, [pc, #192]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007356:	430a      	orrs	r2, r1
 8007358:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	2380      	movs	r3, #128	; 0x80
 8007360:	039b      	lsls	r3, r3, #14
 8007362:	4013      	ands	r3, r2
 8007364:	d016      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007366:	4b2c      	ldr	r3, [pc, #176]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736a:	4a35      	ldr	r2, [pc, #212]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800736c:	4013      	ands	r3, r2
 800736e:	0019      	movs	r1, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007374:	4b28      	ldr	r3, [pc, #160]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007376:	430a      	orrs	r2, r1
 8007378:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800737e:	2380      	movs	r3, #128	; 0x80
 8007380:	03db      	lsls	r3, r3, #15
 8007382:	429a      	cmp	r2, r3
 8007384:	d106      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007386:	4b24      	ldr	r3, [pc, #144]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	4b23      	ldr	r3, [pc, #140]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800738c:	2180      	movs	r1, #128	; 0x80
 800738e:	0449      	lsls	r1, r1, #17
 8007390:	430a      	orrs	r2, r1
 8007392:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	2380      	movs	r3, #128	; 0x80
 800739a:	03db      	lsls	r3, r3, #15
 800739c:	4013      	ands	r3, r2
 800739e:	d016      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80073a0:	4b1d      	ldr	r3, [pc, #116]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a4:	4a27      	ldr	r2, [pc, #156]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80073a6:	4013      	ands	r3, r2
 80073a8:	0019      	movs	r1, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ae:	4b1a      	ldr	r3, [pc, #104]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073b0:	430a      	orrs	r2, r1
 80073b2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b8:	2380      	movs	r3, #128	; 0x80
 80073ba:	045b      	lsls	r3, r3, #17
 80073bc:	429a      	cmp	r2, r3
 80073be:	d106      	bne.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80073c0:	4b15      	ldr	r3, [pc, #84]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	4b14      	ldr	r3, [pc, #80]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073c6:	2180      	movs	r1, #128	; 0x80
 80073c8:	0449      	lsls	r1, r1, #17
 80073ca:	430a      	orrs	r2, r1
 80073cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	2380      	movs	r3, #128	; 0x80
 80073d4:	011b      	lsls	r3, r3, #4
 80073d6:	4013      	ands	r3, r2
 80073d8:	d016      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80073da:	4b0f      	ldr	r3, [pc, #60]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073de:	4a1a      	ldr	r2, [pc, #104]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80073e0:	4013      	ands	r3, r2
 80073e2:	0019      	movs	r1, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	695a      	ldr	r2, [r3, #20]
 80073e8:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073ea:	430a      	orrs	r2, r1
 80073ec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	695a      	ldr	r2, [r3, #20]
 80073f2:	2380      	movs	r3, #128	; 0x80
 80073f4:	01db      	lsls	r3, r3, #7
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d106      	bne.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80073fa:	4b07      	ldr	r3, [pc, #28]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	4b06      	ldr	r3, [pc, #24]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007400:	2180      	movs	r1, #128	; 0x80
 8007402:	0249      	lsls	r1, r1, #9
 8007404:	430a      	orrs	r2, r1
 8007406:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8007408:	2312      	movs	r3, #18
 800740a:	18fb      	adds	r3, r7, r3
 800740c:	781b      	ldrb	r3, [r3, #0]
}
 800740e:	0018      	movs	r0, r3
 8007410:	46bd      	mov	sp, r7
 8007412:	b006      	add	sp, #24
 8007414:	bd80      	pop	{r7, pc}
 8007416:	46c0      	nop			; (mov r8, r8)
 8007418:	40021000 	.word	0x40021000
 800741c:	40007000 	.word	0x40007000
 8007420:	fffffcff 	.word	0xfffffcff
 8007424:	fffeffff 	.word	0xfffeffff
 8007428:	00001388 	.word	0x00001388
 800742c:	efffffff 	.word	0xefffffff
 8007430:	fffff3ff 	.word	0xfffff3ff
 8007434:	fff3ffff 	.word	0xfff3ffff
 8007438:	ffcfffff 	.word	0xffcfffff
 800743c:	ffffcfff 	.word	0xffffcfff
 8007440:	ffbfffff 	.word	0xffbfffff
 8007444:	feffffff 	.word	0xfeffffff
 8007448:	ffff3fff 	.word	0xffff3fff

0800744c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e046      	b.n	80074ec <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2288      	movs	r2, #136	; 0x88
 8007462:	589b      	ldr	r3, [r3, r2]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d107      	bne.n	8007478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2284      	movs	r2, #132	; 0x84
 800746c:	2100      	movs	r1, #0
 800746e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	0018      	movs	r0, r3
 8007474:	f7fe fa42 	bl	80058fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2288      	movs	r2, #136	; 0x88
 800747c:	2124      	movs	r1, #36	; 0x24
 800747e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2101      	movs	r1, #1
 800748c:	438a      	bics	r2, r1
 800748e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	0018      	movs	r0, r3
 8007494:	f000 f9ae 	bl	80077f4 <UART_SetConfig>
 8007498:	0003      	movs	r3, r0
 800749a:	2b01      	cmp	r3, #1
 800749c:	d101      	bne.n	80074a2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e024      	b.n	80074ec <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	0018      	movs	r0, r3
 80074ae:	f000 fc5f 	bl	8007d70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	490d      	ldr	r1, [pc, #52]	; (80074f4 <HAL_UART_Init+0xa8>)
 80074be:	400a      	ands	r2, r1
 80074c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	212a      	movs	r1, #42	; 0x2a
 80074ce:	438a      	bics	r2, r1
 80074d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2101      	movs	r1, #1
 80074de:	430a      	orrs	r2, r1
 80074e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	0018      	movs	r0, r3
 80074e6:	f000 fcf7 	bl	8007ed8 <UART_CheckIdleState>
 80074ea:	0003      	movs	r3, r0
}
 80074ec:	0018      	movs	r0, r3
 80074ee:	46bd      	mov	sp, r7
 80074f0:	b002      	add	sp, #8
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	ffffb7ff 	.word	0xffffb7ff

080074f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08a      	sub	sp, #40	; 0x28
 80074fc:	af02      	add	r7, sp, #8
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	1dbb      	adds	r3, r7, #6
 8007506:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2288      	movs	r2, #136	; 0x88
 800750c:	589b      	ldr	r3, [r3, r2]
 800750e:	2b20      	cmp	r3, #32
 8007510:	d000      	beq.n	8007514 <HAL_UART_Transmit+0x1c>
 8007512:	e088      	b.n	8007626 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <HAL_UART_Transmit+0x2a>
 800751a:	1dbb      	adds	r3, r7, #6
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e080      	b.n	8007628 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	689a      	ldr	r2, [r3, #8]
 800752a:	2380      	movs	r3, #128	; 0x80
 800752c:	015b      	lsls	r3, r3, #5
 800752e:	429a      	cmp	r2, r3
 8007530:	d109      	bne.n	8007546 <HAL_UART_Transmit+0x4e>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d105      	bne.n	8007546 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2201      	movs	r2, #1
 800753e:	4013      	ands	r3, r2
 8007540:	d001      	beq.n	8007546 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e070      	b.n	8007628 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2290      	movs	r2, #144	; 0x90
 800754a:	2100      	movs	r1, #0
 800754c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2288      	movs	r2, #136	; 0x88
 8007552:	2121      	movs	r1, #33	; 0x21
 8007554:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007556:	f7fe facd 	bl	8005af4 <HAL_GetTick>
 800755a:	0003      	movs	r3, r0
 800755c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	1dba      	adds	r2, r7, #6
 8007562:	2154      	movs	r1, #84	; 0x54
 8007564:	8812      	ldrh	r2, [r2, #0]
 8007566:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	1dba      	adds	r2, r7, #6
 800756c:	2156      	movs	r1, #86	; 0x56
 800756e:	8812      	ldrh	r2, [r2, #0]
 8007570:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	689a      	ldr	r2, [r3, #8]
 8007576:	2380      	movs	r3, #128	; 0x80
 8007578:	015b      	lsls	r3, r3, #5
 800757a:	429a      	cmp	r2, r3
 800757c:	d108      	bne.n	8007590 <HAL_UART_Transmit+0x98>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d104      	bne.n	8007590 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007586:	2300      	movs	r3, #0
 8007588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	61bb      	str	r3, [r7, #24]
 800758e:	e003      	b.n	8007598 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007594:	2300      	movs	r3, #0
 8007596:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007598:	e02c      	b.n	80075f4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	0013      	movs	r3, r2
 80075a4:	2200      	movs	r2, #0
 80075a6:	2180      	movs	r1, #128	; 0x80
 80075a8:	f000 fce4 	bl	8007f74 <UART_WaitOnFlagUntilTimeout>
 80075ac:	1e03      	subs	r3, r0, #0
 80075ae:	d001      	beq.n	80075b4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e039      	b.n	8007628 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10b      	bne.n	80075d2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	001a      	movs	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	05d2      	lsls	r2, r2, #23
 80075c6:	0dd2      	lsrs	r2, r2, #23
 80075c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	3302      	adds	r3, #2
 80075ce:	61bb      	str	r3, [r7, #24]
 80075d0:	e007      	b.n	80075e2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	781a      	ldrb	r2, [r3, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	3301      	adds	r3, #1
 80075e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2256      	movs	r2, #86	; 0x56
 80075e6:	5a9b      	ldrh	r3, [r3, r2]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b299      	uxth	r1, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2256      	movs	r2, #86	; 0x56
 80075f2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2256      	movs	r2, #86	; 0x56
 80075f8:	5a9b      	ldrh	r3, [r3, r2]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1cc      	bne.n	800759a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	0013      	movs	r3, r2
 800760a:	2200      	movs	r2, #0
 800760c:	2140      	movs	r1, #64	; 0x40
 800760e:	f000 fcb1 	bl	8007f74 <UART_WaitOnFlagUntilTimeout>
 8007612:	1e03      	subs	r3, r0, #0
 8007614:	d001      	beq.n	800761a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e006      	b.n	8007628 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2288      	movs	r2, #136	; 0x88
 800761e:	2120      	movs	r1, #32
 8007620:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	e000      	b.n	8007628 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8007626:	2302      	movs	r3, #2
  }
}
 8007628:	0018      	movs	r0, r3
 800762a:	46bd      	mov	sp, r7
 800762c:	b008      	add	sp, #32
 800762e:	bd80      	pop	{r7, pc}

08007630 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08a      	sub	sp, #40	; 0x28
 8007634:	af02      	add	r7, sp, #8
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	603b      	str	r3, [r7, #0]
 800763c:	1dbb      	adds	r3, r7, #6
 800763e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	228c      	movs	r2, #140	; 0x8c
 8007644:	589b      	ldr	r3, [r3, r2]
 8007646:	2b20      	cmp	r3, #32
 8007648:	d000      	beq.n	800764c <HAL_UART_Receive+0x1c>
 800764a:	e0cc      	b.n	80077e6 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <HAL_UART_Receive+0x2a>
 8007652:	1dbb      	adds	r3, r7, #6
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e0c4      	b.n	80077e8 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	689a      	ldr	r2, [r3, #8]
 8007662:	2380      	movs	r3, #128	; 0x80
 8007664:	015b      	lsls	r3, r3, #5
 8007666:	429a      	cmp	r2, r3
 8007668:	d109      	bne.n	800767e <HAL_UART_Receive+0x4e>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d105      	bne.n	800767e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2201      	movs	r2, #1
 8007676:	4013      	ands	r3, r2
 8007678:	d001      	beq.n	800767e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e0b4      	b.n	80077e8 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2290      	movs	r2, #144	; 0x90
 8007682:	2100      	movs	r1, #0
 8007684:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	228c      	movs	r2, #140	; 0x8c
 800768a:	2122      	movs	r1, #34	; 0x22
 800768c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007694:	f7fe fa2e 	bl	8005af4 <HAL_GetTick>
 8007698:	0003      	movs	r3, r0
 800769a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	1dba      	adds	r2, r7, #6
 80076a0:	215c      	movs	r1, #92	; 0x5c
 80076a2:	8812      	ldrh	r2, [r2, #0]
 80076a4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	1dba      	adds	r2, r7, #6
 80076aa:	215e      	movs	r1, #94	; 0x5e
 80076ac:	8812      	ldrh	r2, [r2, #0]
 80076ae:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	2380      	movs	r3, #128	; 0x80
 80076b6:	015b      	lsls	r3, r3, #5
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d10d      	bne.n	80076d8 <HAL_UART_Receive+0xa8>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d104      	bne.n	80076ce <HAL_UART_Receive+0x9e>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2260      	movs	r2, #96	; 0x60
 80076c8:	4949      	ldr	r1, [pc, #292]	; (80077f0 <HAL_UART_Receive+0x1c0>)
 80076ca:	5299      	strh	r1, [r3, r2]
 80076cc:	e02e      	b.n	800772c <HAL_UART_Receive+0xfc>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2260      	movs	r2, #96	; 0x60
 80076d2:	21ff      	movs	r1, #255	; 0xff
 80076d4:	5299      	strh	r1, [r3, r2]
 80076d6:	e029      	b.n	800772c <HAL_UART_Receive+0xfc>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10d      	bne.n	80076fc <HAL_UART_Receive+0xcc>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d104      	bne.n	80076f2 <HAL_UART_Receive+0xc2>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2260      	movs	r2, #96	; 0x60
 80076ec:	21ff      	movs	r1, #255	; 0xff
 80076ee:	5299      	strh	r1, [r3, r2]
 80076f0:	e01c      	b.n	800772c <HAL_UART_Receive+0xfc>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2260      	movs	r2, #96	; 0x60
 80076f6:	217f      	movs	r1, #127	; 0x7f
 80076f8:	5299      	strh	r1, [r3, r2]
 80076fa:	e017      	b.n	800772c <HAL_UART_Receive+0xfc>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689a      	ldr	r2, [r3, #8]
 8007700:	2380      	movs	r3, #128	; 0x80
 8007702:	055b      	lsls	r3, r3, #21
 8007704:	429a      	cmp	r2, r3
 8007706:	d10d      	bne.n	8007724 <HAL_UART_Receive+0xf4>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d104      	bne.n	800771a <HAL_UART_Receive+0xea>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2260      	movs	r2, #96	; 0x60
 8007714:	217f      	movs	r1, #127	; 0x7f
 8007716:	5299      	strh	r1, [r3, r2]
 8007718:	e008      	b.n	800772c <HAL_UART_Receive+0xfc>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2260      	movs	r2, #96	; 0x60
 800771e:	213f      	movs	r1, #63	; 0x3f
 8007720:	5299      	strh	r1, [r3, r2]
 8007722:	e003      	b.n	800772c <HAL_UART_Receive+0xfc>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2260      	movs	r2, #96	; 0x60
 8007728:	2100      	movs	r1, #0
 800772a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800772c:	2312      	movs	r3, #18
 800772e:	18fb      	adds	r3, r7, r3
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	2160      	movs	r1, #96	; 0x60
 8007734:	5a52      	ldrh	r2, [r2, r1]
 8007736:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	2380      	movs	r3, #128	; 0x80
 800773e:	015b      	lsls	r3, r3, #5
 8007740:	429a      	cmp	r2, r3
 8007742:	d108      	bne.n	8007756 <HAL_UART_Receive+0x126>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d104      	bne.n	8007756 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800774c:	2300      	movs	r3, #0
 800774e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	61bb      	str	r3, [r7, #24]
 8007754:	e003      	b.n	800775e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800775a:	2300      	movs	r3, #0
 800775c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800775e:	e036      	b.n	80077ce <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	0013      	movs	r3, r2
 800776a:	2200      	movs	r2, #0
 800776c:	2120      	movs	r1, #32
 800776e:	f000 fc01 	bl	8007f74 <UART_WaitOnFlagUntilTimeout>
 8007772:	1e03      	subs	r3, r0, #0
 8007774:	d001      	beq.n	800777a <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e036      	b.n	80077e8 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10e      	bne.n	800779e <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	b29b      	uxth	r3, r3
 8007788:	2212      	movs	r2, #18
 800778a:	18ba      	adds	r2, r7, r2
 800778c:	8812      	ldrh	r2, [r2, #0]
 800778e:	4013      	ands	r3, r2
 8007790:	b29a      	uxth	r2, r3
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	3302      	adds	r3, #2
 800779a:	61bb      	str	r3, [r7, #24]
 800779c:	e00e      	b.n	80077bc <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2212      	movs	r2, #18
 80077a8:	18ba      	adds	r2, r7, r2
 80077aa:	8812      	ldrh	r2, [r2, #0]
 80077ac:	b2d2      	uxtb	r2, r2
 80077ae:	4013      	ands	r3, r2
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	3301      	adds	r3, #1
 80077ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	225e      	movs	r2, #94	; 0x5e
 80077c0:	5a9b      	ldrh	r3, [r3, r2]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	3b01      	subs	r3, #1
 80077c6:	b299      	uxth	r1, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	225e      	movs	r2, #94	; 0x5e
 80077cc:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	225e      	movs	r2, #94	; 0x5e
 80077d2:	5a9b      	ldrh	r3, [r3, r2]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1c2      	bne.n	8007760 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	228c      	movs	r2, #140	; 0x8c
 80077de:	2120      	movs	r1, #32
 80077e0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	e000      	b.n	80077e8 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 80077e6:	2302      	movs	r3, #2
  }
}
 80077e8:	0018      	movs	r0, r3
 80077ea:	46bd      	mov	sp, r7
 80077ec:	b008      	add	sp, #32
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	000001ff 	.word	0x000001ff

080077f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077f4:	b5b0      	push	{r4, r5, r7, lr}
 80077f6:	b090      	sub	sp, #64	; 0x40
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077fc:	231a      	movs	r3, #26
 80077fe:	2220      	movs	r2, #32
 8007800:	189b      	adds	r3, r3, r2
 8007802:	19db      	adds	r3, r3, r7
 8007804:	2200      	movs	r2, #0
 8007806:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	431a      	orrs	r2, r3
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	431a      	orrs	r2, r3
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	4313      	orrs	r3, r2
 800781e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4aaf      	ldr	r2, [pc, #700]	; (8007ae4 <UART_SetConfig+0x2f0>)
 8007828:	4013      	ands	r3, r2
 800782a:	0019      	movs	r1, r3
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007832:	430b      	orrs	r3, r1
 8007834:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	4aaa      	ldr	r2, [pc, #680]	; (8007ae8 <UART_SetConfig+0x2f4>)
 800783e:	4013      	ands	r3, r2
 8007840:	0018      	movs	r0, r3
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	68d9      	ldr	r1, [r3, #12]
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	0003      	movs	r3, r0
 800784c:	430b      	orrs	r3, r1
 800784e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4aa4      	ldr	r2, [pc, #656]	; (8007aec <UART_SetConfig+0x2f8>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d004      	beq.n	800786a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007866:	4313      	orrs	r3, r2
 8007868:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	4a9f      	ldr	r2, [pc, #636]	; (8007af0 <UART_SetConfig+0x2fc>)
 8007872:	4013      	ands	r3, r2
 8007874:	0019      	movs	r1, r3
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800787c:	430b      	orrs	r3, r1
 800787e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007886:	220f      	movs	r2, #15
 8007888:	4393      	bics	r3, r2
 800788a:	0018      	movs	r0, r3
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	0003      	movs	r3, r0
 8007896:	430b      	orrs	r3, r1
 8007898:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a95      	ldr	r2, [pc, #596]	; (8007af4 <UART_SetConfig+0x300>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d131      	bne.n	8007908 <UART_SetConfig+0x114>
 80078a4:	4b94      	ldr	r3, [pc, #592]	; (8007af8 <UART_SetConfig+0x304>)
 80078a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a8:	2203      	movs	r2, #3
 80078aa:	4013      	ands	r3, r2
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d01d      	beq.n	80078ec <UART_SetConfig+0xf8>
 80078b0:	d823      	bhi.n	80078fa <UART_SetConfig+0x106>
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d00c      	beq.n	80078d0 <UART_SetConfig+0xdc>
 80078b6:	d820      	bhi.n	80078fa <UART_SetConfig+0x106>
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <UART_SetConfig+0xce>
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d00e      	beq.n	80078de <UART_SetConfig+0xea>
 80078c0:	e01b      	b.n	80078fa <UART_SetConfig+0x106>
 80078c2:	231b      	movs	r3, #27
 80078c4:	2220      	movs	r2, #32
 80078c6:	189b      	adds	r3, r3, r2
 80078c8:	19db      	adds	r3, r3, r7
 80078ca:	2200      	movs	r2, #0
 80078cc:	701a      	strb	r2, [r3, #0]
 80078ce:	e0b4      	b.n	8007a3a <UART_SetConfig+0x246>
 80078d0:	231b      	movs	r3, #27
 80078d2:	2220      	movs	r2, #32
 80078d4:	189b      	adds	r3, r3, r2
 80078d6:	19db      	adds	r3, r3, r7
 80078d8:	2202      	movs	r2, #2
 80078da:	701a      	strb	r2, [r3, #0]
 80078dc:	e0ad      	b.n	8007a3a <UART_SetConfig+0x246>
 80078de:	231b      	movs	r3, #27
 80078e0:	2220      	movs	r2, #32
 80078e2:	189b      	adds	r3, r3, r2
 80078e4:	19db      	adds	r3, r3, r7
 80078e6:	2204      	movs	r2, #4
 80078e8:	701a      	strb	r2, [r3, #0]
 80078ea:	e0a6      	b.n	8007a3a <UART_SetConfig+0x246>
 80078ec:	231b      	movs	r3, #27
 80078ee:	2220      	movs	r2, #32
 80078f0:	189b      	adds	r3, r3, r2
 80078f2:	19db      	adds	r3, r3, r7
 80078f4:	2208      	movs	r2, #8
 80078f6:	701a      	strb	r2, [r3, #0]
 80078f8:	e09f      	b.n	8007a3a <UART_SetConfig+0x246>
 80078fa:	231b      	movs	r3, #27
 80078fc:	2220      	movs	r2, #32
 80078fe:	189b      	adds	r3, r3, r2
 8007900:	19db      	adds	r3, r3, r7
 8007902:	2210      	movs	r2, #16
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	e098      	b.n	8007a3a <UART_SetConfig+0x246>
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a7b      	ldr	r2, [pc, #492]	; (8007afc <UART_SetConfig+0x308>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d131      	bne.n	8007976 <UART_SetConfig+0x182>
 8007912:	4b79      	ldr	r3, [pc, #484]	; (8007af8 <UART_SetConfig+0x304>)
 8007914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007916:	220c      	movs	r2, #12
 8007918:	4013      	ands	r3, r2
 800791a:	2b0c      	cmp	r3, #12
 800791c:	d01d      	beq.n	800795a <UART_SetConfig+0x166>
 800791e:	d823      	bhi.n	8007968 <UART_SetConfig+0x174>
 8007920:	2b08      	cmp	r3, #8
 8007922:	d00c      	beq.n	800793e <UART_SetConfig+0x14a>
 8007924:	d820      	bhi.n	8007968 <UART_SetConfig+0x174>
 8007926:	2b00      	cmp	r3, #0
 8007928:	d002      	beq.n	8007930 <UART_SetConfig+0x13c>
 800792a:	2b04      	cmp	r3, #4
 800792c:	d00e      	beq.n	800794c <UART_SetConfig+0x158>
 800792e:	e01b      	b.n	8007968 <UART_SetConfig+0x174>
 8007930:	231b      	movs	r3, #27
 8007932:	2220      	movs	r2, #32
 8007934:	189b      	adds	r3, r3, r2
 8007936:	19db      	adds	r3, r3, r7
 8007938:	2200      	movs	r2, #0
 800793a:	701a      	strb	r2, [r3, #0]
 800793c:	e07d      	b.n	8007a3a <UART_SetConfig+0x246>
 800793e:	231b      	movs	r3, #27
 8007940:	2220      	movs	r2, #32
 8007942:	189b      	adds	r3, r3, r2
 8007944:	19db      	adds	r3, r3, r7
 8007946:	2202      	movs	r2, #2
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	e076      	b.n	8007a3a <UART_SetConfig+0x246>
 800794c:	231b      	movs	r3, #27
 800794e:	2220      	movs	r2, #32
 8007950:	189b      	adds	r3, r3, r2
 8007952:	19db      	adds	r3, r3, r7
 8007954:	2204      	movs	r2, #4
 8007956:	701a      	strb	r2, [r3, #0]
 8007958:	e06f      	b.n	8007a3a <UART_SetConfig+0x246>
 800795a:	231b      	movs	r3, #27
 800795c:	2220      	movs	r2, #32
 800795e:	189b      	adds	r3, r3, r2
 8007960:	19db      	adds	r3, r3, r7
 8007962:	2208      	movs	r2, #8
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	e068      	b.n	8007a3a <UART_SetConfig+0x246>
 8007968:	231b      	movs	r3, #27
 800796a:	2220      	movs	r2, #32
 800796c:	189b      	adds	r3, r3, r2
 800796e:	19db      	adds	r3, r3, r7
 8007970:	2210      	movs	r2, #16
 8007972:	701a      	strb	r2, [r3, #0]
 8007974:	e061      	b.n	8007a3a <UART_SetConfig+0x246>
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a61      	ldr	r2, [pc, #388]	; (8007b00 <UART_SetConfig+0x30c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d106      	bne.n	800798e <UART_SetConfig+0x19a>
 8007980:	231b      	movs	r3, #27
 8007982:	2220      	movs	r2, #32
 8007984:	189b      	adds	r3, r3, r2
 8007986:	19db      	adds	r3, r3, r7
 8007988:	2200      	movs	r2, #0
 800798a:	701a      	strb	r2, [r3, #0]
 800798c:	e055      	b.n	8007a3a <UART_SetConfig+0x246>
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a5c      	ldr	r2, [pc, #368]	; (8007b04 <UART_SetConfig+0x310>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d106      	bne.n	80079a6 <UART_SetConfig+0x1b2>
 8007998:	231b      	movs	r3, #27
 800799a:	2220      	movs	r2, #32
 800799c:	189b      	adds	r3, r3, r2
 800799e:	19db      	adds	r3, r3, r7
 80079a0:	2200      	movs	r2, #0
 80079a2:	701a      	strb	r2, [r3, #0]
 80079a4:	e049      	b.n	8007a3a <UART_SetConfig+0x246>
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a50      	ldr	r2, [pc, #320]	; (8007aec <UART_SetConfig+0x2f8>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d13e      	bne.n	8007a2e <UART_SetConfig+0x23a>
 80079b0:	4b51      	ldr	r3, [pc, #324]	; (8007af8 <UART_SetConfig+0x304>)
 80079b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079b4:	23c0      	movs	r3, #192	; 0xc0
 80079b6:	011b      	lsls	r3, r3, #4
 80079b8:	4013      	ands	r3, r2
 80079ba:	22c0      	movs	r2, #192	; 0xc0
 80079bc:	0112      	lsls	r2, r2, #4
 80079be:	4293      	cmp	r3, r2
 80079c0:	d027      	beq.n	8007a12 <UART_SetConfig+0x21e>
 80079c2:	22c0      	movs	r2, #192	; 0xc0
 80079c4:	0112      	lsls	r2, r2, #4
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d82a      	bhi.n	8007a20 <UART_SetConfig+0x22c>
 80079ca:	2280      	movs	r2, #128	; 0x80
 80079cc:	0112      	lsls	r2, r2, #4
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d011      	beq.n	80079f6 <UART_SetConfig+0x202>
 80079d2:	2280      	movs	r2, #128	; 0x80
 80079d4:	0112      	lsls	r2, r2, #4
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d822      	bhi.n	8007a20 <UART_SetConfig+0x22c>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d004      	beq.n	80079e8 <UART_SetConfig+0x1f4>
 80079de:	2280      	movs	r2, #128	; 0x80
 80079e0:	00d2      	lsls	r2, r2, #3
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d00e      	beq.n	8007a04 <UART_SetConfig+0x210>
 80079e6:	e01b      	b.n	8007a20 <UART_SetConfig+0x22c>
 80079e8:	231b      	movs	r3, #27
 80079ea:	2220      	movs	r2, #32
 80079ec:	189b      	adds	r3, r3, r2
 80079ee:	19db      	adds	r3, r3, r7
 80079f0:	2200      	movs	r2, #0
 80079f2:	701a      	strb	r2, [r3, #0]
 80079f4:	e021      	b.n	8007a3a <UART_SetConfig+0x246>
 80079f6:	231b      	movs	r3, #27
 80079f8:	2220      	movs	r2, #32
 80079fa:	189b      	adds	r3, r3, r2
 80079fc:	19db      	adds	r3, r3, r7
 80079fe:	2202      	movs	r2, #2
 8007a00:	701a      	strb	r2, [r3, #0]
 8007a02:	e01a      	b.n	8007a3a <UART_SetConfig+0x246>
 8007a04:	231b      	movs	r3, #27
 8007a06:	2220      	movs	r2, #32
 8007a08:	189b      	adds	r3, r3, r2
 8007a0a:	19db      	adds	r3, r3, r7
 8007a0c:	2204      	movs	r2, #4
 8007a0e:	701a      	strb	r2, [r3, #0]
 8007a10:	e013      	b.n	8007a3a <UART_SetConfig+0x246>
 8007a12:	231b      	movs	r3, #27
 8007a14:	2220      	movs	r2, #32
 8007a16:	189b      	adds	r3, r3, r2
 8007a18:	19db      	adds	r3, r3, r7
 8007a1a:	2208      	movs	r2, #8
 8007a1c:	701a      	strb	r2, [r3, #0]
 8007a1e:	e00c      	b.n	8007a3a <UART_SetConfig+0x246>
 8007a20:	231b      	movs	r3, #27
 8007a22:	2220      	movs	r2, #32
 8007a24:	189b      	adds	r3, r3, r2
 8007a26:	19db      	adds	r3, r3, r7
 8007a28:	2210      	movs	r2, #16
 8007a2a:	701a      	strb	r2, [r3, #0]
 8007a2c:	e005      	b.n	8007a3a <UART_SetConfig+0x246>
 8007a2e:	231b      	movs	r3, #27
 8007a30:	2220      	movs	r2, #32
 8007a32:	189b      	adds	r3, r3, r2
 8007a34:	19db      	adds	r3, r3, r7
 8007a36:	2210      	movs	r2, #16
 8007a38:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a2b      	ldr	r2, [pc, #172]	; (8007aec <UART_SetConfig+0x2f8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d000      	beq.n	8007a46 <UART_SetConfig+0x252>
 8007a44:	e0a9      	b.n	8007b9a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a46:	231b      	movs	r3, #27
 8007a48:	2220      	movs	r2, #32
 8007a4a:	189b      	adds	r3, r3, r2
 8007a4c:	19db      	adds	r3, r3, r7
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d015      	beq.n	8007a80 <UART_SetConfig+0x28c>
 8007a54:	dc18      	bgt.n	8007a88 <UART_SetConfig+0x294>
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	d00d      	beq.n	8007a76 <UART_SetConfig+0x282>
 8007a5a:	dc15      	bgt.n	8007a88 <UART_SetConfig+0x294>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <UART_SetConfig+0x272>
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d005      	beq.n	8007a70 <UART_SetConfig+0x27c>
 8007a64:	e010      	b.n	8007a88 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a66:	f7ff fb23 	bl	80070b0 <HAL_RCC_GetPCLK1Freq>
 8007a6a:	0003      	movs	r3, r0
 8007a6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a6e:	e014      	b.n	8007a9a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a70:	4b25      	ldr	r3, [pc, #148]	; (8007b08 <UART_SetConfig+0x314>)
 8007a72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a74:	e011      	b.n	8007a9a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a76:	f7ff fa8f 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 8007a7a:	0003      	movs	r3, r0
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a7e:	e00c      	b.n	8007a9a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a80:	2380      	movs	r3, #128	; 0x80
 8007a82:	021b      	lsls	r3, r3, #8
 8007a84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a86:	e008      	b.n	8007a9a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007a8c:	231a      	movs	r3, #26
 8007a8e:	2220      	movs	r2, #32
 8007a90:	189b      	adds	r3, r3, r2
 8007a92:	19db      	adds	r3, r3, r7
 8007a94:	2201      	movs	r2, #1
 8007a96:	701a      	strb	r2, [r3, #0]
        break;
 8007a98:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d100      	bne.n	8007aa2 <UART_SetConfig+0x2ae>
 8007aa0:	e14b      	b.n	8007d3a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007aa6:	4b19      	ldr	r3, [pc, #100]	; (8007b0c <UART_SetConfig+0x318>)
 8007aa8:	0052      	lsls	r2, r2, #1
 8007aaa:	5ad3      	ldrh	r3, [r2, r3]
 8007aac:	0019      	movs	r1, r3
 8007aae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007ab0:	f7fc fe0e 	bl	80046d0 <__udivsi3>
 8007ab4:	0003      	movs	r3, r0
 8007ab6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	0013      	movs	r3, r2
 8007abe:	005b      	lsls	r3, r3, #1
 8007ac0:	189b      	adds	r3, r3, r2
 8007ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d305      	bcc.n	8007ad4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d91d      	bls.n	8007b10 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8007ad4:	231a      	movs	r3, #26
 8007ad6:	2220      	movs	r2, #32
 8007ad8:	189b      	adds	r3, r3, r2
 8007ada:	19db      	adds	r3, r3, r7
 8007adc:	2201      	movs	r2, #1
 8007ade:	701a      	strb	r2, [r3, #0]
 8007ae0:	e12b      	b.n	8007d3a <UART_SetConfig+0x546>
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	cfff69f3 	.word	0xcfff69f3
 8007ae8:	ffffcfff 	.word	0xffffcfff
 8007aec:	40008000 	.word	0x40008000
 8007af0:	11fff4ff 	.word	0x11fff4ff
 8007af4:	40013800 	.word	0x40013800
 8007af8:	40021000 	.word	0x40021000
 8007afc:	40004400 	.word	0x40004400
 8007b00:	40004800 	.word	0x40004800
 8007b04:	40004c00 	.word	0x40004c00
 8007b08:	00f42400 	.word	0x00f42400
 8007b0c:	08009e00 	.word	0x08009e00
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b12:	61bb      	str	r3, [r7, #24]
 8007b14:	2300      	movs	r3, #0
 8007b16:	61fb      	str	r3, [r7, #28]
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b1c:	4b92      	ldr	r3, [pc, #584]	; (8007d68 <UART_SetConfig+0x574>)
 8007b1e:	0052      	lsls	r2, r2, #1
 8007b20:	5ad3      	ldrh	r3, [r2, r3]
 8007b22:	613b      	str	r3, [r7, #16]
 8007b24:	2300      	movs	r3, #0
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	69b8      	ldr	r0, [r7, #24]
 8007b2e:	69f9      	ldr	r1, [r7, #28]
 8007b30:	f7fc ff44 	bl	80049bc <__aeabi_uldivmod>
 8007b34:	0002      	movs	r2, r0
 8007b36:	000b      	movs	r3, r1
 8007b38:	0e11      	lsrs	r1, r2, #24
 8007b3a:	021d      	lsls	r5, r3, #8
 8007b3c:	430d      	orrs	r5, r1
 8007b3e:	0214      	lsls	r4, r2, #8
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	085b      	lsrs	r3, r3, #1
 8007b46:	60bb      	str	r3, [r7, #8]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	68b8      	ldr	r0, [r7, #8]
 8007b4e:	68f9      	ldr	r1, [r7, #12]
 8007b50:	1900      	adds	r0, r0, r4
 8007b52:	4169      	adcs	r1, r5
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	603b      	str	r3, [r7, #0]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	607b      	str	r3, [r7, #4]
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f7fc ff2b 	bl	80049bc <__aeabi_uldivmod>
 8007b66:	0002      	movs	r2, r0
 8007b68:	000b      	movs	r3, r1
 8007b6a:	0013      	movs	r3, r2
 8007b6c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b70:	23c0      	movs	r3, #192	; 0xc0
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d309      	bcc.n	8007b8c <UART_SetConfig+0x398>
 8007b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b7a:	2380      	movs	r3, #128	; 0x80
 8007b7c:	035b      	lsls	r3, r3, #13
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d204      	bcs.n	8007b8c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b88:	60da      	str	r2, [r3, #12]
 8007b8a:	e0d6      	b.n	8007d3a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8007b8c:	231a      	movs	r3, #26
 8007b8e:	2220      	movs	r2, #32
 8007b90:	189b      	adds	r3, r3, r2
 8007b92:	19db      	adds	r3, r3, r7
 8007b94:	2201      	movs	r2, #1
 8007b96:	701a      	strb	r2, [r3, #0]
 8007b98:	e0cf      	b.n	8007d3a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	69da      	ldr	r2, [r3, #28]
 8007b9e:	2380      	movs	r3, #128	; 0x80
 8007ba0:	021b      	lsls	r3, r3, #8
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d000      	beq.n	8007ba8 <UART_SetConfig+0x3b4>
 8007ba6:	e070      	b.n	8007c8a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8007ba8:	231b      	movs	r3, #27
 8007baa:	2220      	movs	r2, #32
 8007bac:	189b      	adds	r3, r3, r2
 8007bae:	19db      	adds	r3, r3, r7
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	2b08      	cmp	r3, #8
 8007bb4:	d015      	beq.n	8007be2 <UART_SetConfig+0x3ee>
 8007bb6:	dc18      	bgt.n	8007bea <UART_SetConfig+0x3f6>
 8007bb8:	2b04      	cmp	r3, #4
 8007bba:	d00d      	beq.n	8007bd8 <UART_SetConfig+0x3e4>
 8007bbc:	dc15      	bgt.n	8007bea <UART_SetConfig+0x3f6>
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <UART_SetConfig+0x3d4>
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d005      	beq.n	8007bd2 <UART_SetConfig+0x3de>
 8007bc6:	e010      	b.n	8007bea <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bc8:	f7ff fa72 	bl	80070b0 <HAL_RCC_GetPCLK1Freq>
 8007bcc:	0003      	movs	r3, r0
 8007bce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bd0:	e014      	b.n	8007bfc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bd2:	4b66      	ldr	r3, [pc, #408]	; (8007d6c <UART_SetConfig+0x578>)
 8007bd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bd6:	e011      	b.n	8007bfc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bd8:	f7ff f9de 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 8007bdc:	0003      	movs	r3, r0
 8007bde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007be0:	e00c      	b.n	8007bfc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007be2:	2380      	movs	r3, #128	; 0x80
 8007be4:	021b      	lsls	r3, r3, #8
 8007be6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007be8:	e008      	b.n	8007bfc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007bee:	231a      	movs	r3, #26
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	189b      	adds	r3, r3, r2
 8007bf4:	19db      	adds	r3, r3, r7
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	701a      	strb	r2, [r3, #0]
        break;
 8007bfa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d100      	bne.n	8007c04 <UART_SetConfig+0x410>
 8007c02:	e09a      	b.n	8007d3a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c08:	4b57      	ldr	r3, [pc, #348]	; (8007d68 <UART_SetConfig+0x574>)
 8007c0a:	0052      	lsls	r2, r2, #1
 8007c0c:	5ad3      	ldrh	r3, [r2, r3]
 8007c0e:	0019      	movs	r1, r3
 8007c10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007c12:	f7fc fd5d 	bl	80046d0 <__udivsi3>
 8007c16:	0003      	movs	r3, r0
 8007c18:	005a      	lsls	r2, r3, #1
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	085b      	lsrs	r3, r3, #1
 8007c20:	18d2      	adds	r2, r2, r3
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	0019      	movs	r1, r3
 8007c28:	0010      	movs	r0, r2
 8007c2a:	f7fc fd51 	bl	80046d0 <__udivsi3>
 8007c2e:	0003      	movs	r3, r0
 8007c30:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c34:	2b0f      	cmp	r3, #15
 8007c36:	d921      	bls.n	8007c7c <UART_SetConfig+0x488>
 8007c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c3a:	2380      	movs	r3, #128	; 0x80
 8007c3c:	025b      	lsls	r3, r3, #9
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d21c      	bcs.n	8007c7c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	200e      	movs	r0, #14
 8007c48:	2420      	movs	r4, #32
 8007c4a:	1903      	adds	r3, r0, r4
 8007c4c:	19db      	adds	r3, r3, r7
 8007c4e:	210f      	movs	r1, #15
 8007c50:	438a      	bics	r2, r1
 8007c52:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c56:	085b      	lsrs	r3, r3, #1
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	2207      	movs	r2, #7
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	b299      	uxth	r1, r3
 8007c60:	1903      	adds	r3, r0, r4
 8007c62:	19db      	adds	r3, r3, r7
 8007c64:	1902      	adds	r2, r0, r4
 8007c66:	19d2      	adds	r2, r2, r7
 8007c68:	8812      	ldrh	r2, [r2, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	1902      	adds	r2, r0, r4
 8007c74:	19d2      	adds	r2, r2, r7
 8007c76:	8812      	ldrh	r2, [r2, #0]
 8007c78:	60da      	str	r2, [r3, #12]
 8007c7a:	e05e      	b.n	8007d3a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007c7c:	231a      	movs	r3, #26
 8007c7e:	2220      	movs	r2, #32
 8007c80:	189b      	adds	r3, r3, r2
 8007c82:	19db      	adds	r3, r3, r7
 8007c84:	2201      	movs	r2, #1
 8007c86:	701a      	strb	r2, [r3, #0]
 8007c88:	e057      	b.n	8007d3a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c8a:	231b      	movs	r3, #27
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	189b      	adds	r3, r3, r2
 8007c90:	19db      	adds	r3, r3, r7
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b08      	cmp	r3, #8
 8007c96:	d015      	beq.n	8007cc4 <UART_SetConfig+0x4d0>
 8007c98:	dc18      	bgt.n	8007ccc <UART_SetConfig+0x4d8>
 8007c9a:	2b04      	cmp	r3, #4
 8007c9c:	d00d      	beq.n	8007cba <UART_SetConfig+0x4c6>
 8007c9e:	dc15      	bgt.n	8007ccc <UART_SetConfig+0x4d8>
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <UART_SetConfig+0x4b6>
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d005      	beq.n	8007cb4 <UART_SetConfig+0x4c0>
 8007ca8:	e010      	b.n	8007ccc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007caa:	f7ff fa01 	bl	80070b0 <HAL_RCC_GetPCLK1Freq>
 8007cae:	0003      	movs	r3, r0
 8007cb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cb2:	e014      	b.n	8007cde <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cb4:	4b2d      	ldr	r3, [pc, #180]	; (8007d6c <UART_SetConfig+0x578>)
 8007cb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cb8:	e011      	b.n	8007cde <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cba:	f7ff f96d 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 8007cbe:	0003      	movs	r3, r0
 8007cc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cc2:	e00c      	b.n	8007cde <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cc4:	2380      	movs	r3, #128	; 0x80
 8007cc6:	021b      	lsls	r3, r3, #8
 8007cc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cca:	e008      	b.n	8007cde <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007cd0:	231a      	movs	r3, #26
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	189b      	adds	r3, r3, r2
 8007cd6:	19db      	adds	r3, r3, r7
 8007cd8:	2201      	movs	r2, #1
 8007cda:	701a      	strb	r2, [r3, #0]
        break;
 8007cdc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d02a      	beq.n	8007d3a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ce8:	4b1f      	ldr	r3, [pc, #124]	; (8007d68 <UART_SetConfig+0x574>)
 8007cea:	0052      	lsls	r2, r2, #1
 8007cec:	5ad3      	ldrh	r3, [r2, r3]
 8007cee:	0019      	movs	r1, r3
 8007cf0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007cf2:	f7fc fced 	bl	80046d0 <__udivsi3>
 8007cf6:	0003      	movs	r3, r0
 8007cf8:	001a      	movs	r2, r3
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	085b      	lsrs	r3, r3, #1
 8007d00:	18d2      	adds	r2, r2, r3
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	0019      	movs	r1, r3
 8007d08:	0010      	movs	r0, r2
 8007d0a:	f7fc fce1 	bl	80046d0 <__udivsi3>
 8007d0e:	0003      	movs	r3, r0
 8007d10:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d14:	2b0f      	cmp	r3, #15
 8007d16:	d90a      	bls.n	8007d2e <UART_SetConfig+0x53a>
 8007d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d1a:	2380      	movs	r3, #128	; 0x80
 8007d1c:	025b      	lsls	r3, r3, #9
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d205      	bcs.n	8007d2e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60da      	str	r2, [r3, #12]
 8007d2c:	e005      	b.n	8007d3a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007d2e:	231a      	movs	r3, #26
 8007d30:	2220      	movs	r2, #32
 8007d32:	189b      	adds	r3, r3, r2
 8007d34:	19db      	adds	r3, r3, r7
 8007d36:	2201      	movs	r2, #1
 8007d38:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	226a      	movs	r2, #106	; 0x6a
 8007d3e:	2101      	movs	r1, #1
 8007d40:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d44:	2268      	movs	r2, #104	; 0x68
 8007d46:	2101      	movs	r1, #1
 8007d48:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	2200      	movs	r2, #0
 8007d54:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007d56:	231a      	movs	r3, #26
 8007d58:	2220      	movs	r2, #32
 8007d5a:	189b      	adds	r3, r3, r2
 8007d5c:	19db      	adds	r3, r3, r7
 8007d5e:	781b      	ldrb	r3, [r3, #0]
}
 8007d60:	0018      	movs	r0, r3
 8007d62:	46bd      	mov	sp, r7
 8007d64:	b010      	add	sp, #64	; 0x40
 8007d66:	bdb0      	pop	{r4, r5, r7, pc}
 8007d68:	08009e00 	.word	0x08009e00
 8007d6c:	00f42400 	.word	0x00f42400

08007d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	4013      	ands	r3, r2
 8007d80:	d00b      	beq.n	8007d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	4a4a      	ldr	r2, [pc, #296]	; (8007eb4 <UART_AdvFeatureConfig+0x144>)
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	0019      	movs	r1, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9e:	2202      	movs	r2, #2
 8007da0:	4013      	ands	r3, r2
 8007da2:	d00b      	beq.n	8007dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	4a43      	ldr	r2, [pc, #268]	; (8007eb8 <UART_AdvFeatureConfig+0x148>)
 8007dac:	4013      	ands	r3, r2
 8007dae:	0019      	movs	r1, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc0:	2204      	movs	r2, #4
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	d00b      	beq.n	8007dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	4a3b      	ldr	r2, [pc, #236]	; (8007ebc <UART_AdvFeatureConfig+0x14c>)
 8007dce:	4013      	ands	r3, r2
 8007dd0:	0019      	movs	r1, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de2:	2208      	movs	r2, #8
 8007de4:	4013      	ands	r3, r2
 8007de6:	d00b      	beq.n	8007e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	4a34      	ldr	r2, [pc, #208]	; (8007ec0 <UART_AdvFeatureConfig+0x150>)
 8007df0:	4013      	ands	r3, r2
 8007df2:	0019      	movs	r1, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e04:	2210      	movs	r2, #16
 8007e06:	4013      	ands	r3, r2
 8007e08:	d00b      	beq.n	8007e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	4a2c      	ldr	r2, [pc, #176]	; (8007ec4 <UART_AdvFeatureConfig+0x154>)
 8007e12:	4013      	ands	r3, r2
 8007e14:	0019      	movs	r1, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e26:	2220      	movs	r2, #32
 8007e28:	4013      	ands	r3, r2
 8007e2a:	d00b      	beq.n	8007e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	4a25      	ldr	r2, [pc, #148]	; (8007ec8 <UART_AdvFeatureConfig+0x158>)
 8007e34:	4013      	ands	r3, r2
 8007e36:	0019      	movs	r1, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	430a      	orrs	r2, r1
 8007e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e48:	2240      	movs	r2, #64	; 0x40
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	d01d      	beq.n	8007e8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	4a1d      	ldr	r2, [pc, #116]	; (8007ecc <UART_AdvFeatureConfig+0x15c>)
 8007e56:	4013      	ands	r3, r2
 8007e58:	0019      	movs	r1, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e6a:	2380      	movs	r3, #128	; 0x80
 8007e6c:	035b      	lsls	r3, r3, #13
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d10b      	bne.n	8007e8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	4a15      	ldr	r2, [pc, #84]	; (8007ed0 <UART_AdvFeatureConfig+0x160>)
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	0019      	movs	r1, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8e:	2280      	movs	r2, #128	; 0x80
 8007e90:	4013      	ands	r3, r2
 8007e92:	d00b      	beq.n	8007eac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	4a0e      	ldr	r2, [pc, #56]	; (8007ed4 <UART_AdvFeatureConfig+0x164>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	0019      	movs	r1, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	605a      	str	r2, [r3, #4]
  }
}
 8007eac:	46c0      	nop			; (mov r8, r8)
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	b002      	add	sp, #8
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	fffdffff 	.word	0xfffdffff
 8007eb8:	fffeffff 	.word	0xfffeffff
 8007ebc:	fffbffff 	.word	0xfffbffff
 8007ec0:	ffff7fff 	.word	0xffff7fff
 8007ec4:	ffffefff 	.word	0xffffefff
 8007ec8:	ffffdfff 	.word	0xffffdfff
 8007ecc:	ffefffff 	.word	0xffefffff
 8007ed0:	ff9fffff 	.word	0xff9fffff
 8007ed4:	fff7ffff 	.word	0xfff7ffff

08007ed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af02      	add	r7, sp, #8
 8007ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2290      	movs	r2, #144	; 0x90
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ee8:	f7fd fe04 	bl	8005af4 <HAL_GetTick>
 8007eec:	0003      	movs	r3, r0
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2208      	movs	r2, #8
 8007ef8:	4013      	ands	r3, r2
 8007efa:	2b08      	cmp	r3, #8
 8007efc:	d10c      	bne.n	8007f18 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2280      	movs	r2, #128	; 0x80
 8007f02:	0391      	lsls	r1, r2, #14
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	4a1a      	ldr	r2, [pc, #104]	; (8007f70 <UART_CheckIdleState+0x98>)
 8007f08:	9200      	str	r2, [sp, #0]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f000 f832 	bl	8007f74 <UART_WaitOnFlagUntilTimeout>
 8007f10:	1e03      	subs	r3, r0, #0
 8007f12:	d001      	beq.n	8007f18 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e026      	b.n	8007f66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2204      	movs	r2, #4
 8007f20:	4013      	ands	r3, r2
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	d10c      	bne.n	8007f40 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2280      	movs	r2, #128	; 0x80
 8007f2a:	03d1      	lsls	r1, r2, #15
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	4a10      	ldr	r2, [pc, #64]	; (8007f70 <UART_CheckIdleState+0x98>)
 8007f30:	9200      	str	r2, [sp, #0]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f000 f81e 	bl	8007f74 <UART_WaitOnFlagUntilTimeout>
 8007f38:	1e03      	subs	r3, r0, #0
 8007f3a:	d001      	beq.n	8007f40 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e012      	b.n	8007f66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2288      	movs	r2, #136	; 0x88
 8007f44:	2120      	movs	r1, #32
 8007f46:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	228c      	movs	r2, #140	; 0x8c
 8007f4c:	2120      	movs	r1, #32
 8007f4e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2284      	movs	r2, #132	; 0x84
 8007f60:	2100      	movs	r1, #0
 8007f62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	0018      	movs	r0, r3
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	b004      	add	sp, #16
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	46c0      	nop			; (mov r8, r8)
 8007f70:	01ffffff 	.word	0x01ffffff

08007f74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b094      	sub	sp, #80	; 0x50
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	603b      	str	r3, [r7, #0]
 8007f80:	1dfb      	adds	r3, r7, #7
 8007f82:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f84:	e0a7      	b.n	80080d6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f88:	3301      	adds	r3, #1
 8007f8a:	d100      	bne.n	8007f8e <UART_WaitOnFlagUntilTimeout+0x1a>
 8007f8c:	e0a3      	b.n	80080d6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f8e:	f7fd fdb1 	bl	8005af4 <HAL_GetTick>
 8007f92:	0002      	movs	r2, r0
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d302      	bcc.n	8007fa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d13f      	bne.n	8008024 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8007fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007fac:	647b      	str	r3, [r7, #68]	; 0x44
 8007fae:	2301      	movs	r3, #1
 8007fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb4:	f383 8810 	msr	PRIMASK, r3
}
 8007fb8:	46c0      	nop			; (mov r8, r8)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	494e      	ldr	r1, [pc, #312]	; (8008100 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007fc6:	400a      	ands	r2, r1
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fcc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	f383 8810 	msr	PRIMASK, r3
}
 8007fd4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8007fda:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fde:	643b      	str	r3, [r7, #64]	; 0x40
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	f383 8810 	msr	PRIMASK, r3
}
 8007fea:	46c0      	nop			; (mov r8, r8)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	438a      	bics	r2, r1
 8007ffa:	609a      	str	r2, [r3, #8]
 8007ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008002:	f383 8810 	msr	PRIMASK, r3
}
 8008006:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2288      	movs	r2, #136	; 0x88
 800800c:	2120      	movs	r1, #32
 800800e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	228c      	movs	r2, #140	; 0x8c
 8008014:	2120      	movs	r1, #32
 8008016:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2284      	movs	r2, #132	; 0x84
 800801c:	2100      	movs	r1, #0
 800801e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e069      	b.n	80080f8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2204      	movs	r2, #4
 800802c:	4013      	ands	r3, r2
 800802e:	d052      	beq.n	80080d6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	69da      	ldr	r2, [r3, #28]
 8008036:	2380      	movs	r3, #128	; 0x80
 8008038:	011b      	lsls	r3, r3, #4
 800803a:	401a      	ands	r2, r3
 800803c:	2380      	movs	r3, #128	; 0x80
 800803e:	011b      	lsls	r3, r3, #4
 8008040:	429a      	cmp	r2, r3
 8008042:	d148      	bne.n	80080d6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2280      	movs	r2, #128	; 0x80
 800804a:	0112      	lsls	r2, r2, #4
 800804c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800804e:	f3ef 8310 	mrs	r3, PRIMASK
 8008052:	613b      	str	r3, [r7, #16]
  return(result);
 8008054:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008058:	2301      	movs	r3, #1
 800805a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f383 8810 	msr	PRIMASK, r3
}
 8008062:	46c0      	nop			; (mov r8, r8)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4924      	ldr	r1, [pc, #144]	; (8008100 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008070:	400a      	ands	r2, r1
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008076:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	f383 8810 	msr	PRIMASK, r3
}
 800807e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008080:	f3ef 8310 	mrs	r3, PRIMASK
 8008084:	61fb      	str	r3, [r7, #28]
  return(result);
 8008086:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008088:	64bb      	str	r3, [r7, #72]	; 0x48
 800808a:	2301      	movs	r3, #1
 800808c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	f383 8810 	msr	PRIMASK, r3
}
 8008094:	46c0      	nop			; (mov r8, r8)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	689a      	ldr	r2, [r3, #8]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2101      	movs	r1, #1
 80080a2:	438a      	bics	r2, r1
 80080a4:	609a      	str	r2, [r3, #8]
 80080a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	f383 8810 	msr	PRIMASK, r3
}
 80080b0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2288      	movs	r2, #136	; 0x88
 80080b6:	2120      	movs	r1, #32
 80080b8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	228c      	movs	r2, #140	; 0x8c
 80080be:	2120      	movs	r1, #32
 80080c0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2290      	movs	r2, #144	; 0x90
 80080c6:	2120      	movs	r1, #32
 80080c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2284      	movs	r2, #132	; 0x84
 80080ce:	2100      	movs	r1, #0
 80080d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e010      	b.n	80080f8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	4013      	ands	r3, r2
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	425a      	negs	r2, r3
 80080e6:	4153      	adcs	r3, r2
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	001a      	movs	r2, r3
 80080ec:	1dfb      	adds	r3, r7, #7
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d100      	bne.n	80080f6 <UART_WaitOnFlagUntilTimeout+0x182>
 80080f4:	e747      	b.n	8007f86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	0018      	movs	r0, r3
 80080fa:	46bd      	mov	sp, r7
 80080fc:	b014      	add	sp, #80	; 0x50
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	fffffe5f 	.word	0xfffffe5f

08008104 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2284      	movs	r2, #132	; 0x84
 8008110:	5c9b      	ldrb	r3, [r3, r2]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d101      	bne.n	800811a <HAL_UARTEx_DisableFifoMode+0x16>
 8008116:	2302      	movs	r3, #2
 8008118:	e027      	b.n	800816a <HAL_UARTEx_DisableFifoMode+0x66>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2284      	movs	r2, #132	; 0x84
 800811e:	2101      	movs	r1, #1
 8008120:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2288      	movs	r2, #136	; 0x88
 8008126:	2124      	movs	r1, #36	; 0x24
 8008128:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2101      	movs	r1, #1
 800813e:	438a      	bics	r2, r1
 8008140:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4a0b      	ldr	r2, [pc, #44]	; (8008174 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008146:	4013      	ands	r3, r2
 8008148:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2288      	movs	r2, #136	; 0x88
 800815c:	2120      	movs	r1, #32
 800815e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2284      	movs	r2, #132	; 0x84
 8008164:	2100      	movs	r1, #0
 8008166:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	0018      	movs	r0, r3
 800816c:	46bd      	mov	sp, r7
 800816e:	b004      	add	sp, #16
 8008170:	bd80      	pop	{r7, pc}
 8008172:	46c0      	nop			; (mov r8, r8)
 8008174:	dfffffff 	.word	0xdfffffff

08008178 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2284      	movs	r2, #132	; 0x84
 8008186:	5c9b      	ldrb	r3, [r3, r2]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d101      	bne.n	8008190 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800818c:	2302      	movs	r3, #2
 800818e:	e02e      	b.n	80081ee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2284      	movs	r2, #132	; 0x84
 8008194:	2101      	movs	r1, #1
 8008196:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2288      	movs	r2, #136	; 0x88
 800819c:	2124      	movs	r1, #36	; 0x24
 800819e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2101      	movs	r1, #1
 80081b4:	438a      	bics	r2, r1
 80081b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	00db      	lsls	r3, r3, #3
 80081c0:	08d9      	lsrs	r1, r3, #3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	0018      	movs	r0, r3
 80081d0:	f000 f854 	bl	800827c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2288      	movs	r2, #136	; 0x88
 80081e0:	2120      	movs	r1, #32
 80081e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2284      	movs	r2, #132	; 0x84
 80081e8:	2100      	movs	r1, #0
 80081ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	0018      	movs	r0, r3
 80081f0:	46bd      	mov	sp, r7
 80081f2:	b004      	add	sp, #16
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2284      	movs	r2, #132	; 0x84
 8008206:	5c9b      	ldrb	r3, [r3, r2]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d101      	bne.n	8008210 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800820c:	2302      	movs	r3, #2
 800820e:	e02f      	b.n	8008270 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2284      	movs	r2, #132	; 0x84
 8008214:	2101      	movs	r1, #1
 8008216:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2288      	movs	r2, #136	; 0x88
 800821c:	2124      	movs	r1, #36	; 0x24
 800821e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2101      	movs	r1, #1
 8008234:	438a      	bics	r2, r1
 8008236:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	4a0e      	ldr	r2, [pc, #56]	; (8008278 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008240:	4013      	ands	r3, r2
 8008242:	0019      	movs	r1, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	683a      	ldr	r2, [r7, #0]
 800824a:	430a      	orrs	r2, r1
 800824c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	0018      	movs	r0, r3
 8008252:	f000 f813 	bl	800827c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2288      	movs	r2, #136	; 0x88
 8008262:	2120      	movs	r1, #32
 8008264:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2284      	movs	r2, #132	; 0x84
 800826a:	2100      	movs	r1, #0
 800826c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	0018      	movs	r0, r3
 8008272:	46bd      	mov	sp, r7
 8008274:	b004      	add	sp, #16
 8008276:	bd80      	pop	{r7, pc}
 8008278:	f1ffffff 	.word	0xf1ffffff

0800827c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800827c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008288:	2b00      	cmp	r3, #0
 800828a:	d108      	bne.n	800829e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	226a      	movs	r2, #106	; 0x6a
 8008290:	2101      	movs	r1, #1
 8008292:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2268      	movs	r2, #104	; 0x68
 8008298:	2101      	movs	r1, #1
 800829a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800829c:	e043      	b.n	8008326 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800829e:	260f      	movs	r6, #15
 80082a0:	19bb      	adds	r3, r7, r6
 80082a2:	2208      	movs	r2, #8
 80082a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082a6:	200e      	movs	r0, #14
 80082a8:	183b      	adds	r3, r7, r0
 80082aa:	2208      	movs	r2, #8
 80082ac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	0e5b      	lsrs	r3, r3, #25
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	240d      	movs	r4, #13
 80082ba:	193b      	adds	r3, r7, r4
 80082bc:	2107      	movs	r1, #7
 80082be:	400a      	ands	r2, r1
 80082c0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	0f5b      	lsrs	r3, r3, #29
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	250c      	movs	r5, #12
 80082ce:	197b      	adds	r3, r7, r5
 80082d0:	2107      	movs	r1, #7
 80082d2:	400a      	ands	r2, r1
 80082d4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082d6:	183b      	adds	r3, r7, r0
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	197a      	adds	r2, r7, r5
 80082dc:	7812      	ldrb	r2, [r2, #0]
 80082de:	4914      	ldr	r1, [pc, #80]	; (8008330 <UARTEx_SetNbDataToProcess+0xb4>)
 80082e0:	5c8a      	ldrb	r2, [r1, r2]
 80082e2:	435a      	muls	r2, r3
 80082e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80082e6:	197b      	adds	r3, r7, r5
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	4a12      	ldr	r2, [pc, #72]	; (8008334 <UARTEx_SetNbDataToProcess+0xb8>)
 80082ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082ee:	0019      	movs	r1, r3
 80082f0:	f7fc fa78 	bl	80047e4 <__divsi3>
 80082f4:	0003      	movs	r3, r0
 80082f6:	b299      	uxth	r1, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	226a      	movs	r2, #106	; 0x6a
 80082fc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082fe:	19bb      	adds	r3, r7, r6
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	193a      	adds	r2, r7, r4
 8008304:	7812      	ldrb	r2, [r2, #0]
 8008306:	490a      	ldr	r1, [pc, #40]	; (8008330 <UARTEx_SetNbDataToProcess+0xb4>)
 8008308:	5c8a      	ldrb	r2, [r1, r2]
 800830a:	435a      	muls	r2, r3
 800830c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800830e:	193b      	adds	r3, r7, r4
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	4a08      	ldr	r2, [pc, #32]	; (8008334 <UARTEx_SetNbDataToProcess+0xb8>)
 8008314:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008316:	0019      	movs	r1, r3
 8008318:	f7fc fa64 	bl	80047e4 <__divsi3>
 800831c:	0003      	movs	r3, r0
 800831e:	b299      	uxth	r1, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2268      	movs	r2, #104	; 0x68
 8008324:	5299      	strh	r1, [r3, r2]
}
 8008326:	46c0      	nop			; (mov r8, r8)
 8008328:	46bd      	mov	sp, r7
 800832a:	b005      	add	sp, #20
 800832c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800832e:	46c0      	nop			; (mov r8, r8)
 8008330:	08009e18 	.word	0x08009e18
 8008334:	08009e20 	.word	0x08009e20

08008338 <__aeabi_memclr>:
 8008338:	b510      	push	{r4, lr}
 800833a:	2200      	movs	r2, #0
 800833c:	f000 f805 	bl	800834a <__aeabi_memset>
 8008340:	bd10      	pop	{r4, pc}

08008342 <__aeabi_memcpy>:
 8008342:	b510      	push	{r4, lr}
 8008344:	f000 f840 	bl	80083c8 <memcpy>
 8008348:	bd10      	pop	{r4, pc}

0800834a <__aeabi_memset>:
 800834a:	000b      	movs	r3, r1
 800834c:	b510      	push	{r4, lr}
 800834e:	0011      	movs	r1, r2
 8008350:	001a      	movs	r2, r3
 8008352:	f000 f842 	bl	80083da <memset>
 8008356:	bd10      	pop	{r4, pc}

08008358 <__errno>:
 8008358:	4b01      	ldr	r3, [pc, #4]	; (8008360 <__errno+0x8>)
 800835a:	6818      	ldr	r0, [r3, #0]
 800835c:	4770      	bx	lr
 800835e:	46c0      	nop			; (mov r8, r8)
 8008360:	2000004c 	.word	0x2000004c

08008364 <__libc_init_array>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	2600      	movs	r6, #0
 8008368:	4d0c      	ldr	r5, [pc, #48]	; (800839c <__libc_init_array+0x38>)
 800836a:	4c0d      	ldr	r4, [pc, #52]	; (80083a0 <__libc_init_array+0x3c>)
 800836c:	1b64      	subs	r4, r4, r5
 800836e:	10a4      	asrs	r4, r4, #2
 8008370:	42a6      	cmp	r6, r4
 8008372:	d109      	bne.n	8008388 <__libc_init_array+0x24>
 8008374:	2600      	movs	r6, #0
 8008376:	f001 f88d 	bl	8009494 <_init>
 800837a:	4d0a      	ldr	r5, [pc, #40]	; (80083a4 <__libc_init_array+0x40>)
 800837c:	4c0a      	ldr	r4, [pc, #40]	; (80083a8 <__libc_init_array+0x44>)
 800837e:	1b64      	subs	r4, r4, r5
 8008380:	10a4      	asrs	r4, r4, #2
 8008382:	42a6      	cmp	r6, r4
 8008384:	d105      	bne.n	8008392 <__libc_init_array+0x2e>
 8008386:	bd70      	pop	{r4, r5, r6, pc}
 8008388:	00b3      	lsls	r3, r6, #2
 800838a:	58eb      	ldr	r3, [r5, r3]
 800838c:	4798      	blx	r3
 800838e:	3601      	adds	r6, #1
 8008390:	e7ee      	b.n	8008370 <__libc_init_array+0xc>
 8008392:	00b3      	lsls	r3, r6, #2
 8008394:	58eb      	ldr	r3, [r5, r3]
 8008396:	4798      	blx	r3
 8008398:	3601      	adds	r6, #1
 800839a:	e7f2      	b.n	8008382 <__libc_init_array+0x1e>
 800839c:	0800a12c 	.word	0x0800a12c
 80083a0:	0800a12c 	.word	0x0800a12c
 80083a4:	0800a12c 	.word	0x0800a12c
 80083a8:	0800a130 	.word	0x0800a130

080083ac <memcmp>:
 80083ac:	b530      	push	{r4, r5, lr}
 80083ae:	2400      	movs	r4, #0
 80083b0:	3901      	subs	r1, #1
 80083b2:	42a2      	cmp	r2, r4
 80083b4:	d101      	bne.n	80083ba <memcmp+0xe>
 80083b6:	2000      	movs	r0, #0
 80083b8:	e005      	b.n	80083c6 <memcmp+0x1a>
 80083ba:	5d03      	ldrb	r3, [r0, r4]
 80083bc:	3401      	adds	r4, #1
 80083be:	5d0d      	ldrb	r5, [r1, r4]
 80083c0:	42ab      	cmp	r3, r5
 80083c2:	d0f6      	beq.n	80083b2 <memcmp+0x6>
 80083c4:	1b58      	subs	r0, r3, r5
 80083c6:	bd30      	pop	{r4, r5, pc}

080083c8 <memcpy>:
 80083c8:	2300      	movs	r3, #0
 80083ca:	b510      	push	{r4, lr}
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d100      	bne.n	80083d2 <memcpy+0xa>
 80083d0:	bd10      	pop	{r4, pc}
 80083d2:	5ccc      	ldrb	r4, [r1, r3]
 80083d4:	54c4      	strb	r4, [r0, r3]
 80083d6:	3301      	adds	r3, #1
 80083d8:	e7f8      	b.n	80083cc <memcpy+0x4>

080083da <memset>:
 80083da:	0003      	movs	r3, r0
 80083dc:	1882      	adds	r2, r0, r2
 80083de:	4293      	cmp	r3, r2
 80083e0:	d100      	bne.n	80083e4 <memset+0xa>
 80083e2:	4770      	bx	lr
 80083e4:	7019      	strb	r1, [r3, #0]
 80083e6:	3301      	adds	r3, #1
 80083e8:	e7f9      	b.n	80083de <memset+0x4>
	...

080083ec <iprintf>:
 80083ec:	b40f      	push	{r0, r1, r2, r3}
 80083ee:	4b0b      	ldr	r3, [pc, #44]	; (800841c <iprintf+0x30>)
 80083f0:	b513      	push	{r0, r1, r4, lr}
 80083f2:	681c      	ldr	r4, [r3, #0]
 80083f4:	2c00      	cmp	r4, #0
 80083f6:	d005      	beq.n	8008404 <iprintf+0x18>
 80083f8:	69a3      	ldr	r3, [r4, #24]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d102      	bne.n	8008404 <iprintf+0x18>
 80083fe:	0020      	movs	r0, r4
 8008400:	f000 fa86 	bl	8008910 <__sinit>
 8008404:	ab05      	add	r3, sp, #20
 8008406:	0020      	movs	r0, r4
 8008408:	9a04      	ldr	r2, [sp, #16]
 800840a:	68a1      	ldr	r1, [r4, #8]
 800840c:	9301      	str	r3, [sp, #4]
 800840e:	f000 fc99 	bl	8008d44 <_vfiprintf_r>
 8008412:	bc16      	pop	{r1, r2, r4}
 8008414:	bc08      	pop	{r3}
 8008416:	b004      	add	sp, #16
 8008418:	4718      	bx	r3
 800841a:	46c0      	nop			; (mov r8, r8)
 800841c:	2000004c 	.word	0x2000004c

08008420 <_puts_r>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	0005      	movs	r5, r0
 8008424:	000e      	movs	r6, r1
 8008426:	2800      	cmp	r0, #0
 8008428:	d004      	beq.n	8008434 <_puts_r+0x14>
 800842a:	6983      	ldr	r3, [r0, #24]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <_puts_r+0x14>
 8008430:	f000 fa6e 	bl	8008910 <__sinit>
 8008434:	69ab      	ldr	r3, [r5, #24]
 8008436:	68ac      	ldr	r4, [r5, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d102      	bne.n	8008442 <_puts_r+0x22>
 800843c:	0028      	movs	r0, r5
 800843e:	f000 fa67 	bl	8008910 <__sinit>
 8008442:	4b2d      	ldr	r3, [pc, #180]	; (80084f8 <_puts_r+0xd8>)
 8008444:	429c      	cmp	r4, r3
 8008446:	d122      	bne.n	800848e <_puts_r+0x6e>
 8008448:	686c      	ldr	r4, [r5, #4]
 800844a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800844c:	07db      	lsls	r3, r3, #31
 800844e:	d405      	bmi.n	800845c <_puts_r+0x3c>
 8008450:	89a3      	ldrh	r3, [r4, #12]
 8008452:	059b      	lsls	r3, r3, #22
 8008454:	d402      	bmi.n	800845c <_puts_r+0x3c>
 8008456:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008458:	f000 fafb 	bl	8008a52 <__retarget_lock_acquire_recursive>
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	071b      	lsls	r3, r3, #28
 8008460:	d502      	bpl.n	8008468 <_puts_r+0x48>
 8008462:	6923      	ldr	r3, [r4, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d129      	bne.n	80084bc <_puts_r+0x9c>
 8008468:	0021      	movs	r1, r4
 800846a:	0028      	movs	r0, r5
 800846c:	f000 f8aa 	bl	80085c4 <__swsetup_r>
 8008470:	2800      	cmp	r0, #0
 8008472:	d023      	beq.n	80084bc <_puts_r+0x9c>
 8008474:	2501      	movs	r5, #1
 8008476:	426d      	negs	r5, r5
 8008478:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800847a:	07db      	lsls	r3, r3, #31
 800847c:	d405      	bmi.n	800848a <_puts_r+0x6a>
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	059b      	lsls	r3, r3, #22
 8008482:	d402      	bmi.n	800848a <_puts_r+0x6a>
 8008484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008486:	f000 fae5 	bl	8008a54 <__retarget_lock_release_recursive>
 800848a:	0028      	movs	r0, r5
 800848c:	bd70      	pop	{r4, r5, r6, pc}
 800848e:	4b1b      	ldr	r3, [pc, #108]	; (80084fc <_puts_r+0xdc>)
 8008490:	429c      	cmp	r4, r3
 8008492:	d101      	bne.n	8008498 <_puts_r+0x78>
 8008494:	68ac      	ldr	r4, [r5, #8]
 8008496:	e7d8      	b.n	800844a <_puts_r+0x2a>
 8008498:	4b19      	ldr	r3, [pc, #100]	; (8008500 <_puts_r+0xe0>)
 800849a:	429c      	cmp	r4, r3
 800849c:	d1d5      	bne.n	800844a <_puts_r+0x2a>
 800849e:	68ec      	ldr	r4, [r5, #12]
 80084a0:	e7d3      	b.n	800844a <_puts_r+0x2a>
 80084a2:	3601      	adds	r6, #1
 80084a4:	60a3      	str	r3, [r4, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	da04      	bge.n	80084b4 <_puts_r+0x94>
 80084aa:	69a2      	ldr	r2, [r4, #24]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	dc16      	bgt.n	80084de <_puts_r+0xbe>
 80084b0:	290a      	cmp	r1, #10
 80084b2:	d014      	beq.n	80084de <_puts_r+0xbe>
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	6022      	str	r2, [r4, #0]
 80084ba:	7019      	strb	r1, [r3, #0]
 80084bc:	68a3      	ldr	r3, [r4, #8]
 80084be:	7831      	ldrb	r1, [r6, #0]
 80084c0:	3b01      	subs	r3, #1
 80084c2:	2900      	cmp	r1, #0
 80084c4:	d1ed      	bne.n	80084a2 <_puts_r+0x82>
 80084c6:	60a3      	str	r3, [r4, #8]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	da0f      	bge.n	80084ec <_puts_r+0xcc>
 80084cc:	0028      	movs	r0, r5
 80084ce:	0022      	movs	r2, r4
 80084d0:	310a      	adds	r1, #10
 80084d2:	f000 f821 	bl	8008518 <__swbuf_r>
 80084d6:	250a      	movs	r5, #10
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	d1cd      	bne.n	8008478 <_puts_r+0x58>
 80084dc:	e7ca      	b.n	8008474 <_puts_r+0x54>
 80084de:	0022      	movs	r2, r4
 80084e0:	0028      	movs	r0, r5
 80084e2:	f000 f819 	bl	8008518 <__swbuf_r>
 80084e6:	1c43      	adds	r3, r0, #1
 80084e8:	d1e8      	bne.n	80084bc <_puts_r+0x9c>
 80084ea:	e7c3      	b.n	8008474 <_puts_r+0x54>
 80084ec:	250a      	movs	r5, #10
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	6022      	str	r2, [r4, #0]
 80084f4:	701d      	strb	r5, [r3, #0]
 80084f6:	e7bf      	b.n	8008478 <_puts_r+0x58>
 80084f8:	08009e4c 	.word	0x08009e4c
 80084fc:	08009e6c 	.word	0x08009e6c
 8008500:	08009e2c 	.word	0x08009e2c

08008504 <puts>:
 8008504:	b510      	push	{r4, lr}
 8008506:	4b03      	ldr	r3, [pc, #12]	; (8008514 <puts+0x10>)
 8008508:	0001      	movs	r1, r0
 800850a:	6818      	ldr	r0, [r3, #0]
 800850c:	f7ff ff88 	bl	8008420 <_puts_r>
 8008510:	bd10      	pop	{r4, pc}
 8008512:	46c0      	nop			; (mov r8, r8)
 8008514:	2000004c 	.word	0x2000004c

08008518 <__swbuf_r>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	0005      	movs	r5, r0
 800851c:	000e      	movs	r6, r1
 800851e:	0014      	movs	r4, r2
 8008520:	2800      	cmp	r0, #0
 8008522:	d004      	beq.n	800852e <__swbuf_r+0x16>
 8008524:	6983      	ldr	r3, [r0, #24]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <__swbuf_r+0x16>
 800852a:	f000 f9f1 	bl	8008910 <__sinit>
 800852e:	4b22      	ldr	r3, [pc, #136]	; (80085b8 <__swbuf_r+0xa0>)
 8008530:	429c      	cmp	r4, r3
 8008532:	d12e      	bne.n	8008592 <__swbuf_r+0x7a>
 8008534:	686c      	ldr	r4, [r5, #4]
 8008536:	69a3      	ldr	r3, [r4, #24]
 8008538:	60a3      	str	r3, [r4, #8]
 800853a:	89a3      	ldrh	r3, [r4, #12]
 800853c:	071b      	lsls	r3, r3, #28
 800853e:	d532      	bpl.n	80085a6 <__swbuf_r+0x8e>
 8008540:	6923      	ldr	r3, [r4, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d02f      	beq.n	80085a6 <__swbuf_r+0x8e>
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	6922      	ldr	r2, [r4, #16]
 800854a:	b2f7      	uxtb	r7, r6
 800854c:	1a98      	subs	r0, r3, r2
 800854e:	6963      	ldr	r3, [r4, #20]
 8008550:	b2f6      	uxtb	r6, r6
 8008552:	4283      	cmp	r3, r0
 8008554:	dc05      	bgt.n	8008562 <__swbuf_r+0x4a>
 8008556:	0021      	movs	r1, r4
 8008558:	0028      	movs	r0, r5
 800855a:	f000 f937 	bl	80087cc <_fflush_r>
 800855e:	2800      	cmp	r0, #0
 8008560:	d127      	bne.n	80085b2 <__swbuf_r+0x9a>
 8008562:	68a3      	ldr	r3, [r4, #8]
 8008564:	3001      	adds	r0, #1
 8008566:	3b01      	subs	r3, #1
 8008568:	60a3      	str	r3, [r4, #8]
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	6022      	str	r2, [r4, #0]
 8008570:	701f      	strb	r7, [r3, #0]
 8008572:	6963      	ldr	r3, [r4, #20]
 8008574:	4283      	cmp	r3, r0
 8008576:	d004      	beq.n	8008582 <__swbuf_r+0x6a>
 8008578:	89a3      	ldrh	r3, [r4, #12]
 800857a:	07db      	lsls	r3, r3, #31
 800857c:	d507      	bpl.n	800858e <__swbuf_r+0x76>
 800857e:	2e0a      	cmp	r6, #10
 8008580:	d105      	bne.n	800858e <__swbuf_r+0x76>
 8008582:	0021      	movs	r1, r4
 8008584:	0028      	movs	r0, r5
 8008586:	f000 f921 	bl	80087cc <_fflush_r>
 800858a:	2800      	cmp	r0, #0
 800858c:	d111      	bne.n	80085b2 <__swbuf_r+0x9a>
 800858e:	0030      	movs	r0, r6
 8008590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008592:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <__swbuf_r+0xa4>)
 8008594:	429c      	cmp	r4, r3
 8008596:	d101      	bne.n	800859c <__swbuf_r+0x84>
 8008598:	68ac      	ldr	r4, [r5, #8]
 800859a:	e7cc      	b.n	8008536 <__swbuf_r+0x1e>
 800859c:	4b08      	ldr	r3, [pc, #32]	; (80085c0 <__swbuf_r+0xa8>)
 800859e:	429c      	cmp	r4, r3
 80085a0:	d1c9      	bne.n	8008536 <__swbuf_r+0x1e>
 80085a2:	68ec      	ldr	r4, [r5, #12]
 80085a4:	e7c7      	b.n	8008536 <__swbuf_r+0x1e>
 80085a6:	0021      	movs	r1, r4
 80085a8:	0028      	movs	r0, r5
 80085aa:	f000 f80b 	bl	80085c4 <__swsetup_r>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d0c9      	beq.n	8008546 <__swbuf_r+0x2e>
 80085b2:	2601      	movs	r6, #1
 80085b4:	4276      	negs	r6, r6
 80085b6:	e7ea      	b.n	800858e <__swbuf_r+0x76>
 80085b8:	08009e4c 	.word	0x08009e4c
 80085bc:	08009e6c 	.word	0x08009e6c
 80085c0:	08009e2c 	.word	0x08009e2c

080085c4 <__swsetup_r>:
 80085c4:	4b37      	ldr	r3, [pc, #220]	; (80086a4 <__swsetup_r+0xe0>)
 80085c6:	b570      	push	{r4, r5, r6, lr}
 80085c8:	681d      	ldr	r5, [r3, #0]
 80085ca:	0006      	movs	r6, r0
 80085cc:	000c      	movs	r4, r1
 80085ce:	2d00      	cmp	r5, #0
 80085d0:	d005      	beq.n	80085de <__swsetup_r+0x1a>
 80085d2:	69ab      	ldr	r3, [r5, #24]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d102      	bne.n	80085de <__swsetup_r+0x1a>
 80085d8:	0028      	movs	r0, r5
 80085da:	f000 f999 	bl	8008910 <__sinit>
 80085de:	4b32      	ldr	r3, [pc, #200]	; (80086a8 <__swsetup_r+0xe4>)
 80085e0:	429c      	cmp	r4, r3
 80085e2:	d10f      	bne.n	8008604 <__swsetup_r+0x40>
 80085e4:	686c      	ldr	r4, [r5, #4]
 80085e6:	230c      	movs	r3, #12
 80085e8:	5ee2      	ldrsh	r2, [r4, r3]
 80085ea:	b293      	uxth	r3, r2
 80085ec:	0711      	lsls	r1, r2, #28
 80085ee:	d42d      	bmi.n	800864c <__swsetup_r+0x88>
 80085f0:	06d9      	lsls	r1, r3, #27
 80085f2:	d411      	bmi.n	8008618 <__swsetup_r+0x54>
 80085f4:	2309      	movs	r3, #9
 80085f6:	2001      	movs	r0, #1
 80085f8:	6033      	str	r3, [r6, #0]
 80085fa:	3337      	adds	r3, #55	; 0x37
 80085fc:	4313      	orrs	r3, r2
 80085fe:	81a3      	strh	r3, [r4, #12]
 8008600:	4240      	negs	r0, r0
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	4b29      	ldr	r3, [pc, #164]	; (80086ac <__swsetup_r+0xe8>)
 8008606:	429c      	cmp	r4, r3
 8008608:	d101      	bne.n	800860e <__swsetup_r+0x4a>
 800860a:	68ac      	ldr	r4, [r5, #8]
 800860c:	e7eb      	b.n	80085e6 <__swsetup_r+0x22>
 800860e:	4b28      	ldr	r3, [pc, #160]	; (80086b0 <__swsetup_r+0xec>)
 8008610:	429c      	cmp	r4, r3
 8008612:	d1e8      	bne.n	80085e6 <__swsetup_r+0x22>
 8008614:	68ec      	ldr	r4, [r5, #12]
 8008616:	e7e6      	b.n	80085e6 <__swsetup_r+0x22>
 8008618:	075b      	lsls	r3, r3, #29
 800861a:	d513      	bpl.n	8008644 <__swsetup_r+0x80>
 800861c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800861e:	2900      	cmp	r1, #0
 8008620:	d008      	beq.n	8008634 <__swsetup_r+0x70>
 8008622:	0023      	movs	r3, r4
 8008624:	3344      	adds	r3, #68	; 0x44
 8008626:	4299      	cmp	r1, r3
 8008628:	d002      	beq.n	8008630 <__swsetup_r+0x6c>
 800862a:	0030      	movs	r0, r6
 800862c:	f000 fa80 	bl	8008b30 <_free_r>
 8008630:	2300      	movs	r3, #0
 8008632:	6363      	str	r3, [r4, #52]	; 0x34
 8008634:	2224      	movs	r2, #36	; 0x24
 8008636:	89a3      	ldrh	r3, [r4, #12]
 8008638:	4393      	bics	r3, r2
 800863a:	81a3      	strh	r3, [r4, #12]
 800863c:	2300      	movs	r3, #0
 800863e:	6063      	str	r3, [r4, #4]
 8008640:	6923      	ldr	r3, [r4, #16]
 8008642:	6023      	str	r3, [r4, #0]
 8008644:	2308      	movs	r3, #8
 8008646:	89a2      	ldrh	r2, [r4, #12]
 8008648:	4313      	orrs	r3, r2
 800864a:	81a3      	strh	r3, [r4, #12]
 800864c:	6923      	ldr	r3, [r4, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10b      	bne.n	800866a <__swsetup_r+0xa6>
 8008652:	21a0      	movs	r1, #160	; 0xa0
 8008654:	2280      	movs	r2, #128	; 0x80
 8008656:	89a3      	ldrh	r3, [r4, #12]
 8008658:	0089      	lsls	r1, r1, #2
 800865a:	0092      	lsls	r2, r2, #2
 800865c:	400b      	ands	r3, r1
 800865e:	4293      	cmp	r3, r2
 8008660:	d003      	beq.n	800866a <__swsetup_r+0xa6>
 8008662:	0021      	movs	r1, r4
 8008664:	0030      	movs	r0, r6
 8008666:	f000 fa1f 	bl	8008aa8 <__smakebuf_r>
 800866a:	220c      	movs	r2, #12
 800866c:	5ea3      	ldrsh	r3, [r4, r2]
 800866e:	2001      	movs	r0, #1
 8008670:	001a      	movs	r2, r3
 8008672:	b299      	uxth	r1, r3
 8008674:	4002      	ands	r2, r0
 8008676:	4203      	tst	r3, r0
 8008678:	d00f      	beq.n	800869a <__swsetup_r+0xd6>
 800867a:	2200      	movs	r2, #0
 800867c:	60a2      	str	r2, [r4, #8]
 800867e:	6962      	ldr	r2, [r4, #20]
 8008680:	4252      	negs	r2, r2
 8008682:	61a2      	str	r2, [r4, #24]
 8008684:	2000      	movs	r0, #0
 8008686:	6922      	ldr	r2, [r4, #16]
 8008688:	4282      	cmp	r2, r0
 800868a:	d1ba      	bne.n	8008602 <__swsetup_r+0x3e>
 800868c:	060a      	lsls	r2, r1, #24
 800868e:	d5b8      	bpl.n	8008602 <__swsetup_r+0x3e>
 8008690:	2240      	movs	r2, #64	; 0x40
 8008692:	4313      	orrs	r3, r2
 8008694:	81a3      	strh	r3, [r4, #12]
 8008696:	3801      	subs	r0, #1
 8008698:	e7b3      	b.n	8008602 <__swsetup_r+0x3e>
 800869a:	0788      	lsls	r0, r1, #30
 800869c:	d400      	bmi.n	80086a0 <__swsetup_r+0xdc>
 800869e:	6962      	ldr	r2, [r4, #20]
 80086a0:	60a2      	str	r2, [r4, #8]
 80086a2:	e7ef      	b.n	8008684 <__swsetup_r+0xc0>
 80086a4:	2000004c 	.word	0x2000004c
 80086a8:	08009e4c 	.word	0x08009e4c
 80086ac:	08009e6c 	.word	0x08009e6c
 80086b0:	08009e2c 	.word	0x08009e2c

080086b4 <__sflush_r>:
 80086b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086b6:	898b      	ldrh	r3, [r1, #12]
 80086b8:	0005      	movs	r5, r0
 80086ba:	000c      	movs	r4, r1
 80086bc:	071a      	lsls	r2, r3, #28
 80086be:	d45f      	bmi.n	8008780 <__sflush_r+0xcc>
 80086c0:	684a      	ldr	r2, [r1, #4]
 80086c2:	2a00      	cmp	r2, #0
 80086c4:	dc04      	bgt.n	80086d0 <__sflush_r+0x1c>
 80086c6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80086c8:	2a00      	cmp	r2, #0
 80086ca:	dc01      	bgt.n	80086d0 <__sflush_r+0x1c>
 80086cc:	2000      	movs	r0, #0
 80086ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80086d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80086d2:	2f00      	cmp	r7, #0
 80086d4:	d0fa      	beq.n	80086cc <__sflush_r+0x18>
 80086d6:	2200      	movs	r2, #0
 80086d8:	2180      	movs	r1, #128	; 0x80
 80086da:	682e      	ldr	r6, [r5, #0]
 80086dc:	602a      	str	r2, [r5, #0]
 80086de:	001a      	movs	r2, r3
 80086e0:	0149      	lsls	r1, r1, #5
 80086e2:	400a      	ands	r2, r1
 80086e4:	420b      	tst	r3, r1
 80086e6:	d034      	beq.n	8008752 <__sflush_r+0x9e>
 80086e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086ea:	89a3      	ldrh	r3, [r4, #12]
 80086ec:	075b      	lsls	r3, r3, #29
 80086ee:	d506      	bpl.n	80086fe <__sflush_r+0x4a>
 80086f0:	6863      	ldr	r3, [r4, #4]
 80086f2:	1ac0      	subs	r0, r0, r3
 80086f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <__sflush_r+0x4a>
 80086fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086fc:	1ac0      	subs	r0, r0, r3
 80086fe:	0002      	movs	r2, r0
 8008700:	6a21      	ldr	r1, [r4, #32]
 8008702:	2300      	movs	r3, #0
 8008704:	0028      	movs	r0, r5
 8008706:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008708:	47b8      	blx	r7
 800870a:	89a1      	ldrh	r1, [r4, #12]
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	d106      	bne.n	800871e <__sflush_r+0x6a>
 8008710:	682b      	ldr	r3, [r5, #0]
 8008712:	2b1d      	cmp	r3, #29
 8008714:	d831      	bhi.n	800877a <__sflush_r+0xc6>
 8008716:	4a2c      	ldr	r2, [pc, #176]	; (80087c8 <__sflush_r+0x114>)
 8008718:	40da      	lsrs	r2, r3
 800871a:	07d3      	lsls	r3, r2, #31
 800871c:	d52d      	bpl.n	800877a <__sflush_r+0xc6>
 800871e:	2300      	movs	r3, #0
 8008720:	6063      	str	r3, [r4, #4]
 8008722:	6923      	ldr	r3, [r4, #16]
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	04cb      	lsls	r3, r1, #19
 8008728:	d505      	bpl.n	8008736 <__sflush_r+0x82>
 800872a:	1c43      	adds	r3, r0, #1
 800872c:	d102      	bne.n	8008734 <__sflush_r+0x80>
 800872e:	682b      	ldr	r3, [r5, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d100      	bne.n	8008736 <__sflush_r+0x82>
 8008734:	6560      	str	r0, [r4, #84]	; 0x54
 8008736:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008738:	602e      	str	r6, [r5, #0]
 800873a:	2900      	cmp	r1, #0
 800873c:	d0c6      	beq.n	80086cc <__sflush_r+0x18>
 800873e:	0023      	movs	r3, r4
 8008740:	3344      	adds	r3, #68	; 0x44
 8008742:	4299      	cmp	r1, r3
 8008744:	d002      	beq.n	800874c <__sflush_r+0x98>
 8008746:	0028      	movs	r0, r5
 8008748:	f000 f9f2 	bl	8008b30 <_free_r>
 800874c:	2000      	movs	r0, #0
 800874e:	6360      	str	r0, [r4, #52]	; 0x34
 8008750:	e7bd      	b.n	80086ce <__sflush_r+0x1a>
 8008752:	2301      	movs	r3, #1
 8008754:	0028      	movs	r0, r5
 8008756:	6a21      	ldr	r1, [r4, #32]
 8008758:	47b8      	blx	r7
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	d1c5      	bne.n	80086ea <__sflush_r+0x36>
 800875e:	682b      	ldr	r3, [r5, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d0c2      	beq.n	80086ea <__sflush_r+0x36>
 8008764:	2b1d      	cmp	r3, #29
 8008766:	d001      	beq.n	800876c <__sflush_r+0xb8>
 8008768:	2b16      	cmp	r3, #22
 800876a:	d101      	bne.n	8008770 <__sflush_r+0xbc>
 800876c:	602e      	str	r6, [r5, #0]
 800876e:	e7ad      	b.n	80086cc <__sflush_r+0x18>
 8008770:	2340      	movs	r3, #64	; 0x40
 8008772:	89a2      	ldrh	r2, [r4, #12]
 8008774:	4313      	orrs	r3, r2
 8008776:	81a3      	strh	r3, [r4, #12]
 8008778:	e7a9      	b.n	80086ce <__sflush_r+0x1a>
 800877a:	2340      	movs	r3, #64	; 0x40
 800877c:	430b      	orrs	r3, r1
 800877e:	e7fa      	b.n	8008776 <__sflush_r+0xc2>
 8008780:	690f      	ldr	r7, [r1, #16]
 8008782:	2f00      	cmp	r7, #0
 8008784:	d0a2      	beq.n	80086cc <__sflush_r+0x18>
 8008786:	680a      	ldr	r2, [r1, #0]
 8008788:	600f      	str	r7, [r1, #0]
 800878a:	1bd2      	subs	r2, r2, r7
 800878c:	9201      	str	r2, [sp, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	079b      	lsls	r3, r3, #30
 8008792:	d100      	bne.n	8008796 <__sflush_r+0xe2>
 8008794:	694a      	ldr	r2, [r1, #20]
 8008796:	60a2      	str	r2, [r4, #8]
 8008798:	9b01      	ldr	r3, [sp, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	dc00      	bgt.n	80087a0 <__sflush_r+0xec>
 800879e:	e795      	b.n	80086cc <__sflush_r+0x18>
 80087a0:	003a      	movs	r2, r7
 80087a2:	0028      	movs	r0, r5
 80087a4:	9b01      	ldr	r3, [sp, #4]
 80087a6:	6a21      	ldr	r1, [r4, #32]
 80087a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087aa:	47b0      	blx	r6
 80087ac:	2800      	cmp	r0, #0
 80087ae:	dc06      	bgt.n	80087be <__sflush_r+0x10a>
 80087b0:	2340      	movs	r3, #64	; 0x40
 80087b2:	2001      	movs	r0, #1
 80087b4:	89a2      	ldrh	r2, [r4, #12]
 80087b6:	4240      	negs	r0, r0
 80087b8:	4313      	orrs	r3, r2
 80087ba:	81a3      	strh	r3, [r4, #12]
 80087bc:	e787      	b.n	80086ce <__sflush_r+0x1a>
 80087be:	9b01      	ldr	r3, [sp, #4]
 80087c0:	183f      	adds	r7, r7, r0
 80087c2:	1a1b      	subs	r3, r3, r0
 80087c4:	9301      	str	r3, [sp, #4]
 80087c6:	e7e7      	b.n	8008798 <__sflush_r+0xe4>
 80087c8:	20400001 	.word	0x20400001

080087cc <_fflush_r>:
 80087cc:	690b      	ldr	r3, [r1, #16]
 80087ce:	b570      	push	{r4, r5, r6, lr}
 80087d0:	0005      	movs	r5, r0
 80087d2:	000c      	movs	r4, r1
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <_fflush_r+0x12>
 80087d8:	2500      	movs	r5, #0
 80087da:	0028      	movs	r0, r5
 80087dc:	bd70      	pop	{r4, r5, r6, pc}
 80087de:	2800      	cmp	r0, #0
 80087e0:	d004      	beq.n	80087ec <_fflush_r+0x20>
 80087e2:	6983      	ldr	r3, [r0, #24]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d101      	bne.n	80087ec <_fflush_r+0x20>
 80087e8:	f000 f892 	bl	8008910 <__sinit>
 80087ec:	4b14      	ldr	r3, [pc, #80]	; (8008840 <_fflush_r+0x74>)
 80087ee:	429c      	cmp	r4, r3
 80087f0:	d11b      	bne.n	800882a <_fflush_r+0x5e>
 80087f2:	686c      	ldr	r4, [r5, #4]
 80087f4:	220c      	movs	r2, #12
 80087f6:	5ea3      	ldrsh	r3, [r4, r2]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0ed      	beq.n	80087d8 <_fflush_r+0xc>
 80087fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087fe:	07d2      	lsls	r2, r2, #31
 8008800:	d404      	bmi.n	800880c <_fflush_r+0x40>
 8008802:	059b      	lsls	r3, r3, #22
 8008804:	d402      	bmi.n	800880c <_fflush_r+0x40>
 8008806:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008808:	f000 f923 	bl	8008a52 <__retarget_lock_acquire_recursive>
 800880c:	0028      	movs	r0, r5
 800880e:	0021      	movs	r1, r4
 8008810:	f7ff ff50 	bl	80086b4 <__sflush_r>
 8008814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008816:	0005      	movs	r5, r0
 8008818:	07db      	lsls	r3, r3, #31
 800881a:	d4de      	bmi.n	80087da <_fflush_r+0xe>
 800881c:	89a3      	ldrh	r3, [r4, #12]
 800881e:	059b      	lsls	r3, r3, #22
 8008820:	d4db      	bmi.n	80087da <_fflush_r+0xe>
 8008822:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008824:	f000 f916 	bl	8008a54 <__retarget_lock_release_recursive>
 8008828:	e7d7      	b.n	80087da <_fflush_r+0xe>
 800882a:	4b06      	ldr	r3, [pc, #24]	; (8008844 <_fflush_r+0x78>)
 800882c:	429c      	cmp	r4, r3
 800882e:	d101      	bne.n	8008834 <_fflush_r+0x68>
 8008830:	68ac      	ldr	r4, [r5, #8]
 8008832:	e7df      	b.n	80087f4 <_fflush_r+0x28>
 8008834:	4b04      	ldr	r3, [pc, #16]	; (8008848 <_fflush_r+0x7c>)
 8008836:	429c      	cmp	r4, r3
 8008838:	d1dc      	bne.n	80087f4 <_fflush_r+0x28>
 800883a:	68ec      	ldr	r4, [r5, #12]
 800883c:	e7da      	b.n	80087f4 <_fflush_r+0x28>
 800883e:	46c0      	nop			; (mov r8, r8)
 8008840:	08009e4c 	.word	0x08009e4c
 8008844:	08009e6c 	.word	0x08009e6c
 8008848:	08009e2c 	.word	0x08009e2c

0800884c <std>:
 800884c:	2300      	movs	r3, #0
 800884e:	b510      	push	{r4, lr}
 8008850:	0004      	movs	r4, r0
 8008852:	6003      	str	r3, [r0, #0]
 8008854:	6043      	str	r3, [r0, #4]
 8008856:	6083      	str	r3, [r0, #8]
 8008858:	8181      	strh	r1, [r0, #12]
 800885a:	6643      	str	r3, [r0, #100]	; 0x64
 800885c:	0019      	movs	r1, r3
 800885e:	81c2      	strh	r2, [r0, #14]
 8008860:	6103      	str	r3, [r0, #16]
 8008862:	6143      	str	r3, [r0, #20]
 8008864:	6183      	str	r3, [r0, #24]
 8008866:	2208      	movs	r2, #8
 8008868:	305c      	adds	r0, #92	; 0x5c
 800886a:	f7ff fdb6 	bl	80083da <memset>
 800886e:	4b05      	ldr	r3, [pc, #20]	; (8008884 <std+0x38>)
 8008870:	6224      	str	r4, [r4, #32]
 8008872:	6263      	str	r3, [r4, #36]	; 0x24
 8008874:	4b04      	ldr	r3, [pc, #16]	; (8008888 <std+0x3c>)
 8008876:	62a3      	str	r3, [r4, #40]	; 0x28
 8008878:	4b04      	ldr	r3, [pc, #16]	; (800888c <std+0x40>)
 800887a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800887c:	4b04      	ldr	r3, [pc, #16]	; (8008890 <std+0x44>)
 800887e:	6323      	str	r3, [r4, #48]	; 0x30
 8008880:	bd10      	pop	{r4, pc}
 8008882:	46c0      	nop			; (mov r8, r8)
 8008884:	080092e1 	.word	0x080092e1
 8008888:	08009309 	.word	0x08009309
 800888c:	08009341 	.word	0x08009341
 8008890:	0800936d 	.word	0x0800936d

08008894 <_cleanup_r>:
 8008894:	b510      	push	{r4, lr}
 8008896:	4902      	ldr	r1, [pc, #8]	; (80088a0 <_cleanup_r+0xc>)
 8008898:	f000 f8ba 	bl	8008a10 <_fwalk_reent>
 800889c:	bd10      	pop	{r4, pc}
 800889e:	46c0      	nop			; (mov r8, r8)
 80088a0:	080087cd 	.word	0x080087cd

080088a4 <__sfmoreglue>:
 80088a4:	b570      	push	{r4, r5, r6, lr}
 80088a6:	2568      	movs	r5, #104	; 0x68
 80088a8:	1e4a      	subs	r2, r1, #1
 80088aa:	4355      	muls	r5, r2
 80088ac:	000e      	movs	r6, r1
 80088ae:	0029      	movs	r1, r5
 80088b0:	3174      	adds	r1, #116	; 0x74
 80088b2:	f000 f9a9 	bl	8008c08 <_malloc_r>
 80088b6:	1e04      	subs	r4, r0, #0
 80088b8:	d008      	beq.n	80088cc <__sfmoreglue+0x28>
 80088ba:	2100      	movs	r1, #0
 80088bc:	002a      	movs	r2, r5
 80088be:	6001      	str	r1, [r0, #0]
 80088c0:	6046      	str	r6, [r0, #4]
 80088c2:	300c      	adds	r0, #12
 80088c4:	60a0      	str	r0, [r4, #8]
 80088c6:	3268      	adds	r2, #104	; 0x68
 80088c8:	f7ff fd87 	bl	80083da <memset>
 80088cc:	0020      	movs	r0, r4
 80088ce:	bd70      	pop	{r4, r5, r6, pc}

080088d0 <__sfp_lock_acquire>:
 80088d0:	b510      	push	{r4, lr}
 80088d2:	4802      	ldr	r0, [pc, #8]	; (80088dc <__sfp_lock_acquire+0xc>)
 80088d4:	f000 f8bd 	bl	8008a52 <__retarget_lock_acquire_recursive>
 80088d8:	bd10      	pop	{r4, pc}
 80088da:	46c0      	nop			; (mov r8, r8)
 80088dc:	20000971 	.word	0x20000971

080088e0 <__sfp_lock_release>:
 80088e0:	b510      	push	{r4, lr}
 80088e2:	4802      	ldr	r0, [pc, #8]	; (80088ec <__sfp_lock_release+0xc>)
 80088e4:	f000 f8b6 	bl	8008a54 <__retarget_lock_release_recursive>
 80088e8:	bd10      	pop	{r4, pc}
 80088ea:	46c0      	nop			; (mov r8, r8)
 80088ec:	20000971 	.word	0x20000971

080088f0 <__sinit_lock_acquire>:
 80088f0:	b510      	push	{r4, lr}
 80088f2:	4802      	ldr	r0, [pc, #8]	; (80088fc <__sinit_lock_acquire+0xc>)
 80088f4:	f000 f8ad 	bl	8008a52 <__retarget_lock_acquire_recursive>
 80088f8:	bd10      	pop	{r4, pc}
 80088fa:	46c0      	nop			; (mov r8, r8)
 80088fc:	20000972 	.word	0x20000972

08008900 <__sinit_lock_release>:
 8008900:	b510      	push	{r4, lr}
 8008902:	4802      	ldr	r0, [pc, #8]	; (800890c <__sinit_lock_release+0xc>)
 8008904:	f000 f8a6 	bl	8008a54 <__retarget_lock_release_recursive>
 8008908:	bd10      	pop	{r4, pc}
 800890a:	46c0      	nop			; (mov r8, r8)
 800890c:	20000972 	.word	0x20000972

08008910 <__sinit>:
 8008910:	b513      	push	{r0, r1, r4, lr}
 8008912:	0004      	movs	r4, r0
 8008914:	f7ff ffec 	bl	80088f0 <__sinit_lock_acquire>
 8008918:	69a3      	ldr	r3, [r4, #24]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d002      	beq.n	8008924 <__sinit+0x14>
 800891e:	f7ff ffef 	bl	8008900 <__sinit_lock_release>
 8008922:	bd13      	pop	{r0, r1, r4, pc}
 8008924:	64a3      	str	r3, [r4, #72]	; 0x48
 8008926:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008928:	6523      	str	r3, [r4, #80]	; 0x50
 800892a:	4b13      	ldr	r3, [pc, #76]	; (8008978 <__sinit+0x68>)
 800892c:	4a13      	ldr	r2, [pc, #76]	; (800897c <__sinit+0x6c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	62a2      	str	r2, [r4, #40]	; 0x28
 8008932:	9301      	str	r3, [sp, #4]
 8008934:	42a3      	cmp	r3, r4
 8008936:	d101      	bne.n	800893c <__sinit+0x2c>
 8008938:	2301      	movs	r3, #1
 800893a:	61a3      	str	r3, [r4, #24]
 800893c:	0020      	movs	r0, r4
 800893e:	f000 f81f 	bl	8008980 <__sfp>
 8008942:	6060      	str	r0, [r4, #4]
 8008944:	0020      	movs	r0, r4
 8008946:	f000 f81b 	bl	8008980 <__sfp>
 800894a:	60a0      	str	r0, [r4, #8]
 800894c:	0020      	movs	r0, r4
 800894e:	f000 f817 	bl	8008980 <__sfp>
 8008952:	2200      	movs	r2, #0
 8008954:	2104      	movs	r1, #4
 8008956:	60e0      	str	r0, [r4, #12]
 8008958:	6860      	ldr	r0, [r4, #4]
 800895a:	f7ff ff77 	bl	800884c <std>
 800895e:	2201      	movs	r2, #1
 8008960:	2109      	movs	r1, #9
 8008962:	68a0      	ldr	r0, [r4, #8]
 8008964:	f7ff ff72 	bl	800884c <std>
 8008968:	2202      	movs	r2, #2
 800896a:	2112      	movs	r1, #18
 800896c:	68e0      	ldr	r0, [r4, #12]
 800896e:	f7ff ff6d 	bl	800884c <std>
 8008972:	2301      	movs	r3, #1
 8008974:	61a3      	str	r3, [r4, #24]
 8008976:	e7d2      	b.n	800891e <__sinit+0xe>
 8008978:	08009e28 	.word	0x08009e28
 800897c:	08008895 	.word	0x08008895

08008980 <__sfp>:
 8008980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008982:	0007      	movs	r7, r0
 8008984:	f7ff ffa4 	bl	80088d0 <__sfp_lock_acquire>
 8008988:	4b1f      	ldr	r3, [pc, #124]	; (8008a08 <__sfp+0x88>)
 800898a:	681e      	ldr	r6, [r3, #0]
 800898c:	69b3      	ldr	r3, [r6, #24]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d102      	bne.n	8008998 <__sfp+0x18>
 8008992:	0030      	movs	r0, r6
 8008994:	f7ff ffbc 	bl	8008910 <__sinit>
 8008998:	3648      	adds	r6, #72	; 0x48
 800899a:	68b4      	ldr	r4, [r6, #8]
 800899c:	6873      	ldr	r3, [r6, #4]
 800899e:	3b01      	subs	r3, #1
 80089a0:	d504      	bpl.n	80089ac <__sfp+0x2c>
 80089a2:	6833      	ldr	r3, [r6, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d022      	beq.n	80089ee <__sfp+0x6e>
 80089a8:	6836      	ldr	r6, [r6, #0]
 80089aa:	e7f6      	b.n	800899a <__sfp+0x1a>
 80089ac:	220c      	movs	r2, #12
 80089ae:	5ea5      	ldrsh	r5, [r4, r2]
 80089b0:	2d00      	cmp	r5, #0
 80089b2:	d11a      	bne.n	80089ea <__sfp+0x6a>
 80089b4:	0020      	movs	r0, r4
 80089b6:	4b15      	ldr	r3, [pc, #84]	; (8008a0c <__sfp+0x8c>)
 80089b8:	3058      	adds	r0, #88	; 0x58
 80089ba:	60e3      	str	r3, [r4, #12]
 80089bc:	6665      	str	r5, [r4, #100]	; 0x64
 80089be:	f000 f847 	bl	8008a50 <__retarget_lock_init_recursive>
 80089c2:	f7ff ff8d 	bl	80088e0 <__sfp_lock_release>
 80089c6:	0020      	movs	r0, r4
 80089c8:	2208      	movs	r2, #8
 80089ca:	0029      	movs	r1, r5
 80089cc:	6025      	str	r5, [r4, #0]
 80089ce:	60a5      	str	r5, [r4, #8]
 80089d0:	6065      	str	r5, [r4, #4]
 80089d2:	6125      	str	r5, [r4, #16]
 80089d4:	6165      	str	r5, [r4, #20]
 80089d6:	61a5      	str	r5, [r4, #24]
 80089d8:	305c      	adds	r0, #92	; 0x5c
 80089da:	f7ff fcfe 	bl	80083da <memset>
 80089de:	6365      	str	r5, [r4, #52]	; 0x34
 80089e0:	63a5      	str	r5, [r4, #56]	; 0x38
 80089e2:	64a5      	str	r5, [r4, #72]	; 0x48
 80089e4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80089e6:	0020      	movs	r0, r4
 80089e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089ea:	3468      	adds	r4, #104	; 0x68
 80089ec:	e7d7      	b.n	800899e <__sfp+0x1e>
 80089ee:	2104      	movs	r1, #4
 80089f0:	0038      	movs	r0, r7
 80089f2:	f7ff ff57 	bl	80088a4 <__sfmoreglue>
 80089f6:	1e04      	subs	r4, r0, #0
 80089f8:	6030      	str	r0, [r6, #0]
 80089fa:	d1d5      	bne.n	80089a8 <__sfp+0x28>
 80089fc:	f7ff ff70 	bl	80088e0 <__sfp_lock_release>
 8008a00:	230c      	movs	r3, #12
 8008a02:	603b      	str	r3, [r7, #0]
 8008a04:	e7ef      	b.n	80089e6 <__sfp+0x66>
 8008a06:	46c0      	nop			; (mov r8, r8)
 8008a08:	08009e28 	.word	0x08009e28
 8008a0c:	ffff0001 	.word	0xffff0001

08008a10 <_fwalk_reent>:
 8008a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a12:	0004      	movs	r4, r0
 8008a14:	0006      	movs	r6, r0
 8008a16:	2700      	movs	r7, #0
 8008a18:	9101      	str	r1, [sp, #4]
 8008a1a:	3448      	adds	r4, #72	; 0x48
 8008a1c:	6863      	ldr	r3, [r4, #4]
 8008a1e:	68a5      	ldr	r5, [r4, #8]
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	9b00      	ldr	r3, [sp, #0]
 8008a24:	3b01      	subs	r3, #1
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	d504      	bpl.n	8008a34 <_fwalk_reent+0x24>
 8008a2a:	6824      	ldr	r4, [r4, #0]
 8008a2c:	2c00      	cmp	r4, #0
 8008a2e:	d1f5      	bne.n	8008a1c <_fwalk_reent+0xc>
 8008a30:	0038      	movs	r0, r7
 8008a32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a34:	89ab      	ldrh	r3, [r5, #12]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d908      	bls.n	8008a4c <_fwalk_reent+0x3c>
 8008a3a:	220e      	movs	r2, #14
 8008a3c:	5eab      	ldrsh	r3, [r5, r2]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	d004      	beq.n	8008a4c <_fwalk_reent+0x3c>
 8008a42:	0029      	movs	r1, r5
 8008a44:	0030      	movs	r0, r6
 8008a46:	9b01      	ldr	r3, [sp, #4]
 8008a48:	4798      	blx	r3
 8008a4a:	4307      	orrs	r7, r0
 8008a4c:	3568      	adds	r5, #104	; 0x68
 8008a4e:	e7e8      	b.n	8008a22 <_fwalk_reent+0x12>

08008a50 <__retarget_lock_init_recursive>:
 8008a50:	4770      	bx	lr

08008a52 <__retarget_lock_acquire_recursive>:
 8008a52:	4770      	bx	lr

08008a54 <__retarget_lock_release_recursive>:
 8008a54:	4770      	bx	lr
	...

08008a58 <__swhatbuf_r>:
 8008a58:	b570      	push	{r4, r5, r6, lr}
 8008a5a:	000e      	movs	r6, r1
 8008a5c:	001d      	movs	r5, r3
 8008a5e:	230e      	movs	r3, #14
 8008a60:	5ec9      	ldrsh	r1, [r1, r3]
 8008a62:	0014      	movs	r4, r2
 8008a64:	b096      	sub	sp, #88	; 0x58
 8008a66:	2900      	cmp	r1, #0
 8008a68:	da08      	bge.n	8008a7c <__swhatbuf_r+0x24>
 8008a6a:	220c      	movs	r2, #12
 8008a6c:	5eb3      	ldrsh	r3, [r6, r2]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	602a      	str	r2, [r5, #0]
 8008a72:	061b      	lsls	r3, r3, #24
 8008a74:	d411      	bmi.n	8008a9a <__swhatbuf_r+0x42>
 8008a76:	2380      	movs	r3, #128	; 0x80
 8008a78:	00db      	lsls	r3, r3, #3
 8008a7a:	e00f      	b.n	8008a9c <__swhatbuf_r+0x44>
 8008a7c:	466a      	mov	r2, sp
 8008a7e:	f000 fca1 	bl	80093c4 <_fstat_r>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	dbf1      	blt.n	8008a6a <__swhatbuf_r+0x12>
 8008a86:	23f0      	movs	r3, #240	; 0xf0
 8008a88:	9901      	ldr	r1, [sp, #4]
 8008a8a:	021b      	lsls	r3, r3, #8
 8008a8c:	4019      	ands	r1, r3
 8008a8e:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <__swhatbuf_r+0x4c>)
 8008a90:	18c9      	adds	r1, r1, r3
 8008a92:	424b      	negs	r3, r1
 8008a94:	4159      	adcs	r1, r3
 8008a96:	6029      	str	r1, [r5, #0]
 8008a98:	e7ed      	b.n	8008a76 <__swhatbuf_r+0x1e>
 8008a9a:	2340      	movs	r3, #64	; 0x40
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	6023      	str	r3, [r4, #0]
 8008aa0:	b016      	add	sp, #88	; 0x58
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}
 8008aa4:	ffffe000 	.word	0xffffe000

08008aa8 <__smakebuf_r>:
 8008aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008aaa:	2602      	movs	r6, #2
 8008aac:	898b      	ldrh	r3, [r1, #12]
 8008aae:	0005      	movs	r5, r0
 8008ab0:	000c      	movs	r4, r1
 8008ab2:	4233      	tst	r3, r6
 8008ab4:	d006      	beq.n	8008ac4 <__smakebuf_r+0x1c>
 8008ab6:	0023      	movs	r3, r4
 8008ab8:	3347      	adds	r3, #71	; 0x47
 8008aba:	6023      	str	r3, [r4, #0]
 8008abc:	6123      	str	r3, [r4, #16]
 8008abe:	2301      	movs	r3, #1
 8008ac0:	6163      	str	r3, [r4, #20]
 8008ac2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008ac4:	466a      	mov	r2, sp
 8008ac6:	ab01      	add	r3, sp, #4
 8008ac8:	f7ff ffc6 	bl	8008a58 <__swhatbuf_r>
 8008acc:	9900      	ldr	r1, [sp, #0]
 8008ace:	0007      	movs	r7, r0
 8008ad0:	0028      	movs	r0, r5
 8008ad2:	f000 f899 	bl	8008c08 <_malloc_r>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d108      	bne.n	8008aec <__smakebuf_r+0x44>
 8008ada:	220c      	movs	r2, #12
 8008adc:	5ea3      	ldrsh	r3, [r4, r2]
 8008ade:	059a      	lsls	r2, r3, #22
 8008ae0:	d4ef      	bmi.n	8008ac2 <__smakebuf_r+0x1a>
 8008ae2:	2203      	movs	r2, #3
 8008ae4:	4393      	bics	r3, r2
 8008ae6:	431e      	orrs	r6, r3
 8008ae8:	81a6      	strh	r6, [r4, #12]
 8008aea:	e7e4      	b.n	8008ab6 <__smakebuf_r+0xe>
 8008aec:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <__smakebuf_r+0x84>)
 8008aee:	62ab      	str	r3, [r5, #40]	; 0x28
 8008af0:	2380      	movs	r3, #128	; 0x80
 8008af2:	89a2      	ldrh	r2, [r4, #12]
 8008af4:	6020      	str	r0, [r4, #0]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	81a3      	strh	r3, [r4, #12]
 8008afa:	9b00      	ldr	r3, [sp, #0]
 8008afc:	6120      	str	r0, [r4, #16]
 8008afe:	6163      	str	r3, [r4, #20]
 8008b00:	9b01      	ldr	r3, [sp, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00d      	beq.n	8008b22 <__smakebuf_r+0x7a>
 8008b06:	0028      	movs	r0, r5
 8008b08:	230e      	movs	r3, #14
 8008b0a:	5ee1      	ldrsh	r1, [r4, r3]
 8008b0c:	f000 fc6c 	bl	80093e8 <_isatty_r>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d006      	beq.n	8008b22 <__smakebuf_r+0x7a>
 8008b14:	2203      	movs	r2, #3
 8008b16:	89a3      	ldrh	r3, [r4, #12]
 8008b18:	4393      	bics	r3, r2
 8008b1a:	001a      	movs	r2, r3
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	81a3      	strh	r3, [r4, #12]
 8008b22:	89a0      	ldrh	r0, [r4, #12]
 8008b24:	4307      	orrs	r7, r0
 8008b26:	81a7      	strh	r7, [r4, #12]
 8008b28:	e7cb      	b.n	8008ac2 <__smakebuf_r+0x1a>
 8008b2a:	46c0      	nop			; (mov r8, r8)
 8008b2c:	08008895 	.word	0x08008895

08008b30 <_free_r>:
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	0005      	movs	r5, r0
 8008b34:	2900      	cmp	r1, #0
 8008b36:	d010      	beq.n	8008b5a <_free_r+0x2a>
 8008b38:	1f0c      	subs	r4, r1, #4
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	da00      	bge.n	8008b42 <_free_r+0x12>
 8008b40:	18e4      	adds	r4, r4, r3
 8008b42:	0028      	movs	r0, r5
 8008b44:	f000 fc82 	bl	800944c <__malloc_lock>
 8008b48:	4a1d      	ldr	r2, [pc, #116]	; (8008bc0 <_free_r+0x90>)
 8008b4a:	6813      	ldr	r3, [r2, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d105      	bne.n	8008b5c <_free_r+0x2c>
 8008b50:	6063      	str	r3, [r4, #4]
 8008b52:	6014      	str	r4, [r2, #0]
 8008b54:	0028      	movs	r0, r5
 8008b56:	f000 fc81 	bl	800945c <__malloc_unlock>
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}
 8008b5c:	42a3      	cmp	r3, r4
 8008b5e:	d908      	bls.n	8008b72 <_free_r+0x42>
 8008b60:	6821      	ldr	r1, [r4, #0]
 8008b62:	1860      	adds	r0, r4, r1
 8008b64:	4283      	cmp	r3, r0
 8008b66:	d1f3      	bne.n	8008b50 <_free_r+0x20>
 8008b68:	6818      	ldr	r0, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	1841      	adds	r1, r0, r1
 8008b6e:	6021      	str	r1, [r4, #0]
 8008b70:	e7ee      	b.n	8008b50 <_free_r+0x20>
 8008b72:	001a      	movs	r2, r3
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <_free_r+0x4e>
 8008b7a:	42a3      	cmp	r3, r4
 8008b7c:	d9f9      	bls.n	8008b72 <_free_r+0x42>
 8008b7e:	6811      	ldr	r1, [r2, #0]
 8008b80:	1850      	adds	r0, r2, r1
 8008b82:	42a0      	cmp	r0, r4
 8008b84:	d10b      	bne.n	8008b9e <_free_r+0x6e>
 8008b86:	6820      	ldr	r0, [r4, #0]
 8008b88:	1809      	adds	r1, r1, r0
 8008b8a:	1850      	adds	r0, r2, r1
 8008b8c:	6011      	str	r1, [r2, #0]
 8008b8e:	4283      	cmp	r3, r0
 8008b90:	d1e0      	bne.n	8008b54 <_free_r+0x24>
 8008b92:	6818      	ldr	r0, [r3, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	1841      	adds	r1, r0, r1
 8008b98:	6011      	str	r1, [r2, #0]
 8008b9a:	6053      	str	r3, [r2, #4]
 8008b9c:	e7da      	b.n	8008b54 <_free_r+0x24>
 8008b9e:	42a0      	cmp	r0, r4
 8008ba0:	d902      	bls.n	8008ba8 <_free_r+0x78>
 8008ba2:	230c      	movs	r3, #12
 8008ba4:	602b      	str	r3, [r5, #0]
 8008ba6:	e7d5      	b.n	8008b54 <_free_r+0x24>
 8008ba8:	6821      	ldr	r1, [r4, #0]
 8008baa:	1860      	adds	r0, r4, r1
 8008bac:	4283      	cmp	r3, r0
 8008bae:	d103      	bne.n	8008bb8 <_free_r+0x88>
 8008bb0:	6818      	ldr	r0, [r3, #0]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	1841      	adds	r1, r0, r1
 8008bb6:	6021      	str	r1, [r4, #0]
 8008bb8:	6063      	str	r3, [r4, #4]
 8008bba:	6054      	str	r4, [r2, #4]
 8008bbc:	e7ca      	b.n	8008b54 <_free_r+0x24>
 8008bbe:	46c0      	nop			; (mov r8, r8)
 8008bc0:	20000974 	.word	0x20000974

08008bc4 <sbrk_aligned>:
 8008bc4:	b570      	push	{r4, r5, r6, lr}
 8008bc6:	4e0f      	ldr	r6, [pc, #60]	; (8008c04 <sbrk_aligned+0x40>)
 8008bc8:	000d      	movs	r5, r1
 8008bca:	6831      	ldr	r1, [r6, #0]
 8008bcc:	0004      	movs	r4, r0
 8008bce:	2900      	cmp	r1, #0
 8008bd0:	d102      	bne.n	8008bd8 <sbrk_aligned+0x14>
 8008bd2:	f000 fb73 	bl	80092bc <_sbrk_r>
 8008bd6:	6030      	str	r0, [r6, #0]
 8008bd8:	0029      	movs	r1, r5
 8008bda:	0020      	movs	r0, r4
 8008bdc:	f000 fb6e 	bl	80092bc <_sbrk_r>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	d00a      	beq.n	8008bfa <sbrk_aligned+0x36>
 8008be4:	2303      	movs	r3, #3
 8008be6:	1cc5      	adds	r5, r0, #3
 8008be8:	439d      	bics	r5, r3
 8008bea:	42a8      	cmp	r0, r5
 8008bec:	d007      	beq.n	8008bfe <sbrk_aligned+0x3a>
 8008bee:	1a29      	subs	r1, r5, r0
 8008bf0:	0020      	movs	r0, r4
 8008bf2:	f000 fb63 	bl	80092bc <_sbrk_r>
 8008bf6:	1c43      	adds	r3, r0, #1
 8008bf8:	d101      	bne.n	8008bfe <sbrk_aligned+0x3a>
 8008bfa:	2501      	movs	r5, #1
 8008bfc:	426d      	negs	r5, r5
 8008bfe:	0028      	movs	r0, r5
 8008c00:	bd70      	pop	{r4, r5, r6, pc}
 8008c02:	46c0      	nop			; (mov r8, r8)
 8008c04:	20000978 	.word	0x20000978

08008c08 <_malloc_r>:
 8008c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c0a:	2203      	movs	r2, #3
 8008c0c:	1ccb      	adds	r3, r1, #3
 8008c0e:	4393      	bics	r3, r2
 8008c10:	3308      	adds	r3, #8
 8008c12:	0006      	movs	r6, r0
 8008c14:	001f      	movs	r7, r3
 8008c16:	2b0c      	cmp	r3, #12
 8008c18:	d232      	bcs.n	8008c80 <_malloc_r+0x78>
 8008c1a:	270c      	movs	r7, #12
 8008c1c:	42b9      	cmp	r1, r7
 8008c1e:	d831      	bhi.n	8008c84 <_malloc_r+0x7c>
 8008c20:	0030      	movs	r0, r6
 8008c22:	f000 fc13 	bl	800944c <__malloc_lock>
 8008c26:	4d32      	ldr	r5, [pc, #200]	; (8008cf0 <_malloc_r+0xe8>)
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	001c      	movs	r4, r3
 8008c2c:	2c00      	cmp	r4, #0
 8008c2e:	d12e      	bne.n	8008c8e <_malloc_r+0x86>
 8008c30:	0039      	movs	r1, r7
 8008c32:	0030      	movs	r0, r6
 8008c34:	f7ff ffc6 	bl	8008bc4 <sbrk_aligned>
 8008c38:	0004      	movs	r4, r0
 8008c3a:	1c43      	adds	r3, r0, #1
 8008c3c:	d11e      	bne.n	8008c7c <_malloc_r+0x74>
 8008c3e:	682c      	ldr	r4, [r5, #0]
 8008c40:	0025      	movs	r5, r4
 8008c42:	2d00      	cmp	r5, #0
 8008c44:	d14a      	bne.n	8008cdc <_malloc_r+0xd4>
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	0029      	movs	r1, r5
 8008c4a:	18e3      	adds	r3, r4, r3
 8008c4c:	0030      	movs	r0, r6
 8008c4e:	9301      	str	r3, [sp, #4]
 8008c50:	f000 fb34 	bl	80092bc <_sbrk_r>
 8008c54:	9b01      	ldr	r3, [sp, #4]
 8008c56:	4283      	cmp	r3, r0
 8008c58:	d143      	bne.n	8008ce2 <_malloc_r+0xda>
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	3703      	adds	r7, #3
 8008c5e:	1aff      	subs	r7, r7, r3
 8008c60:	2303      	movs	r3, #3
 8008c62:	439f      	bics	r7, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	2f0c      	cmp	r7, #12
 8008c68:	d200      	bcs.n	8008c6c <_malloc_r+0x64>
 8008c6a:	270c      	movs	r7, #12
 8008c6c:	0039      	movs	r1, r7
 8008c6e:	0030      	movs	r0, r6
 8008c70:	f7ff ffa8 	bl	8008bc4 <sbrk_aligned>
 8008c74:	1c43      	adds	r3, r0, #1
 8008c76:	d034      	beq.n	8008ce2 <_malloc_r+0xda>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	19df      	adds	r7, r3, r7
 8008c7c:	6027      	str	r7, [r4, #0]
 8008c7e:	e013      	b.n	8008ca8 <_malloc_r+0xa0>
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	dacb      	bge.n	8008c1c <_malloc_r+0x14>
 8008c84:	230c      	movs	r3, #12
 8008c86:	2500      	movs	r5, #0
 8008c88:	6033      	str	r3, [r6, #0]
 8008c8a:	0028      	movs	r0, r5
 8008c8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c8e:	6822      	ldr	r2, [r4, #0]
 8008c90:	1bd1      	subs	r1, r2, r7
 8008c92:	d420      	bmi.n	8008cd6 <_malloc_r+0xce>
 8008c94:	290b      	cmp	r1, #11
 8008c96:	d917      	bls.n	8008cc8 <_malloc_r+0xc0>
 8008c98:	19e2      	adds	r2, r4, r7
 8008c9a:	6027      	str	r7, [r4, #0]
 8008c9c:	42a3      	cmp	r3, r4
 8008c9e:	d111      	bne.n	8008cc4 <_malloc_r+0xbc>
 8008ca0:	602a      	str	r2, [r5, #0]
 8008ca2:	6863      	ldr	r3, [r4, #4]
 8008ca4:	6011      	str	r1, [r2, #0]
 8008ca6:	6053      	str	r3, [r2, #4]
 8008ca8:	0030      	movs	r0, r6
 8008caa:	0025      	movs	r5, r4
 8008cac:	f000 fbd6 	bl	800945c <__malloc_unlock>
 8008cb0:	2207      	movs	r2, #7
 8008cb2:	350b      	adds	r5, #11
 8008cb4:	1d23      	adds	r3, r4, #4
 8008cb6:	4395      	bics	r5, r2
 8008cb8:	1aea      	subs	r2, r5, r3
 8008cba:	429d      	cmp	r5, r3
 8008cbc:	d0e5      	beq.n	8008c8a <_malloc_r+0x82>
 8008cbe:	1b5b      	subs	r3, r3, r5
 8008cc0:	50a3      	str	r3, [r4, r2]
 8008cc2:	e7e2      	b.n	8008c8a <_malloc_r+0x82>
 8008cc4:	605a      	str	r2, [r3, #4]
 8008cc6:	e7ec      	b.n	8008ca2 <_malloc_r+0x9a>
 8008cc8:	6862      	ldr	r2, [r4, #4]
 8008cca:	42a3      	cmp	r3, r4
 8008ccc:	d101      	bne.n	8008cd2 <_malloc_r+0xca>
 8008cce:	602a      	str	r2, [r5, #0]
 8008cd0:	e7ea      	b.n	8008ca8 <_malloc_r+0xa0>
 8008cd2:	605a      	str	r2, [r3, #4]
 8008cd4:	e7e8      	b.n	8008ca8 <_malloc_r+0xa0>
 8008cd6:	0023      	movs	r3, r4
 8008cd8:	6864      	ldr	r4, [r4, #4]
 8008cda:	e7a7      	b.n	8008c2c <_malloc_r+0x24>
 8008cdc:	002c      	movs	r4, r5
 8008cde:	686d      	ldr	r5, [r5, #4]
 8008ce0:	e7af      	b.n	8008c42 <_malloc_r+0x3a>
 8008ce2:	230c      	movs	r3, #12
 8008ce4:	0030      	movs	r0, r6
 8008ce6:	6033      	str	r3, [r6, #0]
 8008ce8:	f000 fbb8 	bl	800945c <__malloc_unlock>
 8008cec:	e7cd      	b.n	8008c8a <_malloc_r+0x82>
 8008cee:	46c0      	nop			; (mov r8, r8)
 8008cf0:	20000974 	.word	0x20000974

08008cf4 <__sfputc_r>:
 8008cf4:	6893      	ldr	r3, [r2, #8]
 8008cf6:	b510      	push	{r4, lr}
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	6093      	str	r3, [r2, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	da04      	bge.n	8008d0a <__sfputc_r+0x16>
 8008d00:	6994      	ldr	r4, [r2, #24]
 8008d02:	42a3      	cmp	r3, r4
 8008d04:	db07      	blt.n	8008d16 <__sfputc_r+0x22>
 8008d06:	290a      	cmp	r1, #10
 8008d08:	d005      	beq.n	8008d16 <__sfputc_r+0x22>
 8008d0a:	6813      	ldr	r3, [r2, #0]
 8008d0c:	1c58      	adds	r0, r3, #1
 8008d0e:	6010      	str	r0, [r2, #0]
 8008d10:	7019      	strb	r1, [r3, #0]
 8008d12:	0008      	movs	r0, r1
 8008d14:	bd10      	pop	{r4, pc}
 8008d16:	f7ff fbff 	bl	8008518 <__swbuf_r>
 8008d1a:	0001      	movs	r1, r0
 8008d1c:	e7f9      	b.n	8008d12 <__sfputc_r+0x1e>

08008d1e <__sfputs_r>:
 8008d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d20:	0006      	movs	r6, r0
 8008d22:	000f      	movs	r7, r1
 8008d24:	0014      	movs	r4, r2
 8008d26:	18d5      	adds	r5, r2, r3
 8008d28:	42ac      	cmp	r4, r5
 8008d2a:	d101      	bne.n	8008d30 <__sfputs_r+0x12>
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	e007      	b.n	8008d40 <__sfputs_r+0x22>
 8008d30:	7821      	ldrb	r1, [r4, #0]
 8008d32:	003a      	movs	r2, r7
 8008d34:	0030      	movs	r0, r6
 8008d36:	f7ff ffdd 	bl	8008cf4 <__sfputc_r>
 8008d3a:	3401      	adds	r4, #1
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d1f3      	bne.n	8008d28 <__sfputs_r+0xa>
 8008d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d44 <_vfiprintf_r>:
 8008d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d46:	b0a1      	sub	sp, #132	; 0x84
 8008d48:	0006      	movs	r6, r0
 8008d4a:	000c      	movs	r4, r1
 8008d4c:	001f      	movs	r7, r3
 8008d4e:	9203      	str	r2, [sp, #12]
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d004      	beq.n	8008d5e <_vfiprintf_r+0x1a>
 8008d54:	6983      	ldr	r3, [r0, #24]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <_vfiprintf_r+0x1a>
 8008d5a:	f7ff fdd9 	bl	8008910 <__sinit>
 8008d5e:	4b8e      	ldr	r3, [pc, #568]	; (8008f98 <_vfiprintf_r+0x254>)
 8008d60:	429c      	cmp	r4, r3
 8008d62:	d11c      	bne.n	8008d9e <_vfiprintf_r+0x5a>
 8008d64:	6874      	ldr	r4, [r6, #4]
 8008d66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d68:	07db      	lsls	r3, r3, #31
 8008d6a:	d405      	bmi.n	8008d78 <_vfiprintf_r+0x34>
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	059b      	lsls	r3, r3, #22
 8008d70:	d402      	bmi.n	8008d78 <_vfiprintf_r+0x34>
 8008d72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d74:	f7ff fe6d 	bl	8008a52 <__retarget_lock_acquire_recursive>
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	071b      	lsls	r3, r3, #28
 8008d7c:	d502      	bpl.n	8008d84 <_vfiprintf_r+0x40>
 8008d7e:	6923      	ldr	r3, [r4, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d11d      	bne.n	8008dc0 <_vfiprintf_r+0x7c>
 8008d84:	0021      	movs	r1, r4
 8008d86:	0030      	movs	r0, r6
 8008d88:	f7ff fc1c 	bl	80085c4 <__swsetup_r>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d017      	beq.n	8008dc0 <_vfiprintf_r+0x7c>
 8008d90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d92:	07db      	lsls	r3, r3, #31
 8008d94:	d50d      	bpl.n	8008db2 <_vfiprintf_r+0x6e>
 8008d96:	2001      	movs	r0, #1
 8008d98:	4240      	negs	r0, r0
 8008d9a:	b021      	add	sp, #132	; 0x84
 8008d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d9e:	4b7f      	ldr	r3, [pc, #508]	; (8008f9c <_vfiprintf_r+0x258>)
 8008da0:	429c      	cmp	r4, r3
 8008da2:	d101      	bne.n	8008da8 <_vfiprintf_r+0x64>
 8008da4:	68b4      	ldr	r4, [r6, #8]
 8008da6:	e7de      	b.n	8008d66 <_vfiprintf_r+0x22>
 8008da8:	4b7d      	ldr	r3, [pc, #500]	; (8008fa0 <_vfiprintf_r+0x25c>)
 8008daa:	429c      	cmp	r4, r3
 8008dac:	d1db      	bne.n	8008d66 <_vfiprintf_r+0x22>
 8008dae:	68f4      	ldr	r4, [r6, #12]
 8008db0:	e7d9      	b.n	8008d66 <_vfiprintf_r+0x22>
 8008db2:	89a3      	ldrh	r3, [r4, #12]
 8008db4:	059b      	lsls	r3, r3, #22
 8008db6:	d4ee      	bmi.n	8008d96 <_vfiprintf_r+0x52>
 8008db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dba:	f7ff fe4b 	bl	8008a54 <__retarget_lock_release_recursive>
 8008dbe:	e7ea      	b.n	8008d96 <_vfiprintf_r+0x52>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	ad08      	add	r5, sp, #32
 8008dc4:	616b      	str	r3, [r5, #20]
 8008dc6:	3320      	adds	r3, #32
 8008dc8:	766b      	strb	r3, [r5, #25]
 8008dca:	3310      	adds	r3, #16
 8008dcc:	76ab      	strb	r3, [r5, #26]
 8008dce:	9707      	str	r7, [sp, #28]
 8008dd0:	9f03      	ldr	r7, [sp, #12]
 8008dd2:	783b      	ldrb	r3, [r7, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d001      	beq.n	8008ddc <_vfiprintf_r+0x98>
 8008dd8:	2b25      	cmp	r3, #37	; 0x25
 8008dda:	d14e      	bne.n	8008e7a <_vfiprintf_r+0x136>
 8008ddc:	9b03      	ldr	r3, [sp, #12]
 8008dde:	1afb      	subs	r3, r7, r3
 8008de0:	9305      	str	r3, [sp, #20]
 8008de2:	9b03      	ldr	r3, [sp, #12]
 8008de4:	429f      	cmp	r7, r3
 8008de6:	d00d      	beq.n	8008e04 <_vfiprintf_r+0xc0>
 8008de8:	9b05      	ldr	r3, [sp, #20]
 8008dea:	0021      	movs	r1, r4
 8008dec:	0030      	movs	r0, r6
 8008dee:	9a03      	ldr	r2, [sp, #12]
 8008df0:	f7ff ff95 	bl	8008d1e <__sfputs_r>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d100      	bne.n	8008dfa <_vfiprintf_r+0xb6>
 8008df8:	e0b5      	b.n	8008f66 <_vfiprintf_r+0x222>
 8008dfa:	696a      	ldr	r2, [r5, #20]
 8008dfc:	9b05      	ldr	r3, [sp, #20]
 8008dfe:	4694      	mov	ip, r2
 8008e00:	4463      	add	r3, ip
 8008e02:	616b      	str	r3, [r5, #20]
 8008e04:	783b      	ldrb	r3, [r7, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d100      	bne.n	8008e0c <_vfiprintf_r+0xc8>
 8008e0a:	e0ac      	b.n	8008f66 <_vfiprintf_r+0x222>
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	1c7b      	adds	r3, r7, #1
 8008e10:	9303      	str	r3, [sp, #12]
 8008e12:	2300      	movs	r3, #0
 8008e14:	4252      	negs	r2, r2
 8008e16:	606a      	str	r2, [r5, #4]
 8008e18:	a904      	add	r1, sp, #16
 8008e1a:	3254      	adds	r2, #84	; 0x54
 8008e1c:	1852      	adds	r2, r2, r1
 8008e1e:	602b      	str	r3, [r5, #0]
 8008e20:	60eb      	str	r3, [r5, #12]
 8008e22:	60ab      	str	r3, [r5, #8]
 8008e24:	7013      	strb	r3, [r2, #0]
 8008e26:	65ab      	str	r3, [r5, #88]	; 0x58
 8008e28:	9b03      	ldr	r3, [sp, #12]
 8008e2a:	2205      	movs	r2, #5
 8008e2c:	7819      	ldrb	r1, [r3, #0]
 8008e2e:	485d      	ldr	r0, [pc, #372]	; (8008fa4 <_vfiprintf_r+0x260>)
 8008e30:	f000 fb00 	bl	8009434 <memchr>
 8008e34:	9b03      	ldr	r3, [sp, #12]
 8008e36:	1c5f      	adds	r7, r3, #1
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d120      	bne.n	8008e7e <_vfiprintf_r+0x13a>
 8008e3c:	682a      	ldr	r2, [r5, #0]
 8008e3e:	06d3      	lsls	r3, r2, #27
 8008e40:	d504      	bpl.n	8008e4c <_vfiprintf_r+0x108>
 8008e42:	2353      	movs	r3, #83	; 0x53
 8008e44:	a904      	add	r1, sp, #16
 8008e46:	185b      	adds	r3, r3, r1
 8008e48:	2120      	movs	r1, #32
 8008e4a:	7019      	strb	r1, [r3, #0]
 8008e4c:	0713      	lsls	r3, r2, #28
 8008e4e:	d504      	bpl.n	8008e5a <_vfiprintf_r+0x116>
 8008e50:	2353      	movs	r3, #83	; 0x53
 8008e52:	a904      	add	r1, sp, #16
 8008e54:	185b      	adds	r3, r3, r1
 8008e56:	212b      	movs	r1, #43	; 0x2b
 8008e58:	7019      	strb	r1, [r3, #0]
 8008e5a:	9b03      	ldr	r3, [sp, #12]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e60:	d016      	beq.n	8008e90 <_vfiprintf_r+0x14c>
 8008e62:	2100      	movs	r1, #0
 8008e64:	68eb      	ldr	r3, [r5, #12]
 8008e66:	9f03      	ldr	r7, [sp, #12]
 8008e68:	783a      	ldrb	r2, [r7, #0]
 8008e6a:	1c78      	adds	r0, r7, #1
 8008e6c:	3a30      	subs	r2, #48	; 0x30
 8008e6e:	4684      	mov	ip, r0
 8008e70:	2a09      	cmp	r2, #9
 8008e72:	d94f      	bls.n	8008f14 <_vfiprintf_r+0x1d0>
 8008e74:	2900      	cmp	r1, #0
 8008e76:	d111      	bne.n	8008e9c <_vfiprintf_r+0x158>
 8008e78:	e017      	b.n	8008eaa <_vfiprintf_r+0x166>
 8008e7a:	3701      	adds	r7, #1
 8008e7c:	e7a9      	b.n	8008dd2 <_vfiprintf_r+0x8e>
 8008e7e:	4b49      	ldr	r3, [pc, #292]	; (8008fa4 <_vfiprintf_r+0x260>)
 8008e80:	682a      	ldr	r2, [r5, #0]
 8008e82:	1ac0      	subs	r0, r0, r3
 8008e84:	2301      	movs	r3, #1
 8008e86:	4083      	lsls	r3, r0
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	602b      	str	r3, [r5, #0]
 8008e8c:	9703      	str	r7, [sp, #12]
 8008e8e:	e7cb      	b.n	8008e28 <_vfiprintf_r+0xe4>
 8008e90:	9b07      	ldr	r3, [sp, #28]
 8008e92:	1d19      	adds	r1, r3, #4
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	9107      	str	r1, [sp, #28]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	db01      	blt.n	8008ea0 <_vfiprintf_r+0x15c>
 8008e9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e9e:	e004      	b.n	8008eaa <_vfiprintf_r+0x166>
 8008ea0:	425b      	negs	r3, r3
 8008ea2:	60eb      	str	r3, [r5, #12]
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	602b      	str	r3, [r5, #0]
 8008eaa:	783b      	ldrb	r3, [r7, #0]
 8008eac:	2b2e      	cmp	r3, #46	; 0x2e
 8008eae:	d10a      	bne.n	8008ec6 <_vfiprintf_r+0x182>
 8008eb0:	787b      	ldrb	r3, [r7, #1]
 8008eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8008eb4:	d137      	bne.n	8008f26 <_vfiprintf_r+0x1e2>
 8008eb6:	9b07      	ldr	r3, [sp, #28]
 8008eb8:	3702      	adds	r7, #2
 8008eba:	1d1a      	adds	r2, r3, #4
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	9207      	str	r2, [sp, #28]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	db2d      	blt.n	8008f20 <_vfiprintf_r+0x1dc>
 8008ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec6:	2203      	movs	r2, #3
 8008ec8:	7839      	ldrb	r1, [r7, #0]
 8008eca:	4837      	ldr	r0, [pc, #220]	; (8008fa8 <_vfiprintf_r+0x264>)
 8008ecc:	f000 fab2 	bl	8009434 <memchr>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d007      	beq.n	8008ee4 <_vfiprintf_r+0x1a0>
 8008ed4:	4b34      	ldr	r3, [pc, #208]	; (8008fa8 <_vfiprintf_r+0x264>)
 8008ed6:	682a      	ldr	r2, [r5, #0]
 8008ed8:	1ac0      	subs	r0, r0, r3
 8008eda:	2340      	movs	r3, #64	; 0x40
 8008edc:	4083      	lsls	r3, r0
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	3701      	adds	r7, #1
 8008ee2:	602b      	str	r3, [r5, #0]
 8008ee4:	7839      	ldrb	r1, [r7, #0]
 8008ee6:	1c7b      	adds	r3, r7, #1
 8008ee8:	2206      	movs	r2, #6
 8008eea:	4830      	ldr	r0, [pc, #192]	; (8008fac <_vfiprintf_r+0x268>)
 8008eec:	9303      	str	r3, [sp, #12]
 8008eee:	7629      	strb	r1, [r5, #24]
 8008ef0:	f000 faa0 	bl	8009434 <memchr>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d045      	beq.n	8008f84 <_vfiprintf_r+0x240>
 8008ef8:	4b2d      	ldr	r3, [pc, #180]	; (8008fb0 <_vfiprintf_r+0x26c>)
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d127      	bne.n	8008f4e <_vfiprintf_r+0x20a>
 8008efe:	2207      	movs	r2, #7
 8008f00:	9b07      	ldr	r3, [sp, #28]
 8008f02:	3307      	adds	r3, #7
 8008f04:	4393      	bics	r3, r2
 8008f06:	3308      	adds	r3, #8
 8008f08:	9307      	str	r3, [sp, #28]
 8008f0a:	696b      	ldr	r3, [r5, #20]
 8008f0c:	9a04      	ldr	r2, [sp, #16]
 8008f0e:	189b      	adds	r3, r3, r2
 8008f10:	616b      	str	r3, [r5, #20]
 8008f12:	e75d      	b.n	8008dd0 <_vfiprintf_r+0x8c>
 8008f14:	210a      	movs	r1, #10
 8008f16:	434b      	muls	r3, r1
 8008f18:	4667      	mov	r7, ip
 8008f1a:	189b      	adds	r3, r3, r2
 8008f1c:	3909      	subs	r1, #9
 8008f1e:	e7a3      	b.n	8008e68 <_vfiprintf_r+0x124>
 8008f20:	2301      	movs	r3, #1
 8008f22:	425b      	negs	r3, r3
 8008f24:	e7ce      	b.n	8008ec4 <_vfiprintf_r+0x180>
 8008f26:	2300      	movs	r3, #0
 8008f28:	001a      	movs	r2, r3
 8008f2a:	3701      	adds	r7, #1
 8008f2c:	606b      	str	r3, [r5, #4]
 8008f2e:	7839      	ldrb	r1, [r7, #0]
 8008f30:	1c78      	adds	r0, r7, #1
 8008f32:	3930      	subs	r1, #48	; 0x30
 8008f34:	4684      	mov	ip, r0
 8008f36:	2909      	cmp	r1, #9
 8008f38:	d903      	bls.n	8008f42 <_vfiprintf_r+0x1fe>
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0c3      	beq.n	8008ec6 <_vfiprintf_r+0x182>
 8008f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f40:	e7c1      	b.n	8008ec6 <_vfiprintf_r+0x182>
 8008f42:	230a      	movs	r3, #10
 8008f44:	435a      	muls	r2, r3
 8008f46:	4667      	mov	r7, ip
 8008f48:	1852      	adds	r2, r2, r1
 8008f4a:	3b09      	subs	r3, #9
 8008f4c:	e7ef      	b.n	8008f2e <_vfiprintf_r+0x1ea>
 8008f4e:	ab07      	add	r3, sp, #28
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	0022      	movs	r2, r4
 8008f54:	0029      	movs	r1, r5
 8008f56:	0030      	movs	r0, r6
 8008f58:	4b16      	ldr	r3, [pc, #88]	; (8008fb4 <_vfiprintf_r+0x270>)
 8008f5a:	e000      	b.n	8008f5e <_vfiprintf_r+0x21a>
 8008f5c:	bf00      	nop
 8008f5e:	9004      	str	r0, [sp, #16]
 8008f60:	9b04      	ldr	r3, [sp, #16]
 8008f62:	3301      	adds	r3, #1
 8008f64:	d1d1      	bne.n	8008f0a <_vfiprintf_r+0x1c6>
 8008f66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f68:	07db      	lsls	r3, r3, #31
 8008f6a:	d405      	bmi.n	8008f78 <_vfiprintf_r+0x234>
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	059b      	lsls	r3, r3, #22
 8008f70:	d402      	bmi.n	8008f78 <_vfiprintf_r+0x234>
 8008f72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f74:	f7ff fd6e 	bl	8008a54 <__retarget_lock_release_recursive>
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	065b      	lsls	r3, r3, #25
 8008f7c:	d500      	bpl.n	8008f80 <_vfiprintf_r+0x23c>
 8008f7e:	e70a      	b.n	8008d96 <_vfiprintf_r+0x52>
 8008f80:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008f82:	e70a      	b.n	8008d9a <_vfiprintf_r+0x56>
 8008f84:	ab07      	add	r3, sp, #28
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	0022      	movs	r2, r4
 8008f8a:	0029      	movs	r1, r5
 8008f8c:	0030      	movs	r0, r6
 8008f8e:	4b09      	ldr	r3, [pc, #36]	; (8008fb4 <_vfiprintf_r+0x270>)
 8008f90:	f000 f882 	bl	8009098 <_printf_i>
 8008f94:	e7e3      	b.n	8008f5e <_vfiprintf_r+0x21a>
 8008f96:	46c0      	nop			; (mov r8, r8)
 8008f98:	08009e4c 	.word	0x08009e4c
 8008f9c:	08009e6c 	.word	0x08009e6c
 8008fa0:	08009e2c 	.word	0x08009e2c
 8008fa4:	08009e8c 	.word	0x08009e8c
 8008fa8:	08009e92 	.word	0x08009e92
 8008fac:	08009e96 	.word	0x08009e96
 8008fb0:	00000000 	.word	0x00000000
 8008fb4:	08008d1f 	.word	0x08008d1f

08008fb8 <_printf_common>:
 8008fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fba:	0015      	movs	r5, r2
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	688a      	ldr	r2, [r1, #8]
 8008fc0:	690b      	ldr	r3, [r1, #16]
 8008fc2:	000c      	movs	r4, r1
 8008fc4:	9000      	str	r0, [sp, #0]
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	da00      	bge.n	8008fcc <_printf_common+0x14>
 8008fca:	0013      	movs	r3, r2
 8008fcc:	0022      	movs	r2, r4
 8008fce:	602b      	str	r3, [r5, #0]
 8008fd0:	3243      	adds	r2, #67	; 0x43
 8008fd2:	7812      	ldrb	r2, [r2, #0]
 8008fd4:	2a00      	cmp	r2, #0
 8008fd6:	d001      	beq.n	8008fdc <_printf_common+0x24>
 8008fd8:	3301      	adds	r3, #1
 8008fda:	602b      	str	r3, [r5, #0]
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	069b      	lsls	r3, r3, #26
 8008fe0:	d502      	bpl.n	8008fe8 <_printf_common+0x30>
 8008fe2:	682b      	ldr	r3, [r5, #0]
 8008fe4:	3302      	adds	r3, #2
 8008fe6:	602b      	str	r3, [r5, #0]
 8008fe8:	6822      	ldr	r2, [r4, #0]
 8008fea:	2306      	movs	r3, #6
 8008fec:	0017      	movs	r7, r2
 8008fee:	401f      	ands	r7, r3
 8008ff0:	421a      	tst	r2, r3
 8008ff2:	d027      	beq.n	8009044 <_printf_common+0x8c>
 8008ff4:	0023      	movs	r3, r4
 8008ff6:	3343      	adds	r3, #67	; 0x43
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	1e5a      	subs	r2, r3, #1
 8008ffc:	4193      	sbcs	r3, r2
 8008ffe:	6822      	ldr	r2, [r4, #0]
 8009000:	0692      	lsls	r2, r2, #26
 8009002:	d430      	bmi.n	8009066 <_printf_common+0xae>
 8009004:	0022      	movs	r2, r4
 8009006:	9901      	ldr	r1, [sp, #4]
 8009008:	9800      	ldr	r0, [sp, #0]
 800900a:	9e08      	ldr	r6, [sp, #32]
 800900c:	3243      	adds	r2, #67	; 0x43
 800900e:	47b0      	blx	r6
 8009010:	1c43      	adds	r3, r0, #1
 8009012:	d025      	beq.n	8009060 <_printf_common+0xa8>
 8009014:	2306      	movs	r3, #6
 8009016:	6820      	ldr	r0, [r4, #0]
 8009018:	682a      	ldr	r2, [r5, #0]
 800901a:	68e1      	ldr	r1, [r4, #12]
 800901c:	2500      	movs	r5, #0
 800901e:	4003      	ands	r3, r0
 8009020:	2b04      	cmp	r3, #4
 8009022:	d103      	bne.n	800902c <_printf_common+0x74>
 8009024:	1a8d      	subs	r5, r1, r2
 8009026:	43eb      	mvns	r3, r5
 8009028:	17db      	asrs	r3, r3, #31
 800902a:	401d      	ands	r5, r3
 800902c:	68a3      	ldr	r3, [r4, #8]
 800902e:	6922      	ldr	r2, [r4, #16]
 8009030:	4293      	cmp	r3, r2
 8009032:	dd01      	ble.n	8009038 <_printf_common+0x80>
 8009034:	1a9b      	subs	r3, r3, r2
 8009036:	18ed      	adds	r5, r5, r3
 8009038:	2700      	movs	r7, #0
 800903a:	42bd      	cmp	r5, r7
 800903c:	d120      	bne.n	8009080 <_printf_common+0xc8>
 800903e:	2000      	movs	r0, #0
 8009040:	e010      	b.n	8009064 <_printf_common+0xac>
 8009042:	3701      	adds	r7, #1
 8009044:	68e3      	ldr	r3, [r4, #12]
 8009046:	682a      	ldr	r2, [r5, #0]
 8009048:	1a9b      	subs	r3, r3, r2
 800904a:	42bb      	cmp	r3, r7
 800904c:	ddd2      	ble.n	8008ff4 <_printf_common+0x3c>
 800904e:	0022      	movs	r2, r4
 8009050:	2301      	movs	r3, #1
 8009052:	9901      	ldr	r1, [sp, #4]
 8009054:	9800      	ldr	r0, [sp, #0]
 8009056:	9e08      	ldr	r6, [sp, #32]
 8009058:	3219      	adds	r2, #25
 800905a:	47b0      	blx	r6
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d1f0      	bne.n	8009042 <_printf_common+0x8a>
 8009060:	2001      	movs	r0, #1
 8009062:	4240      	negs	r0, r0
 8009064:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009066:	2030      	movs	r0, #48	; 0x30
 8009068:	18e1      	adds	r1, r4, r3
 800906a:	3143      	adds	r1, #67	; 0x43
 800906c:	7008      	strb	r0, [r1, #0]
 800906e:	0021      	movs	r1, r4
 8009070:	1c5a      	adds	r2, r3, #1
 8009072:	3145      	adds	r1, #69	; 0x45
 8009074:	7809      	ldrb	r1, [r1, #0]
 8009076:	18a2      	adds	r2, r4, r2
 8009078:	3243      	adds	r2, #67	; 0x43
 800907a:	3302      	adds	r3, #2
 800907c:	7011      	strb	r1, [r2, #0]
 800907e:	e7c1      	b.n	8009004 <_printf_common+0x4c>
 8009080:	0022      	movs	r2, r4
 8009082:	2301      	movs	r3, #1
 8009084:	9901      	ldr	r1, [sp, #4]
 8009086:	9800      	ldr	r0, [sp, #0]
 8009088:	9e08      	ldr	r6, [sp, #32]
 800908a:	321a      	adds	r2, #26
 800908c:	47b0      	blx	r6
 800908e:	1c43      	adds	r3, r0, #1
 8009090:	d0e6      	beq.n	8009060 <_printf_common+0xa8>
 8009092:	3701      	adds	r7, #1
 8009094:	e7d1      	b.n	800903a <_printf_common+0x82>
	...

08009098 <_printf_i>:
 8009098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800909a:	b08b      	sub	sp, #44	; 0x2c
 800909c:	9206      	str	r2, [sp, #24]
 800909e:	000a      	movs	r2, r1
 80090a0:	3243      	adds	r2, #67	; 0x43
 80090a2:	9307      	str	r3, [sp, #28]
 80090a4:	9005      	str	r0, [sp, #20]
 80090a6:	9204      	str	r2, [sp, #16]
 80090a8:	7e0a      	ldrb	r2, [r1, #24]
 80090aa:	000c      	movs	r4, r1
 80090ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090ae:	2a78      	cmp	r2, #120	; 0x78
 80090b0:	d807      	bhi.n	80090c2 <_printf_i+0x2a>
 80090b2:	2a62      	cmp	r2, #98	; 0x62
 80090b4:	d809      	bhi.n	80090ca <_printf_i+0x32>
 80090b6:	2a00      	cmp	r2, #0
 80090b8:	d100      	bne.n	80090bc <_printf_i+0x24>
 80090ba:	e0c1      	b.n	8009240 <_printf_i+0x1a8>
 80090bc:	2a58      	cmp	r2, #88	; 0x58
 80090be:	d100      	bne.n	80090c2 <_printf_i+0x2a>
 80090c0:	e08c      	b.n	80091dc <_printf_i+0x144>
 80090c2:	0026      	movs	r6, r4
 80090c4:	3642      	adds	r6, #66	; 0x42
 80090c6:	7032      	strb	r2, [r6, #0]
 80090c8:	e022      	b.n	8009110 <_printf_i+0x78>
 80090ca:	0010      	movs	r0, r2
 80090cc:	3863      	subs	r0, #99	; 0x63
 80090ce:	2815      	cmp	r0, #21
 80090d0:	d8f7      	bhi.n	80090c2 <_printf_i+0x2a>
 80090d2:	f7fb faf3 	bl	80046bc <__gnu_thumb1_case_shi>
 80090d6:	0016      	.short	0x0016
 80090d8:	fff6001f 	.word	0xfff6001f
 80090dc:	fff6fff6 	.word	0xfff6fff6
 80090e0:	001ffff6 	.word	0x001ffff6
 80090e4:	fff6fff6 	.word	0xfff6fff6
 80090e8:	fff6fff6 	.word	0xfff6fff6
 80090ec:	003600a8 	.word	0x003600a8
 80090f0:	fff6009a 	.word	0xfff6009a
 80090f4:	00b9fff6 	.word	0x00b9fff6
 80090f8:	0036fff6 	.word	0x0036fff6
 80090fc:	fff6fff6 	.word	0xfff6fff6
 8009100:	009e      	.short	0x009e
 8009102:	0026      	movs	r6, r4
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	3642      	adds	r6, #66	; 0x42
 8009108:	1d11      	adds	r1, r2, #4
 800910a:	6019      	str	r1, [r3, #0]
 800910c:	6813      	ldr	r3, [r2, #0]
 800910e:	7033      	strb	r3, [r6, #0]
 8009110:	2301      	movs	r3, #1
 8009112:	e0a7      	b.n	8009264 <_printf_i+0x1cc>
 8009114:	6808      	ldr	r0, [r1, #0]
 8009116:	6819      	ldr	r1, [r3, #0]
 8009118:	1d0a      	adds	r2, r1, #4
 800911a:	0605      	lsls	r5, r0, #24
 800911c:	d50b      	bpl.n	8009136 <_printf_i+0x9e>
 800911e:	680d      	ldr	r5, [r1, #0]
 8009120:	601a      	str	r2, [r3, #0]
 8009122:	2d00      	cmp	r5, #0
 8009124:	da03      	bge.n	800912e <_printf_i+0x96>
 8009126:	232d      	movs	r3, #45	; 0x2d
 8009128:	9a04      	ldr	r2, [sp, #16]
 800912a:	426d      	negs	r5, r5
 800912c:	7013      	strb	r3, [r2, #0]
 800912e:	4b61      	ldr	r3, [pc, #388]	; (80092b4 <_printf_i+0x21c>)
 8009130:	270a      	movs	r7, #10
 8009132:	9303      	str	r3, [sp, #12]
 8009134:	e01b      	b.n	800916e <_printf_i+0xd6>
 8009136:	680d      	ldr	r5, [r1, #0]
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	0641      	lsls	r1, r0, #25
 800913c:	d5f1      	bpl.n	8009122 <_printf_i+0x8a>
 800913e:	b22d      	sxth	r5, r5
 8009140:	e7ef      	b.n	8009122 <_printf_i+0x8a>
 8009142:	680d      	ldr	r5, [r1, #0]
 8009144:	6819      	ldr	r1, [r3, #0]
 8009146:	1d08      	adds	r0, r1, #4
 8009148:	6018      	str	r0, [r3, #0]
 800914a:	062e      	lsls	r6, r5, #24
 800914c:	d501      	bpl.n	8009152 <_printf_i+0xba>
 800914e:	680d      	ldr	r5, [r1, #0]
 8009150:	e003      	b.n	800915a <_printf_i+0xc2>
 8009152:	066d      	lsls	r5, r5, #25
 8009154:	d5fb      	bpl.n	800914e <_printf_i+0xb6>
 8009156:	680d      	ldr	r5, [r1, #0]
 8009158:	b2ad      	uxth	r5, r5
 800915a:	4b56      	ldr	r3, [pc, #344]	; (80092b4 <_printf_i+0x21c>)
 800915c:	2708      	movs	r7, #8
 800915e:	9303      	str	r3, [sp, #12]
 8009160:	2a6f      	cmp	r2, #111	; 0x6f
 8009162:	d000      	beq.n	8009166 <_printf_i+0xce>
 8009164:	3702      	adds	r7, #2
 8009166:	0023      	movs	r3, r4
 8009168:	2200      	movs	r2, #0
 800916a:	3343      	adds	r3, #67	; 0x43
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	6863      	ldr	r3, [r4, #4]
 8009170:	60a3      	str	r3, [r4, #8]
 8009172:	2b00      	cmp	r3, #0
 8009174:	db03      	blt.n	800917e <_printf_i+0xe6>
 8009176:	2204      	movs	r2, #4
 8009178:	6821      	ldr	r1, [r4, #0]
 800917a:	4391      	bics	r1, r2
 800917c:	6021      	str	r1, [r4, #0]
 800917e:	2d00      	cmp	r5, #0
 8009180:	d102      	bne.n	8009188 <_printf_i+0xf0>
 8009182:	9e04      	ldr	r6, [sp, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00c      	beq.n	80091a2 <_printf_i+0x10a>
 8009188:	9e04      	ldr	r6, [sp, #16]
 800918a:	0028      	movs	r0, r5
 800918c:	0039      	movs	r1, r7
 800918e:	f7fb fb25 	bl	80047dc <__aeabi_uidivmod>
 8009192:	9b03      	ldr	r3, [sp, #12]
 8009194:	3e01      	subs	r6, #1
 8009196:	5c5b      	ldrb	r3, [r3, r1]
 8009198:	7033      	strb	r3, [r6, #0]
 800919a:	002b      	movs	r3, r5
 800919c:	0005      	movs	r5, r0
 800919e:	429f      	cmp	r7, r3
 80091a0:	d9f3      	bls.n	800918a <_printf_i+0xf2>
 80091a2:	2f08      	cmp	r7, #8
 80091a4:	d109      	bne.n	80091ba <_printf_i+0x122>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	07db      	lsls	r3, r3, #31
 80091aa:	d506      	bpl.n	80091ba <_printf_i+0x122>
 80091ac:	6863      	ldr	r3, [r4, #4]
 80091ae:	6922      	ldr	r2, [r4, #16]
 80091b0:	4293      	cmp	r3, r2
 80091b2:	dc02      	bgt.n	80091ba <_printf_i+0x122>
 80091b4:	2330      	movs	r3, #48	; 0x30
 80091b6:	3e01      	subs	r6, #1
 80091b8:	7033      	strb	r3, [r6, #0]
 80091ba:	9b04      	ldr	r3, [sp, #16]
 80091bc:	1b9b      	subs	r3, r3, r6
 80091be:	6123      	str	r3, [r4, #16]
 80091c0:	9b07      	ldr	r3, [sp, #28]
 80091c2:	0021      	movs	r1, r4
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	9805      	ldr	r0, [sp, #20]
 80091c8:	9b06      	ldr	r3, [sp, #24]
 80091ca:	aa09      	add	r2, sp, #36	; 0x24
 80091cc:	f7ff fef4 	bl	8008fb8 <_printf_common>
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d14c      	bne.n	800926e <_printf_i+0x1d6>
 80091d4:	2001      	movs	r0, #1
 80091d6:	4240      	negs	r0, r0
 80091d8:	b00b      	add	sp, #44	; 0x2c
 80091da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091dc:	3145      	adds	r1, #69	; 0x45
 80091de:	700a      	strb	r2, [r1, #0]
 80091e0:	4a34      	ldr	r2, [pc, #208]	; (80092b4 <_printf_i+0x21c>)
 80091e2:	9203      	str	r2, [sp, #12]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	6821      	ldr	r1, [r4, #0]
 80091e8:	ca20      	ldmia	r2!, {r5}
 80091ea:	601a      	str	r2, [r3, #0]
 80091ec:	0608      	lsls	r0, r1, #24
 80091ee:	d516      	bpl.n	800921e <_printf_i+0x186>
 80091f0:	07cb      	lsls	r3, r1, #31
 80091f2:	d502      	bpl.n	80091fa <_printf_i+0x162>
 80091f4:	2320      	movs	r3, #32
 80091f6:	4319      	orrs	r1, r3
 80091f8:	6021      	str	r1, [r4, #0]
 80091fa:	2710      	movs	r7, #16
 80091fc:	2d00      	cmp	r5, #0
 80091fe:	d1b2      	bne.n	8009166 <_printf_i+0xce>
 8009200:	2320      	movs	r3, #32
 8009202:	6822      	ldr	r2, [r4, #0]
 8009204:	439a      	bics	r2, r3
 8009206:	6022      	str	r2, [r4, #0]
 8009208:	e7ad      	b.n	8009166 <_printf_i+0xce>
 800920a:	2220      	movs	r2, #32
 800920c:	6809      	ldr	r1, [r1, #0]
 800920e:	430a      	orrs	r2, r1
 8009210:	6022      	str	r2, [r4, #0]
 8009212:	0022      	movs	r2, r4
 8009214:	2178      	movs	r1, #120	; 0x78
 8009216:	3245      	adds	r2, #69	; 0x45
 8009218:	7011      	strb	r1, [r2, #0]
 800921a:	4a27      	ldr	r2, [pc, #156]	; (80092b8 <_printf_i+0x220>)
 800921c:	e7e1      	b.n	80091e2 <_printf_i+0x14a>
 800921e:	0648      	lsls	r0, r1, #25
 8009220:	d5e6      	bpl.n	80091f0 <_printf_i+0x158>
 8009222:	b2ad      	uxth	r5, r5
 8009224:	e7e4      	b.n	80091f0 <_printf_i+0x158>
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	680d      	ldr	r5, [r1, #0]
 800922a:	1d10      	adds	r0, r2, #4
 800922c:	6949      	ldr	r1, [r1, #20]
 800922e:	6018      	str	r0, [r3, #0]
 8009230:	6813      	ldr	r3, [r2, #0]
 8009232:	062e      	lsls	r6, r5, #24
 8009234:	d501      	bpl.n	800923a <_printf_i+0x1a2>
 8009236:	6019      	str	r1, [r3, #0]
 8009238:	e002      	b.n	8009240 <_printf_i+0x1a8>
 800923a:	066d      	lsls	r5, r5, #25
 800923c:	d5fb      	bpl.n	8009236 <_printf_i+0x19e>
 800923e:	8019      	strh	r1, [r3, #0]
 8009240:	2300      	movs	r3, #0
 8009242:	9e04      	ldr	r6, [sp, #16]
 8009244:	6123      	str	r3, [r4, #16]
 8009246:	e7bb      	b.n	80091c0 <_printf_i+0x128>
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	1d11      	adds	r1, r2, #4
 800924c:	6019      	str	r1, [r3, #0]
 800924e:	6816      	ldr	r6, [r2, #0]
 8009250:	2100      	movs	r1, #0
 8009252:	0030      	movs	r0, r6
 8009254:	6862      	ldr	r2, [r4, #4]
 8009256:	f000 f8ed 	bl	8009434 <memchr>
 800925a:	2800      	cmp	r0, #0
 800925c:	d001      	beq.n	8009262 <_printf_i+0x1ca>
 800925e:	1b80      	subs	r0, r0, r6
 8009260:	6060      	str	r0, [r4, #4]
 8009262:	6863      	ldr	r3, [r4, #4]
 8009264:	6123      	str	r3, [r4, #16]
 8009266:	2300      	movs	r3, #0
 8009268:	9a04      	ldr	r2, [sp, #16]
 800926a:	7013      	strb	r3, [r2, #0]
 800926c:	e7a8      	b.n	80091c0 <_printf_i+0x128>
 800926e:	6923      	ldr	r3, [r4, #16]
 8009270:	0032      	movs	r2, r6
 8009272:	9906      	ldr	r1, [sp, #24]
 8009274:	9805      	ldr	r0, [sp, #20]
 8009276:	9d07      	ldr	r5, [sp, #28]
 8009278:	47a8      	blx	r5
 800927a:	1c43      	adds	r3, r0, #1
 800927c:	d0aa      	beq.n	80091d4 <_printf_i+0x13c>
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	079b      	lsls	r3, r3, #30
 8009282:	d415      	bmi.n	80092b0 <_printf_i+0x218>
 8009284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009286:	68e0      	ldr	r0, [r4, #12]
 8009288:	4298      	cmp	r0, r3
 800928a:	daa5      	bge.n	80091d8 <_printf_i+0x140>
 800928c:	0018      	movs	r0, r3
 800928e:	e7a3      	b.n	80091d8 <_printf_i+0x140>
 8009290:	0022      	movs	r2, r4
 8009292:	2301      	movs	r3, #1
 8009294:	9906      	ldr	r1, [sp, #24]
 8009296:	9805      	ldr	r0, [sp, #20]
 8009298:	9e07      	ldr	r6, [sp, #28]
 800929a:	3219      	adds	r2, #25
 800929c:	47b0      	blx	r6
 800929e:	1c43      	adds	r3, r0, #1
 80092a0:	d098      	beq.n	80091d4 <_printf_i+0x13c>
 80092a2:	3501      	adds	r5, #1
 80092a4:	68e3      	ldr	r3, [r4, #12]
 80092a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092a8:	1a9b      	subs	r3, r3, r2
 80092aa:	42ab      	cmp	r3, r5
 80092ac:	dcf0      	bgt.n	8009290 <_printf_i+0x1f8>
 80092ae:	e7e9      	b.n	8009284 <_printf_i+0x1ec>
 80092b0:	2500      	movs	r5, #0
 80092b2:	e7f7      	b.n	80092a4 <_printf_i+0x20c>
 80092b4:	08009e9d 	.word	0x08009e9d
 80092b8:	08009eae 	.word	0x08009eae

080092bc <_sbrk_r>:
 80092bc:	2300      	movs	r3, #0
 80092be:	b570      	push	{r4, r5, r6, lr}
 80092c0:	4d06      	ldr	r5, [pc, #24]	; (80092dc <_sbrk_r+0x20>)
 80092c2:	0004      	movs	r4, r0
 80092c4:	0008      	movs	r0, r1
 80092c6:	602b      	str	r3, [r5, #0]
 80092c8:	f7fc fa8e 	bl	80057e8 <_sbrk>
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	d103      	bne.n	80092d8 <_sbrk_r+0x1c>
 80092d0:	682b      	ldr	r3, [r5, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d000      	beq.n	80092d8 <_sbrk_r+0x1c>
 80092d6:	6023      	str	r3, [r4, #0]
 80092d8:	bd70      	pop	{r4, r5, r6, pc}
 80092da:	46c0      	nop			; (mov r8, r8)
 80092dc:	2000097c 	.word	0x2000097c

080092e0 <__sread>:
 80092e0:	b570      	push	{r4, r5, r6, lr}
 80092e2:	000c      	movs	r4, r1
 80092e4:	250e      	movs	r5, #14
 80092e6:	5f49      	ldrsh	r1, [r1, r5]
 80092e8:	f000 f8c0 	bl	800946c <_read_r>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	db03      	blt.n	80092f8 <__sread+0x18>
 80092f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80092f2:	181b      	adds	r3, r3, r0
 80092f4:	6563      	str	r3, [r4, #84]	; 0x54
 80092f6:	bd70      	pop	{r4, r5, r6, pc}
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	4a02      	ldr	r2, [pc, #8]	; (8009304 <__sread+0x24>)
 80092fc:	4013      	ands	r3, r2
 80092fe:	81a3      	strh	r3, [r4, #12]
 8009300:	e7f9      	b.n	80092f6 <__sread+0x16>
 8009302:	46c0      	nop			; (mov r8, r8)
 8009304:	ffffefff 	.word	0xffffefff

08009308 <__swrite>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	001f      	movs	r7, r3
 800930c:	898b      	ldrh	r3, [r1, #12]
 800930e:	0005      	movs	r5, r0
 8009310:	000c      	movs	r4, r1
 8009312:	0016      	movs	r6, r2
 8009314:	05db      	lsls	r3, r3, #23
 8009316:	d505      	bpl.n	8009324 <__swrite+0x1c>
 8009318:	230e      	movs	r3, #14
 800931a:	5ec9      	ldrsh	r1, [r1, r3]
 800931c:	2200      	movs	r2, #0
 800931e:	2302      	movs	r3, #2
 8009320:	f000 f874 	bl	800940c <_lseek_r>
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	4a05      	ldr	r2, [pc, #20]	; (800933c <__swrite+0x34>)
 8009328:	0028      	movs	r0, r5
 800932a:	4013      	ands	r3, r2
 800932c:	81a3      	strh	r3, [r4, #12]
 800932e:	0032      	movs	r2, r6
 8009330:	230e      	movs	r3, #14
 8009332:	5ee1      	ldrsh	r1, [r4, r3]
 8009334:	003b      	movs	r3, r7
 8009336:	f000 f81f 	bl	8009378 <_write_r>
 800933a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800933c:	ffffefff 	.word	0xffffefff

08009340 <__sseek>:
 8009340:	b570      	push	{r4, r5, r6, lr}
 8009342:	000c      	movs	r4, r1
 8009344:	250e      	movs	r5, #14
 8009346:	5f49      	ldrsh	r1, [r1, r5]
 8009348:	f000 f860 	bl	800940c <_lseek_r>
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	1c42      	adds	r2, r0, #1
 8009350:	d103      	bne.n	800935a <__sseek+0x1a>
 8009352:	4a05      	ldr	r2, [pc, #20]	; (8009368 <__sseek+0x28>)
 8009354:	4013      	ands	r3, r2
 8009356:	81a3      	strh	r3, [r4, #12]
 8009358:	bd70      	pop	{r4, r5, r6, pc}
 800935a:	2280      	movs	r2, #128	; 0x80
 800935c:	0152      	lsls	r2, r2, #5
 800935e:	4313      	orrs	r3, r2
 8009360:	81a3      	strh	r3, [r4, #12]
 8009362:	6560      	str	r0, [r4, #84]	; 0x54
 8009364:	e7f8      	b.n	8009358 <__sseek+0x18>
 8009366:	46c0      	nop			; (mov r8, r8)
 8009368:	ffffefff 	.word	0xffffefff

0800936c <__sclose>:
 800936c:	b510      	push	{r4, lr}
 800936e:	230e      	movs	r3, #14
 8009370:	5ec9      	ldrsh	r1, [r1, r3]
 8009372:	f000 f815 	bl	80093a0 <_close_r>
 8009376:	bd10      	pop	{r4, pc}

08009378 <_write_r>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	0004      	movs	r4, r0
 800937c:	0008      	movs	r0, r1
 800937e:	0011      	movs	r1, r2
 8009380:	001a      	movs	r2, r3
 8009382:	2300      	movs	r3, #0
 8009384:	4d05      	ldr	r5, [pc, #20]	; (800939c <_write_r+0x24>)
 8009386:	602b      	str	r3, [r5, #0]
 8009388:	f7fc f9e6 	bl	8005758 <_write>
 800938c:	1c43      	adds	r3, r0, #1
 800938e:	d103      	bne.n	8009398 <_write_r+0x20>
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d000      	beq.n	8009398 <_write_r+0x20>
 8009396:	6023      	str	r3, [r4, #0]
 8009398:	bd70      	pop	{r4, r5, r6, pc}
 800939a:	46c0      	nop			; (mov r8, r8)
 800939c:	2000097c 	.word	0x2000097c

080093a0 <_close_r>:
 80093a0:	2300      	movs	r3, #0
 80093a2:	b570      	push	{r4, r5, r6, lr}
 80093a4:	4d06      	ldr	r5, [pc, #24]	; (80093c0 <_close_r+0x20>)
 80093a6:	0004      	movs	r4, r0
 80093a8:	0008      	movs	r0, r1
 80093aa:	602b      	str	r3, [r5, #0]
 80093ac:	f7fc f9f0 	bl	8005790 <_close>
 80093b0:	1c43      	adds	r3, r0, #1
 80093b2:	d103      	bne.n	80093bc <_close_r+0x1c>
 80093b4:	682b      	ldr	r3, [r5, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d000      	beq.n	80093bc <_close_r+0x1c>
 80093ba:	6023      	str	r3, [r4, #0]
 80093bc:	bd70      	pop	{r4, r5, r6, pc}
 80093be:	46c0      	nop			; (mov r8, r8)
 80093c0:	2000097c 	.word	0x2000097c

080093c4 <_fstat_r>:
 80093c4:	2300      	movs	r3, #0
 80093c6:	b570      	push	{r4, r5, r6, lr}
 80093c8:	4d06      	ldr	r5, [pc, #24]	; (80093e4 <_fstat_r+0x20>)
 80093ca:	0004      	movs	r4, r0
 80093cc:	0008      	movs	r0, r1
 80093ce:	0011      	movs	r1, r2
 80093d0:	602b      	str	r3, [r5, #0]
 80093d2:	f7fc f9e7 	bl	80057a4 <_fstat>
 80093d6:	1c43      	adds	r3, r0, #1
 80093d8:	d103      	bne.n	80093e2 <_fstat_r+0x1e>
 80093da:	682b      	ldr	r3, [r5, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d000      	beq.n	80093e2 <_fstat_r+0x1e>
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	bd70      	pop	{r4, r5, r6, pc}
 80093e4:	2000097c 	.word	0x2000097c

080093e8 <_isatty_r>:
 80093e8:	2300      	movs	r3, #0
 80093ea:	b570      	push	{r4, r5, r6, lr}
 80093ec:	4d06      	ldr	r5, [pc, #24]	; (8009408 <_isatty_r+0x20>)
 80093ee:	0004      	movs	r4, r0
 80093f0:	0008      	movs	r0, r1
 80093f2:	602b      	str	r3, [r5, #0]
 80093f4:	f7fc f9e4 	bl	80057c0 <_isatty>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	d103      	bne.n	8009404 <_isatty_r+0x1c>
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d000      	beq.n	8009404 <_isatty_r+0x1c>
 8009402:	6023      	str	r3, [r4, #0]
 8009404:	bd70      	pop	{r4, r5, r6, pc}
 8009406:	46c0      	nop			; (mov r8, r8)
 8009408:	2000097c 	.word	0x2000097c

0800940c <_lseek_r>:
 800940c:	b570      	push	{r4, r5, r6, lr}
 800940e:	0004      	movs	r4, r0
 8009410:	0008      	movs	r0, r1
 8009412:	0011      	movs	r1, r2
 8009414:	001a      	movs	r2, r3
 8009416:	2300      	movs	r3, #0
 8009418:	4d05      	ldr	r5, [pc, #20]	; (8009430 <_lseek_r+0x24>)
 800941a:	602b      	str	r3, [r5, #0]
 800941c:	f7fc f9d9 	bl	80057d2 <_lseek>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d103      	bne.n	800942c <_lseek_r+0x20>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d000      	beq.n	800942c <_lseek_r+0x20>
 800942a:	6023      	str	r3, [r4, #0]
 800942c:	bd70      	pop	{r4, r5, r6, pc}
 800942e:	46c0      	nop			; (mov r8, r8)
 8009430:	2000097c 	.word	0x2000097c

08009434 <memchr>:
 8009434:	b2c9      	uxtb	r1, r1
 8009436:	1882      	adds	r2, r0, r2
 8009438:	4290      	cmp	r0, r2
 800943a:	d101      	bne.n	8009440 <memchr+0xc>
 800943c:	2000      	movs	r0, #0
 800943e:	4770      	bx	lr
 8009440:	7803      	ldrb	r3, [r0, #0]
 8009442:	428b      	cmp	r3, r1
 8009444:	d0fb      	beq.n	800943e <memchr+0xa>
 8009446:	3001      	adds	r0, #1
 8009448:	e7f6      	b.n	8009438 <memchr+0x4>
	...

0800944c <__malloc_lock>:
 800944c:	b510      	push	{r4, lr}
 800944e:	4802      	ldr	r0, [pc, #8]	; (8009458 <__malloc_lock+0xc>)
 8009450:	f7ff faff 	bl	8008a52 <__retarget_lock_acquire_recursive>
 8009454:	bd10      	pop	{r4, pc}
 8009456:	46c0      	nop			; (mov r8, r8)
 8009458:	20000970 	.word	0x20000970

0800945c <__malloc_unlock>:
 800945c:	b510      	push	{r4, lr}
 800945e:	4802      	ldr	r0, [pc, #8]	; (8009468 <__malloc_unlock+0xc>)
 8009460:	f7ff faf8 	bl	8008a54 <__retarget_lock_release_recursive>
 8009464:	bd10      	pop	{r4, pc}
 8009466:	46c0      	nop			; (mov r8, r8)
 8009468:	20000970 	.word	0x20000970

0800946c <_read_r>:
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	0004      	movs	r4, r0
 8009470:	0008      	movs	r0, r1
 8009472:	0011      	movs	r1, r2
 8009474:	001a      	movs	r2, r3
 8009476:	2300      	movs	r3, #0
 8009478:	4d05      	ldr	r5, [pc, #20]	; (8009490 <_read_r+0x24>)
 800947a:	602b      	str	r3, [r5, #0]
 800947c:	f7fc f94f 	bl	800571e <_read>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	d103      	bne.n	800948c <_read_r+0x20>
 8009484:	682b      	ldr	r3, [r5, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d000      	beq.n	800948c <_read_r+0x20>
 800948a:	6023      	str	r3, [r4, #0]
 800948c:	bd70      	pop	{r4, r5, r6, pc}
 800948e:	46c0      	nop			; (mov r8, r8)
 8009490:	2000097c 	.word	0x2000097c

08009494 <_init>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	46c0      	nop			; (mov r8, r8)
 8009498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949a:	bc08      	pop	{r3}
 800949c:	469e      	mov	lr, r3
 800949e:	4770      	bx	lr

080094a0 <_fini>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	46c0      	nop			; (mov r8, r8)
 80094a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a6:	bc08      	pop	{r3}
 80094a8:	469e      	mov	lr, r3
 80094aa:	4770      	bx	lr
